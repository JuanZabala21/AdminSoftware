(function () {
  function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

  function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

  function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

  function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

  function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

  function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

  function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  (window["webpackJsonp"] = window["webpackJsonp"] || []).push([["layouts-admin-layout-admin-layout-module"], {
    /***/
    "+0xr": function xr(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MatCell", function () {
        return MatCell;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MatCellDef", function () {
        return MatCellDef;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MatColumnDef", function () {
        return MatColumnDef;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MatFooterCell", function () {
        return MatFooterCell;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MatFooterCellDef", function () {
        return MatFooterCellDef;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MatFooterRow", function () {
        return MatFooterRow;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MatFooterRowDef", function () {
        return MatFooterRowDef;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MatHeaderCell", function () {
        return MatHeaderCell;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MatHeaderCellDef", function () {
        return MatHeaderCellDef;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MatHeaderRow", function () {
        return MatHeaderRow;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MatHeaderRowDef", function () {
        return MatHeaderRowDef;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MatNoDataRow", function () {
        return MatNoDataRow;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MatRow", function () {
        return MatRow;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MatRowDef", function () {
        return MatRowDef;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MatTable", function () {
        return MatTable;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MatTableDataSource", function () {
        return MatTableDataSource;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MatTableModule", function () {
        return MatTableModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MatTextColumn", function () {
        return MatTextColumn;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var _angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/cdk/table */
      "f6nW");
      /* harmony import */


      var _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/cdk/collections */
      "0EQZ");
      /* harmony import */


      var _angular_material_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/material/core */
      "FKr1");
      /* harmony import */


      var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/cdk/coercion */
      "8LU1");
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! rxjs */
      "qCKp");
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! rxjs/operators */
      "kU1M");
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Wrapper for the CdkTable with Material design styles.
       */


      var _c0 = [[["caption"]], [["colgroup"], ["col"]]];
      var _c1 = ["caption", "colgroup, col"];

      function MatTextColumn_th_1_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "th", 3);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstyleProp"]("text-align", ctx_r0.justify);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", ctx_r0.headerText, " ");
        }
      }

      function MatTextColumn_td_2_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "td", 4);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var data_r2 = ctx.$implicit;

          var ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstyleProp"]("text-align", ctx_r1.justify);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", ctx_r1.dataAccessor(data_r2, ctx_r1.name), " ");
        }
      }

      var MatTable = /*#__PURE__*/function (_angular_cdk_table__W) {
        _inherits(MatTable, _angular_cdk_table__W);

        var _super = _createSuper(MatTable);

        function MatTable() {
          var _this;

          _classCallCheck(this, MatTable);

          _this = _super.apply(this, arguments);
          /** Overrides the sticky CSS class set by the `CdkTable`. */

          _this.stickyCssClass = 'mat-table-sticky';
          /** Overrides the need to add position: sticky on every sticky cell element in `CdkTable`. */

          _this.needsPositionStickyOnElement = false;
          return _this;
        }

        return MatTable;
      }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__["CdkTable"]);

      MatTable.ɵfac = function MatTable_Factory(t) {
        return ɵMatTable_BaseFactory(t || MatTable);
      };

      MatTable.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
        type: MatTable,
        selectors: [["mat-table"], ["table", "mat-table", ""]],
        hostAttrs: [1, "mat-table"],
        exportAs: ["matTable"],
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([// TODO(michaeljamesparsons) Abstract the view repeater strategy to a directive API so this code
        //  is only included in the build if used.
        {
          provide: _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_2__["_VIEW_REPEATER_STRATEGY"],
          useClass: _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_2__["_DisposeViewRepeaterStrategy"]
        }, {
          provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__["CdkTable"],
          useExisting: MatTable
        }, {
          provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__["CDK_TABLE"],
          useExisting: MatTable
        }, {
          provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__["_COALESCED_STYLE_SCHEDULER"],
          useClass: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__["_CoalescedStyleScheduler"]
        }]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]],
        ngContentSelectors: _c1,
        decls: 6,
        vars: 0,
        consts: [["headerRowOutlet", ""], ["rowOutlet", ""], ["noDataRowOutlet", ""], ["footerRowOutlet", ""]],
        template: function MatTable_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojectionDef"](_c0);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](0);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](1, 1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](2, 0);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](3, 1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](4, 2);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](5, 3);
          }
        },
        directives: [_angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__["HeaderRowOutlet"], _angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__["DataRowOutlet"], _angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__["NoDataRowOutlet"], _angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__["FooterRowOutlet"]],
        styles: ["mat-table{display:block}mat-header-row{min-height:56px}mat-row,mat-footer-row{min-height:48px}mat-row,mat-header-row,mat-footer-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-row::after,mat-header-row::after,mat-footer-row::after{display:inline-block;min-height:inherit;content:\"\"}mat-cell:first-of-type,mat-header-cell:first-of-type,mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-header-cell:last-of-type,mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}mat-cell,mat-header-cell,mat-footer-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}table.mat-table{border-spacing:0}tr.mat-header-row{height:56px}tr.mat-row,tr.mat-footer-row{height:48px}th.mat-header-cell{text-align:left}[dir=rtl] th.mat-header-cell{text-align:right}th.mat-header-cell,td.mat-cell,td.mat-footer-cell{padding:0;border-bottom-width:1px;border-bottom-style:solid}th.mat-header-cell:first-of-type,td.mat-cell:first-of-type,td.mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] th.mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] td.mat-cell:first-of-type:not(:only-of-type),[dir=rtl] td.mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}th.mat-header-cell:last-of-type,td.mat-cell:last-of-type,td.mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] th.mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] td.mat-cell:last-of-type:not(:only-of-type),[dir=rtl] td.mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}.mat-table-sticky{position:-webkit-sticky;position:sticky}\n"],
        encapsulation: 2
      });

      var ɵMatTable_BaseFactory = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](MatTable);
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](MatTable, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
          args: [{
            selector: 'mat-table, table[mat-table]',
            exportAs: 'matTable',
            template: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__["CDK_TABLE_TEMPLATE"],
            host: {
              'class': 'mat-table'
            },
            providers: [// TODO(michaeljamesparsons) Abstract the view repeater strategy to a directive API so this code
            //  is only included in the build if used.
            {
              provide: _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_2__["_VIEW_REPEATER_STRATEGY"],
              useClass: _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_2__["_DisposeViewRepeaterStrategy"]
            }, {
              provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__["CdkTable"],
              useExisting: MatTable
            }, {
              provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__["CDK_TABLE"],
              useExisting: MatTable
            }, {
              provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__["_COALESCED_STYLE_SCHEDULER"],
              useClass: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__["_CoalescedStyleScheduler"]
            }],
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
            // See note on CdkTable for explanation on why this uses the default change detection strategy.
            // tslint:disable-next-line:validate-decorators
            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].Default,
            styles: ["mat-table{display:block}mat-header-row{min-height:56px}mat-row,mat-footer-row{min-height:48px}mat-row,mat-header-row,mat-footer-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-row::after,mat-header-row::after,mat-footer-row::after{display:inline-block;min-height:inherit;content:\"\"}mat-cell:first-of-type,mat-header-cell:first-of-type,mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-header-cell:last-of-type,mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}mat-cell,mat-header-cell,mat-footer-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}table.mat-table{border-spacing:0}tr.mat-header-row{height:56px}tr.mat-row,tr.mat-footer-row{height:48px}th.mat-header-cell{text-align:left}[dir=rtl] th.mat-header-cell{text-align:right}th.mat-header-cell,td.mat-cell,td.mat-footer-cell{padding:0;border-bottom-width:1px;border-bottom-style:solid}th.mat-header-cell:first-of-type,td.mat-cell:first-of-type,td.mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] th.mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] td.mat-cell:first-of-type:not(:only-of-type),[dir=rtl] td.mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}th.mat-header-cell:last-of-type,td.mat-cell:last-of-type,td.mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] th.mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] td.mat-cell:last-of-type:not(:only-of-type),[dir=rtl] td.mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}.mat-table-sticky{position:-webkit-sticky;position:sticky}\n"]
          }]
        }], null, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Cell definition for the mat-table.
       * Captures the template of a column's data row cell as well as cell-specific properties.
       */


      var MatCellDef = /*#__PURE__*/function (_angular_cdk_table__W2) {
        _inherits(MatCellDef, _angular_cdk_table__W2);

        var _super2 = _createSuper(MatCellDef);

        function MatCellDef() {
          _classCallCheck(this, MatCellDef);

          return _super2.apply(this, arguments);
        }

        return MatCellDef;
      }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__["CdkCellDef"]);

      MatCellDef.ɵfac = function MatCellDef_Factory(t) {
        return ɵMatCellDef_BaseFactory(t || MatCellDef);
      };

      MatCellDef.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: MatCellDef,
        selectors: [["", "matCellDef", ""]],
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([{
          provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__["CdkCellDef"],
          useExisting: MatCellDef
        }]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
      });

      var ɵMatCellDef_BaseFactory = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](MatCellDef);
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](MatCellDef, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: '[matCellDef]',
            providers: [{
              provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__["CdkCellDef"],
              useExisting: MatCellDef
            }]
          }]
        }], null, null);
      })();
      /**
       * Header cell definition for the mat-table.
       * Captures the template of a column's header cell and as well as cell-specific properties.
       */


      var MatHeaderCellDef = /*#__PURE__*/function (_angular_cdk_table__W3) {
        _inherits(MatHeaderCellDef, _angular_cdk_table__W3);

        var _super3 = _createSuper(MatHeaderCellDef);

        function MatHeaderCellDef() {
          _classCallCheck(this, MatHeaderCellDef);

          return _super3.apply(this, arguments);
        }

        return MatHeaderCellDef;
      }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__["CdkHeaderCellDef"]);

      MatHeaderCellDef.ɵfac = function MatHeaderCellDef_Factory(t) {
        return ɵMatHeaderCellDef_BaseFactory(t || MatHeaderCellDef);
      };

      MatHeaderCellDef.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: MatHeaderCellDef,
        selectors: [["", "matHeaderCellDef", ""]],
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([{
          provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__["CdkHeaderCellDef"],
          useExisting: MatHeaderCellDef
        }]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
      });

      var ɵMatHeaderCellDef_BaseFactory = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](MatHeaderCellDef);
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](MatHeaderCellDef, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: '[matHeaderCellDef]',
            providers: [{
              provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__["CdkHeaderCellDef"],
              useExisting: MatHeaderCellDef
            }]
          }]
        }], null, null);
      })();
      /**
       * Footer cell definition for the mat-table.
       * Captures the template of a column's footer cell and as well as cell-specific properties.
       */


      var MatFooterCellDef = /*#__PURE__*/function (_angular_cdk_table__W4) {
        _inherits(MatFooterCellDef, _angular_cdk_table__W4);

        var _super4 = _createSuper(MatFooterCellDef);

        function MatFooterCellDef() {
          _classCallCheck(this, MatFooterCellDef);

          return _super4.apply(this, arguments);
        }

        return MatFooterCellDef;
      }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__["CdkFooterCellDef"]);

      MatFooterCellDef.ɵfac = function MatFooterCellDef_Factory(t) {
        return ɵMatFooterCellDef_BaseFactory(t || MatFooterCellDef);
      };

      MatFooterCellDef.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: MatFooterCellDef,
        selectors: [["", "matFooterCellDef", ""]],
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([{
          provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__["CdkFooterCellDef"],
          useExisting: MatFooterCellDef
        }]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
      });

      var ɵMatFooterCellDef_BaseFactory = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](MatFooterCellDef);
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](MatFooterCellDef, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: '[matFooterCellDef]',
            providers: [{
              provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__["CdkFooterCellDef"],
              useExisting: MatFooterCellDef
            }]
          }]
        }], null, null);
      })();
      /**
       * Column definition for the mat-table.
       * Defines a set of cells available for a table column.
       */


      var MatColumnDef = /*#__PURE__*/function (_angular_cdk_table__W5) {
        _inherits(MatColumnDef, _angular_cdk_table__W5);

        var _super5 = _createSuper(MatColumnDef);

        function MatColumnDef() {
          _classCallCheck(this, MatColumnDef);

          return _super5.apply(this, arguments);
        }

        _createClass(MatColumnDef, [{
          key: "name",
          get:
          /** Unique name for this column. */
          function get() {
            return this._name;
          },
          set: function set(name) {
            this._setNameInput(name);
          }
          /**
           * Add "mat-column-" prefix in addition to "cdk-column-" prefix.
           * In the future, this will only add "mat-column-" and columnCssClassName
           * will change from type string[] to string.
           * @docs-private
           */

        }, {
          key: "_updateColumnCssClassName",
          value: function _updateColumnCssClassName() {
            _get(_getPrototypeOf(MatColumnDef.prototype), "_updateColumnCssClassName", this).call(this);

            this._columnCssClassName.push("mat-column-".concat(this.cssClassFriendlyName));
          }
        }]);

        return MatColumnDef;
      }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__["CdkColumnDef"]);

      MatColumnDef.ɵfac = function MatColumnDef_Factory(t) {
        return ɵMatColumnDef_BaseFactory(t || MatColumnDef);
      };

      MatColumnDef.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: MatColumnDef,
        selectors: [["", "matColumnDef", ""]],
        inputs: {
          sticky: "sticky",
          name: ["matColumnDef", "name"]
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([{
          provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__["CdkColumnDef"],
          useExisting: MatColumnDef
        }, {
          provide: 'MAT_SORT_HEADER_COLUMN_DEF',
          useExisting: MatColumnDef
        }]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
      });
      MatColumnDef.propDecorators = {
        name: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['matColumnDef']
        }]
      };

      var ɵMatColumnDef_BaseFactory = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](MatColumnDef);
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](MatColumnDef, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: '[matColumnDef]',
            inputs: ['sticky'],
            providers: [{
              provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__["CdkColumnDef"],
              useExisting: MatColumnDef
            }, {
              provide: 'MAT_SORT_HEADER_COLUMN_DEF',
              useExisting: MatColumnDef
            }]
          }]
        }], null, {
          name: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['matColumnDef']
          }]
        });
      })();
      /** Header cell template container that adds the right classes and role. */


      var MatHeaderCell = /*#__PURE__*/function (_angular_cdk_table__W6) {
        _inherits(MatHeaderCell, _angular_cdk_table__W6);

        var _super6 = _createSuper(MatHeaderCell);

        function MatHeaderCell() {
          _classCallCheck(this, MatHeaderCell);

          return _super6.apply(this, arguments);
        }

        return MatHeaderCell;
      }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__["CdkHeaderCell"]);

      MatHeaderCell.ɵfac = function MatHeaderCell_Factory(t) {
        return ɵMatHeaderCell_BaseFactory(t || MatHeaderCell);
      };

      MatHeaderCell.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: MatHeaderCell,
        selectors: [["mat-header-cell"], ["th", "mat-header-cell", ""]],
        hostAttrs: ["role", "columnheader", 1, "mat-header-cell"],
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
      });

      var ɵMatHeaderCell_BaseFactory = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](MatHeaderCell);
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](MatHeaderCell, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: 'mat-header-cell, th[mat-header-cell]',
            host: {
              'class': 'mat-header-cell',
              'role': 'columnheader'
            }
          }]
        }], null, null);
      })();
      /** Footer cell template container that adds the right classes and role. */


      var MatFooterCell = /*#__PURE__*/function (_angular_cdk_table__W7) {
        _inherits(MatFooterCell, _angular_cdk_table__W7);

        var _super7 = _createSuper(MatFooterCell);

        function MatFooterCell() {
          _classCallCheck(this, MatFooterCell);

          return _super7.apply(this, arguments);
        }

        return MatFooterCell;
      }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__["CdkFooterCell"]);

      MatFooterCell.ɵfac = function MatFooterCell_Factory(t) {
        return ɵMatFooterCell_BaseFactory(t || MatFooterCell);
      };

      MatFooterCell.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: MatFooterCell,
        selectors: [["mat-footer-cell"], ["td", "mat-footer-cell", ""]],
        hostAttrs: ["role", "gridcell", 1, "mat-footer-cell"],
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
      });

      var ɵMatFooterCell_BaseFactory = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](MatFooterCell);
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](MatFooterCell, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: 'mat-footer-cell, td[mat-footer-cell]',
            host: {
              'class': 'mat-footer-cell',
              'role': 'gridcell'
            }
          }]
        }], null, null);
      })();
      /** Cell template container that adds the right classes and role. */


      var MatCell = /*#__PURE__*/function (_angular_cdk_table__W8) {
        _inherits(MatCell, _angular_cdk_table__W8);

        var _super8 = _createSuper(MatCell);

        function MatCell() {
          _classCallCheck(this, MatCell);

          return _super8.apply(this, arguments);
        }

        return MatCell;
      }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__["CdkCell"]);

      MatCell.ɵfac = function MatCell_Factory(t) {
        return ɵMatCell_BaseFactory(t || MatCell);
      };

      MatCell.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: MatCell,
        selectors: [["mat-cell"], ["td", "mat-cell", ""]],
        hostAttrs: ["role", "gridcell", 1, "mat-cell"],
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
      });

      var ɵMatCell_BaseFactory = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](MatCell);
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](MatCell, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: 'mat-cell, td[mat-cell]',
            host: {
              'class': 'mat-cell',
              'role': 'gridcell'
            }
          }]
        }], null, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Header row definition for the mat-table.
       * Captures the header row's template and other header properties such as the columns to display.
       */


      var MatHeaderRowDef = /*#__PURE__*/function (_angular_cdk_table__W9) {
        _inherits(MatHeaderRowDef, _angular_cdk_table__W9);

        var _super9 = _createSuper(MatHeaderRowDef);

        function MatHeaderRowDef() {
          _classCallCheck(this, MatHeaderRowDef);

          return _super9.apply(this, arguments);
        }

        return MatHeaderRowDef;
      }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__["CdkHeaderRowDef"]);

      MatHeaderRowDef.ɵfac = function MatHeaderRowDef_Factory(t) {
        return ɵMatHeaderRowDef_BaseFactory(t || MatHeaderRowDef);
      };

      MatHeaderRowDef.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: MatHeaderRowDef,
        selectors: [["", "matHeaderRowDef", ""]],
        inputs: {
          columns: ["matHeaderRowDef", "columns"],
          sticky: ["matHeaderRowDefSticky", "sticky"]
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([{
          provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__["CdkHeaderRowDef"],
          useExisting: MatHeaderRowDef
        }]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
      });

      var ɵMatHeaderRowDef_BaseFactory = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](MatHeaderRowDef);
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](MatHeaderRowDef, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: '[matHeaderRowDef]',
            providers: [{
              provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__["CdkHeaderRowDef"],
              useExisting: MatHeaderRowDef
            }],
            inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky']
          }]
        }], null, null);
      })();
      /**
       * Footer row definition for the mat-table.
       * Captures the footer row's template and other footer properties such as the columns to display.
       */


      var MatFooterRowDef = /*#__PURE__*/function (_angular_cdk_table__W10) {
        _inherits(MatFooterRowDef, _angular_cdk_table__W10);

        var _super10 = _createSuper(MatFooterRowDef);

        function MatFooterRowDef() {
          _classCallCheck(this, MatFooterRowDef);

          return _super10.apply(this, arguments);
        }

        return MatFooterRowDef;
      }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__["CdkFooterRowDef"]);

      MatFooterRowDef.ɵfac = function MatFooterRowDef_Factory(t) {
        return ɵMatFooterRowDef_BaseFactory(t || MatFooterRowDef);
      };

      MatFooterRowDef.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: MatFooterRowDef,
        selectors: [["", "matFooterRowDef", ""]],
        inputs: {
          columns: ["matFooterRowDef", "columns"],
          sticky: ["matFooterRowDefSticky", "sticky"]
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([{
          provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__["CdkFooterRowDef"],
          useExisting: MatFooterRowDef
        }]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
      });

      var ɵMatFooterRowDef_BaseFactory = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](MatFooterRowDef);
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](MatFooterRowDef, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: '[matFooterRowDef]',
            providers: [{
              provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__["CdkFooterRowDef"],
              useExisting: MatFooterRowDef
            }],
            inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky']
          }]
        }], null, null);
      })();
      /**
       * Data row definition for the mat-table.
       * Captures the data row's template and other properties such as the columns to display and
       * a when predicate that describes when this row should be used.
       */


      var MatRowDef = /*#__PURE__*/function (_angular_cdk_table__W11) {
        _inherits(MatRowDef, _angular_cdk_table__W11);

        var _super11 = _createSuper(MatRowDef);

        function MatRowDef() {
          _classCallCheck(this, MatRowDef);

          return _super11.apply(this, arguments);
        }

        return MatRowDef;
      }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__["CdkRowDef"]);

      MatRowDef.ɵfac = function MatRowDef_Factory(t) {
        return ɵMatRowDef_BaseFactory(t || MatRowDef);
      };

      MatRowDef.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: MatRowDef,
        selectors: [["", "matRowDef", ""]],
        inputs: {
          columns: ["matRowDefColumns", "columns"],
          when: ["matRowDefWhen", "when"]
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([{
          provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__["CdkRowDef"],
          useExisting: MatRowDef
        }]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
      });

      var ɵMatRowDef_BaseFactory = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](MatRowDef);
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](MatRowDef, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: '[matRowDef]',
            providers: [{
              provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__["CdkRowDef"],
              useExisting: MatRowDef
            }],
            inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen']
          }]
        }], null, null);
      })();
      /** Header template container that contains the cell outlet. Adds the right class and role. */


      var MatHeaderRow = /*#__PURE__*/function (_angular_cdk_table__W12) {
        _inherits(MatHeaderRow, _angular_cdk_table__W12);

        var _super12 = _createSuper(MatHeaderRow);

        function MatHeaderRow() {
          _classCallCheck(this, MatHeaderRow);

          return _super12.apply(this, arguments);
        }

        return MatHeaderRow;
      }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__["CdkHeaderRow"]);

      MatHeaderRow.ɵfac = function MatHeaderRow_Factory(t) {
        return ɵMatHeaderRow_BaseFactory(t || MatHeaderRow);
      };

      MatHeaderRow.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
        type: MatHeaderRow,
        selectors: [["mat-header-row"], ["tr", "mat-header-row", ""]],
        hostAttrs: ["role", "row", 1, "mat-header-row"],
        exportAs: ["matHeaderRow"],
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([{
          provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__["CdkHeaderRow"],
          useExisting: MatHeaderRow
        }]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]],
        decls: 1,
        vars: 0,
        consts: [["cdkCellOutlet", ""]],
        template: function MatHeaderRow_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](0, 0);
          }
        },
        directives: [_angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__["CdkCellOutlet"]],
        encapsulation: 2
      });

      var ɵMatHeaderRow_BaseFactory = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](MatHeaderRow);
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](MatHeaderRow, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
          args: [{
            selector: 'mat-header-row, tr[mat-header-row]',
            template: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__["CDK_ROW_TEMPLATE"],
            host: {
              'class': 'mat-header-row',
              'role': 'row'
            },
            // See note on CdkTable for explanation on why this uses the default change detection strategy.
            // tslint:disable-next-line:validate-decorators
            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].Default,
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
            exportAs: 'matHeaderRow',
            providers: [{
              provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__["CdkHeaderRow"],
              useExisting: MatHeaderRow
            }]
          }]
        }], null, null);
      })();
      /** Footer template container that contains the cell outlet. Adds the right class and role. */


      var MatFooterRow = /*#__PURE__*/function (_angular_cdk_table__W13) {
        _inherits(MatFooterRow, _angular_cdk_table__W13);

        var _super13 = _createSuper(MatFooterRow);

        function MatFooterRow() {
          _classCallCheck(this, MatFooterRow);

          return _super13.apply(this, arguments);
        }

        return MatFooterRow;
      }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__["CdkFooterRow"]);

      MatFooterRow.ɵfac = function MatFooterRow_Factory(t) {
        return ɵMatFooterRow_BaseFactory(t || MatFooterRow);
      };

      MatFooterRow.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
        type: MatFooterRow,
        selectors: [["mat-footer-row"], ["tr", "mat-footer-row", ""]],
        hostAttrs: ["role", "row", 1, "mat-footer-row"],
        exportAs: ["matFooterRow"],
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([{
          provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__["CdkFooterRow"],
          useExisting: MatFooterRow
        }]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]],
        decls: 1,
        vars: 0,
        consts: [["cdkCellOutlet", ""]],
        template: function MatFooterRow_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](0, 0);
          }
        },
        directives: [_angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__["CdkCellOutlet"]],
        encapsulation: 2
      });

      var ɵMatFooterRow_BaseFactory = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](MatFooterRow);
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](MatFooterRow, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
          args: [{
            selector: 'mat-footer-row, tr[mat-footer-row]',
            template: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__["CDK_ROW_TEMPLATE"],
            host: {
              'class': 'mat-footer-row',
              'role': 'row'
            },
            // See note on CdkTable for explanation on why this uses the default change detection strategy.
            // tslint:disable-next-line:validate-decorators
            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].Default,
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
            exportAs: 'matFooterRow',
            providers: [{
              provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__["CdkFooterRow"],
              useExisting: MatFooterRow
            }]
          }]
        }], null, null);
      })();
      /** Data row template container that contains the cell outlet. Adds the right class and role. */


      var MatRow = /*#__PURE__*/function (_angular_cdk_table__W14) {
        _inherits(MatRow, _angular_cdk_table__W14);

        var _super14 = _createSuper(MatRow);

        function MatRow() {
          _classCallCheck(this, MatRow);

          return _super14.apply(this, arguments);
        }

        return MatRow;
      }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__["CdkRow"]);

      MatRow.ɵfac = function MatRow_Factory(t) {
        return ɵMatRow_BaseFactory(t || MatRow);
      };

      MatRow.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
        type: MatRow,
        selectors: [["mat-row"], ["tr", "mat-row", ""]],
        hostAttrs: ["role", "row", 1, "mat-row"],
        exportAs: ["matRow"],
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([{
          provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__["CdkRow"],
          useExisting: MatRow
        }]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]],
        decls: 1,
        vars: 0,
        consts: [["cdkCellOutlet", ""]],
        template: function MatRow_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](0, 0);
          }
        },
        directives: [_angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__["CdkCellOutlet"]],
        encapsulation: 2
      });

      var ɵMatRow_BaseFactory = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](MatRow);
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](MatRow, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
          args: [{
            selector: 'mat-row, tr[mat-row]',
            template: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__["CDK_ROW_TEMPLATE"],
            host: {
              'class': 'mat-row',
              'role': 'row'
            },
            // See note on CdkTable for explanation on why this uses the default change detection strategy.
            // tslint:disable-next-line:validate-decorators
            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].Default,
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
            exportAs: 'matRow',
            providers: [{
              provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__["CdkRow"],
              useExisting: MatRow
            }]
          }]
        }], null, null);
      })();
      /** Row that can be used to display a message when no data is shown in the table. */


      var MatNoDataRow = /*#__PURE__*/function (_angular_cdk_table__W15) {
        _inherits(MatNoDataRow, _angular_cdk_table__W15);

        var _super15 = _createSuper(MatNoDataRow);

        function MatNoDataRow() {
          _classCallCheck(this, MatNoDataRow);

          return _super15.apply(this, arguments);
        }

        return MatNoDataRow;
      }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__["CdkNoDataRow"]);

      MatNoDataRow.ɵfac = function MatNoDataRow_Factory(t) {
        return ɵMatNoDataRow_BaseFactory(t || MatNoDataRow);
      };

      MatNoDataRow.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: MatNoDataRow,
        selectors: [["ng-template", "matNoDataRow", ""]],
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([{
          provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__["CdkNoDataRow"],
          useExisting: MatNoDataRow
        }]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
      });

      var ɵMatNoDataRow_BaseFactory = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](MatNoDataRow);
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](MatNoDataRow, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: 'ng-template[matNoDataRow]',
            providers: [{
              provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__["CdkNoDataRow"],
              useExisting: MatNoDataRow
            }]
          }]
        }], null, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Column that simply shows text content for the header and row cells. Assumes that the table
       * is using the native table implementation (`<table>`).
       *
       * By default, the name of this column will be the header text and data property accessor.
       * The header text can be overridden with the `headerText` input. Cell values can be overridden with
       * the `dataAccessor` input. Change the text justification to the start or end using the `justify`
       * input.
       */


      var MatTextColumn = /*#__PURE__*/function (_angular_cdk_table__W16) {
        _inherits(MatTextColumn, _angular_cdk_table__W16);

        var _super16 = _createSuper(MatTextColumn);

        function MatTextColumn() {
          _classCallCheck(this, MatTextColumn);

          return _super16.apply(this, arguments);
        }

        return MatTextColumn;
      }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__["CdkTextColumn"]);

      MatTextColumn.ɵfac = function MatTextColumn_Factory(t) {
        return ɵMatTextColumn_BaseFactory(t || MatTextColumn);
      };

      MatTextColumn.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
        type: MatTextColumn,
        selectors: [["mat-text-column"]],
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]],
        decls: 3,
        vars: 0,
        consts: [["matColumnDef", ""], ["mat-header-cell", "", 3, "text-align", 4, "matHeaderCellDef"], ["mat-cell", "", 3, "text-align", 4, "matCellDef"], ["mat-header-cell", ""], ["mat-cell", ""]],
        template: function MatTextColumn_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](0, 0);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, MatTextColumn_th_1_Template, 2, 3, "th", 1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, MatTextColumn_td_2_Template, 2, 3, "td", 2);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();
          }
        },
        directives: [MatColumnDef, MatHeaderCellDef, MatCellDef, MatHeaderCell, MatCell],
        encapsulation: 2
      });

      var ɵMatTextColumn_BaseFactory = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](MatTextColumn);
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](MatTextColumn, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
          args: [{
            selector: 'mat-text-column',
            template: "\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  ",
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
            // Change detection is intentionally not set to OnPush. This component's template will be provided
            // to the table to be inserted into its view. This is problematic when change detection runs since
            // the bindings in this template will be evaluated _after_ the table's view is evaluated, which
            // mean's the template in the table's view will not have the updated value (and in fact will cause
            // an ExpressionChangedAfterItHasBeenCheckedError).
            // tslint:disable-next-line:validate-decorators
            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].Default
          }]
        }], null, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var EXPORTED_DECLARATIONS = [// Table
      MatTable, // Template defs
      MatHeaderCellDef, MatHeaderRowDef, MatColumnDef, MatCellDef, MatRowDef, MatFooterCellDef, MatFooterRowDef, // Cell directives
      MatHeaderCell, MatCell, MatFooterCell, // Row directives
      MatHeaderRow, MatRow, MatFooterRow, MatNoDataRow, MatTextColumn];

      var MatTableModule = function MatTableModule() {
        _classCallCheck(this, MatTableModule);
      };

      MatTableModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
        type: MatTableModule
      });
      MatTableModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
        factory: function MatTableModule_Factory(t) {
          return new (t || MatTableModule)();
        },
        imports: [[_angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__["CdkTableModule"], _angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MatCommonModule"]], _angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MatCommonModule"]]
      });

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](MatTableModule, {
          declarations: function declarations() {
            return [MatTable, MatHeaderCellDef, MatHeaderRowDef, MatColumnDef, MatCellDef, MatRowDef, MatFooterCellDef, MatFooterRowDef, MatHeaderCell, MatCell, MatFooterCell, MatHeaderRow, MatRow, MatFooterRow, MatNoDataRow, MatTextColumn];
          },
          imports: function imports() {
            return [_angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__["CdkTableModule"], _angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MatCommonModule"]];
          },
          exports: function exports() {
            return [_angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MatCommonModule"], MatTable, MatHeaderCellDef, MatHeaderRowDef, MatColumnDef, MatCellDef, MatRowDef, MatFooterCellDef, MatFooterRowDef, MatHeaderCell, MatCell, MatFooterCell, MatHeaderRow, MatRow, MatFooterRow, MatNoDataRow, MatTextColumn];
          }
        });
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](MatTableModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
          args: [{
            imports: [_angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__["CdkTableModule"], _angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MatCommonModule"]],
            exports: [_angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MatCommonModule"], EXPORTED_DECLARATIONS],
            declarations: EXPORTED_DECLARATIONS
          }]
        }], null, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to
       * flaky browser support and the value not being defined in Closure's typings.
       */


      var MAX_SAFE_INTEGER = 9007199254740991;
      /**
       * Data source that accepts a client-side data array and includes native support of filtering,
       * sorting (using MatSort), and pagination (using MatPaginator).
       *
       * Allows for sort customization by overriding sortingDataAccessor, which defines how data
       * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,
       * which defines how row data is converted to a string for filter matching.
       *
       * **Note:** This class is meant to be a simple data source to help you get started. As such
       * it isn't equipped to handle some more advanced cases like robust i18n support or server-side
       * interactions. If your app needs to support more advanced use cases, consider implementing your
       * own `DataSource`.
       */

      var MatTableDataSource = /*#__PURE__*/function (_angular_cdk_table__W17) {
        _inherits(MatTableDataSource, _angular_cdk_table__W17);

        var _super17 = _createSuper(MatTableDataSource);

        function MatTableDataSource() {
          var _this2;

          var initialData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

          _classCallCheck(this, MatTableDataSource);

          _this2 = _super17.call(this);
          /** Stream emitting render data to the table (depends on ordered data changes). */

          _this2._renderData = new rxjs__WEBPACK_IMPORTED_MODULE_5__["BehaviorSubject"]([]);
          /** Stream that emits when a new filter string is set on the data source. */

          _this2._filter = new rxjs__WEBPACK_IMPORTED_MODULE_5__["BehaviorSubject"]('');
          /** Used to react to internal changes of the paginator that are made by the data source itself. */

          _this2._internalPageChanges = new rxjs__WEBPACK_IMPORTED_MODULE_5__["Subject"]();
          /**
           * Subscription to the changes that should trigger an update to the table's rendered rows, such
           * as filtering, sorting, pagination, or base data changes.
           */

          _this2._renderChangesSubscription = rxjs__WEBPACK_IMPORTED_MODULE_5__["Subscription"].EMPTY;
          /**
           * Data accessor function that is used for accessing data properties for sorting through
           * the default sortData function.
           * This default function assumes that the sort header IDs (which defaults to the column name)
           * matches the data's properties (e.g. column Xyz represents data['Xyz']).
           * May be set to a custom function for different behavior.
           * @param data Data object that is being accessed.
           * @param sortHeaderId The name of the column that represents the data.
           */

          _this2.sortingDataAccessor = function (data, sortHeaderId) {
            var value = data[sortHeaderId];

            if (Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["_isNumberValue"])(value)) {
              var numberValue = Number(value); // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we
              // leave them as strings. For more info: https://goo.gl/y5vbSg

              return numberValue < MAX_SAFE_INTEGER ? numberValue : value;
            }

            return value;
          };
          /**
           * Gets a sorted copy of the data array based on the state of the MatSort. Called
           * after changes are made to the filtered data or when sort changes are emitted from MatSort.
           * By default, the function retrieves the active sort and its direction and compares data
           * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation
           * of data ordering.
           * @param data The array of data that should be sorted.
           * @param sort The connected MatSort that holds the current sort state.
           */


          _this2.sortData = function (data, sort) {
            var active = sort.active;
            var direction = sort.direction;

            if (!active || direction == '') {
              return data;
            }

            return data.sort(function (a, b) {
              var valueA = _this2.sortingDataAccessor(a, active);

              var valueB = _this2.sortingDataAccessor(b, active); // If there are data in the column that can be converted to a number,
              // it must be ensured that the rest of the data
              // is of the same type so as not to order incorrectly.


              var valueAType = typeof valueA;
              var valueBType = typeof valueB;

              if (valueAType !== valueBType) {
                if (valueAType === 'number') {
                  valueA += '';
                }

                if (valueBType === 'number') {
                  valueB += '';
                }
              } // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if
              // one value exists while the other doesn't. In this case, existing value should come last.
              // This avoids inconsistent results when comparing values to undefined/null.
              // If neither value exists, return 0 (equal).


              var comparatorResult = 0;

              if (valueA != null && valueB != null) {
                // Check if one value is greater than the other; if equal, comparatorResult should remain 0.
                if (valueA > valueB) {
                  comparatorResult = 1;
                } else if (valueA < valueB) {
                  comparatorResult = -1;
                }
              } else if (valueA != null) {
                comparatorResult = 1;
              } else if (valueB != null) {
                comparatorResult = -1;
              }

              return comparatorResult * (direction == 'asc' ? 1 : -1);
            });
          };
          /**
           * Checks if a data object matches the data source's filter string. By default, each data object
           * is converted to a string of its properties and returns true if the filter has
           * at least one occurrence in that string. By default, the filter string has its whitespace
           * trimmed and the match is case-insensitive. May be overridden for a custom implementation of
           * filter matching.
           * @param data Data object used to check against the filter.
           * @param filter Filter string that has been set on the data source.
           * @returns Whether the filter matches against the data
           */


          _this2.filterPredicate = function (data, filter) {
            // Transform the data into a lowercase string of all property values.
            var dataStr = Object.keys(data).reduce(function (currentTerm, key) {
              // Use an obscure Unicode character to delimit the words in the concatenated string.
              // This avoids matches where the values of two columns combined will match the user's query
              // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something
              // that has a very low chance of being typed in by somebody in a text field. This one in
              // particular is "White up-pointing triangle with dot" from
              // https://en.wikipedia.org/wiki/List_of_Unicode_characters
              return currentTerm + data[key] + '◬';
            }, '').toLowerCase(); // Transform the filter by converting it to lowercase and removing whitespace.

            var transformedFilter = filter.trim().toLowerCase();
            return dataStr.indexOf(transformedFilter) != -1;
          };

          _this2._data = new rxjs__WEBPACK_IMPORTED_MODULE_5__["BehaviorSubject"](initialData);

          _this2._updateChangeSubscription();

          return _this2;
        }
        /** Array of data that should be rendered by the table, where each object represents one row. */


        _createClass(MatTableDataSource, [{
          key: "data",
          get: function get() {
            return this._data.value;
          },
          set: function set(data) {
            this._data.next(data);
          }
          /**
           * Filter term that should be used to filter out objects from the data array. To override how
           * data objects match to this filter string, provide a custom function for filterPredicate.
           */

        }, {
          key: "filter",
          get: function get() {
            return this._filter.value;
          },
          set: function set(filter) {
            this._filter.next(filter);
          }
          /**
           * Instance of the MatSort directive used by the table to control its sorting. Sort changes
           * emitted by the MatSort will trigger an update to the table's rendered data.
           */

        }, {
          key: "sort",
          get: function get() {
            return this._sort;
          },
          set: function set(sort) {
            this._sort = sort;

            this._updateChangeSubscription();
          }
          /**
           * Instance of the MatPaginator component used by the table to control what page of the data is
           * displayed. Page changes emitted by the MatPaginator will trigger an update to the
           * table's rendered data.
           *
           * Note that the data source uses the paginator's properties to calculate which page of data
           * should be displayed. If the paginator receives its properties as template inputs,
           * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been
           * initialized before assigning it to this data source.
           */

        }, {
          key: "paginator",
          get: function get() {
            return this._paginator;
          },
          set: function set(paginator) {
            this._paginator = paginator;

            this._updateChangeSubscription();
          }
          /**
           * Subscribe to changes that should trigger an update to the table's rendered rows. When the
           * changes occur, process the current state of the filter, sort, and pagination along with
           * the provided base data and send it to the table for rendering.
           */

        }, {
          key: "_updateChangeSubscription",
          value: function _updateChangeSubscription() {
            var _this3 = this;

            // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.
            // The events should emit whenever the component emits a change or initializes, or if no
            // component is provided, a stream with just a null event should be provided.
            // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the
            // pipeline can progress to the next step. Note that the value from these streams are not used,
            // they purely act as a signal to progress in the pipeline.
            var sortChange = this._sort ? Object(rxjs__WEBPACK_IMPORTED_MODULE_5__["merge"])(this._sort.sortChange, this._sort.initialized) : Object(rxjs__WEBPACK_IMPORTED_MODULE_5__["of"])(null);
            var pageChange = this._paginator ? Object(rxjs__WEBPACK_IMPORTED_MODULE_5__["merge"])(this._paginator.page, this._internalPageChanges, this._paginator.initialized) : Object(rxjs__WEBPACK_IMPORTED_MODULE_5__["of"])(null);
            var dataStream = this._data; // Watch for base data or filter changes to provide a filtered set of data.

            var filteredData = Object(rxjs__WEBPACK_IMPORTED_MODULE_5__["combineLatest"])([dataStream, this._filter]).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_6__["map"])(function (_ref) {
              var _ref2 = _slicedToArray(_ref, 1),
                  data = _ref2[0];

              return _this3._filterData(data);
            })); // Watch for filtered data or sort changes to provide an ordered set of data.

            var orderedData = Object(rxjs__WEBPACK_IMPORTED_MODULE_5__["combineLatest"])([filteredData, sortChange]).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_6__["map"])(function (_ref3) {
              var _ref4 = _slicedToArray(_ref3, 1),
                  data = _ref4[0];

              return _this3._orderData(data);
            })); // Watch for ordered data or page changes to provide a paged set of data.

            var paginatedData = Object(rxjs__WEBPACK_IMPORTED_MODULE_5__["combineLatest"])([orderedData, pageChange]).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_6__["map"])(function (_ref5) {
              var _ref6 = _slicedToArray(_ref5, 1),
                  data = _ref6[0];

              return _this3._pageData(data);
            })); // Watched for paged data changes and send the result to the table to render.

            this._renderChangesSubscription.unsubscribe();

            this._renderChangesSubscription = paginatedData.subscribe(function (data) {
              return _this3._renderData.next(data);
            });
          }
          /**
           * Returns a filtered data array where each filter object contains the filter string within
           * the result of the filterTermAccessor function. If no filter is set, returns the data array
           * as provided.
           */

        }, {
          key: "_filterData",
          value: function _filterData(data) {
            var _this4 = this;

            // If there is a filter string, filter out data that does not contain it.
            // Each data object is converted to a string using the function defined by filterTermAccessor.
            // May be overridden for customization.
            this.filteredData = !this.filter ? data : data.filter(function (obj) {
              return _this4.filterPredicate(obj, _this4.filter);
            });

            if (this.paginator) {
              this._updatePaginator(this.filteredData.length);
            }

            return this.filteredData;
          }
          /**
           * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the
           * data array as provided. Uses the default data accessor for data lookup, unless a
           * sortDataAccessor function is defined.
           */

        }, {
          key: "_orderData",
          value: function _orderData(data) {
            // If there is no active sort or direction, return the data without trying to sort.
            if (!this.sort) {
              return data;
            }

            return this.sortData(data.slice(), this.sort);
          }
          /**
           * Returns a paged slice of the provided data array according to the provided MatPaginator's page
           * index and length. If there is no paginator provided, returns the data array as provided.
           */

        }, {
          key: "_pageData",
          value: function _pageData(data) {
            if (!this.paginator) {
              return data;
            }

            var startIndex = this.paginator.pageIndex * this.paginator.pageSize;
            return data.slice(startIndex, startIndex + this.paginator.pageSize);
          }
          /**
           * Updates the paginator to reflect the length of the filtered data, and makes sure that the page
           * index does not exceed the paginator's last page. Values are changed in a resolved promise to
           * guard against making property changes within a round of change detection.
           */

        }, {
          key: "_updatePaginator",
          value: function _updatePaginator(filteredDataLength) {
            var _this5 = this;

            Promise.resolve().then(function () {
              var paginator = _this5.paginator;

              if (!paginator) {
                return;
              }

              paginator.length = filteredDataLength; // If the page index is set beyond the page, reduce it to the last page.

              if (paginator.pageIndex > 0) {
                var lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;
                var newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);

                if (newPageIndex !== paginator.pageIndex) {
                  paginator.pageIndex = newPageIndex; // Since the paginator only emits after user-generated changes,
                  // we need our own stream so we know to should re-render the data.

                  _this5._internalPageChanges.next();
                }
              }
            });
          }
          /**
           * Used by the MatTable. Called when it connects to the data source.
           * @docs-private
           */

        }, {
          key: "connect",
          value: function connect() {
            return this._renderData;
          }
          /**
           * Used by the MatTable. Called when it is destroyed. No-op.
           * @docs-private
           */

        }, {
          key: "disconnect",
          value: function disconnect() {}
        }]);

        return MatTableDataSource;
      }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__["DataSource"]);
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Generated bundle index. Do not edit.
       */
      //# sourceMappingURL=table.js.map

      /***/

    },

    /***/
    "+9xK": function xK(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony default export */


      __webpack_exports__["default"] = "\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3JlZ2lzdHJhci9vcGVyYWRvclJlZ2lzdHJvL29wZXJhZG9yYS5jb21wb25lbnQuc2NzcyJ9 */";
      /***/
    },

    /***/
    "+s0g": function s0g(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Dutch [nl]
      //! author : Joris Röling : https://github.com/jorisroling
      //! author : Jacob Middag : https://github.com/middagj
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var monthsShortWithDots = 'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_'),
            monthsShortWithoutDots = 'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_'),
            monthsParse = [/^jan/i, /^feb/i, /^maart|mrt.?$/i, /^apr/i, /^mei$/i, /^jun[i.]?$/i, /^jul[i.]?$/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i],
            monthsRegex = /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;
        var nl = moment.defineLocale('nl', {
          months: 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split('_'),
          monthsShort: function monthsShort(m, format) {
            if (!m) {
              return monthsShortWithDots;
            } else if (/-MMM-/.test(format)) {
              return monthsShortWithoutDots[m.month()];
            } else {
              return monthsShortWithDots[m.month()];
            }
          },
          monthsRegex: monthsRegex,
          monthsShortRegex: monthsRegex,
          monthsStrictRegex: /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,
          monthsShortStrictRegex: /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,
          monthsParse: monthsParse,
          longMonthsParse: monthsParse,
          shortMonthsParse: monthsParse,
          weekdays: 'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),
          weekdaysShort: 'zo._ma._di._wo._do._vr._za.'.split('_'),
          weekdaysMin: 'zo_ma_di_wo_do_vr_za'.split('_'),
          weekdaysParseExact: true,
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD-MM-YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
          },
          calendar: {
            sameDay: '[vandaag om] LT',
            nextDay: '[morgen om] LT',
            nextWeek: 'dddd [om] LT',
            lastDay: '[gisteren om] LT',
            lastWeek: '[afgelopen] dddd [om] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: 'over %s',
            past: '%s geleden',
            s: 'een paar seconden',
            ss: '%d seconden',
            m: 'één minuut',
            mm: '%d minuten',
            h: 'één uur',
            hh: '%d uur',
            d: 'één dag',
            dd: '%d dagen',
            w: 'één week',
            ww: '%d weken',
            M: 'één maand',
            MM: '%d maanden',
            y: 'één jaar',
            yy: '%d jaar'
          },
          dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
          ordinal: function ordinal(number) {
            return number + (number === 1 || number === 8 || number >= 20 ? 'ste' : 'de');
          },
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.

          }
        });
        return nl;
      });
      /***/

    },

    /***/
    "//9w": function w(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Northern Sami [se]
      //! authors : Bård Rolstad Henriksen : https://github.com/karamell
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var se = moment.defineLocale('se', {
          months: 'ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu'.split('_'),
          monthsShort: 'ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov'.split('_'),
          weekdays: 'sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat'.split('_'),
          weekdaysShort: 'sotn_vuos_maŋ_gask_duor_bear_láv'.split('_'),
          weekdaysMin: 's_v_m_g_d_b_L'.split('_'),
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'MMMM D. [b.] YYYY',
            LLL: 'MMMM D. [b.] YYYY [ti.] HH:mm',
            LLLL: 'dddd, MMMM D. [b.] YYYY [ti.] HH:mm'
          },
          calendar: {
            sameDay: '[otne ti] LT',
            nextDay: '[ihttin ti] LT',
            nextWeek: 'dddd [ti] LT',
            lastDay: '[ikte ti] LT',
            lastWeek: '[ovddit] dddd [ti] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: '%s geažes',
            past: 'maŋit %s',
            s: 'moadde sekunddat',
            ss: '%d sekunddat',
            m: 'okta minuhta',
            mm: '%d minuhtat',
            h: 'okta diimmu',
            hh: '%d diimmut',
            d: 'okta beaivi',
            dd: '%d beaivvit',
            M: 'okta mánnu',
            MM: '%d mánut',
            y: 'okta jahki',
            yy: '%d jagit'
          },
          dayOfMonthOrdinalParse: /\d{1,2}\./,
          ordinal: '%d.',
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.

          }
        });
        return se;
      });
      /***/

    },

    /***/
    "/X5v": function X5v(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Pseudo [x-pseudo]
      //! author : Andrew Hood : https://github.com/andrewhood125
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var xPseudo = moment.defineLocale('x-pseudo', {
          months: 'J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér'.split('_'),
          monthsShort: 'J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc'.split('_'),
          monthsParseExact: true,
          weekdays: 'S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý'.split('_'),
          weekdaysShort: 'S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát'.split('_'),
          weekdaysMin: 'S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá'.split('_'),
          weekdaysParseExact: true,
          longDateFormat: {
            LT: 'HH:mm',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
          },
          calendar: {
            sameDay: '[T~ódá~ý át] LT',
            nextDay: '[T~ómó~rró~w át] LT',
            nextWeek: 'dddd [át] LT',
            lastDay: '[Ý~ést~érdá~ý át] LT',
            lastWeek: '[L~ást] dddd [át] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: 'í~ñ %s',
            past: '%s á~gó',
            s: 'á ~féw ~sécó~ñds',
            ss: '%d s~écóñ~ds',
            m: 'á ~míñ~úté',
            mm: '%d m~íñú~tés',
            h: 'á~ñ hó~úr',
            hh: '%d h~óúrs',
            d: 'á ~dáý',
            dd: '%d d~áýs',
            M: 'á ~móñ~th',
            MM: '%d m~óñt~hs',
            y: 'á ~ýéár',
            yy: '%d ý~éárs'
          },
          dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
          ordinal: function ordinal(number) {
            var b = number % 10,
                output = ~~(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
            return number + output;
          },
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.

          }
        });
        return xPseudo;
      });
      /***/

    },

    /***/
    "/pQ5": function pQ5(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "RegistrarProductoComponent", function () {
        return RegistrarProductoComponent;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _raw_loader_registrar_producto_component_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! raw-loader!./registrar-producto.component.html */
      "wI9/");
      /* harmony import */


      var _registrar_producto_component_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./registrar-producto.component.scss */
      "qnVr");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var _environments_environment__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! ../../../../environments/environment */
      "AytR");
      /* harmony import */


      var _angular_forms__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @angular/forms */
      "3Pt+");
      /* harmony import */


      var _angular_router__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! @angular/router */
      "tyNb");
      /* harmony import */


      var _shared_services_global_services__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! ../../../shared/services/global.services */
      "Zk1H");

      var RegistrarProductoComponent = /*#__PURE__*/function () {
        function RegistrarProductoComponent(fb, router, route, globalService) {
          _classCallCheck(this, RegistrarProductoComponent);

          this.fb = fb;
          this.router = router;
          this.route = route;
          this.globalService = globalService;
          this.treatmentsList = [];
          this.isLoading = false;
          this.create = true;
          this.edit = false;
          this.user = [{
            value: 1,
            desc: 'Doctora'
          }, {
            value: 2,
            desc: 'Operadora'
          }];
          this.form = fb.group({
            id: new _angular_forms__WEBPACK_IMPORTED_MODULE_5__["FormControl"](),
            product: new _angular_forms__WEBPACK_IMPORTED_MODULE_5__["FormControl"]('', [_angular_forms__WEBPACK_IMPORTED_MODULE_5__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_5__["Validators"].pattern('[a-zA-Z0-9\\s]+')]),
            proveedor: new _angular_forms__WEBPACK_IMPORTED_MODULE_5__["FormControl"]('', [_angular_forms__WEBPACK_IMPORTED_MODULE_5__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_5__["Validators"].pattern('[a-zA-Z0-9\\s]+')]),
            cantidad: new _angular_forms__WEBPACK_IMPORTED_MODULE_5__["FormControl"]('', [_angular_forms__WEBPACK_IMPORTED_MODULE_5__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_5__["Validators"].pattern('[a-zA-Z0-9\\s]+')]),
            specialist: new _angular_forms__WEBPACK_IMPORTED_MODULE_5__["FormControl"]('', [_angular_forms__WEBPACK_IMPORTED_MODULE_5__["Validators"].required]),
            price: new _angular_forms__WEBPACK_IMPORTED_MODULE_5__["FormControl"]('', [_angular_forms__WEBPACK_IMPORTED_MODULE_5__["Validators"].required]),
            description: new _angular_forms__WEBPACK_IMPORTED_MODULE_5__["FormControl"]()
          });
        }

        _createClass(RegistrarProductoComponent, [{
          key: "ngOnInit",
          value: function ngOnInit() {
            var _this6 = this;

            this.getTreatments();
            this.route.queryParams.subscribe(function (params) {
              var id = params.id;
              _this6.idPoint = id;

              if (_this6.idPoint) {
                _this6.getDtaByUpdate(id);
              }
            });
          }
        }, {
          key: "f",
          get: function get() {
            return this.form.controls;
          }
        }, {
          key: "getDtaByUpdate",
          value: function getDtaByUpdate(id) {
            var _this7 = this;

            this.isLoading = true;
            var data = {
              id: id
            };
            this.globalService.httpServicesResponse(data, _environments_environment__WEBPACK_IMPORTED_MODULE_4__["environment"].Url + 'depilarte/getProducts').subscribe(function (res) {
              console.log(res);

              _this7.setValues(res);

              _this7.isLoading = false;
              _this7.create = false;
              _this7.edit = true;
            }, function (e) {
              console.log(e);
              _this7.isLoading = false;
            });
          }
        }, {
          key: "setValues",
          value: function setValues(values) {
            this.form.setValue(values);
          }
        }, {
          key: "register",
          value: function register() {
            var _this8 = this;

            if (this.form.invalid) return;
            console.log(this.form.value);
            var data = Object.assign({}, this.form.value);
            this.globalService.httpServicesResponse(data, _environments_environment__WEBPACK_IMPORTED_MODULE_4__["environment"].Url + '/depilarte/registerProduct').subscribe(function (res) {
              if (res.type === 'error') {
                alertify.error('Error al registrar');
              } else {
                console.log(_this8.form.value);

                _this8.form.reset();

                alertify.success('Registrado con exito');
              }
            }, console.log);
          }
        }, {
          key: "hasError",
          value: function hasError(control, type) {
            return this.form.controls[control].hasError(type);
          }
        }, {
          key: "getTreatments",
          value: function getTreatments() {
            var _this9 = this;

            this.globalService.httpServicesResponse(null, _environments_environment__WEBPACK_IMPORTED_MODULE_4__["environment"].Url + '/global/treatments').subscribe(function (response) {
              if (response.type === 'success') {
                _this9.treatmentsList = response.treatments.filter(function (te) {
                  return te.id !== -1;
                });
              }
            }, console.error);
          }
        }]);

        return RegistrarProductoComponent;
      }();

      RegistrarProductoComponent.ctorParameters = function () {
        return [{
          type: _angular_forms__WEBPACK_IMPORTED_MODULE_5__["FormBuilder"]
        }, {
          type: _angular_router__WEBPACK_IMPORTED_MODULE_6__["Router"]
        }, {
          type: _angular_router__WEBPACK_IMPORTED_MODULE_6__["ActivatedRoute"]
        }, {
          type: _shared_services_global_services__WEBPACK_IMPORTED_MODULE_7__["GlobalServices"]
        }];
      };

      RegistrarProductoComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"])({
        selector: 'app-registrar-producto',
        template: _raw_loader_registrar_producto_component_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        styles: [_registrar_producto_component_scss__WEBPACK_IMPORTED_MODULE_2__["default"]]
      }), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [_angular_forms__WEBPACK_IMPORTED_MODULE_5__["FormBuilder"], _angular_router__WEBPACK_IMPORTED_MODULE_6__["Router"], _angular_router__WEBPACK_IMPORTED_MODULE_6__["ActivatedRoute"], _shared_services_global_services__WEBPACK_IMPORTED_MODULE_7__["GlobalServices"]])], RegistrarProductoComponent);
      /***/
    },

    /***/
    "0EEK": function EEK(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony default export */


      __webpack_exports__["default"] = "<div class=\"row\">\r\n  <div class=\"col-lg-3 col-md-6 col-sm-6\">\r\n    <div class=\"card card-stats\">\r\n      <div class=\"card-body \">\r\n        <div class=\"row\">\r\n          <div class=\"col-2 col-md-2\">\r\n            <div class=\"icon-big text-center icon-success\">\r\n              <i class=\"nc-icon nc-circle-10 text-success\"></i>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-9 col-md-10\">\r\n            <div class=\"numbers\">\r\n              <p class=\"card-category\">Pacientes Registrados</p><br>\r\n              <p class=\"card-title\">  {{registerCount}}  </p>\r\n                \r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"card-footer \">\r\n        <hr>\r\n        <div class=\"stats\">\r\n        \r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"col-lg-3 col-md-6 col-sm-6\">\r\n    <div class=\"card card-stats\">\r\n      <div class=\"card-body \">\r\n        <div class=\"row\">\r\n          <div class=\"col-2 col-md-2\">\r\n            <div class=\"icon-big text-center icon-warning\">\r\n              <i class=\"nc-icon nc-paper text-warning\"></i>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-9 col-md-10\">\r\n            <div class=\"numbers\">\r\n              <p class=\"card-category\">Tratamientos Registrados</p><br>\r\n              <p class=\"card-title\">{{tratamientosCount}}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"card-footer \">\r\n        <hr>\r\n        <div class=\"stats\">\r\n          \r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"col-lg-3 col-md-6 col-sm-6\">\r\n    <div class=\"card card-stats\">\r\n      <div class=\"card-body \">\r\n        <div class=\"row\">\r\n          <div class=\"col-2 col-md-2\">\r\n            <div class=\"icon-big text-center icon-warning\">\r\n              <i class=\"nc-icon nc-single-02 text-danger\"></i>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-9 col-md-10\">\r\n            <div class=\"numbers\">\r\n              <p class=\"card-category\" style=\"width: 100%;\">Empleados Registrados</p><br>\r\n              <p class=\"card-title\">{{empleadosCount}}\r\n                <p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"card-footer \">\r\n        <hr>\r\n        <div class=\"stats\">\r\n          \r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"col-lg-3 col-md-6 col-sm-6\">\r\n    <div class=\"card card-stats\">\r\n      <div class=\"card-body \">\r\n        <div class=\"row\">\r\n          <div class=\"col-2 col-md-2\">\r\n            <div class=\"icon-big text-center icon-warning\">\r\n              <i class=\"nc-icon nc-bag-16 text-primary\"></i>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-9 col-md-10\">\r\n            <div class=\"numbers\">\r\n              <p class=\"card-category\">Productos Registrados</p><br>\r\n              <p class=\"card-title\">{{productosCount}}\r\n                <p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"card-footer \">\r\n        <hr>\r\n        <div class=\"stats\">\r\n         \r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n<!-- <div class=\"row\">\r\n  <div class=\"col-md-12\">\r\n    <div class=\"card \">\r\n      <div class=\"card-header \">\r\n        <h5 class=\"card-title\">Users Behavior</h5>\r\n        <p class=\"card-category\">24 Hours performance</p>\r\n      </div> -->\r\n        <!-- <div class=\"card-body \">\r\n           <canvas id=chartHours width=\"400\" height=\"100\"></canvas>\r\n        </div> -->\r\n      <!-- <div class=\"card-footer \">\r\n        <hr>\r\n        <div class=\"stats\">\r\n          <i class=\"fa fa-history\"></i> Updated 3 minutes ago\r\n        </div>\r\n      </div> \r\n    </div>\r\n  </div>\r\n</div> -->\r\n\r\n<div class=\"row\">\r\n  <div class=\"col-md-4\">\r\n    <div class=\"card \">\r\n      <div class=\"card-header \">\r\n        <h5 class=\"card-title\">Estadisticas de Registros</h5>\r\n        \r\n      </div>\r\n      <div class=\"card-body \">\r\n        <canvas id=\"chartEmail\"></canvas>\r\n      </div>\r\n      <div class=\"card-footer \">\r\n        <div class=\"legend\">\r\n          <i class=\"fa fa-circle text-danger\"></i> Empleados <br>\r\n          <i class=\"fa fa-circle text-warning\"></i> Tratamientos <br>\r\n          <i class=\"fa fa-circle text-primary\"></i> Productos <br>\r\n          <i class=\"fa fa-circle text-success\"></i> Pacientes <br>\r\n        </div>\r\n        <hr>\r\n        <div class=\"stats\">\r\n          <i class=\"fa fa-calendar\"></i> {{year}}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"col-md-8\">\r\n    <div class=\"card card-chart\">\r\n      <div class=\"card-header\">\r\n        <h5 class=\"card-title\">Registro de Pacientes por mes </h5>\r\n        <p class=\"card-category\">{{year}}</p>\r\n      </div>\r\n      <div class=\"card-body\">\r\n        <canvas id=\"speedChart\" width=\"400\" height=\"100\"></canvas>\r\n      </div>\r\n      <div class=\"card-footer\">\r\n        <div class=\"chart-legend\">\r\n          <i class=\"fa fa-circle text-success\"></i> Pacientes Registrados\r\n          <!-- <i class=\"fa fa-circle text-warning\"></i> BMW 5 Series -->\r\n        </div>\r\n        <hr/>\r\n        \r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n";
      /***/
    },

    /***/
    "0MNC": function MNC(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "BreakpointObserver", function () {
        return BreakpointObserver;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Breakpoints", function () {
        return Breakpoints;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "LayoutModule", function () {
        return LayoutModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MediaMatcher", function () {
        return MediaMatcher;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/cdk/coercion */
      "8LU1");
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! rxjs */
      "qCKp");
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! rxjs/operators */
      "kU1M");
      /* harmony import */


      var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/cdk/platform */
      "nLfN");
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var LayoutModule = function LayoutModule() {
        _classCallCheck(this, LayoutModule);
      };

      LayoutModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
        type: LayoutModule
      });
      LayoutModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
        factory: function LayoutModule_Factory(t) {
          return new (t || LayoutModule)();
        }
      });
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](LayoutModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
          args: [{}]
        }], null, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /** Global registry for all dynamically-created, injected media queries. */


      var mediaQueriesForWebkitCompatibility = new Set();
      /** Style tag that holds all of the dynamically-created media queries. */

      var mediaQueryStyleNode;
      /** A utility for calling matchMedia queries. */

      var MediaMatcher = /*#__PURE__*/function () {
        function MediaMatcher(_platform) {
          _classCallCheck(this, MediaMatcher);

          this._platform = _platform;
          this._matchMedia = this._platform.isBrowser && window.matchMedia ? // matchMedia is bound to the window scope intentionally as it is an illegal invocation to
          // call it from a different scope.
          window.matchMedia.bind(window) : noopMatchMedia;
        }
        /**
         * Evaluates the given media query and returns the native MediaQueryList from which results
         * can be retrieved.
         * Confirms the layout engine will trigger for the selector query provided and returns the
         * MediaQueryList for the query provided.
         */


        _createClass(MediaMatcher, [{
          key: "matchMedia",
          value: function matchMedia(query) {
            if (this._platform.WEBKIT) {
              createEmptyStyleRule(query);
            }

            return this._matchMedia(query);
          }
        }]);

        return MediaMatcher;
      }();

      MediaMatcher.ɵfac = function MediaMatcher_Factory(t) {
        return new (t || MediaMatcher)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["Platform"]));
      };

      MediaMatcher.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({
        factory: function MediaMatcher_Factory() {
          return new MediaMatcher(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["Platform"]));
        },
        token: MediaMatcher,
        providedIn: "root"
      });

      MediaMatcher.ctorParameters = function () {
        return [{
          type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["Platform"]
        }];
      };
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](MediaMatcher, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"],
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [{
            type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["Platform"]
          }];
        }, null);
      })();
      /**
       * For Webkit engines that only trigger the MediaQueryListListener when
       * there is at least one CSS selector for the respective media query.
       */


      function createEmptyStyleRule(query) {
        if (mediaQueriesForWebkitCompatibility.has(query)) {
          return;
        }

        try {
          if (!mediaQueryStyleNode) {
            mediaQueryStyleNode = document.createElement('style');
            mediaQueryStyleNode.setAttribute('type', 'text/css');
            document.head.appendChild(mediaQueryStyleNode);
          }

          if (mediaQueryStyleNode.sheet) {
            mediaQueryStyleNode.sheet.insertRule("@media ".concat(query, " {.fx-query-test{ }}"), 0);
            mediaQueriesForWebkitCompatibility.add(query);
          }
        } catch (e) {
          console.error(e);
        }
      }
      /** No-op matchMedia replacement for non-browser platforms. */


      function noopMatchMedia(query) {
        // Use `as any` here to avoid adding additional necessary properties for
        // the noop matcher.
        return {
          matches: query === 'all' || query === '',
          media: query,
          addListener: function addListener() {},
          removeListener: function removeListener() {}
        };
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /** Utility for checking the matching state of @media queries. */


      var BreakpointObserver = /*#__PURE__*/function () {
        function BreakpointObserver(_mediaMatcher, _zone) {
          _classCallCheck(this, BreakpointObserver);

          this._mediaMatcher = _mediaMatcher;
          this._zone = _zone;
          /**  A map of all media queries currently being listened for. */

          this._queries = new Map();
          /** A subject for all other observables to takeUntil based on. */

          this._destroySubject = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
        }
        /** Completes the active subject, signalling to all other observables to complete. */


        _createClass(BreakpointObserver, [{
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this._destroySubject.next();

            this._destroySubject.complete();
          }
          /**
           * Whether one or more media queries match the current viewport size.
           * @param value One or more media queries to check.
           * @returns Whether any of the media queries match.
           */

        }, {
          key: "isMatched",
          value: function isMatched(value) {
            var _this10 = this;

            var queries = splitQueries(Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceArray"])(value));
            return queries.some(function (mediaQuery) {
              return _this10._registerQuery(mediaQuery).mql.matches;
            });
          }
          /**
           * Gets an observable of results for the given queries that will emit new results for any changes
           * in matching of the given queries.
           * @param value One or more media queries to check.
           * @returns A stream of matches for the given queries.
           */

        }, {
          key: "observe",
          value: function observe(value) {
            var _this11 = this;

            var queries = splitQueries(Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceArray"])(value));
            var observables = queries.map(function (query) {
              return _this11._registerQuery(query).observable;
            });
            var stateObservable = Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["combineLatest"])(observables); // Emit the first state immediately, and then debounce the subsequent emissions.

            stateObservable = Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["concat"])(stateObservable.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["take"])(1)), stateObservable.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["skip"])(1), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["debounceTime"])(0)));
            return stateObservable.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (breakpointStates) {
              var response = {
                matches: false,
                breakpoints: {}
              };
              breakpointStates.forEach(function (_ref7) {
                var matches = _ref7.matches,
                    query = _ref7.query;
                response.matches = response.matches || matches;
                response.breakpoints[query] = matches;
              });
              return response;
            }));
          }
          /** Registers a specific query to be listened for. */

        }, {
          key: "_registerQuery",
          value: function _registerQuery(query) {
            var _this12 = this;

            // Only set up a new MediaQueryList if it is not already being listened for.
            if (this._queries.has(query)) {
              return this._queries.get(query);
            }

            var mql = this._mediaMatcher.matchMedia(query); // Create callback for match changes and add it is as a listener.


            var queryObservable = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Observable"](function (observer) {
              // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed
              // back into the zone because matchMedia is only included in Zone.js by loading the
              // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not
              // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js
              // patches it.
              var handler = function handler(e) {
                return _this12._zone.run(function () {
                  return observer.next(e);
                });
              };

              mql.addListener(handler);
              return function () {
                mql.removeListener(handler);
              };
            }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["startWith"])(mql), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (_ref8) {
              var matches = _ref8.matches;
              return {
                query: query,
                matches: matches
              };
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["takeUntil"])(this._destroySubject)); // Add the MediaQueryList to the set of queries.

            var output = {
              observable: queryObservable,
              mql: mql
            };

            this._queries.set(query, output);

            return output;
          }
        }]);

        return BreakpointObserver;
      }();

      BreakpointObserver.ɵfac = function BreakpointObserver_Factory(t) {
        return new (t || BreakpointObserver)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](MediaMatcher), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"]));
      };

      BreakpointObserver.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({
        factory: function BreakpointObserver_Factory() {
          return new BreakpointObserver(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(MediaMatcher), Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"]));
        },
        token: BreakpointObserver,
        providedIn: "root"
      });

      BreakpointObserver.ctorParameters = function () {
        return [{
          type: MediaMatcher
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"]
        }];
      };
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](BreakpointObserver, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"],
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [{
            type: MediaMatcher
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"]
          }];
        }, null);
      })();
      /**
       * Split each query string into separate query strings if two queries are provided as comma
       * separated.
       */


      function splitQueries(queries) {
        return queries.map(function (query) {
          return query.split(',');
        }).reduce(function (a1, a2) {
          return a1.concat(a2);
        }).map(function (query) {
          return query.trim();
        });
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // PascalCase is being used as Breakpoints is used like an enum.
      // tslint:disable-next-line:variable-name


      var Breakpoints = {
        XSmall: '(max-width: 599.99px)',
        Small: '(min-width: 600px) and (max-width: 959.99px)',
        Medium: '(min-width: 960px) and (max-width: 1279.99px)',
        Large: '(min-width: 1280px) and (max-width: 1919.99px)',
        XLarge: '(min-width: 1920px)',
        Handset: '(max-width: 599.99px) and (orientation: portrait), ' + '(max-width: 959.99px) and (orientation: landscape)',
        Tablet: '(min-width: 600px) and (max-width: 839.99px) and (orientation: portrait), ' + '(min-width: 960px) and (max-width: 1279.99px) and (orientation: landscape)',
        Web: '(min-width: 840px) and (orientation: portrait), ' + '(min-width: 1280px) and (orientation: landscape)',
        HandsetPortrait: '(max-width: 599.99px) and (orientation: portrait)',
        TabletPortrait: '(min-width: 600px) and (max-width: 839.99px) and (orientation: portrait)',
        WebPortrait: '(min-width: 840px) and (orientation: portrait)',
        HandsetLandscape: '(max-width: 959.99px) and (orientation: landscape)',
        TabletLandscape: '(min-width: 960px) and (max-width: 1279.99px) and (orientation: landscape)',
        WebLandscape: '(min-width: 1280px) and (orientation: landscape)'
      };
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Generated bundle index. Do not edit.
       */
      //# sourceMappingURL=layout.js.map

      /***/
    },

    /***/
    "0Sn1": function Sn1(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "UpgradeComponent", function () {
        return UpgradeComponent;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _raw_loader_upgrade_component_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! raw-loader!./upgrade.component.html */
      "j0/V");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");

      var UpgradeComponent = /*#__PURE__*/function () {
        function UpgradeComponent() {
          _classCallCheck(this, UpgradeComponent);
        }

        _createClass(UpgradeComponent, [{
          key: "ngOnInit",
          value: function ngOnInit() {}
        }]);

        return UpgradeComponent;
      }();

      UpgradeComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Component"])({
        selector: 'upgrade-cmp',
        template: _raw_loader_upgrade_component_html__WEBPACK_IMPORTED_MODULE_1__["default"]
      })], UpgradeComponent);
      /***/
    },

    /***/
    "0mo+": function mo(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Tibetan [bo]
      //! author : Thupten N. Chakrishar : https://github.com/vajradog
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var symbolMap = {
          1: '༡',
          2: '༢',
          3: '༣',
          4: '༤',
          5: '༥',
          6: '༦',
          7: '༧',
          8: '༨',
          9: '༩',
          0: '༠'
        },
            numberMap = {
          '༡': '1',
          '༢': '2',
          '༣': '3',
          '༤': '4',
          '༥': '5',
          '༦': '6',
          '༧': '7',
          '༨': '8',
          '༩': '9',
          '༠': '0'
        };
        var bo = moment.defineLocale('bo', {
          months: 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split('_'),
          monthsShort: 'ཟླ་1_ཟླ་2_ཟླ་3_ཟླ་4_ཟླ་5_ཟླ་6_ཟླ་7_ཟླ་8_ཟླ་9_ཟླ་10_ཟླ་11_ཟླ་12'.split('_'),
          monthsShortRegex: /^(ཟླ་\d{1,2})/,
          monthsParseExact: true,
          weekdays: 'གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་'.split('_'),
          weekdaysShort: 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split('_'),
          weekdaysMin: 'ཉི_ཟླ_མིག_ལྷག_ཕུར_སངས_སྤེན'.split('_'),
          longDateFormat: {
            LT: 'A h:mm',
            LTS: 'A h:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm',
            LLLL: 'dddd, D MMMM YYYY, A h:mm'
          },
          calendar: {
            sameDay: '[དི་རིང] LT',
            nextDay: '[སང་ཉིན] LT',
            nextWeek: '[བདུན་ཕྲག་རྗེས་མ], LT',
            lastDay: '[ཁ་སང] LT',
            lastWeek: '[བདུན་ཕྲག་མཐའ་མ] dddd, LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: '%s ལ་',
            past: '%s སྔན་ལ',
            s: 'ལམ་སང',
            ss: '%d སྐར་ཆ།',
            m: 'སྐར་མ་གཅིག',
            mm: '%d སྐར་མ',
            h: 'ཆུ་ཚོད་གཅིག',
            hh: '%d ཆུ་ཚོད',
            d: 'ཉིན་གཅིག',
            dd: '%d ཉིན་',
            M: 'ཟླ་བ་གཅིག',
            MM: '%d ཟླ་བ',
            y: 'ལོ་གཅིག',
            yy: '%d ལོ'
          },
          preparse: function preparse(string) {
            return string.replace(/[༡༢༣༤༥༦༧༨༩༠]/g, function (match) {
              return numberMap[match];
            });
          },
          postformat: function postformat(string) {
            return string.replace(/\d/g, function (match) {
              return symbolMap[match];
            });
          },
          meridiemParse: /མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,
          meridiemHour: function meridiemHour(hour, meridiem) {
            if (hour === 12) {
              hour = 0;
            }

            if (meridiem === 'མཚན་མོ' && hour >= 4 || meridiem === 'ཉིན་གུང' && hour < 5 || meridiem === 'དགོང་དག') {
              return hour + 12;
            } else {
              return hour;
            }
          },
          meridiem: function meridiem(hour, minute, isLower) {
            if (hour < 4) {
              return 'མཚན་མོ';
            } else if (hour < 10) {
              return 'ཞོགས་ཀས';
            } else if (hour < 17) {
              return 'ཉིན་གུང';
            } else if (hour < 20) {
              return 'དགོང་དག';
            } else {
              return 'མཚན་མོ';
            }
          },
          week: {
            dow: 0,
            // Sunday is the first day of the week.
            doy: 6 // The week that contains Jan 6th is the first week of the year.

          }
        });
        return bo;
      });
      /***/

    },

    /***/
    "0tRk": function tRk(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Portuguese (Brazil) [pt-br]
      //! author : Caio Ribeiro Pereira : https://github.com/caio-ribeiro-pereira
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var ptBr = moment.defineLocale('pt-br', {
          months: 'janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro'.split('_'),
          monthsShort: 'jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez'.split('_'),
          weekdays: 'domingo_segunda-feira_terça-feira_quarta-feira_quinta-feira_sexta-feira_sábado'.split('_'),
          weekdaysShort: 'dom_seg_ter_qua_qui_sex_sáb'.split('_'),
          weekdaysMin: 'do_2ª_3ª_4ª_5ª_6ª_sá'.split('_'),
          weekdaysParseExact: true,
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D [de] MMMM [de] YYYY',
            LLL: 'D [de] MMMM [de] YYYY [às] HH:mm',
            LLLL: 'dddd, D [de] MMMM [de] YYYY [às] HH:mm'
          },
          calendar: {
            sameDay: '[Hoje às] LT',
            nextDay: '[Amanhã às] LT',
            nextWeek: 'dddd [às] LT',
            lastDay: '[Ontem às] LT',
            lastWeek: function lastWeek() {
              return this.day() === 0 || this.day() === 6 ? '[Último] dddd [às] LT' // Saturday + Sunday
              : '[Última] dddd [às] LT'; // Monday - Friday
            },
            sameElse: 'L'
          },
          relativeTime: {
            future: 'em %s',
            past: 'há %s',
            s: 'poucos segundos',
            ss: '%d segundos',
            m: 'um minuto',
            mm: '%d minutos',
            h: 'uma hora',
            hh: '%d horas',
            d: 'um dia',
            dd: '%d dias',
            M: 'um mês',
            MM: '%d meses',
            y: 'um ano',
            yy: '%d anos'
          },
          dayOfMonthOrdinalParse: /\d{1,2}º/,
          ordinal: '%dº',
          invalidDate: 'Data inválida'
        });
        return ptBr;
      });
      /***/

    },

    /***/
    "1ppg": function ppg(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Filipino [fil]
      //! author : Dan Hagman : https://github.com/hagmandan
      //! author : Matthew Co : https://github.com/matthewdeeco
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var fil = moment.defineLocale('fil', {
          months: 'Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre'.split('_'),
          monthsShort: 'Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis'.split('_'),
          weekdays: 'Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado'.split('_'),
          weekdaysShort: 'Lin_Lun_Mar_Miy_Huw_Biy_Sab'.split('_'),
          weekdaysMin: 'Li_Lu_Ma_Mi_Hu_Bi_Sab'.split('_'),
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'MM/D/YYYY',
            LL: 'MMMM D, YYYY',
            LLL: 'MMMM D, YYYY HH:mm',
            LLLL: 'dddd, MMMM DD, YYYY HH:mm'
          },
          calendar: {
            sameDay: 'LT [ngayong araw]',
            nextDay: '[Bukas ng] LT',
            nextWeek: 'LT [sa susunod na] dddd',
            lastDay: 'LT [kahapon]',
            lastWeek: 'LT [noong nakaraang] dddd',
            sameElse: 'L'
          },
          relativeTime: {
            future: 'sa loob ng %s',
            past: '%s ang nakalipas',
            s: 'ilang segundo',
            ss: '%d segundo',
            m: 'isang minuto',
            mm: '%d minuto',
            h: 'isang oras',
            hh: '%d oras',
            d: 'isang araw',
            dd: '%d araw',
            M: 'isang buwan',
            MM: '%d buwan',
            y: 'isang taon',
            yy: '%d taon'
          },
          dayOfMonthOrdinalParse: /\d{1,2}/,
          ordinal: function ordinal(number) {
            return number;
          },
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.

          }
        });
        return fil;
      });
      /***/

    },

    /***/
    "1rYy": function rYy(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Armenian [hy-am]
      //! author : Armendarabyan : https://github.com/armendarabyan
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var hyAm = moment.defineLocale('hy-am', {
          months: {
            format: 'հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի'.split('_'),
            standalone: 'հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր'.split('_')
          },
          monthsShort: 'հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ'.split('_'),
          weekdays: 'կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ'.split('_'),
          weekdaysShort: 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
          weekdaysMin: 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY թ.',
            LLL: 'D MMMM YYYY թ., HH:mm',
            LLLL: 'dddd, D MMMM YYYY թ., HH:mm'
          },
          calendar: {
            sameDay: '[այսօր] LT',
            nextDay: '[վաղը] LT',
            lastDay: '[երեկ] LT',
            nextWeek: function nextWeek() {
              return 'dddd [օրը ժամը] LT';
            },
            lastWeek: function lastWeek() {
              return '[անցած] dddd [օրը ժամը] LT';
            },
            sameElse: 'L'
          },
          relativeTime: {
            future: '%s հետո',
            past: '%s առաջ',
            s: 'մի քանի վայրկյան',
            ss: '%d վայրկյան',
            m: 'րոպե',
            mm: '%d րոպե',
            h: 'ժամ',
            hh: '%d ժամ',
            d: 'օր',
            dd: '%d օր',
            M: 'ամիս',
            MM: '%d ամիս',
            y: 'տարի',
            yy: '%d տարի'
          },
          meridiemParse: /գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,
          isPM: function isPM(input) {
            return /^(ցերեկվա|երեկոյան)$/.test(input);
          },
          meridiem: function meridiem(hour) {
            if (hour < 4) {
              return 'գիշերվա';
            } else if (hour < 12) {
              return 'առավոտվա';
            } else if (hour < 17) {
              return 'ցերեկվա';
            } else {
              return 'երեկոյան';
            }
          },
          dayOfMonthOrdinalParse: /\d{1,2}|\d{1,2}-(ին|րդ)/,
          ordinal: function ordinal(number, period) {
            switch (period) {
              case 'DDD':
              case 'w':
              case 'W':
              case 'DDDo':
                if (number === 1) {
                  return number + '-ին';
                }

                return number + '-րդ';

              default:
                return number;
            }
          },
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 7th is the first week of the year.

          }
        });
        return hyAm;
      });
      /***/

    },

    /***/
    "1xZ4": function xZ4(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Catalan [ca]
      //! author : Juan G. Hurtado : https://github.com/juanghurtado
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var ca = moment.defineLocale('ca', {
          months: {
            standalone: 'gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre'.split('_'),
            format: "de gener_de febrer_de març_d'abril_de maig_de juny_de juliol_d'agost_de setembre_d'octubre_de novembre_de desembre".split('_'),
            isFormat: /D[oD]?(\s)+MMMM/
          },
          monthsShort: 'gen._febr._març_abr._maig_juny_jul._ag._set._oct._nov._des.'.split('_'),
          monthsParseExact: true,
          weekdays: 'diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte'.split('_'),
          weekdaysShort: 'dg._dl._dt._dc._dj._dv._ds.'.split('_'),
          weekdaysMin: 'dg_dl_dt_dc_dj_dv_ds'.split('_'),
          weekdaysParseExact: true,
          longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM [de] YYYY',
            ll: 'D MMM YYYY',
            LLL: 'D MMMM [de] YYYY [a les] H:mm',
            lll: 'D MMM YYYY, H:mm',
            LLLL: 'dddd D MMMM [de] YYYY [a les] H:mm',
            llll: 'ddd D MMM YYYY, H:mm'
          },
          calendar: {
            sameDay: function sameDay() {
              return '[avui a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';
            },
            nextDay: function nextDay() {
              return '[demà a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';
            },
            nextWeek: function nextWeek() {
              return 'dddd [a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';
            },
            lastDay: function lastDay() {
              return '[ahir a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';
            },
            lastWeek: function lastWeek() {
              return '[el] dddd [passat a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';
            },
            sameElse: 'L'
          },
          relativeTime: {
            future: "d'aquí %s",
            past: 'fa %s',
            s: 'uns segons',
            ss: '%d segons',
            m: 'un minut',
            mm: '%d minuts',
            h: 'una hora',
            hh: '%d hores',
            d: 'un dia',
            dd: '%d dies',
            M: 'un mes',
            MM: '%d mesos',
            y: 'un any',
            yy: '%d anys'
          },
          dayOfMonthOrdinalParse: /\d{1,2}(r|n|t|è|a)/,
          ordinal: function ordinal(number, period) {
            var output = number === 1 ? 'r' : number === 2 ? 'n' : number === 3 ? 'r' : number === 4 ? 't' : 'è';

            if (period === 'w' || period === 'W') {
              output = 'a';
            }

            return number + output;
          },
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.

          }
        });
        return ca;
      });
      /***/

    },

    /***/
    "2fjn": function fjn(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : French (Canada) [fr-ca]
      //! author : Jonathan Abourbih : https://github.com/jonbca
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var frCa = moment.defineLocale('fr-ca', {
          months: 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
          monthsShort: 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
          monthsParseExact: true,
          weekdays: 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
          weekdaysShort: 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
          weekdaysMin: 'di_lu_ma_me_je_ve_sa'.split('_'),
          weekdaysParseExact: true,
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY-MM-DD',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
          },
          calendar: {
            sameDay: '[Aujourd’hui à] LT',
            nextDay: '[Demain à] LT',
            nextWeek: 'dddd [à] LT',
            lastDay: '[Hier à] LT',
            lastWeek: 'dddd [dernier à] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: 'dans %s',
            past: 'il y a %s',
            s: 'quelques secondes',
            ss: '%d secondes',
            m: 'une minute',
            mm: '%d minutes',
            h: 'une heure',
            hh: '%d heures',
            d: 'un jour',
            dd: '%d jours',
            M: 'un mois',
            MM: '%d mois',
            y: 'un an',
            yy: '%d ans'
          },
          dayOfMonthOrdinalParse: /\d{1,2}(er|e)/,
          ordinal: function ordinal(number, period) {
            switch (period) {
              // Words with masculine grammatical gender: mois, trimestre, jour
              default:
              case 'M':
              case 'Q':
              case 'D':
              case 'DDD':
              case 'd':
                return number + (number === 1 ? 'er' : 'e');
              // Words with feminine grammatical gender: semaine

              case 'w':
              case 'W':
                return number + (number === 1 ? 're' : 'e');
            }
          }
        });
        return frCa;
      });
      /***/

    },

    /***/
    "2ykv": function ykv(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Dutch (Belgium) [nl-be]
      //! author : Joris Röling : https://github.com/jorisroling
      //! author : Jacob Middag : https://github.com/middagj
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var monthsShortWithDots = 'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_'),
            monthsShortWithoutDots = 'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_'),
            monthsParse = [/^jan/i, /^feb/i, /^maart|mrt.?$/i, /^apr/i, /^mei$/i, /^jun[i.]?$/i, /^jul[i.]?$/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i],
            monthsRegex = /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;
        var nlBe = moment.defineLocale('nl-be', {
          months: 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split('_'),
          monthsShort: function monthsShort(m, format) {
            if (!m) {
              return monthsShortWithDots;
            } else if (/-MMM-/.test(format)) {
              return monthsShortWithoutDots[m.month()];
            } else {
              return monthsShortWithDots[m.month()];
            }
          },
          monthsRegex: monthsRegex,
          monthsShortRegex: monthsRegex,
          monthsStrictRegex: /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,
          monthsShortStrictRegex: /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,
          monthsParse: monthsParse,
          longMonthsParse: monthsParse,
          shortMonthsParse: monthsParse,
          weekdays: 'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),
          weekdaysShort: 'zo._ma._di._wo._do._vr._za.'.split('_'),
          weekdaysMin: 'zo_ma_di_wo_do_vr_za'.split('_'),
          weekdaysParseExact: true,
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
          },
          calendar: {
            sameDay: '[vandaag om] LT',
            nextDay: '[morgen om] LT',
            nextWeek: 'dddd [om] LT',
            lastDay: '[gisteren om] LT',
            lastWeek: '[afgelopen] dddd [om] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: 'over %s',
            past: '%s geleden',
            s: 'een paar seconden',
            ss: '%d seconden',
            m: 'één minuut',
            mm: '%d minuten',
            h: 'één uur',
            hh: '%d uur',
            d: 'één dag',
            dd: '%d dagen',
            M: 'één maand',
            MM: '%d maanden',
            y: 'één jaar',
            yy: '%d jaar'
          },
          dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
          ordinal: function ordinal(number) {
            return number + (number === 1 || number === 8 || number >= 20 ? 'ste' : 'de');
          },
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.

          }
        });
        return nlBe;
      });
      /***/

    },

    /***/
    "3E1r": function E1r(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Hindi [hi]
      //! author : Mayank Singhal : https://github.com/mayanksinghal
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var symbolMap = {
          1: '१',
          2: '२',
          3: '३',
          4: '४',
          5: '५',
          6: '६',
          7: '७',
          8: '८',
          9: '९',
          0: '०'
        },
            numberMap = {
          '१': '1',
          '२': '2',
          '३': '3',
          '४': '4',
          '५': '5',
          '६': '6',
          '७': '7',
          '८': '8',
          '९': '9',
          '०': '0'
        },
            monthsParse = [/^जन/i, /^फ़र|फर/i, /^मार्च/i, /^अप्रै/i, /^मई/i, /^जून/i, /^जुल/i, /^अग/i, /^सितं|सित/i, /^अक्टू/i, /^नव|नवं/i, /^दिसं|दिस/i],
            shortMonthsParse = [/^जन/i, /^फ़र/i, /^मार्च/i, /^अप्रै/i, /^मई/i, /^जून/i, /^जुल/i, /^अग/i, /^सित/i, /^अक्टू/i, /^नव/i, /^दिस/i];
        var hi = moment.defineLocale('hi', {
          months: {
            format: 'जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर'.split('_'),
            standalone: 'जनवरी_फरवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितंबर_अक्टूबर_नवंबर_दिसंबर'.split('_')
          },
          monthsShort: 'जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.'.split('_'),
          weekdays: 'रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
          weekdaysShort: 'रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि'.split('_'),
          weekdaysMin: 'र_सो_मं_बु_गु_शु_श'.split('_'),
          longDateFormat: {
            LT: 'A h:mm बजे',
            LTS: 'A h:mm:ss बजे',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm बजे',
            LLLL: 'dddd, D MMMM YYYY, A h:mm बजे'
          },
          monthsParse: monthsParse,
          longMonthsParse: monthsParse,
          shortMonthsParse: shortMonthsParse,
          monthsRegex: /^(जनवरी|जन\.?|फ़रवरी|फरवरी|फ़र\.?|मार्च?|अप्रैल|अप्रै\.?|मई?|जून?|जुलाई|जुल\.?|अगस्त|अग\.?|सितम्बर|सितंबर|सित\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर|नव\.?|दिसम्बर|दिसंबर|दिस\.?)/i,
          monthsShortRegex: /^(जनवरी|जन\.?|फ़रवरी|फरवरी|फ़र\.?|मार्च?|अप्रैल|अप्रै\.?|मई?|जून?|जुलाई|जुल\.?|अगस्त|अग\.?|सितम्बर|सितंबर|सित\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर|नव\.?|दिसम्बर|दिसंबर|दिस\.?)/i,
          monthsStrictRegex: /^(जनवरी?|फ़रवरी|फरवरी?|मार्च?|अप्रैल?|मई?|जून?|जुलाई?|अगस्त?|सितम्बर|सितंबर|सित?\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर?|दिसम्बर|दिसंबर?)/i,
          monthsShortStrictRegex: /^(जन\.?|फ़र\.?|मार्च?|अप्रै\.?|मई?|जून?|जुल\.?|अग\.?|सित\.?|अक्टू\.?|नव\.?|दिस\.?)/i,
          calendar: {
            sameDay: '[आज] LT',
            nextDay: '[कल] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[कल] LT',
            lastWeek: '[पिछले] dddd, LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: '%s में',
            past: '%s पहले',
            s: 'कुछ ही क्षण',
            ss: '%d सेकंड',
            m: 'एक मिनट',
            mm: '%d मिनट',
            h: 'एक घंटा',
            hh: '%d घंटे',
            d: 'एक दिन',
            dd: '%d दिन',
            M: 'एक महीने',
            MM: '%d महीने',
            y: 'एक वर्ष',
            yy: '%d वर्ष'
          },
          preparse: function preparse(string) {
            return string.replace(/[१२३४५६७८९०]/g, function (match) {
              return numberMap[match];
            });
          },
          postformat: function postformat(string) {
            return string.replace(/\d/g, function (match) {
              return symbolMap[match];
            });
          },
          // Hindi notation for meridiems are quite fuzzy in practice. While there exists
          // a rigid notion of a 'Pahar' it is not used as rigidly in modern Hindi.
          meridiemParse: /रात|सुबह|दोपहर|शाम/,
          meridiemHour: function meridiemHour(hour, meridiem) {
            if (hour === 12) {
              hour = 0;
            }

            if (meridiem === 'रात') {
              return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'सुबह') {
              return hour;
            } else if (meridiem === 'दोपहर') {
              return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'शाम') {
              return hour + 12;
            }
          },
          meridiem: function meridiem(hour, minute, isLower) {
            if (hour < 4) {
              return 'रात';
            } else if (hour < 10) {
              return 'सुबह';
            } else if (hour < 17) {
              return 'दोपहर';
            } else if (hour < 20) {
              return 'शाम';
            } else {
              return 'रात';
            }
          },
          week: {
            dow: 0,
            // Sunday is the first day of the week.
            doy: 6 // The week that contains Jan 6th is the first week of the year.

          }
        });
        return hi;
      });
      /***/

    },

    /***/
    "4MV3": function MV3(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Gujarati [gu]
      //! author : Kaushik Thanki : https://github.com/Kaushik1987
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var symbolMap = {
          1: '૧',
          2: '૨',
          3: '૩',
          4: '૪',
          5: '૫',
          6: '૬',
          7: '૭',
          8: '૮',
          9: '૯',
          0: '૦'
        },
            numberMap = {
          '૧': '1',
          '૨': '2',
          '૩': '3',
          '૪': '4',
          '૫': '5',
          '૬': '6',
          '૭': '7',
          '૮': '8',
          '૯': '9',
          '૦': '0'
        };
        var gu = moment.defineLocale('gu', {
          months: 'જાન્યુઆરી_ફેબ્રુઆરી_માર્ચ_એપ્રિલ_મે_જૂન_જુલાઈ_ઑગસ્ટ_સપ્ટેમ્બર_ઑક્ટ્બર_નવેમ્બર_ડિસેમ્બર'.split('_'),
          monthsShort: 'જાન્યુ._ફેબ્રુ._માર્ચ_એપ્રિ._મે_જૂન_જુલા._ઑગ._સપ્ટે._ઑક્ટ્._નવે._ડિસે.'.split('_'),
          monthsParseExact: true,
          weekdays: 'રવિવાર_સોમવાર_મંગળવાર_બુધ્વાર_ગુરુવાર_શુક્રવાર_શનિવાર'.split('_'),
          weekdaysShort: 'રવિ_સોમ_મંગળ_બુધ્_ગુરુ_શુક્ર_શનિ'.split('_'),
          weekdaysMin: 'ર_સો_મં_બુ_ગુ_શુ_શ'.split('_'),
          longDateFormat: {
            LT: 'A h:mm વાગ્યે',
            LTS: 'A h:mm:ss વાગ્યે',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm વાગ્યે',
            LLLL: 'dddd, D MMMM YYYY, A h:mm વાગ્યે'
          },
          calendar: {
            sameDay: '[આજ] LT',
            nextDay: '[કાલે] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[ગઇકાલે] LT',
            lastWeek: '[પાછલા] dddd, LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: '%s મા',
            past: '%s પહેલા',
            s: 'અમુક પળો',
            ss: '%d સેકંડ',
            m: 'એક મિનિટ',
            mm: '%d મિનિટ',
            h: 'એક કલાક',
            hh: '%d કલાક',
            d: 'એક દિવસ',
            dd: '%d દિવસ',
            M: 'એક મહિનો',
            MM: '%d મહિનો',
            y: 'એક વર્ષ',
            yy: '%d વર્ષ'
          },
          preparse: function preparse(string) {
            return string.replace(/[૧૨૩૪૫૬૭૮૯૦]/g, function (match) {
              return numberMap[match];
            });
          },
          postformat: function postformat(string) {
            return string.replace(/\d/g, function (match) {
              return symbolMap[match];
            });
          },
          // Gujarati notation for meridiems are quite fuzzy in practice. While there exists
          // a rigid notion of a 'Pahar' it is not used as rigidly in modern Gujarati.
          meridiemParse: /રાત|બપોર|સવાર|સાંજ/,
          meridiemHour: function meridiemHour(hour, meridiem) {
            if (hour === 12) {
              hour = 0;
            }

            if (meridiem === 'રાત') {
              return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'સવાર') {
              return hour;
            } else if (meridiem === 'બપોર') {
              return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'સાંજ') {
              return hour + 12;
            }
          },
          meridiem: function meridiem(hour, minute, isLower) {
            if (hour < 4) {
              return 'રાત';
            } else if (hour < 10) {
              return 'સવાર';
            } else if (hour < 17) {
              return 'બપોર';
            } else if (hour < 20) {
              return 'સાંજ';
            } else {
              return 'રાત';
            }
          },
          week: {
            dow: 0,
            // Sunday is the first day of the week.
            doy: 6 // The week that contains Jan 6th is the first week of the year.

          }
        });
        return gu;
      });
      /***/

    },

    /***/
    "4dOw": function dOw(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : English (Ireland) [en-ie]
      //! author : Chris Cartlidge : https://github.com/chriscartlidge
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var enIe = moment.defineLocale('en-ie', {
          months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
          monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
          weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
          weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
          weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
          },
          calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            ss: '%d seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years'
          },
          dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
          ordinal: function ordinal(number) {
            var b = number % 10,
                output = ~~(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
            return number + output;
          },
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.

          }
        });
        return enIe;
      });
      /***/

    },

    /***/
    "5U8x": function U8x(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "InventarioComponent", function () {
        return InventarioComponent;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _raw_loader_inventario_component_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! raw-loader!./inventario.component.html */
      "m9DD");
      /* harmony import */


      var _inventario_component_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./inventario.component.scss */
      "eTr1");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var _angular_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/forms */
      "3Pt+");
      /* harmony import */


      var _angular_material_table__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @angular/material/table */
      "+0xr");
      /* harmony import */


      var _angular_material_paginator__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! @angular/material/paginator */
      "M9IT");
      /* harmony import */


      var _angular_router__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! @angular/router */
      "tyNb");
      /* harmony import */


      var _angular_material_sort__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! @angular/material/sort */
      "Dh3D");
      /* harmony import */


      var _environments_environment__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! ../../../../environments/environment */
      "AytR");
      /* harmony import */


      var _shared_services_global_services__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
      /*! ../../../shared/services/global.services */
      "Zk1H");
      /* harmony import */


      var file_saver__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
      /*! file-saver */
      "Iab2");
      /* harmony import */


      var file_saver__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(file_saver__WEBPACK_IMPORTED_MODULE_11__);

      var InventarioComponent = /*#__PURE__*/function () {
        function InventarioComponent(fb, router, route, globalServices) {
          _classCallCheck(this, InventarioComponent);

          this.fb = fb;
          this.router = router;
          this.route = route;
          this.globalServices = globalServices;
          this.fileName = '';
          this.usuarioList = [{
            value: 1,
            desc: 'Doctora'
          }, {
            value: 2,
            desc: 'Operadora'
          }];
          this.displayedColumns = ['name', 'prov', 'quantity', 'user', 'price', 'actions'];
          this.filters = fb.group({
            name: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"](),
            lastName: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"](),
            identification: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"](),
            initialDate: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"](),
            finalDate: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"](),
            user: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"](),
            userName: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"]()
          });
        }

        _createClass(InventarioComponent, [{
          key: "ngOnInit",
          value: function ngOnInit() {}
        }, {
          key: "search",
          value: function search() {
            var _this13 = this;

            var data = Object.assign({}, this.filters.value);
            this.globalServices.httpServicesResponse(data, _environments_environment__WEBPACK_IMPORTED_MODULE_9__["environment"].Url + '/depilarte/searchProducts').subscribe(function (res) {
              console.log(res.resultList);
              _this13.dataSource = new _angular_material_table__WEBPACK_IMPORTED_MODULE_5__["MatTableDataSource"](res.resultList);
              _this13.dataSource.paginator = _this13.paginator;
              _this13.dataSource.sort = _this13.sort;
            });
          }
        }, {
          key: "goEdit",
          value: function goEdit(id) {
            this.router.navigate(['/registrar-producto'], {
              relativeTo: this.route,
              queryParams: {
                id: id
              }
            });
          }
        }, {
          key: "download",
          value: function download() {
            var _this14 = this;

            var data = Object.assign({}, this.filters.value);
            this.globalServices.httpServicesResponse(data, _environments_environment__WEBPACK_IMPORTED_MODULE_9__["environment"].Url + 'depilarte/generateProducts').subscribe(function (data) {
              var result = data;

              if (result.type == 'error') {
                console.log('error');
              } else {
                var file = result.resultEncodedString;
                var sliceSize = 512;
                var byteCharacters = atob(file);
                var byteArrays = [];

                for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {
                  var slice = byteCharacters.slice(offset, offset + sliceSize);
                  var byteNumbers = new Array(slice.length);

                  for (var i = 0; i < slice.length; i++) {
                    byteNumbers[i] = slice.charCodeAt(i);
                  }

                  var byteArray = new Uint8Array(byteNumbers);
                  byteArrays.push(byteArray);
                }

                var blob = new Blob(byteArrays, {
                  type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
                });
                Object(file_saver__WEBPACK_IMPORTED_MODULE_11__["saveAs"])(blob, _this14.fileName);
              }
            }, function (error) {//error
            });
          }
        }]);

        return InventarioComponent;
      }();

      InventarioComponent.ctorParameters = function () {
        return [{
          type: _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormBuilder"]
        }, {
          type: _angular_router__WEBPACK_IMPORTED_MODULE_7__["Router"]
        }, {
          type: _angular_router__WEBPACK_IMPORTED_MODULE_7__["ActivatedRoute"]
        }, {
          type: _shared_services_global_services__WEBPACK_IMPORTED_MODULE_10__["GlobalServices"]
        }];
      };

      InventarioComponent.propDecorators = {
        paginator: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewChild"],
          args: [_angular_material_paginator__WEBPACK_IMPORTED_MODULE_6__["MatPaginator"]]
        }],
        sort: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewChild"],
          args: [_angular_material_sort__WEBPACK_IMPORTED_MODULE_8__["MatSort"]]
        }]
      };
      InventarioComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"])({
        selector: 'inventario',
        template: _raw_loader_inventario_component_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        styles: [_inventario_component_scss__WEBPACK_IMPORTED_MODULE_2__["default"]]
      }), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormBuilder"], _angular_router__WEBPACK_IMPORTED_MODULE_7__["Router"], _angular_router__WEBPACK_IMPORTED_MODULE_7__["ActivatedRoute"], _shared_services_global_services__WEBPACK_IMPORTED_MODULE_10__["GlobalServices"]])], InventarioComponent);
      /***/
    },

    /***/
    "6+QB": function QB(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Malay [ms]
      //! author : Weldan Jamili : https://github.com/weldan
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var ms = moment.defineLocale('ms', {
          months: 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split('_'),
          monthsShort: 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
          weekdays: 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
          weekdaysShort: 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
          weekdaysMin: 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
          longDateFormat: {
            LT: 'HH.mm',
            LTS: 'HH.mm.ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY [pukul] HH.mm',
            LLLL: 'dddd, D MMMM YYYY [pukul] HH.mm'
          },
          meridiemParse: /pagi|tengahari|petang|malam/,
          meridiemHour: function meridiemHour(hour, meridiem) {
            if (hour === 12) {
              hour = 0;
            }

            if (meridiem === 'pagi') {
              return hour;
            } else if (meridiem === 'tengahari') {
              return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'petang' || meridiem === 'malam') {
              return hour + 12;
            }
          },
          meridiem: function meridiem(hours, minutes, isLower) {
            if (hours < 11) {
              return 'pagi';
            } else if (hours < 15) {
              return 'tengahari';
            } else if (hours < 19) {
              return 'petang';
            } else {
              return 'malam';
            }
          },
          calendar: {
            sameDay: '[Hari ini pukul] LT',
            nextDay: '[Esok pukul] LT',
            nextWeek: 'dddd [pukul] LT',
            lastDay: '[Kelmarin pukul] LT',
            lastWeek: 'dddd [lepas pukul] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: 'dalam %s',
            past: '%s yang lepas',
            s: 'beberapa saat',
            ss: '%d saat',
            m: 'seminit',
            mm: '%d minit',
            h: 'sejam',
            hh: '%d jam',
            d: 'sehari',
            dd: '%d hari',
            M: 'sebulan',
            MM: '%d bulan',
            y: 'setahun',
            yy: '%d tahun'
          },
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 7th is the first week of the year.

          }
        });
        return ms;
      });
      /***/

    },

    /***/
    "6B0Y": function B0Y(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Cambodian [km]
      //! author : Kruy Vanna : https://github.com/kruyvanna
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var symbolMap = {
          1: '១',
          2: '២',
          3: '៣',
          4: '៤',
          5: '៥',
          6: '៦',
          7: '៧',
          8: '៨',
          9: '៩',
          0: '០'
        },
            numberMap = {
          '១': '1',
          '២': '2',
          '៣': '3',
          '៤': '4',
          '៥': '5',
          '៦': '6',
          '៧': '7',
          '៨': '8',
          '៩': '9',
          '០': '0'
        };
        var km = moment.defineLocale('km', {
          months: 'មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split('_'),
          monthsShort: 'មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split('_'),
          weekdays: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
          weekdaysShort: 'អា_ច_អ_ព_ព្រ_សុ_ស'.split('_'),
          weekdaysMin: 'អា_ច_អ_ព_ព្រ_សុ_ស'.split('_'),
          weekdaysParseExact: true,
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
          },
          meridiemParse: /ព្រឹក|ល្ងាច/,
          isPM: function isPM(input) {
            return input === 'ល្ងាច';
          },
          meridiem: function meridiem(hour, minute, isLower) {
            if (hour < 12) {
              return 'ព្រឹក';
            } else {
              return 'ល្ងាច';
            }
          },
          calendar: {
            sameDay: '[ថ្ងៃនេះ ម៉ោង] LT',
            nextDay: '[ស្អែក ម៉ោង] LT',
            nextWeek: 'dddd [ម៉ោង] LT',
            lastDay: '[ម្សិលមិញ ម៉ោង] LT',
            lastWeek: 'dddd [សប្តាហ៍មុន] [ម៉ោង] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: '%sទៀត',
            past: '%sមុន',
            s: 'ប៉ុន្មានវិនាទី',
            ss: '%d វិនាទី',
            m: 'មួយនាទី',
            mm: '%d នាទី',
            h: 'មួយម៉ោង',
            hh: '%d ម៉ោង',
            d: 'មួយថ្ងៃ',
            dd: '%d ថ្ងៃ',
            M: 'មួយខែ',
            MM: '%d ខែ',
            y: 'មួយឆ្នាំ',
            yy: '%d ឆ្នាំ'
          },
          dayOfMonthOrdinalParse: /ទី\d{1,2}/,
          ordinal: 'ទី%d',
          preparse: function preparse(string) {
            return string.replace(/[១២៣៤៥៦៧៨៩០]/g, function (match) {
              return numberMap[match];
            });
          },
          postformat: function postformat(string) {
            return string.replace(/\d/g, function (match) {
              return symbolMap[match];
            });
          },
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.

          }
        });
        return km;
      });
      /***/

    },

    /***/
    "7BjC": function BjC(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Estonian [et]
      //! author : Henry Kehlmann : https://github.com/madhenry
      //! improvements : Illimar Tambek : https://github.com/ragulka
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        function processRelativeTime(number, withoutSuffix, key, isFuture) {
          var format = {
            s: ['mõne sekundi', 'mõni sekund', 'paar sekundit'],
            ss: [number + 'sekundi', number + 'sekundit'],
            m: ['ühe minuti', 'üks minut'],
            mm: [number + ' minuti', number + ' minutit'],
            h: ['ühe tunni', 'tund aega', 'üks tund'],
            hh: [number + ' tunni', number + ' tundi'],
            d: ['ühe päeva', 'üks päev'],
            M: ['kuu aja', 'kuu aega', 'üks kuu'],
            MM: [number + ' kuu', number + ' kuud'],
            y: ['ühe aasta', 'aasta', 'üks aasta'],
            yy: [number + ' aasta', number + ' aastat']
          };

          if (withoutSuffix) {
            return format[key][2] ? format[key][2] : format[key][1];
          }

          return isFuture ? format[key][0] : format[key][1];
        }

        var et = moment.defineLocale('et', {
          months: 'jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember'.split('_'),
          monthsShort: 'jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets'.split('_'),
          weekdays: 'pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev'.split('_'),
          weekdaysShort: 'P_E_T_K_N_R_L'.split('_'),
          weekdaysMin: 'P_E_T_K_N_R_L'.split('_'),
          longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd, D. MMMM YYYY H:mm'
          },
          calendar: {
            sameDay: '[Täna,] LT',
            nextDay: '[Homme,] LT',
            nextWeek: '[Järgmine] dddd LT',
            lastDay: '[Eile,] LT',
            lastWeek: '[Eelmine] dddd LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: '%s pärast',
            past: '%s tagasi',
            s: processRelativeTime,
            ss: processRelativeTime,
            m: processRelativeTime,
            mm: processRelativeTime,
            h: processRelativeTime,
            hh: processRelativeTime,
            d: processRelativeTime,
            dd: '%d päeva',
            M: processRelativeTime,
            MM: processRelativeTime,
            y: processRelativeTime,
            yy: processRelativeTime
          },
          dayOfMonthOrdinalParse: /\d{1,2}\./,
          ordinal: '%d.',
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.

          }
        });
        return et;
      });
      /***/

    },

    /***/
    "7C5Q": function C5Q(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : English (India) [en-in]
      //! author : Jatin Agrawal : https://github.com/jatinag22
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var enIn = moment.defineLocale('en-in', {
          months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
          monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
          weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
          weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
          weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
          longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY h:mm A',
            LLLL: 'dddd, D MMMM YYYY h:mm A'
          },
          calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            ss: '%d seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years'
          },
          dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
          ordinal: function ordinal(number) {
            var b = number % 10,
                output = ~~(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
            return number + output;
          },
          week: {
            dow: 0,
            // Sunday is the first day of the week.
            doy: 6 // The week that contains Jan 1st is the first week of the year.

          }
        });
        return enIn;
      });
      /***/

    },

    /***/
    "7aV9": function aV9(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Sinhalese [si]
      //! author : Sampath Sitinamaluwa : https://github.com/sampathsris
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        /*jshint -W100*/

        var si = moment.defineLocale('si', {
          months: 'ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්'.split('_'),
          monthsShort: 'ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ'.split('_'),
          weekdays: 'ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා'.split('_'),
          weekdaysShort: 'ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන'.split('_'),
          weekdaysMin: 'ඉ_ස_අ_බ_බ්‍ර_සි_සෙ'.split('_'),
          weekdaysParseExact: true,
          longDateFormat: {
            LT: 'a h:mm',
            LTS: 'a h:mm:ss',
            L: 'YYYY/MM/DD',
            LL: 'YYYY MMMM D',
            LLL: 'YYYY MMMM D, a h:mm',
            LLLL: 'YYYY MMMM D [වැනි] dddd, a h:mm:ss'
          },
          calendar: {
            sameDay: '[අද] LT[ට]',
            nextDay: '[හෙට] LT[ට]',
            nextWeek: 'dddd LT[ට]',
            lastDay: '[ඊයේ] LT[ට]',
            lastWeek: '[පසුගිය] dddd LT[ට]',
            sameElse: 'L'
          },
          relativeTime: {
            future: '%sකින්',
            past: '%sකට පෙර',
            s: 'තත්පර කිහිපය',
            ss: 'තත්පර %d',
            m: 'මිනිත්තුව',
            mm: 'මිනිත්තු %d',
            h: 'පැය',
            hh: 'පැය %d',
            d: 'දිනය',
            dd: 'දින %d',
            M: 'මාසය',
            MM: 'මාස %d',
            y: 'වසර',
            yy: 'වසර %d'
          },
          dayOfMonthOrdinalParse: /\d{1,2} වැනි/,
          ordinal: function ordinal(number) {
            return number + ' වැනි';
          },
          meridiemParse: /පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,
          isPM: function isPM(input) {
            return input === 'ප.ව.' || input === 'පස් වරු';
          },
          meridiem: function meridiem(hours, minutes, isLower) {
            if (hours > 11) {
              return isLower ? 'ප.ව.' : 'පස් වරු';
            } else {
              return isLower ? 'පෙ.ව.' : 'පෙර වරු';
            }
          }
        });
        return si;
      });
      /***/

    },

    /***/
    "8/+R": function R(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Punjabi (India) [pa-in]
      //! author : Harpreet Singh : https://github.com/harpreetkhalsagtbit
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var symbolMap = {
          1: '੧',
          2: '੨',
          3: '੩',
          4: '੪',
          5: '੫',
          6: '੬',
          7: '੭',
          8: '੮',
          9: '੯',
          0: '੦'
        },
            numberMap = {
          '੧': '1',
          '੨': '2',
          '੩': '3',
          '੪': '4',
          '੫': '5',
          '੬': '6',
          '੭': '7',
          '੮': '8',
          '੯': '9',
          '੦': '0'
        };
        var paIn = moment.defineLocale('pa-in', {
          // There are months name as per Nanakshahi Calendar but they are not used as rigidly in modern Punjabi.
          months: 'ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ'.split('_'),
          monthsShort: 'ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ'.split('_'),
          weekdays: 'ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ'.split('_'),
          weekdaysShort: 'ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ'.split('_'),
          weekdaysMin: 'ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ'.split('_'),
          longDateFormat: {
            LT: 'A h:mm ਵਜੇ',
            LTS: 'A h:mm:ss ਵਜੇ',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm ਵਜੇ',
            LLLL: 'dddd, D MMMM YYYY, A h:mm ਵਜੇ'
          },
          calendar: {
            sameDay: '[ਅਜ] LT',
            nextDay: '[ਕਲ] LT',
            nextWeek: '[ਅਗਲਾ] dddd, LT',
            lastDay: '[ਕਲ] LT',
            lastWeek: '[ਪਿਛਲੇ] dddd, LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: '%s ਵਿੱਚ',
            past: '%s ਪਿਛਲੇ',
            s: 'ਕੁਝ ਸਕਿੰਟ',
            ss: '%d ਸਕਿੰਟ',
            m: 'ਇਕ ਮਿੰਟ',
            mm: '%d ਮਿੰਟ',
            h: 'ਇੱਕ ਘੰਟਾ',
            hh: '%d ਘੰਟੇ',
            d: 'ਇੱਕ ਦਿਨ',
            dd: '%d ਦਿਨ',
            M: 'ਇੱਕ ਮਹੀਨਾ',
            MM: '%d ਮਹੀਨੇ',
            y: 'ਇੱਕ ਸਾਲ',
            yy: '%d ਸਾਲ'
          },
          preparse: function preparse(string) {
            return string.replace(/[੧੨੩੪੫੬੭੮੯੦]/g, function (match) {
              return numberMap[match];
            });
          },
          postformat: function postformat(string) {
            return string.replace(/\d/g, function (match) {
              return symbolMap[match];
            });
          },
          // Punjabi notation for meridiems are quite fuzzy in practice. While there exists
          // a rigid notion of a 'Pahar' it is not used as rigidly in modern Punjabi.
          meridiemParse: /ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,
          meridiemHour: function meridiemHour(hour, meridiem) {
            if (hour === 12) {
              hour = 0;
            }

            if (meridiem === 'ਰਾਤ') {
              return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'ਸਵੇਰ') {
              return hour;
            } else if (meridiem === 'ਦੁਪਹਿਰ') {
              return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'ਸ਼ਾਮ') {
              return hour + 12;
            }
          },
          meridiem: function meridiem(hour, minute, isLower) {
            if (hour < 4) {
              return 'ਰਾਤ';
            } else if (hour < 10) {
              return 'ਸਵੇਰ';
            } else if (hour < 17) {
              return 'ਦੁਪਹਿਰ';
            } else if (hour < 20) {
              return 'ਸ਼ਾਮ';
            } else {
              return 'ਰਾਤ';
            }
          },
          week: {
            dow: 0,
            // Sunday is the first day of the week.
            doy: 6 // The week that contains Jan 6th is the first week of the year.

          }
        });
        return paIn;
      });
      /***/

    },

    /***/
    "8G6i": function G6i(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony default export */


      __webpack_exports__["default"] = "\r\n<div class=\"row\">\r\n  <div class=\"col-md-12\">\r\n    <div class=\"card \">\r\n      <div class=\"card-header \">\r\n        Google Maps\r\n      </div>\r\n      <div class=\"card-body \">\r\n        <div id=\"map\" class=\"map\"></div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n";
      /***/
    },

    /***/
    "8mBD": function mBD(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Portuguese [pt]
      //! author : Jefferson : https://github.com/jalex79
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var pt = moment.defineLocale('pt', {
          months: 'janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro'.split('_'),
          monthsShort: 'jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez'.split('_'),
          weekdays: 'Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado'.split('_'),
          weekdaysShort: 'Dom_Seg_Ter_Qua_Qui_Sex_Sáb'.split('_'),
          weekdaysMin: 'Do_2ª_3ª_4ª_5ª_6ª_Sá'.split('_'),
          weekdaysParseExact: true,
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D [de] MMMM [de] YYYY',
            LLL: 'D [de] MMMM [de] YYYY HH:mm',
            LLLL: 'dddd, D [de] MMMM [de] YYYY HH:mm'
          },
          calendar: {
            sameDay: '[Hoje às] LT',
            nextDay: '[Amanhã às] LT',
            nextWeek: 'dddd [às] LT',
            lastDay: '[Ontem às] LT',
            lastWeek: function lastWeek() {
              return this.day() === 0 || this.day() === 6 ? '[Último] dddd [às] LT' // Saturday + Sunday
              : '[Última] dddd [às] LT'; // Monday - Friday
            },
            sameElse: 'L'
          },
          relativeTime: {
            future: 'em %s',
            past: 'há %s',
            s: 'segundos',
            ss: '%d segundos',
            m: 'um minuto',
            mm: '%d minutos',
            h: 'uma hora',
            hh: '%d horas',
            d: 'um dia',
            dd: '%d dias',
            w: 'uma semana',
            ww: '%d semanas',
            M: 'um mês',
            MM: '%d meses',
            y: 'um ano',
            yy: '%d anos'
          },
          dayOfMonthOrdinalParse: /\d{1,2}º/,
          ordinal: '%dº',
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.

          }
        });
        return pt;
      });
      /***/

    },

    /***/
    "9BCX": function BCX(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "EmpleadoHistorialComponent", function () {
        return EmpleadoHistorialComponent;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _raw_loader_empleado_historial_component_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! raw-loader!./empleado-historial.component.html */
      "LWCY");
      /* harmony import */


      var _empleado_historial_component_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./empleado-historial.component.scss */
      "9m/7");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var _angular_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/forms */
      "3Pt+");
      /* harmony import */


      var _angular_material_table__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @angular/material/table */
      "+0xr");
      /* harmony import */


      var _angular_material_paginator__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! @angular/material/paginator */
      "M9IT");
      /* harmony import */


      var _angular_router__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! @angular/router */
      "tyNb");
      /* harmony import */


      var _angular_material_sort__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! @angular/material/sort */
      "Dh3D");
      /* harmony import */


      var _environments_environment__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! ../../../../environments/environment */
      "AytR");
      /* harmony import */


      var _shared_services_global_services__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
      /*! ../../../shared/services/global.services */
      "Zk1H");
      /* harmony import */


      var file_saver__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
      /*! file-saver */
      "Iab2");
      /* harmony import */


      var file_saver__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(file_saver__WEBPACK_IMPORTED_MODULE_11__);

      var EmpleadoHistorialComponent = /*#__PURE__*/function () {
        function EmpleadoHistorialComponent(fb, router, route, globalServices) {
          _classCallCheck(this, EmpleadoHistorialComponent);

          this.fb = fb;
          this.router = router;
          this.route = route;
          this.globalServices = globalServices;
          this.fileName = '';
          this.treatmentTypeList = [];
          this.treatmentZoneList = [];
          this.displayedColumns = ['dateA', 'name', 'lastName', 'identification', 'age', 'email', 'phone', 'birthday', 'address', 'cargo', 'actions'];
          this.filters = fb.group({
            name: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"](),
            lastName: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"](),
            identification: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"](),
            age: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"](),
            phone: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"](),
            email: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"](),
            birthday: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"](),
            address: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"](),
            cargo: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"](),
            initialDate: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"](),
            finalDate: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"]()
          });
        }

        _createClass(EmpleadoHistorialComponent, [{
          key: "ngOnInit",
          value: function ngOnInit() {}
        }, {
          key: "search",
          value: function search() {
            var _this15 = this;

            var data = Object.assign({}, this.filters.value);
            this.globalServices.httpServicesResponse(data, _environments_environment__WEBPACK_IMPORTED_MODULE_9__["environment"].Url + '/depilarte/searchWorker').subscribe(function (res) {
              console.log(res.resultList);
              _this15.treatmentTypeList = res.resultList.treatmentType;
              _this15.dataSource = new _angular_material_table__WEBPACK_IMPORTED_MODULE_5__["MatTableDataSource"](res.resultList);
              _this15.dataSource.paginator = _this15.paginator;
              _this15.dataSource.sort = _this15.sort;
            });
          }
        }, {
          key: "goEdit",
          value: function goEdit(id) {
            this.router.navigate(['/registrar-usuario'], {
              relativeTo: this.route,
              queryParams: {
                id: id
              }
            });
          }
        }, {
          key: "download",
          value: function download() {
            var _this16 = this;

            var data = Object.assign({}, this.filters.value);
            this.globalServices.httpServicesResponse(data, _environments_environment__WEBPACK_IMPORTED_MODULE_9__["environment"].Url + 'depilarte/generateEmpleados').subscribe(function (data) {
              var result = data;

              if (result.type == 'error') {
                console.log('error');
              } else {
                var file = result.resultEncodedString;
                var sliceSize = 512;
                var byteCharacters = atob(file);
                var byteArrays = [];

                for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {
                  var slice = byteCharacters.slice(offset, offset + sliceSize);
                  var byteNumbers = new Array(slice.length);

                  for (var i = 0; i < slice.length; i++) {
                    byteNumbers[i] = slice.charCodeAt(i);
                  }

                  var byteArray = new Uint8Array(byteNumbers);
                  byteArrays.push(byteArray);
                }

                var blob = new Blob(byteArrays, {
                  type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
                });
                Object(file_saver__WEBPACK_IMPORTED_MODULE_11__["saveAs"])(blob, _this16.fileName);
              }
            }, function (error) {//error
            });
          }
        }]);

        return EmpleadoHistorialComponent;
      }();

      EmpleadoHistorialComponent.ctorParameters = function () {
        return [{
          type: _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormBuilder"]
        }, {
          type: _angular_router__WEBPACK_IMPORTED_MODULE_7__["Router"]
        }, {
          type: _angular_router__WEBPACK_IMPORTED_MODULE_7__["ActivatedRoute"]
        }, {
          type: _shared_services_global_services__WEBPACK_IMPORTED_MODULE_10__["GlobalServices"]
        }];
      };

      EmpleadoHistorialComponent.propDecorators = {
        paginator: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewChild"],
          args: [_angular_material_paginator__WEBPACK_IMPORTED_MODULE_6__["MatPaginator"]]
        }],
        sort: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewChild"],
          args: [_angular_material_sort__WEBPACK_IMPORTED_MODULE_8__["MatSort"]]
        }]
      };
      EmpleadoHistorialComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"])({
        selector: 'app-empleado-historial',
        template: _raw_loader_empleado_historial_component_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        styles: [_empleado_historial_component_scss__WEBPACK_IMPORTED_MODULE_2__["default"]]
      }), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormBuilder"], _angular_router__WEBPACK_IMPORTED_MODULE_7__["Router"], _angular_router__WEBPACK_IMPORTED_MODULE_7__["ActivatedRoute"], _shared_services_global_services__WEBPACK_IMPORTED_MODULE_10__["GlobalServices"]])], EmpleadoHistorialComponent);
      /***/
    },

    /***/
    "9m/7": function m7(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony default export */


      __webpack_exports__["default"] = ".mat-form-field {\n  font-size: 14px;\n  width: 100%;\n}\n\n.mat-cell {\n  width: auto;\n}\n\n.mat-cell-id {\n  width: 100px;\n}\n\n.margin-btn-filter {\n  margin-bottom: 5px;\n}\n\n.container-tab {\n  height: auto;\n  width: 100%;\n  max-width: 100%;\n  overflow: auto;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGFnZXMvaGlzdG9yaWFsL2VtcGxlYWRvLWhpc3RvcmlhbC9lbXBsZWFkby1oaXN0b3JpYWwuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxlQUFBO0VBQ0EsV0FBQTtBQUNGOztBQUNBO0VBQ0UsV0FBQTtBQUVGOztBQUFBO0VBQ0UsWUFBQTtBQUdGOztBQURBO0VBQ0Usa0JBQUE7QUFJRjs7QUFGQTtFQUNFLFlBQUE7RUFDQSxXQUFBO0VBQ0EsZUFBQTtFQUNBLGNBQUE7QUFLRiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2hpc3RvcmlhbC9lbXBsZWFkby1oaXN0b3JpYWwvZW1wbGVhZG8taGlzdG9yaWFsLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLm1hdC1mb3JtLWZpZWxkIHtcclxuICBmb250LXNpemU6IDE0cHg7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbn1cclxuLm1hdC1jZWxse1xyXG4gIHdpZHRoOiBhdXRvO1xyXG59XHJcbi5tYXQtY2VsbC1pZHtcclxuICB3aWR0aDogMTAwcHg7XHJcbn1cclxuLm1hcmdpbi1idG4tZmlsdGVyIHtcclxuICBtYXJnaW4tYm90dG9tOiA1cHg7XHJcbn1cclxuLmNvbnRhaW5lci10YWJ7XHJcbiAgaGVpZ2h0OiBhdXRvO1xyXG4gIHdpZHRoOiAxMDAlO1xyXG4gIG1heC13aWR0aDogMTAwJTtcclxuICBvdmVyZmxvdzogYXV0bztcclxufVxyXG5cclxuIl19 */";
      /***/
    },

    /***/
    "9rRi": function rRi(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Scottish Gaelic [gd]
      //! author : Jon Ashdown : https://github.com/jonashdown
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var months = ['Am Faoilleach', 'An Gearran', 'Am Màrt', 'An Giblean', 'An Cèitean', 'An t-Ògmhios', 'An t-Iuchar', 'An Lùnastal', 'An t-Sultain', 'An Dàmhair', 'An t-Samhain', 'An Dùbhlachd'],
            monthsShort = ['Faoi', 'Gear', 'Màrt', 'Gibl', 'Cèit', 'Ògmh', 'Iuch', 'Lùn', 'Sult', 'Dàmh', 'Samh', 'Dùbh'],
            weekdays = ['Didòmhnaich', 'Diluain', 'Dimàirt', 'Diciadain', 'Diardaoin', 'Dihaoine', 'Disathairne'],
            weekdaysShort = ['Did', 'Dil', 'Dim', 'Dic', 'Dia', 'Dih', 'Dis'],
            weekdaysMin = ['Dò', 'Lu', 'Mà', 'Ci', 'Ar', 'Ha', 'Sa'];
        var gd = moment.defineLocale('gd', {
          months: months,
          monthsShort: monthsShort,
          monthsParseExact: true,
          weekdays: weekdays,
          weekdaysShort: weekdaysShort,
          weekdaysMin: weekdaysMin,
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
          },
          calendar: {
            sameDay: '[An-diugh aig] LT',
            nextDay: '[A-màireach aig] LT',
            nextWeek: 'dddd [aig] LT',
            lastDay: '[An-dè aig] LT',
            lastWeek: 'dddd [seo chaidh] [aig] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: 'ann an %s',
            past: 'bho chionn %s',
            s: 'beagan diogan',
            ss: '%d diogan',
            m: 'mionaid',
            mm: '%d mionaidean',
            h: 'uair',
            hh: '%d uairean',
            d: 'latha',
            dd: '%d latha',
            M: 'mìos',
            MM: '%d mìosan',
            y: 'bliadhna',
            yy: '%d bliadhna'
          },
          dayOfMonthOrdinalParse: /\d{1,2}(d|na|mh)/,
          ordinal: function ordinal(number) {
            var output = number === 1 ? 'd' : number % 10 === 2 ? 'na' : 'mh';
            return number + output;
          },
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.

          }
        });
        return gd;
      });
      /***/

    },

    /***/
    "A+xa": function AXa(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Chuvash [cv]
      //! author : Anatoly Mironov : https://github.com/mirontoli
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var cv = moment.defineLocale('cv', {
          months: 'кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав'.split('_'),
          monthsShort: 'кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш'.split('_'),
          weekdays: 'вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун'.split('_'),
          weekdaysShort: 'выр_тун_ытл_юн_кӗҫ_эрн_шӑм'.split('_'),
          weekdaysMin: 'вр_тн_ыт_юн_кҫ_эр_шм'.split('_'),
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD-MM-YYYY',
            LL: 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]',
            LLL: 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm',
            LLLL: 'dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm'
          },
          calendar: {
            sameDay: '[Паян] LT [сехетре]',
            nextDay: '[Ыран] LT [сехетре]',
            lastDay: '[Ӗнер] LT [сехетре]',
            nextWeek: '[Ҫитес] dddd LT [сехетре]',
            lastWeek: '[Иртнӗ] dddd LT [сехетре]',
            sameElse: 'L'
          },
          relativeTime: {
            future: function future(output) {
              var affix = /сехет$/i.exec(output) ? 'рен' : /ҫул$/i.exec(output) ? 'тан' : 'ран';
              return output + affix;
            },
            past: '%s каялла',
            s: 'пӗр-ик ҫеккунт',
            ss: '%d ҫеккунт',
            m: 'пӗр минут',
            mm: '%d минут',
            h: 'пӗр сехет',
            hh: '%d сехет',
            d: 'пӗр кун',
            dd: '%d кун',
            M: 'пӗр уйӑх',
            MM: '%d уйӑх',
            y: 'пӗр ҫул',
            yy: '%d ҫул'
          },
          dayOfMonthOrdinalParse: /\d{1,2}-мӗш/,
          ordinal: '%d-мӗш',
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 7th is the first week of the year.

          }
        });
        return cv;
      });
      /***/

    },

    /***/
    "AQ68": function AQ68(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Uzbek Latin [uz-latn]
      //! author : Rasulbek Mirzayev : github.com/Rasulbeeek
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var uzLatn = moment.defineLocale('uz-latn', {
          months: 'Yanvar_Fevral_Mart_Aprel_May_Iyun_Iyul_Avgust_Sentabr_Oktabr_Noyabr_Dekabr'.split('_'),
          monthsShort: 'Yan_Fev_Mar_Apr_May_Iyun_Iyul_Avg_Sen_Okt_Noy_Dek'.split('_'),
          weekdays: 'Yakshanba_Dushanba_Seshanba_Chorshanba_Payshanba_Juma_Shanba'.split('_'),
          weekdaysShort: 'Yak_Dush_Sesh_Chor_Pay_Jum_Shan'.split('_'),
          weekdaysMin: 'Ya_Du_Se_Cho_Pa_Ju_Sha'.split('_'),
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'D MMMM YYYY, dddd HH:mm'
          },
          calendar: {
            sameDay: '[Bugun soat] LT [da]',
            nextDay: '[Ertaga] LT [da]',
            nextWeek: 'dddd [kuni soat] LT [da]',
            lastDay: '[Kecha soat] LT [da]',
            lastWeek: "[O'tgan] dddd [kuni soat] LT [da]",
            sameElse: 'L'
          },
          relativeTime: {
            future: 'Yaqin %s ichida',
            past: 'Bir necha %s oldin',
            s: 'soniya',
            ss: '%d soniya',
            m: 'bir daqiqa',
            mm: '%d daqiqa',
            h: 'bir soat',
            hh: '%d soat',
            d: 'bir kun',
            dd: '%d kun',
            M: 'bir oy',
            MM: '%d oy',
            y: 'bir yil',
            yy: '%d yil'
          },
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 7th is the first week of the year.

          }
        });
        return uzLatn;
      });
      /***/

    },

    /***/
    "AvvY": function AvvY(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Malayalam [ml]
      //! author : Floyd Pink : https://github.com/floydpink
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var ml = moment.defineLocale('ml', {
          months: 'ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ'.split('_'),
          monthsShort: 'ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.'.split('_'),
          monthsParseExact: true,
          weekdays: 'ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച'.split('_'),
          weekdaysShort: 'ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി'.split('_'),
          weekdaysMin: 'ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ'.split('_'),
          longDateFormat: {
            LT: 'A h:mm -നു',
            LTS: 'A h:mm:ss -നു',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm -നു',
            LLLL: 'dddd, D MMMM YYYY, A h:mm -നു'
          },
          calendar: {
            sameDay: '[ഇന്ന്] LT',
            nextDay: '[നാളെ] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[ഇന്നലെ] LT',
            lastWeek: '[കഴിഞ്ഞ] dddd, LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: '%s കഴിഞ്ഞ്',
            past: '%s മുൻപ്',
            s: 'അൽപ നിമിഷങ്ങൾ',
            ss: '%d സെക്കൻഡ്',
            m: 'ഒരു മിനിറ്റ്',
            mm: '%d മിനിറ്റ്',
            h: 'ഒരു മണിക്കൂർ',
            hh: '%d മണിക്കൂർ',
            d: 'ഒരു ദിവസം',
            dd: '%d ദിവസം',
            M: 'ഒരു മാസം',
            MM: '%d മാസം',
            y: 'ഒരു വർഷം',
            yy: '%d വർഷം'
          },
          meridiemParse: /രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,
          meridiemHour: function meridiemHour(hour, meridiem) {
            if (hour === 12) {
              hour = 0;
            }

            if (meridiem === 'രാത്രി' && hour >= 4 || meridiem === 'ഉച്ച കഴിഞ്ഞ്' || meridiem === 'വൈകുന്നേരം') {
              return hour + 12;
            } else {
              return hour;
            }
          },
          meridiem: function meridiem(hour, minute, isLower) {
            if (hour < 4) {
              return 'രാത്രി';
            } else if (hour < 12) {
              return 'രാവിലെ';
            } else if (hour < 17) {
              return 'ഉച്ച കഴിഞ്ഞ്';
            } else if (hour < 20) {
              return 'വൈകുന്നേരം';
            } else {
              return 'രാത്രി';
            }
          }
        });
        return ml;
      });
      /***/

    },

    /***/
    "B55N": function B55N(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Japanese [ja]
      //! author : LI Long : https://github.com/baryon
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var ja = moment.defineLocale('ja', {
          eras: [{
            since: '2019-05-01',
            offset: 1,
            name: '令和',
            narrow: '㋿',
            abbr: 'R'
          }, {
            since: '1989-01-08',
            until: '2019-04-30',
            offset: 1,
            name: '平成',
            narrow: '㍻',
            abbr: 'H'
          }, {
            since: '1926-12-25',
            until: '1989-01-07',
            offset: 1,
            name: '昭和',
            narrow: '㍼',
            abbr: 'S'
          }, {
            since: '1912-07-30',
            until: '1926-12-24',
            offset: 1,
            name: '大正',
            narrow: '㍽',
            abbr: 'T'
          }, {
            since: '1873-01-01',
            until: '1912-07-29',
            offset: 6,
            name: '明治',
            narrow: '㍾',
            abbr: 'M'
          }, {
            since: '0001-01-01',
            until: '1873-12-31',
            offset: 1,
            name: '西暦',
            narrow: 'AD',
            abbr: 'AD'
          }, {
            since: '0000-12-31',
            until: -Infinity,
            offset: 1,
            name: '紀元前',
            narrow: 'BC',
            abbr: 'BC'
          }],
          eraYearOrdinalRegex: /(元|\d+)年/,
          eraYearOrdinalParse: function eraYearOrdinalParse(input, match) {
            return match[1] === '元' ? 1 : parseInt(match[1] || input, 10);
          },
          months: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
          monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
          weekdays: '日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日'.split('_'),
          weekdaysShort: '日_月_火_水_木_金_土'.split('_'),
          weekdaysMin: '日_月_火_水_木_金_土'.split('_'),
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY/MM/DD',
            LL: 'YYYY年M月D日',
            LLL: 'YYYY年M月D日 HH:mm',
            LLLL: 'YYYY年M月D日 dddd HH:mm',
            l: 'YYYY/MM/DD',
            ll: 'YYYY年M月D日',
            lll: 'YYYY年M月D日 HH:mm',
            llll: 'YYYY年M月D日(ddd) HH:mm'
          },
          meridiemParse: /午前|午後/i,
          isPM: function isPM(input) {
            return input === '午後';
          },
          meridiem: function meridiem(hour, minute, isLower) {
            if (hour < 12) {
              return '午前';
            } else {
              return '午後';
            }
          },
          calendar: {
            sameDay: '[今日] LT',
            nextDay: '[明日] LT',
            nextWeek: function nextWeek(now) {
              if (now.week() !== this.week()) {
                return '[来週]dddd LT';
              } else {
                return 'dddd LT';
              }
            },
            lastDay: '[昨日] LT',
            lastWeek: function lastWeek(now) {
              if (this.week() !== now.week()) {
                return '[先週]dddd LT';
              } else {
                return 'dddd LT';
              }
            },
            sameElse: 'L'
          },
          dayOfMonthOrdinalParse: /\d{1,2}日/,
          ordinal: function ordinal(number, period) {
            switch (period) {
              case 'y':
                return number === 1 ? '元年' : number + '年';

              case 'd':
              case 'D':
              case 'DDD':
                return number + '日';

              default:
                return number;
            }
          },
          relativeTime: {
            future: '%s後',
            past: '%s前',
            s: '数秒',
            ss: '%d秒',
            m: '1分',
            mm: '%d分',
            h: '1時間',
            hh: '%d時間',
            d: '1日',
            dd: '%d日',
            M: '1ヶ月',
            MM: '%dヶ月',
            y: '1年',
            yy: '%d年'
          }
        });
        return ja;
      });
      /***/

    },

    /***/
    "BVg3": function BVg3(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Icelandic [is]
      //! author : Hinrik Örn Sigurðsson : https://github.com/hinrik
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        function plural(n) {
          if (n % 100 === 11) {
            return true;
          } else if (n % 10 === 1) {
            return false;
          }

          return true;
        }

        function translate(number, withoutSuffix, key, isFuture) {
          var result = number + ' ';

          switch (key) {
            case 's':
              return withoutSuffix || isFuture ? 'nokkrar sekúndur' : 'nokkrum sekúndum';

            case 'ss':
              if (plural(number)) {
                return result + (withoutSuffix || isFuture ? 'sekúndur' : 'sekúndum');
              }

              return result + 'sekúnda';

            case 'm':
              return withoutSuffix ? 'mínúta' : 'mínútu';

            case 'mm':
              if (plural(number)) {
                return result + (withoutSuffix || isFuture ? 'mínútur' : 'mínútum');
              } else if (withoutSuffix) {
                return result + 'mínúta';
              }

              return result + 'mínútu';

            case 'hh':
              if (plural(number)) {
                return result + (withoutSuffix || isFuture ? 'klukkustundir' : 'klukkustundum');
              }

              return result + 'klukkustund';

            case 'd':
              if (withoutSuffix) {
                return 'dagur';
              }

              return isFuture ? 'dag' : 'degi';

            case 'dd':
              if (plural(number)) {
                if (withoutSuffix) {
                  return result + 'dagar';
                }

                return result + (isFuture ? 'daga' : 'dögum');
              } else if (withoutSuffix) {
                return result + 'dagur';
              }

              return result + (isFuture ? 'dag' : 'degi');

            case 'M':
              if (withoutSuffix) {
                return 'mánuður';
              }

              return isFuture ? 'mánuð' : 'mánuði';

            case 'MM':
              if (plural(number)) {
                if (withoutSuffix) {
                  return result + 'mánuðir';
                }

                return result + (isFuture ? 'mánuði' : 'mánuðum');
              } else if (withoutSuffix) {
                return result + 'mánuður';
              }

              return result + (isFuture ? 'mánuð' : 'mánuði');

            case 'y':
              return withoutSuffix || isFuture ? 'ár' : 'ári';

            case 'yy':
              if (plural(number)) {
                return result + (withoutSuffix || isFuture ? 'ár' : 'árum');
              }

              return result + (withoutSuffix || isFuture ? 'ár' : 'ári');
          }
        }

        var is = moment.defineLocale('is', {
          months: 'janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember'.split('_'),
          monthsShort: 'jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des'.split('_'),
          weekdays: 'sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur'.split('_'),
          weekdaysShort: 'sun_mán_þri_mið_fim_fös_lau'.split('_'),
          weekdaysMin: 'Su_Má_Þr_Mi_Fi_Fö_La'.split('_'),
          longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY [kl.] H:mm',
            LLLL: 'dddd, D. MMMM YYYY [kl.] H:mm'
          },
          calendar: {
            sameDay: '[í dag kl.] LT',
            nextDay: '[á morgun kl.] LT',
            nextWeek: 'dddd [kl.] LT',
            lastDay: '[í gær kl.] LT',
            lastWeek: '[síðasta] dddd [kl.] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: 'eftir %s',
            past: 'fyrir %s síðan',
            s: translate,
            ss: translate,
            m: translate,
            mm: translate,
            h: 'klukkustund',
            hh: translate,
            d: translate,
            dd: translate,
            M: translate,
            MM: translate,
            y: translate,
            yy: translate
          },
          dayOfMonthOrdinalParse: /\d{1,2}\./,
          ordinal: '%d.',
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.

          }
        });
        return is;
      });
      /***/

    },

    /***/
    "Burw": function Burw(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony default export */


      __webpack_exports__["default"] = "<div class=\"row\">\r\n    <div class=\"col-md-8\" >\r\n       <div class=\"card card-user\" style=\"width: 150%;\">\r\n         <div class=\"card-header\">\r\n           <h1 class=\"card-title\">Registrar Empleado</h1>\r\n         </div>\r\n         <div class=\"card-body\">\r\n           <form [formGroup]=\"form\">\r\n\r\n             <div class=\"row\">\r\n               <div class=\"col-md-4 pr-1\">\r\n                 <div class=\"formControl\">\r\n                   <mat-label>Nombre</mat-label>\r\n                   <mat-form-field  appearance=\"outline\" class=\"form-group\" style=\"width: 100%;\">\r\n                     <mat-label>Nombre</mat-label>\r\n                     <input matInput formControlName=\"name\" type=\"text\">\r\n                   </mat-form-field>\r\n                 </div>\r\n               </div>\r\n               <div class=\"col-md-4 px-1\">\r\n                 <div class=\"form-group\">\r\n                   <mat-label>Apellido</mat-label>\r\n                   <mat-form-field appearance=\"outline\" class=\"form-group\" style=\"width: 100%;\">\r\n                     <mat-label>Apellido</mat-label>\r\n                     <input matInput formControlName=\"lastName\" type=\"text\">\r\n                   </mat-form-field>\r\n                 </div>\r\n               </div>\r\n               <div class=\"col-md-2 px-1\">\r\n                 <div class=\"form-group\">\r\n                   <mat-label>Cedula</mat-label>\r\n                   <mat-form-field appearance=\"outline\" class=\"form-group\" style=\"width: 100%;\">\r\n                     <mat-label>Cedula</mat-label>\r\n                     <input matInput  formControlName=\"identification\">\r\n                   </mat-form-field>\r\n                 </div>\r\n               </div>\r\n               <div class=\"col-md-2 pl-1\">\r\n                 <div class=\"form-group\">\r\n                   <mat-label>Edad</mat-label>\r\n                   <mat-form-field appearance=\"outline\" class=\"form-group\" style=\"width: 100%;\">\r\n                     <mat-label>Edad</mat-label>\r\n                     <input matInput formControlName=\"age\" type=\"number\">\r\n                   </mat-form-field>\r\n                 </div>\r\n               </div>\r\n             </div>\r\n\r\n             <div class=\"row\">\r\n               <div class=\"col-md-4 pr-1\">\r\n                 <div class=\"form-group\">\r\n                   <mat-label for=\"exampleInputEmail1\">Email</mat-label>\r\n                   <mat-form-field appearance=\"outline\" class=\"form-group\" style=\"width: 100%;\">\r\n                     <mat-label>Email</mat-label>\r\n                     <input matInput formControlName=\"email\" type=\"email\" placeholder=\"email@gmail.com\">\r\n                   </mat-form-field>\r\n                 </div>\r\n               </div>\r\n               <div class=\"col-md-4 px-1\">\r\n                 <div class=\"form-group\">\r\n                   <mat-label>Teléfono</mat-label>\r\n                   <mat-form-field appearance=\"outline\" class=\"form-group\" style=\"width: 100%;\">\r\n                     <mat-label>Teléfono</mat-label>\r\n                     <input matInput  formControlName=\"phone\" type=\"tel\">\r\n                   </mat-form-field>\r\n                 </div>\r\n               </div>\r\n               <div class=\"col-md-4 pl-1\">\r\n                 <div class=\"form-group\">\r\n                   <mat-label>Fecha de Nacimiento</mat-label>\r\n                   <mat-form-field appearance=\"outline\" class=\"form-group\" style=\"width: 100%;\">\r\n                     <input matInput  formControlName=\"birthday\" type=\"date\">\r\n                   </mat-form-field>\r\n                 </div>\r\n               </div>\r\n             </div>\r\n\r\n             <div class=\"row\">\r\n                <div class=\"col-md-5 pr-1\">\r\n                  <div class=\"form-group\">\r\n                    <mat-label>Cargo</mat-label>\r\n                    <mat-form-field appearance=\"outline\" class=\"form-group\" style=\"width: 100%;\">\r\n                      <mat-label>Cargo</mat-label>\r\n                      <mat-select formControlName=\"charge\">\r\n                        <mat-option *ngFor=\"let us of userList\" [value]=\"us.value\">\r\n                          {{us.desc}}\r\n                        </mat-option>\r\n                      </mat-select>\r\n                    </mat-form-field>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-7 pl-1\">\r\n                 <div class=\"form-group\">\r\n                   <mat-label>Dirección</mat-label>\r\n                   <mat-form-field appearance=\"outline\" class=\"form-group\" style=\"width: 100%;\">\r\n                     <mat-label>Dirección</mat-label>\r\n                     <input matInput  formControlName=\"address\" type=\"text\">\r\n                   </mat-form-field>\r\n                 </div>\r\n               </div>\r\n              </div>\r\n\r\n\r\n             <div class=\"row\">\r\n               <div class=\"update ml-auto mr-auto\">\r\n                 <button mat-raised-button  color=\"warn\" type=\"submit\" (click)=\"register()\">Registrar</button>\r\n               </div>\r\n             </div>\r\n\r\n           </form>\r\n         </div>\r\n       </div>\r\n     </div>\r\n   </div>\r\n";
      /***/
    },

    /***/
    "ByF4": function ByF4(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Faroese [fo]
      //! author : Ragnar Johannesen : https://github.com/ragnar123
      //! author : Kristian Sakarisson : https://github.com/sakarisson
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var fo = moment.defineLocale('fo', {
          months: 'januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
          monthsShort: 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
          weekdays: 'sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur'.split('_'),
          weekdaysShort: 'sun_mán_týs_mik_hós_frí_ley'.split('_'),
          weekdaysMin: 'su_má_tý_mi_hó_fr_le'.split('_'),
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D. MMMM, YYYY HH:mm'
          },
          calendar: {
            sameDay: '[Í dag kl.] LT',
            nextDay: '[Í morgin kl.] LT',
            nextWeek: 'dddd [kl.] LT',
            lastDay: '[Í gjár kl.] LT',
            lastWeek: '[síðstu] dddd [kl] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: 'um %s',
            past: '%s síðani',
            s: 'fá sekund',
            ss: '%d sekundir',
            m: 'ein minuttur',
            mm: '%d minuttir',
            h: 'ein tími',
            hh: '%d tímar',
            d: 'ein dagur',
            dd: '%d dagar',
            M: 'ein mánaður',
            MM: '%d mánaðir',
            y: 'eitt ár',
            yy: '%d ár'
          },
          dayOfMonthOrdinalParse: /\d{1,2}\./,
          ordinal: '%d.',
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.

          }
        });
        return fo;
      });
      /***/

    },

    /***/
    "CBdM": function CBdM(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony default export */


      __webpack_exports__["default"] = "<div class=\"row\">\r\n <div class=\"col-md-8\" >\r\n    <div class=\"card card-user\" style=\"width: 150%;\">\r\n      <div class=\"card-header\">\r\n        <h1 class=\"card-title\">Registrar Paciente</h1>\r\n      </div>\r\n      <div class=\"card-body\">\r\n        <form [formGroup]=\"form\">\r\n\r\n          <div class=\"row\">\r\n          <div class=\"col-md-3 pr-1\">\r\n            <div class=\"form-group\">\r\n              <mat-label>Usuario registrante</mat-label>\r\n              <mat-form-field appearance=\"outline\" class=\"form-group\" style=\"width: 100%;\">\r\n                <mat-label>Usuario registrante</mat-label>\r\n                <mat-select formControlName=\"userRegister\" (ngModelChange)=\"changeCharger()\">\r\n                  <mat-option *ngFor=\"let us of userList\" [value]=\"us.value\">\r\n                    {{us.desc}}\r\n                  </mat-option>\r\n                </mat-select>\r\n              </mat-form-field>\r\n            </div>\r\n          </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-md-4 pr-1\">\r\n              <div class=\"formControl\">\r\n                <mat-label>Nombre</mat-label>\r\n                <mat-form-field  appearance=\"outline\" class=\"form-group\" style=\"width: 100%;\">\r\n                  <mat-label>Nombre</mat-label>\r\n                  <input matInput formControlName=\"name\" type=\"text\">\r\n                </mat-form-field>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-4 px-1\">\r\n              <div class=\"form-group\">\r\n                <mat-label>Apellido</mat-label>\r\n                <mat-form-field appearance=\"outline\" class=\"form-group\" style=\"width: 100%;\">\r\n                  <mat-label>Apellido</mat-label>\r\n                  <input matInput formControlName=\"lastName\" type=\"text\">\r\n                </mat-form-field>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-2 px-1\">\r\n              <div class=\"form-group\">\r\n                <mat-label>Cedula</mat-label>\r\n                <mat-form-field appearance=\"outline\" class=\"form-group\" style=\"width: 100%;\">\r\n                  <mat-label>Cedula</mat-label>\r\n                  <input matInput  formControlName=\"identification\">\r\n                </mat-form-field>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-2 pl-1\">\r\n              <div class=\"form-group\">\r\n                <mat-label>Edad</mat-label>\r\n                <mat-form-field appearance=\"outline\" class=\"form-group\" style=\"width: 100%;\">\r\n                  <mat-label>Edad</mat-label>\r\n                  <input matInput formControlName=\"age\" type=\"number\">\r\n                </mat-form-field>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"row\">\r\n            <div class=\"col-md-4 pr-1\">\r\n              <div class=\"form-group\">\r\n                <mat-label for=\"exampleInputEmail1\">Email</mat-label>\r\n                <mat-form-field appearance=\"outline\" class=\"form-group\" style=\"width: 100%;\">\r\n                  <mat-label>Email</mat-label>\r\n                  <input matInput formControlName=\"email\" type=\"email\" placeholder=\"email@gmail.com\">\r\n                </mat-form-field>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-4 px-1\">\r\n              <div class=\"form-group\">\r\n                <mat-label>Teléfono</mat-label>\r\n                <mat-form-field appearance=\"outline\" class=\"form-group\" style=\"width: 100%;\">\r\n                  <mat-label>Teléfono</mat-label>\r\n                  <input matInput  formControlName=\"phone\" type=\"tel\">\r\n                </mat-form-field>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-4 pl-1\">\r\n              <div class=\"form-group\">\r\n                <mat-label>Fecha de Nacimiento</mat-label>\r\n                <mat-form-field appearance=\"outline\" class=\"form-group\" style=\"width: 100%;\">\r\n                  <input matInput  formControlName=\"birthday\" type=\"date\">\r\n                </mat-form-field>\r\n              </div>\r\n            </div>\r\n\r\n          </div>\r\n\r\n          <div class=\"row\">\r\n            <div class=\"col-md-12\">\r\n              <div class=\"form-group\">\r\n                <mat-label>Dirección</mat-label>\r\n                <mat-form-field appearance=\"outline\" class=\"form-group\" style=\"width: 100%;\">\r\n                  <mat-label>Dirección</mat-label>\r\n                  <input matInput  formControlName=\"address\" type=\"text\">\r\n                </mat-form-field>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div  class=\"row\">\r\n            <div class=\"col-md-4 pr-1\">\r\n              <div class=\"form-group\">\r\n                <mat-label>Tratamiento</mat-label>\r\n              <mat-form-field appearance=\"outline\" class=\"form-group\" style=\"width: 100%;\">\r\n                <mat-label>Tratamiento</mat-label>\r\n                <mat-select formControlName=\"treatment\"  (ngModelChange)=\"changeTypeTreament()\">\r\n                  <mat-option *ngFor=\"let te of treatmentsList\" [value]=\"te.id_tratamientos\">\r\n                    {{te.nameTreatment}}\r\n                  </mat-option>\r\n                </mat-select>\r\n              </mat-form-field>\r\n            </div>\r\n            </div>\r\n            <div class=\"col-md-4 px-1\">\r\n              <div class=\"form-group\">\r\n                <mat-label>Tipos del Tratamiento</mat-label>\r\n                <mat-form-field appearance=\"outline\" class=\"form-group\" style=\"width: 100%;\">\r\n                  <mat-label>Tipos</mat-label>\r\n                  <mat-select [value]=\"treatmentType\" formControlName=\"treatmentType\">\r\n                    <mat-option  *ngFor=\"let tp of treatmentTypeList\" [value]=\"tp.id_tipo\">\r\n                      {{tp.nombreTipo}}\r\n                    </mat-option>\r\n                  </mat-select>\r\n                </mat-form-field>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-4 pl-1\">\r\n              <mat-label>Forma de pago</mat-label>\r\n              <mat-form-field appearance=\"outline\" class=\"form-group\" style=\"width: 100%;\">\r\n                <mat-label>Forma de pago</mat-label>\r\n                <mat-select  formControlName=\"formPay\" name=\"Pago\">\r\n                  <mat-option *ngFor=\"let mp of methodsList\" [value]=\"mp.id\">\r\n                    {{mp.metodoPago}}\r\n                  </mat-option>\r\n                </mat-select>\r\n              </mat-form-field>\r\n            </div>\r\n          </div>\r\n\r\n          <div *ngIf=\"showDoctor\"  class=\"row\">\r\n            <div class=\"col-md-4 pr-1\">\r\n              <div class=\"form-group\">\r\n                <mat-label>Cantidad de sesiones</mat-label>\r\n                <mat-form-field appearance=\"outline\" class=\"form-group\" style=\"width: 100%;\">\r\n                  <mat-label>Sesiones</mat-label>\r\n                  <input matInput  formControlName=\"sessions\" type=\"number\">\r\n                </mat-form-field>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-4 px-1\">\r\n              <div class=\"form-group\">\r\n                <mat-label>Asistencia</mat-label>\r\n                <mat-form-field appearance=\"outline\" class=\"form-group\" style=\"width: 100%;\">\r\n                  <mat-label>Asistencia</mat-label>\r\n                  <input matInput  formControlName=\"assistent\" type=\"number\" placeholder=\"Sesiones\">\r\n                </mat-form-field>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-4 pl-1\">\r\n              <div class=\"form-group\">\r\n                <mat-label>Producto Utilizado</mat-label>\r\n                <mat-form-field appearance=\"outline\" class=\"form-group\" style=\"width: 100%;\">\r\n                  <mat-label>Producto</mat-label>\r\n                  <mat-select  formControlName=\"product\">\r\n                    <mat-option *ngFor=\"let po of productList\" [value]=\"po.id_productos\">\r\n                      {{po.nombre}}\r\n                    </mat-option>\r\n                  </mat-select>\r\n                </mat-form-field>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div *ngIf=\"showOperative\" class=\"row\">\r\n            <div class=\"col-md-4 pr-1\">\r\n              <div class=\"form-group\">\r\n                <mat-label>Disparos de la Pistola</mat-label>\r\n                <mat-form-field appearance=\"outline\" class=\"form-group\" style=\"width: 100%;\">\r\n                  <mat-label>Antes</mat-label>\r\n                  <input matInput  formControlName=\"beforeShots\" type=\"number\" placeholder=\"Antes\">\r\n                </mat-form-field>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-4 px-1\">\r\n              <div class=\"form-group\">\r\n                <mat-label>Disparos de la Pistola</mat-label>\r\n                <mat-form-field appearance=\"outline\" class=\"form-group\" style=\"width: 100%;\">\r\n                  <mat-label>Despues</mat-label>\r\n                  <input matInput type=\"number\" formControlName=\"afterShots\" placeholder=\"Despues\">\r\n                </mat-form-field>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-4 pl-1\">\r\n              <div class=\"form-group\">\r\n                <mat-label>Diferencia</mat-label>\r\n                <mat-form-field appearance=\"outline\" class=\"form-group\" style=\"width: 100%;\">\r\n                  <mat-label>Diferencia</mat-label>\r\n                  <input matInput formControlName=\"diferents\" type=\"number\">\r\n                </mat-form-field>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"row\">\r\n            <div *ngIf=\"showOperative\" class=\"col-md-4 pr-1\">\r\n              <mat-label>Operadora Encargada</mat-label>\r\n              <mat-form-field appearance=\"outline\" class=\"form-group\" style=\"width: 100%;\">\r\n                <mat-label>Operadora Encargada</mat-label>\r\n                <mat-select   formControlName=\"userOp\" name=\"Operadora\">\r\n                  <mat-option [ngModel]=\"userAtt\"  *ngFor=\"let ch of chargerList\" [value]=\"ch.id\">\r\n                    {{ch.nombre}}\r\n                  </mat-option>\r\n                </mat-select>\r\n              </mat-form-field>\r\n            </div>\r\n\r\n            <div  *ngIf=\"showDoctor\" class=\"col-md-4 pr-1\">\r\n              <mat-label>Doctora Encargada</mat-label>\r\n              <mat-form-field appearance=\"outline\" class=\"form-group\" style=\"width: 100%;\">\r\n                <mat-label>Doctora Encargada</mat-label>\r\n                <mat-select   formControlName=\"userDoc\" name=\"Operadora\">\r\n                  <mat-option [ngModel]=\"userAtt\" *ngFor=\"let ch of chargerList\" [value]=\"ch.id\">\r\n                    {{ch.nombre}}\r\n                  </mat-option>\r\n                </mat-select>\r\n              </mat-form-field>\r\n            </div>\r\n\r\n\r\n          </div>\r\n\r\n          <div class=\"row\">\r\n            <div class=\"col-md-4 pr-1\">\r\n              <div class=\"form-group\">\r\n                <mat-label>Abonado</mat-label>\r\n                <mat-form-field appearance=\"outline\" class=\"form-group\" style=\"width: 100%;\">\r\n                  <mat-label>Abonado</mat-label>\r\n                  <input matInput  formControlName=\"bono\" type=\"number\">\r\n                  <span matPrefix>$&nbsp;</span>\r\n                </mat-form-field>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-4 px-1\">\r\n              <div class=\"form-group\">\r\n                <mat-label>Total de la Venta</mat-label>\r\n                <mat-form-field appearance=\"outline\" class=\"form-group\" style=\"width: 100%;\">\r\n                  <mat-label>Total</mat-label>\r\n                  <input matInput  formControlName=\"totalPrice\" type=\"number\" disabled>\r\n                  <span matPrefix>$&nbsp;</span>\r\n                </mat-form-field>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-4 pl-1\">\r\n              <div class=\"form-group\">\r\n                <mat-label>Comisión de la Operadora</mat-label>\r\n                <mat-form-field appearance=\"outline\" class=\"form-group\" style=\"width: 100%;\">\r\n                  <mat-label>Comision</mat-label>\r\n                  <input matInput  formControlName=\"comission\" type=\"number\" disabled>\r\n                  <span matPrefix>%&nbsp;</span>\r\n                </mat-form-field>\r\n              </div>\r\n            </div>\r\n        </div>\r\n\r\n          <div class=\"row\">\r\n            <div class=\"col-md-12\">\r\n              <div class=\"form-group\">\r\n                <mat-label>Nota</mat-label>\r\n                <mat-form-field appearance=\"outline\" class=\"form-group\" style=\"width: 100%;\">\r\n                  <mat-label>Comentario</mat-label>\r\n                  <textarea matInput formControlName=\"note\" type=\"text\"></textarea>\r\n                </mat-form-field>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"row\">\r\n              <div class=\"form-group\">\r\n                <div class=\"col-md-4 pr-1\">\r\n                  <button\r\n                    mat-raised-button color=\"primary\"\r\n                    type=\"file\" (change)=\"uploadFile($event)\">\r\n                    Foto antes de la sesión\r\n                    <input type=\"file\" (change)=\"uploadFile($event)\" >\r\n                  </button>\r\n                </div>\r\n              </div>\r\n              <div class=\"form-group\">\r\n                <div class=\"col-md-4 pl-1\">\r\n                  <button mat-raised-button color=\"primary\">\r\n                    Foto despues de la sesión\r\n                   <input type=\"file\" (change)=\"uploadFile($event)\" >\r\n                  </button>\r\n                </div>\r\n             </div>\r\n          </div>\r\n\r\n          <div class=\"row\">\r\n            <div class=\"update ml-auto mr-auto\">\r\n              <button mat-raised-button  color=\"warn\" type=\"submit\" (click)=\"register()\">Registrar</button>\r\n            </div>\r\n          </div>\r\n\r\n        </form>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n";
      /***/
    },

    /***/
    "CjzT": function CjzT(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Spanish (Dominican Republic) [es-do]
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var monthsShortDot = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_'),
            _monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_'),
            monthsParse = [/^ene/i, /^feb/i, /^mar/i, /^abr/i, /^may/i, /^jun/i, /^jul/i, /^ago/i, /^sep/i, /^oct/i, /^nov/i, /^dic/i],
            monthsRegex = /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;

        var esDo = moment.defineLocale('es-do', {
          months: 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),
          monthsShort: function monthsShort(m, format) {
            if (!m) {
              return monthsShortDot;
            } else if (/-MMM-/.test(format)) {
              return _monthsShort[m.month()];
            } else {
              return monthsShortDot[m.month()];
            }
          },
          monthsRegex: monthsRegex,
          monthsShortRegex: monthsRegex,
          monthsStrictRegex: /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
          monthsShortStrictRegex: /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
          monthsParse: monthsParse,
          longMonthsParse: monthsParse,
          shortMonthsParse: monthsParse,
          weekdays: 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
          weekdaysShort: 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
          weekdaysMin: 'do_lu_ma_mi_ju_vi_sá'.split('_'),
          weekdaysParseExact: true,
          longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'DD/MM/YYYY',
            LL: 'D [de] MMMM [de] YYYY',
            LLL: 'D [de] MMMM [de] YYYY h:mm A',
            LLLL: 'dddd, D [de] MMMM [de] YYYY h:mm A'
          },
          calendar: {
            sameDay: function sameDay() {
              return '[hoy a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            nextDay: function nextDay() {
              return '[mañana a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            nextWeek: function nextWeek() {
              return 'dddd [a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            lastDay: function lastDay() {
              return '[ayer a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            lastWeek: function lastWeek() {
              return '[el] dddd [pasado a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            sameElse: 'L'
          },
          relativeTime: {
            future: 'en %s',
            past: 'hace %s',
            s: 'unos segundos',
            ss: '%d segundos',
            m: 'un minuto',
            mm: '%d minutos',
            h: 'una hora',
            hh: '%d horas',
            d: 'un día',
            dd: '%d días',
            w: 'una semana',
            ww: '%d semanas',
            M: 'un mes',
            MM: '%d meses',
            y: 'un año',
            yy: '%d años'
          },
          dayOfMonthOrdinalParse: /\d{1,2}º/,
          ordinal: '%dº',
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.

          }
        });
        return esDo;
      });
      /***/

    },

    /***/
    "CoRJ": function CoRJ(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Arabic (Morocco) [ar-ma]
      //! author : ElFadili Yassine : https://github.com/ElFadiliY
      //! author : Abdel Said : https://github.com/abdelsaid
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var arMa = moment.defineLocale('ar-ma', {
          months: 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
          monthsShort: 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
          weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
          weekdaysShort: 'احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
          weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
          weekdaysParseExact: true,
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
          },
          calendar: {
            sameDay: '[اليوم على الساعة] LT',
            nextDay: '[غدا على الساعة] LT',
            nextWeek: 'dddd [على الساعة] LT',
            lastDay: '[أمس على الساعة] LT',
            lastWeek: 'dddd [على الساعة] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: 'في %s',
            past: 'منذ %s',
            s: 'ثوان',
            ss: '%d ثانية',
            m: 'دقيقة',
            mm: '%d دقائق',
            h: 'ساعة',
            hh: '%d ساعات',
            d: 'يوم',
            dd: '%d أيام',
            M: 'شهر',
            MM: '%d أشهر',
            y: 'سنة',
            yy: '%d سنوات'
          },
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.

          }
        });
        return arMa;
      });
      /***/

    },

    /***/
    "CslO": function CslO(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony default export */


      __webpack_exports__["default"] = "\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3JlZ2lzdHJhci90cmF0YW1pZW50b1JlZ2lzdHJhci90cmF0YW1pZW50b1JlZ2lzdHJhci5jb21wb25lbnQuc2NzcyJ9 */";
      /***/
    },

    /***/
    "D/JM": function DJM(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Basque [eu]
      //! author : Eneko Illarramendi : https://github.com/eillarra
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var eu = moment.defineLocale('eu', {
          months: 'urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua'.split('_'),
          monthsShort: 'urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.'.split('_'),
          monthsParseExact: true,
          weekdays: 'igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata'.split('_'),
          weekdaysShort: 'ig._al._ar._az._og._ol._lr.'.split('_'),
          weekdaysMin: 'ig_al_ar_az_og_ol_lr'.split('_'),
          weekdaysParseExact: true,
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY-MM-DD',
            LL: 'YYYY[ko] MMMM[ren] D[a]',
            LLL: 'YYYY[ko] MMMM[ren] D[a] HH:mm',
            LLLL: 'dddd, YYYY[ko] MMMM[ren] D[a] HH:mm',
            l: 'YYYY-M-D',
            ll: 'YYYY[ko] MMM D[a]',
            lll: 'YYYY[ko] MMM D[a] HH:mm',
            llll: 'ddd, YYYY[ko] MMM D[a] HH:mm'
          },
          calendar: {
            sameDay: '[gaur] LT[etan]',
            nextDay: '[bihar] LT[etan]',
            nextWeek: 'dddd LT[etan]',
            lastDay: '[atzo] LT[etan]',
            lastWeek: '[aurreko] dddd LT[etan]',
            sameElse: 'L'
          },
          relativeTime: {
            future: '%s barru',
            past: 'duela %s',
            s: 'segundo batzuk',
            ss: '%d segundo',
            m: 'minutu bat',
            mm: '%d minutu',
            h: 'ordu bat',
            hh: '%d ordu',
            d: 'egun bat',
            dd: '%d egun',
            M: 'hilabete bat',
            MM: '%d hilabete',
            y: 'urte bat',
            yy: '%d urte'
          },
          dayOfMonthOrdinalParse: /\d{1,2}\./,
          ordinal: '%d.',
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 7th is the first week of the year.

          }
        });
        return eu;
      });
      /***/

    },

    /***/
    "DKr+": function DKr(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Konkani Latin script [gom-latn]
      //! author : The Discoverer : https://github.com/WikiDiscoverer
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        function processRelativeTime(number, withoutSuffix, key, isFuture) {
          var format = {
            s: ['thoddea sekondamni', 'thodde sekond'],
            ss: [number + ' sekondamni', number + ' sekond'],
            m: ['eka mintan', 'ek minut'],
            mm: [number + ' mintamni', number + ' mintam'],
            h: ['eka voran', 'ek vor'],
            hh: [number + ' voramni', number + ' voram'],
            d: ['eka disan', 'ek dis'],
            dd: [number + ' disamni', number + ' dis'],
            M: ['eka mhoinean', 'ek mhoino'],
            MM: [number + ' mhoineamni', number + ' mhoine'],
            y: ['eka vorsan', 'ek voros'],
            yy: [number + ' vorsamni', number + ' vorsam']
          };
          return isFuture ? format[key][0] : format[key][1];
        }

        var gomLatn = moment.defineLocale('gom-latn', {
          months: {
            standalone: 'Janer_Febrer_Mars_Abril_Mai_Jun_Julai_Agost_Setembr_Otubr_Novembr_Dezembr'.split('_'),
            format: 'Janerachea_Febrerachea_Marsachea_Abrilachea_Maiachea_Junachea_Julaiachea_Agostachea_Setembrachea_Otubrachea_Novembrachea_Dezembrachea'.split('_'),
            isFormat: /MMMM(\s)+D[oD]?/
          },
          monthsShort: 'Jan._Feb._Mars_Abr._Mai_Jun_Jul._Ago._Set._Otu._Nov._Dez.'.split('_'),
          monthsParseExact: true,
          weekdays: "Aitar_Somar_Mongllar_Budhvar_Birestar_Sukrar_Son'var".split('_'),
          weekdaysShort: 'Ait._Som._Mon._Bud._Bre._Suk._Son.'.split('_'),
          weekdaysMin: 'Ai_Sm_Mo_Bu_Br_Su_Sn'.split('_'),
          weekdaysParseExact: true,
          longDateFormat: {
            LT: 'A h:mm [vazta]',
            LTS: 'A h:mm:ss [vazta]',
            L: 'DD-MM-YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY A h:mm [vazta]',
            LLLL: 'dddd, MMMM Do, YYYY, A h:mm [vazta]',
            llll: 'ddd, D MMM YYYY, A h:mm [vazta]'
          },
          calendar: {
            sameDay: '[Aiz] LT',
            nextDay: '[Faleam] LT',
            nextWeek: '[Fuddlo] dddd[,] LT',
            lastDay: '[Kal] LT',
            lastWeek: '[Fattlo] dddd[,] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: '%s',
            past: '%s adim',
            s: processRelativeTime,
            ss: processRelativeTime,
            m: processRelativeTime,
            mm: processRelativeTime,
            h: processRelativeTime,
            hh: processRelativeTime,
            d: processRelativeTime,
            dd: processRelativeTime,
            M: processRelativeTime,
            MM: processRelativeTime,
            y: processRelativeTime,
            yy: processRelativeTime
          },
          dayOfMonthOrdinalParse: /\d{1,2}(er)/,
          ordinal: function ordinal(number, period) {
            switch (period) {
              // the ordinal 'er' only applies to day of the month
              case 'D':
                return number + 'er';

              default:
              case 'M':
              case 'Q':
              case 'DDD':
              case 'd':
              case 'w':
              case 'W':
                return number;
            }
          },
          week: {
            dow: 0,
            // Sunday is the first day of the week
            doy: 3 // The week that contains Jan 4th is the first week of the year (7 + 0 - 4)

          },
          meridiemParse: /rati|sokallim|donparam|sanje/,
          meridiemHour: function meridiemHour(hour, meridiem) {
            if (hour === 12) {
              hour = 0;
            }

            if (meridiem === 'rati') {
              return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'sokallim') {
              return hour;
            } else if (meridiem === 'donparam') {
              return hour > 12 ? hour : hour + 12;
            } else if (meridiem === 'sanje') {
              return hour + 12;
            }
          },
          meridiem: function meridiem(hour, minute, isLower) {
            if (hour < 4) {
              return 'rati';
            } else if (hour < 12) {
              return 'sokallim';
            } else if (hour < 16) {
              return 'donparam';
            } else if (hour < 20) {
              return 'sanje';
            } else {
              return 'rati';
            }
          }
        });
        return gomLatn;
      });
      /***/

    },

    /***/
    "Dh3D": function Dh3D(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MAT_SORT_HEADER_INTL_PROVIDER", function () {
        return MAT_SORT_HEADER_INTL_PROVIDER;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MAT_SORT_HEADER_INTL_PROVIDER_FACTORY", function () {
        return MAT_SORT_HEADER_INTL_PROVIDER_FACTORY;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MatSort", function () {
        return MatSort;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MatSortHeader", function () {
        return MatSortHeader;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MatSortHeaderIntl", function () {
        return MatSortHeaderIntl;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MatSortModule", function () {
        return MatSortModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "matSortAnimations", function () {
        return matSortAnimations;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/cdk/coercion */
      "8LU1");
      /* harmony import */


      var _angular_material_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/material/core */
      "FKr1");
      /* harmony import */


      var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/cdk/a11y */
      "u47x");
      /* harmony import */


      var _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/cdk/keycodes */
      "FtGj");
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! rxjs */
      "qCKp");
      /* harmony import */


      var _angular_animations__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! @angular/animations */
      "R0Ic");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! @angular/common */
      "ofXK");
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /** @docs-private */


      var _c0 = ["mat-sort-header", ""];

      function MatSortHeader_div_3_Template(rf, ctx) {
        if (rf & 1) {
          var _r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 3);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("@arrowPosition.start", function MatSortHeader_div_3_Template_div_animation_arrowPosition_start_0_listener() {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r2);

            var ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

            return ctx_r1._disableViewStateAnimation = true;
          })("@arrowPosition.done", function MatSortHeader_div_3_Template_div_animation_arrowPosition_done_0_listener() {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r2);

            var ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

            return ctx_r3._disableViewStateAnimation = false;
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "div", 4);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "div", 5);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](3, "div", 6);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](4, "div", 7);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](5, "div", 8);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("@arrowOpacity", ctx_r0._getArrowViewState())("@arrowPosition", ctx_r0._getArrowViewState())("@allowChildren", ctx_r0._getArrowDirectionState());

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("@indicator", ctx_r0._getArrowDirectionState());

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("@leftPointer", ctx_r0._getArrowDirectionState());

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("@rightPointer", ctx_r0._getArrowDirectionState());
        }
      }

      var _c1 = ["*"];

      function getSortDuplicateSortableIdError(id) {
        return Error("Cannot have two MatSortables with the same id (".concat(id, ")."));
      }
      /** @docs-private */


      function getSortHeaderNotContainedWithinSortError() {
        return Error("MatSortHeader must be placed within a parent element with the MatSort directive.");
      }
      /** @docs-private */


      function getSortHeaderMissingIdError() {
        return Error("MatSortHeader must be provided with a unique id.");
      }
      /** @docs-private */


      function getSortInvalidDirectionError(direction) {
        return Error("".concat(direction, " is not a valid sort direction ('asc' or 'desc')."));
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // Boilerplate for applying mixins to MatSort.

      /** @docs-private */


      var MatSortBase = function MatSortBase() {
        _classCallCheck(this, MatSortBase);
      };

      var _MatSortMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_2__["mixinInitialized"])(Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_2__["mixinDisabled"])(MatSortBase));
      /** Container for MatSortables to manage the sort state and provide default sort parameters. */


      var MatSort = /*#__PURE__*/function (_MatSortMixinBase2) {
        _inherits(MatSort, _MatSortMixinBase2);

        var _super18 = _createSuper(MatSort);

        function MatSort() {
          var _this17;

          _classCallCheck(this, MatSort);

          _this17 = _super18.apply(this, arguments);
          /** Collection of all registered sortables that this directive manages. */

          _this17.sortables = new Map();
          /** Used to notify any child components listening to state changes. */

          _this17._stateChanges = new rxjs__WEBPACK_IMPORTED_MODULE_5__["Subject"]();
          /**
           * The direction to set when an MatSortable is initially sorted.
           * May be overriden by the MatSortable's sort start.
           */

          _this17.start = 'asc';
          _this17._direction = '';
          /** Event emitted when the user changes either the active sort or sort direction. */

          _this17.sortChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
          return _this17;
        }
        /** The sort direction of the currently active MatSortable. */


        _createClass(MatSort, [{
          key: "direction",
          get: function get() {
            return this._direction;
          },
          set: function set(direction) {
            if (direction && direction !== 'asc' && direction !== 'desc' && (typeof ngDevMode === 'undefined' || ngDevMode)) {
              throw getSortInvalidDirectionError(direction);
            }

            this._direction = direction;
          }
          /**
           * Whether to disable the user from clearing the sort by finishing the sort direction cycle.
           * May be overriden by the MatSortable's disable clear input.
           */

        }, {
          key: "disableClear",
          get: function get() {
            return this._disableClear;
          },
          set: function set(v) {
            this._disableClear = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceBooleanProperty"])(v);
          }
          /**
           * Register function to be used by the contained MatSortables. Adds the MatSortable to the
           * collection of MatSortables.
           */

        }, {
          key: "register",
          value: function register(sortable) {
            if (typeof ngDevMode === 'undefined' || ngDevMode) {
              if (!sortable.id) {
                throw getSortHeaderMissingIdError();
              }

              if (this.sortables.has(sortable.id)) {
                throw getSortDuplicateSortableIdError(sortable.id);
              }
            }

            this.sortables.set(sortable.id, sortable);
          }
          /**
           * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the
           * collection of contained MatSortables.
           */

        }, {
          key: "deregister",
          value: function deregister(sortable) {
            this.sortables["delete"](sortable.id);
          }
          /** Sets the active sort id and determines the new sort direction. */

        }, {
          key: "sort",
          value: function sort(sortable) {
            if (this.active != sortable.id) {
              this.active = sortable.id;
              this.direction = sortable.start ? sortable.start : this.start;
            } else {
              this.direction = this.getNextSortDirection(sortable);
            }

            this.sortChange.emit({
              active: this.active,
              direction: this.direction
            });
          }
          /** Returns the next sort direction of the active sortable, checking for potential overrides. */

        }, {
          key: "getNextSortDirection",
          value: function getNextSortDirection(sortable) {
            if (!sortable) {
              return '';
            } // Get the sort direction cycle with the potential sortable overrides.


            var disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;
            var sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear); // Get and return the next direction in the cycle

            var nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;

            if (nextDirectionIndex >= sortDirectionCycle.length) {
              nextDirectionIndex = 0;
            }

            return sortDirectionCycle[nextDirectionIndex];
          }
        }, {
          key: "ngOnInit",
          value: function ngOnInit() {
            this._markInitialized();
          }
        }, {
          key: "ngOnChanges",
          value: function ngOnChanges() {
            this._stateChanges.next();
          }
        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this._stateChanges.complete();
          }
        }]);

        return MatSort;
      }(_MatSortMixinBase);

      MatSort.ɵfac = function MatSort_Factory(t) {
        return ɵMatSort_BaseFactory(t || MatSort);
      };

      MatSort.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: MatSort,
        selectors: [["", "matSort", ""]],
        hostAttrs: [1, "mat-sort"],
        inputs: {
          disabled: ["matSortDisabled", "disabled"],
          start: ["matSortStart", "start"],
          direction: ["matSortDirection", "direction"],
          disableClear: ["matSortDisableClear", "disableClear"],
          active: ["matSortActive", "active"]
        },
        outputs: {
          sortChange: "matSortChange"
        },
        exportAs: ["matSort"],
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]]
      });
      MatSort.propDecorators = {
        active: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['matSortActive']
        }],
        start: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['matSortStart']
        }],
        direction: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['matSortDirection']
        }],
        disableClear: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['matSortDisableClear']
        }],
        sortChange: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"],
          args: ['matSortChange']
        }]
      };

      var ɵMatSort_BaseFactory = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](MatSort);
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](MatSort, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: '[matSort]',
            exportAs: 'matSort',
            host: {
              'class': 'mat-sort'
            },
            inputs: ['disabled: matSortDisabled']
          }]
        }], null, {
          start: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['matSortStart']
          }],
          sortChange: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"],
            args: ['matSortChange']
          }],
          direction: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['matSortDirection']
          }],
          disableClear: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['matSortDisableClear']
          }],
          active: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['matSortActive']
          }]
        });
      })();
      /** Returns the sort direction cycle to use given the provided parameters of order and clear. */


      function getSortDirectionCycle(start, disableClear) {
        var sortOrder = ['asc', 'desc'];

        if (start == 'desc') {
          sortOrder.reverse();
        }

        if (!disableClear) {
          sortOrder.push('');
        }

        return sortOrder;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var SORT_ANIMATION_TRANSITION = _angular_material_core__WEBPACK_IMPORTED_MODULE_2__["AnimationDurations"].ENTERING + ' ' + _angular_material_core__WEBPACK_IMPORTED_MODULE_2__["AnimationCurves"].STANDARD_CURVE;
      /**
       * Animations used by MatSort.
       * @docs-private
       */

      var matSortAnimations = {
        /** Animation that moves the sort indicator. */
        indicator: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["trigger"])('indicator', [Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["state"])('active-asc, asc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["style"])({
          transform: 'translateY(0px)'
        })), // 10px is the height of the sort indicator, minus the width of the pointers
        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["state"])('active-desc, desc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["style"])({
          transform: 'translateY(10px)'
        })), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["transition"])('active-asc <=> active-desc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["animate"])(SORT_ANIMATION_TRANSITION))]),

        /** Animation that rotates the left pointer of the indicator based on the sorting direction. */
        leftPointer: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["trigger"])('leftPointer', [Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["state"])('active-asc, asc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["style"])({
          transform: 'rotate(-45deg)'
        })), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["state"])('active-desc, desc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["style"])({
          transform: 'rotate(45deg)'
        })), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["transition"])('active-asc <=> active-desc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["animate"])(SORT_ANIMATION_TRANSITION))]),

        /** Animation that rotates the right pointer of the indicator based on the sorting direction. */
        rightPointer: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["trigger"])('rightPointer', [Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["state"])('active-asc, asc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["style"])({
          transform: 'rotate(45deg)'
        })), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["state"])('active-desc, desc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["style"])({
          transform: 'rotate(-45deg)'
        })), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["transition"])('active-asc <=> active-desc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["animate"])(SORT_ANIMATION_TRANSITION))]),

        /** Animation that controls the arrow opacity. */
        arrowOpacity: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["trigger"])('arrowOpacity', [Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["state"])('desc-to-active, asc-to-active, active', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["style"])({
          opacity: 1
        })), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["state"])('desc-to-hint, asc-to-hint, hint', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["style"])({
          opacity: .54
        })), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["state"])('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["style"])({
          opacity: 0
        })), // Transition between all states except for immediate transitions
        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["transition"])('* => asc, * => desc, * => active, * => hint, * => void', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["animate"])('0ms')), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["transition"])('* <=> *', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["animate"])(SORT_ANIMATION_TRANSITION))]),

        /**
         * Animation for the translation of the arrow as a whole. States are separated into two
         * groups: ones with animations and others that are immediate. Immediate states are asc, desc,
         * peek, and active. The other states define a specific animation (source-to-destination)
         * and are determined as a function of their prev user-perceived state and what the next state
         * should be.
         */
        arrowPosition: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["trigger"])('arrowPosition', [// Hidden Above => Hint Center
        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["transition"])('* => desc-to-hint, * => desc-to-active', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["animate"])(SORT_ANIMATION_TRANSITION, Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["keyframes"])([Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["style"])({
          transform: 'translateY(-25%)'
        }), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["style"])({
          transform: 'translateY(0)'
        })]))), // Hint Center => Hidden Below
        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["transition"])('* => hint-to-desc, * => active-to-desc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["animate"])(SORT_ANIMATION_TRANSITION, Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["keyframes"])([Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["style"])({
          transform: 'translateY(0)'
        }), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["style"])({
          transform: 'translateY(25%)'
        })]))), // Hidden Below => Hint Center
        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["transition"])('* => asc-to-hint, * => asc-to-active', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["animate"])(SORT_ANIMATION_TRANSITION, Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["keyframes"])([Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["style"])({
          transform: 'translateY(25%)'
        }), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["style"])({
          transform: 'translateY(0)'
        })]))), // Hint Center => Hidden Above
        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["transition"])('* => hint-to-asc, * => active-to-asc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["animate"])(SORT_ANIMATION_TRANSITION, Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["keyframes"])([Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["style"])({
          transform: 'translateY(0)'
        }), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["style"])({
          transform: 'translateY(-25%)'
        })]))), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["state"])('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["style"])({
          transform: 'translateY(0)'
        })), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["state"])('hint-to-desc, active-to-desc, desc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["style"])({
          transform: 'translateY(-25%)'
        })), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["state"])('hint-to-asc, active-to-asc, asc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["style"])({
          transform: 'translateY(25%)'
        }))]),

        /** Necessary trigger that calls animate on children animations. */
        allowChildren: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["trigger"])('allowChildren', [Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["transition"])('* <=> *', [Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["query"])('@*', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["animateChild"])(), {
          optional: true
        })])])
      };
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and
       * include it in a custom provider.
       */

      var MatSortHeaderIntl = function MatSortHeaderIntl() {
        _classCallCheck(this, MatSortHeaderIntl);

        /**
         * Stream that emits whenever the labels here are changed. Use this to notify
         * components if the labels have changed after initialization.
         */
        this.changes = new rxjs__WEBPACK_IMPORTED_MODULE_5__["Subject"]();
        /**
         * ARIA label for the sorting button.
         * @deprecated Not used anymore. To be removed.
         * @breaking-change 8.0.0
         */

        this.sortButtonLabel = function (id) {
          return "Change sorting for ".concat(id);
        };
      };

      MatSortHeaderIntl.ɵfac = function MatSortHeaderIntl_Factory(t) {
        return new (t || MatSortHeaderIntl)();
      };

      MatSortHeaderIntl.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({
        factory: function MatSortHeaderIntl_Factory() {
          return new MatSortHeaderIntl();
        },
        token: MatSortHeaderIntl,
        providedIn: "root"
      });
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](MatSortHeaderIntl, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"],
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [];
        }, null);
      })();
      /** @docs-private */


      function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl) {
        return parentIntl || new MatSortHeaderIntl();
      }
      /** @docs-private */


      var MAT_SORT_HEADER_INTL_PROVIDER = {
        // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.
        provide: MatSortHeaderIntl,
        deps: [[new _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"](), new _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"](), MatSortHeaderIntl]],
        useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY
      };
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // Boilerplate for applying mixins to the sort header.

      /** @docs-private */

      var MatSortHeaderBase = function MatSortHeaderBase() {
        _classCallCheck(this, MatSortHeaderBase);
      };

      var _MatSortHeaderMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_2__["mixinDisabled"])(MatSortHeaderBase);
      /**
       * Applies sorting behavior (click to change sort) and styles to an element, including an
       * arrow to display the current sort direction.
       *
       * Must be provided with an id and contained within a parent MatSort directive.
       *
       * If used on header cells in a CdkTable, it will automatically default its id from its containing
       * column definition.
       */


      var MatSortHeader = /*#__PURE__*/function (_MatSortHeaderMixinBa) {
        _inherits(MatSortHeader, _MatSortHeaderMixinBa);

        var _super19 = _createSuper(MatSortHeader);

        function MatSortHeader(_intl, changeDetectorRef, // `MatSort` is not optionally injected, but just asserted manually w/ better error.
        // tslint:disable-next-line: lightweight-tokens
        _sort, _columnDef, _focusMonitor, _elementRef) {
          var _this18;

          _classCallCheck(this, MatSortHeader);

          // Note that we use a string token for the `_columnDef`, because the value is provided both by
          // `material/table` and `cdk/table` and we can't have the CDK depending on Material,
          // and we want to avoid having the sort header depending on the CDK table because
          // of this single reference.
          _this18 = _super19.call(this);
          _this18._intl = _intl;
          _this18._sort = _sort;
          _this18._columnDef = _columnDef;
          _this18._focusMonitor = _focusMonitor;
          _this18._elementRef = _elementRef;
          /**
           * Flag set to true when the indicator should be displayed while the sort is not active. Used to
           * provide an affordance that the header is sortable by showing on focus and hover.
           */

          _this18._showIndicatorHint = false;
          /** The direction the arrow should be facing according to the current state. */

          _this18._arrowDirection = '';
          /**
           * Whether the view state animation should show the transition between the `from` and `to` states.
           */

          _this18._disableViewStateAnimation = false;
          /** Sets the position of the arrow that displays when sorted. */

          _this18.arrowPosition = 'after';

          if (!_sort && (typeof ngDevMode === 'undefined' || ngDevMode)) {
            throw getSortHeaderNotContainedWithinSortError();
          }

          _this18._rerenderSubscription = Object(rxjs__WEBPACK_IMPORTED_MODULE_5__["merge"])(_sort.sortChange, _sort._stateChanges, _intl.changes).subscribe(function () {
            if (_this18._isSorted()) {
              _this18._updateArrowDirection();
            } // If this header was recently active and now no longer sorted, animate away the arrow.


            if (!_this18._isSorted() && _this18._viewState && _this18._viewState.toState === 'active') {
              _this18._disableViewStateAnimation = false;

              _this18._setAnimationTransitionState({
                fromState: 'active',
                toState: _this18._arrowDirection
              });
            }

            changeDetectorRef.markForCheck();
          });
          return _this18;
        }
        /** Overrides the disable clear value of the containing MatSort for this MatSortable. */


        _createClass(MatSortHeader, [{
          key: "disableClear",
          get: function get() {
            return this._disableClear;
          },
          set: function set(v) {
            this._disableClear = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceBooleanProperty"])(v);
          }
        }, {
          key: "ngOnInit",
          value: function ngOnInit() {
            if (!this.id && this._columnDef) {
              this.id = this._columnDef.name;
            } // Initialize the direction of the arrow and set the view state to be immediately that state.


            this._updateArrowDirection();

            this._setAnimationTransitionState({
              toState: this._isSorted() ? 'active' : this._arrowDirection
            });

            this._sort.register(this);
          }
        }, {
          key: "ngAfterViewInit",
          value: function ngAfterViewInit() {
            var _this19 = this;

            // We use the focus monitor because we also want to style
            // things differently based on the focus origin.
            this._focusMonitor.monitor(this._elementRef, true).subscribe(function (origin) {
              return _this19._setIndicatorHintVisible(!!origin);
            });
          }
        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this._focusMonitor.stopMonitoring(this._elementRef);

            this._sort.deregister(this);

            this._rerenderSubscription.unsubscribe();
          }
          /**
           * Sets the "hint" state such that the arrow will be semi-transparently displayed as a hint to the
           * user showing what the active sort will become. If set to false, the arrow will fade away.
           */

        }, {
          key: "_setIndicatorHintVisible",
          value: function _setIndicatorHintVisible(visible) {
            // No-op if the sort header is disabled - should not make the hint visible.
            if (this._isDisabled() && visible) {
              return;
            }

            this._showIndicatorHint = visible;

            if (!this._isSorted()) {
              this._updateArrowDirection();

              if (this._showIndicatorHint) {
                this._setAnimationTransitionState({
                  fromState: this._arrowDirection,
                  toState: 'hint'
                });
              } else {
                this._setAnimationTransitionState({
                  fromState: 'hint',
                  toState: this._arrowDirection
                });
              }
            }
          }
          /**
           * Sets the animation transition view state for the arrow's position and opacity. If the
           * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that
           * no animation appears.
           */

        }, {
          key: "_setAnimationTransitionState",
          value: function _setAnimationTransitionState(viewState) {
            this._viewState = viewState; // If the animation for arrow position state (opacity/translation) should be disabled,
            // remove the fromState so that it jumps right to the toState.

            if (this._disableViewStateAnimation) {
              this._viewState = {
                toState: viewState.toState
              };
            }
          }
          /** Triggers the sort on this sort header and removes the indicator hint. */

        }, {
          key: "_toggleOnInteraction",
          value: function _toggleOnInteraction() {
            this._sort.sort(this); // Do not show the animation if the header was already shown in the right position.


            if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {
              this._disableViewStateAnimation = true;
            } // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into
            // the direction it is facing.


            var viewState = this._isSorted() ? {
              fromState: this._arrowDirection,
              toState: 'active'
            } : {
              fromState: 'active',
              toState: this._arrowDirection
            };

            this._setAnimationTransitionState(viewState);

            this._showIndicatorHint = false;
          }
        }, {
          key: "_handleClick",
          value: function _handleClick() {
            if (!this._isDisabled()) {
              this._toggleOnInteraction();
            }
          }
        }, {
          key: "_handleKeydown",
          value: function _handleKeydown(event) {
            if (!this._isDisabled() && (event.keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_4__["SPACE"] || event.keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_4__["ENTER"])) {
              event.preventDefault();

              this._toggleOnInteraction();
            }
          }
          /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */

        }, {
          key: "_isSorted",
          value: function _isSorted() {
            return this._sort.active == this.id && (this._sort.direction === 'asc' || this._sort.direction === 'desc');
          }
          /** Returns the animation state for the arrow direction (indicator and pointers). */

        }, {
          key: "_getArrowDirectionState",
          value: function _getArrowDirectionState() {
            return "".concat(this._isSorted() ? 'active-' : '').concat(this._arrowDirection);
          }
          /** Returns the arrow position state (opacity, translation). */

        }, {
          key: "_getArrowViewState",
          value: function _getArrowViewState() {
            var fromState = this._viewState.fromState;
            return (fromState ? "".concat(fromState, "-to-") : '') + this._viewState.toState;
          }
          /**
           * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be
           * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently
           * active sorted direction. The reason this is updated through a function is because the direction
           * should only be changed at specific times - when deactivated but the hint is displayed and when
           * the sort is active and the direction changes. Otherwise the arrow's direction should linger
           * in cases such as the sort becoming deactivated but we want to animate the arrow away while
           * preserving its direction, even though the next sort direction is actually different and should
           * only be changed once the arrow displays again (hint or activation).
           */

        }, {
          key: "_updateArrowDirection",
          value: function _updateArrowDirection() {
            this._arrowDirection = this._isSorted() ? this._sort.direction : this.start || this._sort.start;
          }
        }, {
          key: "_isDisabled",
          value: function _isDisabled() {
            return this._sort.disabled || this.disabled;
          }
          /**
           * Gets the aria-sort attribute that should be applied to this sort header. If this header
           * is not sorted, returns null so that the attribute is removed from the host element. Aria spec
           * says that the aria-sort property should only be present on one header at a time, so removing
           * ensures this is true.
           */

        }, {
          key: "_getAriaSortAttribute",
          value: function _getAriaSortAttribute() {
            if (!this._isSorted()) {
              return 'none';
            }

            return this._sort.direction == 'asc' ? 'ascending' : 'descending';
          }
          /** Whether the arrow inside the sort header should be rendered. */

        }, {
          key: "_renderArrow",
          value: function _renderArrow() {
            return !this._isDisabled() || this._isSorted();
          }
        }]);

        return MatSortHeader;
      }(_MatSortHeaderMixinBase);

      MatSortHeader.ɵfac = function MatSortHeader_Factory(t) {
        return new (t || MatSortHeader)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](MatSortHeaderIntl), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](MatSort, 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"]('MAT_SORT_HEADER_COLUMN_DEF', 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_3__["FocusMonitor"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]));
      };

      MatSortHeader.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
        type: MatSortHeader,
        selectors: [["", "mat-sort-header", ""]],
        hostAttrs: [1, "mat-sort-header"],
        hostVars: 3,
        hostBindings: function MatSortHeader_HostBindings(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function MatSortHeader_click_HostBindingHandler() {
              return ctx._handleClick();
            })("keydown", function MatSortHeader_keydown_HostBindingHandler($event) {
              return ctx._handleKeydown($event);
            })("mouseenter", function MatSortHeader_mouseenter_HostBindingHandler() {
              return ctx._setIndicatorHintVisible(true);
            })("mouseleave", function MatSortHeader_mouseleave_HostBindingHandler() {
              return ctx._setIndicatorHintVisible(false);
            });
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-sort", ctx._getAriaSortAttribute());

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("mat-sort-header-disabled", ctx._isDisabled());
          }
        },
        inputs: {
          disabled: "disabled",
          arrowPosition: "arrowPosition",
          disableClear: "disableClear",
          id: ["mat-sort-header", "id"],
          start: "start"
        },
        exportAs: ["matSortHeader"],
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]],
        attrs: _c0,
        ngContentSelectors: _c1,
        decls: 4,
        vars: 6,
        consts: [["role", "button", 1, "mat-sort-header-container", "mat-focus-indicator"], [1, "mat-sort-header-content"], ["class", "mat-sort-header-arrow", 4, "ngIf"], [1, "mat-sort-header-arrow"], [1, "mat-sort-header-stem"], [1, "mat-sort-header-indicator"], [1, "mat-sort-header-pointer-left"], [1, "mat-sort-header-pointer-right"], [1, "mat-sort-header-pointer-middle"]],
        template: function MatSortHeader_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojectionDef"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "div", 1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](2);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, MatSortHeader_div_3_Template, 6, 6, "div", 2);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("mat-sort-header-sorted", ctx._isSorted())("mat-sort-header-position-before", ctx.arrowPosition == "before");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("tabindex", ctx._isDisabled() ? null : 0);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx._renderArrow());
          }
        },
        directives: [_angular_common__WEBPACK_IMPORTED_MODULE_7__["NgIf"]],
        styles: [".mat-sort-header-container{display:flex;cursor:pointer;align-items:center;letter-spacing:normal;outline:0}[mat-sort-header].cdk-keyboard-focused .mat-sort-header-container,[mat-sort-header].cdk-program-focused .mat-sort-header-container{border-bottom:solid 1px currentColor}.mat-sort-header-disabled .mat-sort-header-container{cursor:default}.mat-sort-header-content{text-align:center;display:flex;align-items:center}.mat-sort-header-position-before{flex-direction:row-reverse}.mat-sort-header-arrow{height:12px;width:12px;min-width:12px;position:relative;display:flex;opacity:0}.mat-sort-header-arrow,[dir=rtl] .mat-sort-header-position-before .mat-sort-header-arrow{margin:0 0 0 6px}.mat-sort-header-position-before .mat-sort-header-arrow,[dir=rtl] .mat-sort-header-arrow{margin:0 6px 0 0}.mat-sort-header-stem{background:currentColor;height:10px;width:2px;margin:auto;display:flex;align-items:center}.cdk-high-contrast-active .mat-sort-header-stem{width:0;border-left:solid 2px}.mat-sort-header-indicator{width:100%;height:2px;display:flex;align-items:center;position:absolute;top:0;left:0}.mat-sort-header-pointer-middle{margin:auto;height:2px;width:2px;background:currentColor;transform:rotate(45deg)}.cdk-high-contrast-active .mat-sort-header-pointer-middle{width:0;height:0;border-top:solid 2px;border-left:solid 2px}.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{background:currentColor;width:6px;height:2px;position:absolute;top:0}.cdk-high-contrast-active .mat-sort-header-pointer-left,.cdk-high-contrast-active .mat-sort-header-pointer-right{width:0;height:0;border-left:solid 6px;border-top:solid 2px}.mat-sort-header-pointer-left{transform-origin:right;left:0}.mat-sort-header-pointer-right{transform-origin:left;right:0}\n"],
        encapsulation: 2,
        data: {
          animation: [matSortAnimations.indicator, matSortAnimations.leftPointer, matSortAnimations.rightPointer, matSortAnimations.arrowOpacity, matSortAnimations.arrowPosition, matSortAnimations.allowChildren]
        },
        changeDetection: 0
      });

      MatSortHeader.ctorParameters = function () {
        return [{
          type: MatSortHeaderIntl
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"]
        }, {
          type: MatSort,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: ['MAT_SORT_HEADER_COLUMN_DEF']
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }]
        }, {
          type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_3__["FocusMonitor"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
        }];
      };

      MatSortHeader.propDecorators = {
        id: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['mat-sort-header']
        }],
        arrowPosition: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        start: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        disableClear: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }]
      };
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](MatSortHeader, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
          args: [{
            selector: '[mat-sort-header]',
            exportAs: 'matSortHeader',
            template: "<!--\n  We set the `tabindex` on an element inside the table header, rather than the header itself,\n  because of a bug in NVDA where having a `tabindex` on a `th` breaks keyboard navigation in the\n  table (see https://github.com/nvaccess/nvda/issues/7718). This allows for the header to both\n  be focusable, and have screen readers read out its `aria-sort` state. We prefer this approach\n  over having a button with an `aria-label` inside the header, because the button's `aria-label`\n  will be read out as the user is navigating the table's cell (see #13012).\n\n  The approach is based off of: https://dequeuniversity.com/library/aria/tables/sf-sortable-grid\n-->\n<div class=\"mat-sort-header-container mat-focus-indicator\"\n     [class.mat-sort-header-sorted]=\"_isSorted()\"\n     [class.mat-sort-header-position-before]=\"arrowPosition == 'before'\"\n     [attr.tabindex]=\"_isDisabled() ? null : 0\"\n     role=\"button\">\n\n  <!--\n    TODO(crisbeto): this div isn't strictly necessary, but we have to keep it due to a large\n    number of screenshot diff failures. It should be removed eventually. Note that the difference\n    isn't visible with a shorter header, but once it breaks up into multiple lines, this element\n    causes it to be center-aligned, whereas removing it will keep the text to the left.\n  -->\n  <div class=\"mat-sort-header-content\">\n    <ng-content></ng-content>\n  </div>\n\n  <!-- Disable animations while a current animation is running -->\n  <div class=\"mat-sort-header-arrow\"\n       *ngIf=\"_renderArrow()\"\n       [@arrowOpacity]=\"_getArrowViewState()\"\n       [@arrowPosition]=\"_getArrowViewState()\"\n       [@allowChildren]=\"_getArrowDirectionState()\"\n       (@arrowPosition.start)=\"_disableViewStateAnimation = true\"\n       (@arrowPosition.done)=\"_disableViewStateAnimation = false\">\n    <div class=\"mat-sort-header-stem\"></div>\n    <div class=\"mat-sort-header-indicator\" [@indicator]=\"_getArrowDirectionState()\">\n      <div class=\"mat-sort-header-pointer-left\" [@leftPointer]=\"_getArrowDirectionState()\"></div>\n      <div class=\"mat-sort-header-pointer-right\" [@rightPointer]=\"_getArrowDirectionState()\"></div>\n      <div class=\"mat-sort-header-pointer-middle\"></div>\n    </div>\n  </div>\n</div>\n",
            host: {
              'class': 'mat-sort-header',
              '(click)': '_handleClick()',
              '(keydown)': '_handleKeydown($event)',
              '(mouseenter)': '_setIndicatorHintVisible(true)',
              '(mouseleave)': '_setIndicatorHintVisible(false)',
              '[attr.aria-sort]': '_getAriaSortAttribute()',
              '[class.mat-sort-header-disabled]': '_isDisabled()'
            },
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
            inputs: ['disabled'],
            animations: [matSortAnimations.indicator, matSortAnimations.leftPointer, matSortAnimations.rightPointer, matSortAnimations.arrowOpacity, matSortAnimations.arrowPosition, matSortAnimations.allowChildren],
            styles: [".mat-sort-header-container{display:flex;cursor:pointer;align-items:center;letter-spacing:normal;outline:0}[mat-sort-header].cdk-keyboard-focused .mat-sort-header-container,[mat-sort-header].cdk-program-focused .mat-sort-header-container{border-bottom:solid 1px currentColor}.mat-sort-header-disabled .mat-sort-header-container{cursor:default}.mat-sort-header-content{text-align:center;display:flex;align-items:center}.mat-sort-header-position-before{flex-direction:row-reverse}.mat-sort-header-arrow{height:12px;width:12px;min-width:12px;position:relative;display:flex;opacity:0}.mat-sort-header-arrow,[dir=rtl] .mat-sort-header-position-before .mat-sort-header-arrow{margin:0 0 0 6px}.mat-sort-header-position-before .mat-sort-header-arrow,[dir=rtl] .mat-sort-header-arrow{margin:0 6px 0 0}.mat-sort-header-stem{background:currentColor;height:10px;width:2px;margin:auto;display:flex;align-items:center}.cdk-high-contrast-active .mat-sort-header-stem{width:0;border-left:solid 2px}.mat-sort-header-indicator{width:100%;height:2px;display:flex;align-items:center;position:absolute;top:0;left:0}.mat-sort-header-pointer-middle{margin:auto;height:2px;width:2px;background:currentColor;transform:rotate(45deg)}.cdk-high-contrast-active .mat-sort-header-pointer-middle{width:0;height:0;border-top:solid 2px;border-left:solid 2px}.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{background:currentColor;width:6px;height:2px;position:absolute;top:0}.cdk-high-contrast-active .mat-sort-header-pointer-left,.cdk-high-contrast-active .mat-sort-header-pointer-right{width:0;height:0;border-left:solid 6px;border-top:solid 2px}.mat-sort-header-pointer-left{transform-origin:right;left:0}.mat-sort-header-pointer-right{transform-origin:left;right:0}\n"]
          }]
        }], function () {
          return [{
            type: MatSortHeaderIntl
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"]
          }, {
            type: MatSort,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }]
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: ['MAT_SORT_HEADER_COLUMN_DEF']
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }]
          }, {
            type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_3__["FocusMonitor"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
          }];
        }, {
          arrowPosition: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }],
          disableClear: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }],
          id: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['mat-sort-header']
          }],
          start: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }]
        });
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var MatSortModule = function MatSortModule() {
        _classCallCheck(this, MatSortModule);
      };

      MatSortModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
        type: MatSortModule
      });
      MatSortModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
        factory: function MatSortModule_Factory(t) {
          return new (t || MatSortModule)();
        },
        providers: [MAT_SORT_HEADER_INTL_PROVIDER],
        imports: [[_angular_common__WEBPACK_IMPORTED_MODULE_7__["CommonModule"]]]
      });

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](MatSortModule, {
          declarations: function declarations() {
            return [MatSort, MatSortHeader];
          },
          imports: function imports() {
            return [_angular_common__WEBPACK_IMPORTED_MODULE_7__["CommonModule"]];
          },
          exports: function exports() {
            return [MatSort, MatSortHeader];
          }
        });
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](MatSortModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
          args: [{
            imports: [_angular_common__WEBPACK_IMPORTED_MODULE_7__["CommonModule"]],
            exports: [MatSort, MatSortHeader],
            declarations: [MatSort, MatSortHeader],
            providers: [MAT_SORT_HEADER_INTL_PROVIDER]
          }]
        }], null, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Generated bundle index. Do not edit.
       */
      //# sourceMappingURL=sort.js.map

      /***/

    },

    /***/
    "Dkky": function Dkky(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : French (Switzerland) [fr-ch]
      //! author : Gaspard Bucher : https://github.com/gaspard
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var frCh = moment.defineLocale('fr-ch', {
          months: 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
          monthsShort: 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
          monthsParseExact: true,
          weekdays: 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
          weekdaysShort: 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
          weekdaysMin: 'di_lu_ma_me_je_ve_sa'.split('_'),
          weekdaysParseExact: true,
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
          },
          calendar: {
            sameDay: '[Aujourd’hui à] LT',
            nextDay: '[Demain à] LT',
            nextWeek: 'dddd [à] LT',
            lastDay: '[Hier à] LT',
            lastWeek: 'dddd [dernier à] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: 'dans %s',
            past: 'il y a %s',
            s: 'quelques secondes',
            ss: '%d secondes',
            m: 'une minute',
            mm: '%d minutes',
            h: 'une heure',
            hh: '%d heures',
            d: 'un jour',
            dd: '%d jours',
            M: 'un mois',
            MM: '%d mois',
            y: 'un an',
            yy: '%d ans'
          },
          dayOfMonthOrdinalParse: /\d{1,2}(er|e)/,
          ordinal: function ordinal(number, period) {
            switch (period) {
              // Words with masculine grammatical gender: mois, trimestre, jour
              default:
              case 'M':
              case 'Q':
              case 'D':
              case 'DDD':
              case 'd':
                return number + (number === 1 ? 'er' : 'e');
              // Words with feminine grammatical gender: semaine

              case 'w':
              case 'W':
                return number + (number === 1 ? 're' : 'e');
            }
          },
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.

          }
        });
        return frCh;
      });
      /***/

    },

    /***/
    "Dmvi": function Dmvi(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : English (Australia) [en-au]
      //! author : Jared Morse : https://github.com/jarcoal
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var enAu = moment.defineLocale('en-au', {
          months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
          monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
          weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
          weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
          weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
          longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY h:mm A',
            LLLL: 'dddd, D MMMM YYYY h:mm A'
          },
          calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            ss: '%d seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years'
          },
          dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
          ordinal: function ordinal(number) {
            var b = number % 10,
                output = ~~(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
            return number + output;
          },
          week: {
            dow: 0,
            // Sunday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.

          }
        });
        return enAu;
      });
      /***/

    },

    /***/
    "DoHr": function DoHr(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Turkish [tr]
      //! authors : Erhan Gundogan : https://github.com/erhangundogan,
      //!           Burak Yiğit Kaya: https://github.com/BYK
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var suffixes = {
          1: "'inci",
          5: "'inci",
          8: "'inci",
          70: "'inci",
          80: "'inci",
          2: "'nci",
          7: "'nci",
          20: "'nci",
          50: "'nci",
          3: "'üncü",
          4: "'üncü",
          100: "'üncü",
          6: "'ncı",
          9: "'uncu",
          10: "'uncu",
          30: "'uncu",
          60: "'ıncı",
          90: "'ıncı"
        };
        var tr = moment.defineLocale('tr', {
          months: 'Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık'.split('_'),
          monthsShort: 'Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara'.split('_'),
          weekdays: 'Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi'.split('_'),
          weekdaysShort: 'Paz_Pts_Sal_Çar_Per_Cum_Cts'.split('_'),
          weekdaysMin: 'Pz_Pt_Sa_Ça_Pe_Cu_Ct'.split('_'),
          meridiem: function meridiem(hours, minutes, isLower) {
            if (hours < 12) {
              return isLower ? 'öö' : 'ÖÖ';
            } else {
              return isLower ? 'ös' : 'ÖS';
            }
          },
          meridiemParse: /öö|ÖÖ|ös|ÖS/,
          isPM: function isPM(input) {
            return input === 'ös' || input === 'ÖS';
          },
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
          },
          calendar: {
            sameDay: '[bugün saat] LT',
            nextDay: '[yarın saat] LT',
            nextWeek: '[gelecek] dddd [saat] LT',
            lastDay: '[dün] LT',
            lastWeek: '[geçen] dddd [saat] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: '%s sonra',
            past: '%s önce',
            s: 'birkaç saniye',
            ss: '%d saniye',
            m: 'bir dakika',
            mm: '%d dakika',
            h: 'bir saat',
            hh: '%d saat',
            d: 'bir gün',
            dd: '%d gün',
            w: 'bir hafta',
            ww: '%d hafta',
            M: 'bir ay',
            MM: '%d ay',
            y: 'bir yıl',
            yy: '%d yıl'
          },
          ordinal: function ordinal(number, period) {
            switch (period) {
              case 'd':
              case 'D':
              case 'Do':
              case 'DD':
                return number;

              default:
                if (number === 0) {
                  // special case for zero
                  return number + "'ıncı";
                }

                var a = number % 10,
                    b = number % 100 - a,
                    c = number >= 100 ? 100 : null;
                return number + (suffixes[a] || suffixes[b] || suffixes[c]);
            }
          },
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 7th is the first week of the year.

          }
        });
        return tr;
      });
      /***/

    },

    /***/
    "DrJD": function DrJD(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony default export */


      __webpack_exports__["default"] = "<div class=\"row\">\r\n  <div class=\"col-md-12\">\r\n    <div class=\"card\">\r\n      <div class=\"card-header\">\r\n        <h5 class=\"card-title\">Notifications</h5>\r\n        <p class=\"card-category\">Handcrafted by our friend\r\n          <a target=\"_blank\" href=\"https://github.com/mouse0270\">Robert McIntosh</a>. Please checkout the\r\n          <a href=\"http://bootstrap-notify.remabledesigns.com/\" target=\"_blank\">full documentation.</a>\r\n        </p>\r\n      </div>\r\n      <div class=\"card-body\">\r\n        <div class=\"row\">\r\n          <div class=\"col-md-6\">\r\n            <div class=\"card card-plain\">\r\n              <div class=\"card-header\">\r\n                <h5 class=\"card-title\">Notifications Style</h5>\r\n              </div>\r\n              <div class=\"card-body\">\r\n                <div class=\"alert alert-info\">\r\n                  <span>This is a plain notification</span>\r\n                </div>\r\n                <div class=\"alert alert-info alert-dismissible fade show\">\r\n                  <button type=\"button\" aria-hidden=\"true\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\r\n                    <i class=\"nc-icon nc-simple-remove\"></i>\r\n                  </button>\r\n                  <span>This is a notification with close button.</span>\r\n                </div>\r\n                <div class=\"alert alert-info alert-with-icon alert-dismissible fade show\" data-notify=\"container\">\r\n                  <button type=\"button\" aria-hidden=\"true\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\r\n                    <i class=\"nc-icon nc-simple-remove\"></i>\r\n                  </button>\r\n                  <span data-notify=\"icon\" class=\"nc-icon nc-bell-55\"></span>\r\n                  <span data-notify=\"message\">This is a notification with close button and icon.</span>\r\n                </div>\r\n                <div class=\"alert alert-info alert-with-icon alert-dismissible fade show\" data-notify=\"container\">\r\n                  <button type=\"button\" aria-hidden=\"true\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\r\n                    <i class=\"nc-icon nc-simple-remove\"></i>\r\n                  </button>\r\n                  <span data-notify=\"icon\" class=\"nc-icon nc-chart-pie-36\"></span>\r\n                  <span data-notify=\"message\">This is a notification with close button and icon and have many lines. You can see that the icon and the close button are always vertically aligned. This is a beautiful notification. So you don't have to worry about the style.</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-md-6\">\r\n            <div class=\"card card-plain\">\r\n              <div class=\"card-header\">\r\n                <h5 class=\"card-title\">Notification states</h5>\r\n              </div>\r\n              <div class=\"card-body\">\r\n                <div class=\"alert alert-primary alert-dismissible fade show\">\r\n                  <button type=\"button\" aria-hidden=\"true\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\r\n                    <i class=\"nc-icon nc-simple-remove\"></i>\r\n                  </button>\r\n                  <span>\r\n                    <b> Primary - </b> This is a regular notification made with \".alert-primary\"</span>\r\n                </div>\r\n                <div class=\"alert alert-info alert-dismissible fade show\">\r\n                  <button type=\"button\" aria-hidden=\"true\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\r\n                    <i class=\"nc-icon nc-simple-remove\"></i>\r\n                  </button>\r\n                  <span>\r\n                    <b> Info - </b> This is a regular notification made with \".alert-info\"</span>\r\n                </div>\r\n                <div class=\"alert alert-success alert-dismissible fade show\">\r\n                  <button type=\"button\" aria-hidden=\"true\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\r\n                    <i class=\"nc-icon nc-simple-remove\"></i>\r\n                  </button>\r\n                  <span>\r\n                    <b> Success - </b> This is a regular notification made with \".alert-success\"</span>\r\n                </div>\r\n                <div class=\"alert alert-warning alert-dismissible fade show\">\r\n                  <button type=\"button\" aria-hidden=\"true\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\r\n                    <i class=\"nc-icon nc-simple-remove\"></i>\r\n                  </button>\r\n                  <span>\r\n                    <b> Warning - </b> This is a regular notification made with \".alert-warning\"</span>\r\n                </div>\r\n                <div class=\"alert alert-danger alert-dismissible fade show\">\r\n                  <button type=\"button\" aria-hidden=\"true\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\r\n                    <i class=\"nc-icon nc-simple-remove\"></i>\r\n                  </button>\r\n                  <span>\r\n                    <b> Danger - </b> This is a regular notification made with \".alert-danger\"</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n<div class=\"row\">\r\n  <div class=\"col-md-12\">\r\n    <div class=\"card\">\r\n      <div class=\"card-body\">\r\n        <div class=\"places-buttons\">\r\n          <div class=\"row\">\r\n            <div class=\"col-md-6 ml-auto mr-auto text-center\">\r\n              <h4 class=\"card-title\">\r\n                Notifications Places\r\n                <p class=\"category\">Click to view notifications</p>\r\n              </h4>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-lg-8 ml-auto mr-auto\">\r\n              <div class=\"row\">\r\n                <div class=\"col-md-4\">\r\n                  <button class=\"btn btn-primary btn-block\" (click)=\"showNotification('top','left')\">Top Left</button>\r\n                </div>\r\n                <div class=\"col-md-4\">\r\n                  <button class=\"btn btn-primary btn-block\" (click)=\"showNotification('top','center')\">Top Center</button>\r\n                </div>\r\n                <div class=\"col-md-4\">\r\n                  <button class=\"btn btn-primary btn-block\" (click)=\"showNotification('top','right')\">Top Right</button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-lg-8 ml-auto mr-auto\">\r\n              <div class=\"row\">\r\n                <div class=\"col-md-4\">\r\n                  <button class=\"btn btn-primary btn-block\" (click)=\"showNotification('bottom','left')\">Bottom Left</button>\r\n                </div>\r\n                <div class=\"col-md-4\">\r\n                  <button class=\"btn btn-primary btn-block\" (click)=\"showNotification('bottom','center')\">Bottom Center</button>\r\n                </div>\r\n                <div class=\"col-md-4\">\r\n                  <button class=\"btn btn-primary btn-block\" (click)=\"showNotification('bottom','right')\">Bottom Right</button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n";
      /***/
    },

    /***/
    "DxQv": function DxQv(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Danish [da]
      //! author : Ulrik Nielsen : https://github.com/mrbase
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var da = moment.defineLocale('da', {
          months: 'januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december'.split('_'),
          monthsShort: 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
          weekdays: 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
          weekdaysShort: 'søn_man_tir_ons_tor_fre_lør'.split('_'),
          weekdaysMin: 'sø_ma_ti_on_to_fr_lø'.split('_'),
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY HH:mm',
            LLLL: 'dddd [d.] D. MMMM YYYY [kl.] HH:mm'
          },
          calendar: {
            sameDay: '[i dag kl.] LT',
            nextDay: '[i morgen kl.] LT',
            nextWeek: 'på dddd [kl.] LT',
            lastDay: '[i går kl.] LT',
            lastWeek: '[i] dddd[s kl.] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: 'om %s',
            past: '%s siden',
            s: 'få sekunder',
            ss: '%d sekunder',
            m: 'et minut',
            mm: '%d minutter',
            h: 'en time',
            hh: '%d timer',
            d: 'en dag',
            dd: '%d dage',
            M: 'en måned',
            MM: '%d måneder',
            y: 'et år',
            yy: '%d år'
          },
          dayOfMonthOrdinalParse: /\d{1,2}\./,
          ordinal: '%d.',
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.

          }
        });
        return da;
      });
      /***/

    },

    /***/
    "Dzi0": function Dzi0(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Tagalog (Philippines) [tl-ph]
      //! author : Dan Hagman : https://github.com/hagmandan
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var tlPh = moment.defineLocale('tl-ph', {
          months: 'Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre'.split('_'),
          monthsShort: 'Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis'.split('_'),
          weekdays: 'Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado'.split('_'),
          weekdaysShort: 'Lin_Lun_Mar_Miy_Huw_Biy_Sab'.split('_'),
          weekdaysMin: 'Li_Lu_Ma_Mi_Hu_Bi_Sab'.split('_'),
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'MM/D/YYYY',
            LL: 'MMMM D, YYYY',
            LLL: 'MMMM D, YYYY HH:mm',
            LLLL: 'dddd, MMMM DD, YYYY HH:mm'
          },
          calendar: {
            sameDay: 'LT [ngayong araw]',
            nextDay: '[Bukas ng] LT',
            nextWeek: 'LT [sa susunod na] dddd',
            lastDay: 'LT [kahapon]',
            lastWeek: 'LT [noong nakaraang] dddd',
            sameElse: 'L'
          },
          relativeTime: {
            future: 'sa loob ng %s',
            past: '%s ang nakalipas',
            s: 'ilang segundo',
            ss: '%d segundo',
            m: 'isang minuto',
            mm: '%d minuto',
            h: 'isang oras',
            hh: '%d oras',
            d: 'isang araw',
            dd: '%d araw',
            M: 'isang buwan',
            MM: '%d buwan',
            y: 'isang taon',
            yy: '%d taon'
          },
          dayOfMonthOrdinalParse: /\d{1,2}/,
          ordinal: function ordinal(number) {
            return number;
          },
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.

          }
        });
        return tlPh;
      });
      /***/

    },

    /***/
    "E+lV": function ELV(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Serbian Cyrillic [sr-cyrl]
      //! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j
      //! author : Stefan Crnjaković <stefan@hotmail.rs> : https://github.com/crnjakovic
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var translator = {
          words: {
            //Different grammatical cases
            ss: ['секунда', 'секунде', 'секунди'],
            m: ['један минут', 'једне минуте'],
            mm: ['минут', 'минуте', 'минута'],
            h: ['један сат', 'једног сата'],
            hh: ['сат', 'сата', 'сати'],
            dd: ['дан', 'дана', 'дана'],
            MM: ['месец', 'месеца', 'месеци'],
            yy: ['година', 'године', 'година']
          },
          correctGrammaticalCase: function correctGrammaticalCase(number, wordKey) {
            return number === 1 ? wordKey[0] : number >= 2 && number <= 4 ? wordKey[1] : wordKey[2];
          },
          translate: function translate(number, withoutSuffix, key) {
            var wordKey = translator.words[key];

            if (key.length === 1) {
              return withoutSuffix ? wordKey[0] : wordKey[1];
            } else {
              return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
            }
          }
        };
        var srCyrl = moment.defineLocale('sr-cyrl', {
          months: 'јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар'.split('_'),
          monthsShort: 'јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.'.split('_'),
          monthsParseExact: true,
          weekdays: 'недеља_понедељак_уторак_среда_четвртак_петак_субота'.split('_'),
          weekdaysShort: 'нед._пон._уто._сре._чет._пет._суб.'.split('_'),
          weekdaysMin: 'не_по_ут_ср_че_пе_су'.split('_'),
          weekdaysParseExact: true,
          longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'D. M. YYYY.',
            LL: 'D. MMMM YYYY.',
            LLL: 'D. MMMM YYYY. H:mm',
            LLLL: 'dddd, D. MMMM YYYY. H:mm'
          },
          calendar: {
            sameDay: '[данас у] LT',
            nextDay: '[сутра у] LT',
            nextWeek: function nextWeek() {
              switch (this.day()) {
                case 0:
                  return '[у] [недељу] [у] LT';

                case 3:
                  return '[у] [среду] [у] LT';

                case 6:
                  return '[у] [суботу] [у] LT';

                case 1:
                case 2:
                case 4:
                case 5:
                  return '[у] dddd [у] LT';
              }
            },
            lastDay: '[јуче у] LT',
            lastWeek: function lastWeek() {
              var lastWeekDays = ['[прошле] [недеље] [у] LT', '[прошлог] [понедељка] [у] LT', '[прошлог] [уторка] [у] LT', '[прошле] [среде] [у] LT', '[прошлог] [четвртка] [у] LT', '[прошлог] [петка] [у] LT', '[прошле] [суботе] [у] LT'];
              return lastWeekDays[this.day()];
            },
            sameElse: 'L'
          },
          relativeTime: {
            future: 'за %s',
            past: 'пре %s',
            s: 'неколико секунди',
            ss: translator.translate,
            m: translator.translate,
            mm: translator.translate,
            h: translator.translate,
            hh: translator.translate,
            d: 'дан',
            dd: translator.translate,
            M: 'месец',
            MM: translator.translate,
            y: 'годину',
            yy: translator.translate
          },
          dayOfMonthOrdinalParse: /\d{1,2}\./,
          ordinal: '%d.',
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.

          }
        });
        return srCyrl;
      });
      /***/

    },

    /***/
    "EOgW": function EOgW(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Thai [th]
      //! author : Kridsada Thanabulpong : https://github.com/sirn
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var th = moment.defineLocale('th', {
          months: 'มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม'.split('_'),
          monthsShort: 'ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.'.split('_'),
          monthsParseExact: true,
          weekdays: 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์'.split('_'),
          weekdaysShort: 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์'.split('_'),
          // yes, three characters difference
          weekdaysMin: 'อา._จ._อ._พ._พฤ._ศ._ส.'.split('_'),
          weekdaysParseExact: true,
          longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY เวลา H:mm',
            LLLL: 'วันddddที่ D MMMM YYYY เวลา H:mm'
          },
          meridiemParse: /ก่อนเที่ยง|หลังเที่ยง/,
          isPM: function isPM(input) {
            return input === 'หลังเที่ยง';
          },
          meridiem: function meridiem(hour, minute, isLower) {
            if (hour < 12) {
              return 'ก่อนเที่ยง';
            } else {
              return 'หลังเที่ยง';
            }
          },
          calendar: {
            sameDay: '[วันนี้ เวลา] LT',
            nextDay: '[พรุ่งนี้ เวลา] LT',
            nextWeek: 'dddd[หน้า เวลา] LT',
            lastDay: '[เมื่อวานนี้ เวลา] LT',
            lastWeek: '[วัน]dddd[ที่แล้ว เวลา] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: 'อีก %s',
            past: '%sที่แล้ว',
            s: 'ไม่กี่วินาที',
            ss: '%d วินาที',
            m: '1 นาที',
            mm: '%d นาที',
            h: '1 ชั่วโมง',
            hh: '%d ชั่วโมง',
            d: '1 วัน',
            dd: '%d วัน',
            w: '1 สัปดาห์',
            ww: '%d สัปดาห์',
            M: '1 เดือน',
            MM: '%d เดือน',
            y: '1 ปี',
            yy: '%d ปี'
          }
        });
        return th;
      });
      /***/

    },

    /***/
    "Fnuy": function Fnuy(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Occitan, lengadocian dialecte [oc-lnc]
      //! author : Quentin PAGÈS : https://github.com/Quenty31
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var ocLnc = moment.defineLocale('oc-lnc', {
          months: {
            standalone: 'genièr_febrièr_març_abril_mai_junh_julhet_agost_setembre_octòbre_novembre_decembre'.split('_'),
            format: "de genièr_de febrièr_de març_d'abril_de mai_de junh_de julhet_d'agost_de setembre_d'octòbre_de novembre_de decembre".split('_'),
            isFormat: /D[oD]?(\s)+MMMM/
          },
          monthsShort: 'gen._febr._març_abr._mai_junh_julh._ago._set._oct._nov._dec.'.split('_'),
          monthsParseExact: true,
          weekdays: 'dimenge_diluns_dimars_dimècres_dijòus_divendres_dissabte'.split('_'),
          weekdaysShort: 'dg._dl._dm._dc._dj._dv._ds.'.split('_'),
          weekdaysMin: 'dg_dl_dm_dc_dj_dv_ds'.split('_'),
          weekdaysParseExact: true,
          longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM [de] YYYY',
            ll: 'D MMM YYYY',
            LLL: 'D MMMM [de] YYYY [a] H:mm',
            lll: 'D MMM YYYY, H:mm',
            LLLL: 'dddd D MMMM [de] YYYY [a] H:mm',
            llll: 'ddd D MMM YYYY, H:mm'
          },
          calendar: {
            sameDay: '[uèi a] LT',
            nextDay: '[deman a] LT',
            nextWeek: 'dddd [a] LT',
            lastDay: '[ièr a] LT',
            lastWeek: 'dddd [passat a] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: "d'aquí %s",
            past: 'fa %s',
            s: 'unas segondas',
            ss: '%d segondas',
            m: 'una minuta',
            mm: '%d minutas',
            h: 'una ora',
            hh: '%d oras',
            d: 'un jorn',
            dd: '%d jorns',
            M: 'un mes',
            MM: '%d meses',
            y: 'un an',
            yy: '%d ans'
          },
          dayOfMonthOrdinalParse: /\d{1,2}(r|n|t|è|a)/,
          ordinal: function ordinal(number, period) {
            var output = number === 1 ? 'r' : number === 2 ? 'n' : number === 3 ? 'r' : number === 4 ? 't' : 'è';

            if (period === 'w' || period === 'W') {
              output = 'a';
            }

            return number + output;
          },
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 4
          }
        });
        return ocLnc;
      });
      /***/

    },

    /***/
    "G0Uy": function G0Uy(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Maltese (Malta) [mt]
      //! author : Alessandro Maruccia : https://github.com/alesma
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var mt = moment.defineLocale('mt', {
          months: 'Jannar_Frar_Marzu_April_Mejju_Ġunju_Lulju_Awwissu_Settembru_Ottubru_Novembru_Diċembru'.split('_'),
          monthsShort: 'Jan_Fra_Mar_Apr_Mej_Ġun_Lul_Aww_Set_Ott_Nov_Diċ'.split('_'),
          weekdays: 'Il-Ħadd_It-Tnejn_It-Tlieta_L-Erbgħa_Il-Ħamis_Il-Ġimgħa_Is-Sibt'.split('_'),
          weekdaysShort: 'Ħad_Tne_Tli_Erb_Ħam_Ġim_Sib'.split('_'),
          weekdaysMin: 'Ħa_Tn_Tl_Er_Ħa_Ġi_Si'.split('_'),
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
          },
          calendar: {
            sameDay: '[Illum fil-]LT',
            nextDay: '[Għada fil-]LT',
            nextWeek: 'dddd [fil-]LT',
            lastDay: '[Il-bieraħ fil-]LT',
            lastWeek: 'dddd [li għadda] [fil-]LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: 'f’ %s',
            past: '%s ilu',
            s: 'ftit sekondi',
            ss: '%d sekondi',
            m: 'minuta',
            mm: '%d minuti',
            h: 'siegħa',
            hh: '%d siegħat',
            d: 'ġurnata',
            dd: '%d ġranet',
            M: 'xahar',
            MM: '%d xhur',
            y: 'sena',
            yy: '%d sni'
          },
          dayOfMonthOrdinalParse: /\d{1,2}º/,
          ordinal: '%dº',
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.

          }
        });
        return mt;
      });
      /***/

    },

    /***/
    "GMjw": function GMjw(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony default export */


      __webpack_exports__["default"] = "\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3JlZ2lzdHJhci91c3VhcmlvLXJlZ2lzdHJvL3VzdWFyaW8tcmVnaXN0cm8uY29tcG9uZW50LnNjc3MifQ== */";
      /***/
    },

    /***/
    "H8ED": function H8ED(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Belarusian [be]
      //! author : Dmitry Demidov : https://github.com/demidov91
      //! author: Praleska: http://praleska.pro/
      //! Author : Menelion Elensúle : https://github.com/Oire
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        function plural(word, num) {
          var forms = word.split('_');
          return num % 10 === 1 && num % 100 !== 11 ? forms[0] : num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2];
        }

        function relativeTimeWithPlural(number, withoutSuffix, key) {
          var format = {
            ss: withoutSuffix ? 'секунда_секунды_секунд' : 'секунду_секунды_секунд',
            mm: withoutSuffix ? 'хвіліна_хвіліны_хвілін' : 'хвіліну_хвіліны_хвілін',
            hh: withoutSuffix ? 'гадзіна_гадзіны_гадзін' : 'гадзіну_гадзіны_гадзін',
            dd: 'дзень_дні_дзён',
            MM: 'месяц_месяцы_месяцаў',
            yy: 'год_гады_гадоў'
          };

          if (key === 'm') {
            return withoutSuffix ? 'хвіліна' : 'хвіліну';
          } else if (key === 'h') {
            return withoutSuffix ? 'гадзіна' : 'гадзіну';
          } else {
            return number + ' ' + plural(format[key], +number);
          }
        }

        var be = moment.defineLocale('be', {
          months: {
            format: 'студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня'.split('_'),
            standalone: 'студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань'.split('_')
          },
          monthsShort: 'студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж'.split('_'),
          weekdays: {
            format: 'нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу'.split('_'),
            standalone: 'нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота'.split('_'),
            isFormat: /\[ ?[Ууў] ?(?:мінулую|наступную)? ?\] ?dddd/
          },
          weekdaysShort: 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
          weekdaysMin: 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY г.',
            LLL: 'D MMMM YYYY г., HH:mm',
            LLLL: 'dddd, D MMMM YYYY г., HH:mm'
          },
          calendar: {
            sameDay: '[Сёння ў] LT',
            nextDay: '[Заўтра ў] LT',
            lastDay: '[Учора ў] LT',
            nextWeek: function nextWeek() {
              return '[У] dddd [ў] LT';
            },
            lastWeek: function lastWeek() {
              switch (this.day()) {
                case 0:
                case 3:
                case 5:
                case 6:
                  return '[У мінулую] dddd [ў] LT';

                case 1:
                case 2:
                case 4:
                  return '[У мінулы] dddd [ў] LT';
              }
            },
            sameElse: 'L'
          },
          relativeTime: {
            future: 'праз %s',
            past: '%s таму',
            s: 'некалькі секунд',
            m: relativeTimeWithPlural,
            mm: relativeTimeWithPlural,
            h: relativeTimeWithPlural,
            hh: relativeTimeWithPlural,
            d: 'дзень',
            dd: relativeTimeWithPlural,
            M: 'месяц',
            MM: relativeTimeWithPlural,
            y: 'год',
            yy: relativeTimeWithPlural
          },
          meridiemParse: /ночы|раніцы|дня|вечара/,
          isPM: function isPM(input) {
            return /^(дня|вечара)$/.test(input);
          },
          meridiem: function meridiem(hour, minute, isLower) {
            if (hour < 4) {
              return 'ночы';
            } else if (hour < 12) {
              return 'раніцы';
            } else if (hour < 17) {
              return 'дня';
            } else {
              return 'вечара';
            }
          },
          dayOfMonthOrdinalParse: /\d{1,2}-(і|ы|га)/,
          ordinal: function ordinal(number, period) {
            switch (period) {
              case 'M':
              case 'd':
              case 'DDD':
              case 'w':
              case 'W':
                return (number % 10 === 2 || number % 10 === 3) && number % 100 !== 12 && number % 100 !== 13 ? number + '-і' : number + '-ы';

              case 'D':
                return number + '-га';

              default:
                return number;
            }
          },
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 7th is the first week of the year.

          }
        });
        return be;
      });
      /***/

    },

    /***/
    "HAU5": function HAU5(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony default export */


      __webpack_exports__["default"] = "<div class=\"row\">\r\n  <div class=\"col-md-12\">\r\n    <div class=\"card\">\r\n      <div class=\"card-header\">\r\n        <h4 class=\"card-title\"> Inventario de productos</h4>\r\n      </div>\r\n      <div class=\"card-body\">\r\n        <div class=\"table-responsive\">\r\n          <table class=\"table\">\r\n            <thead class=\" text-primary\">\r\n              <th>\r\n                Producto \r\n              </th>\r\n              <th>\r\n                Country\r\n              </th>\r\n              <th>\r\n                City\r\n              </th>\r\n              <th class=\"text-right\">\r\n                Salary\r\n              </th>\r\n            </thead>\r\n            <tbody>\r\n              <tr>\r\n                <td>\r\n                  Dakota Rice\r\n                </td>\r\n                <td>\r\n                  Niger\r\n                </td>\r\n                <td>\r\n                  Oud-Turnhout\r\n                </td>\r\n                <td class=\"text-right\">\r\n                  $36,738\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td>\r\n                  Minerva Hooper\r\n                </td>\r\n                <td>\r\n                  Curaçao\r\n                </td>\r\n                <td>\r\n                  Sinaai-Waas\r\n                </td>\r\n                <td class=\"text-right\">\r\n                  $23,789\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td>\r\n                  Sage Rodriguez\r\n                </td>\r\n                <td>\r\n                  Netherlands\r\n                </td>\r\n                <td>\r\n                  Baileux\r\n                </td>\r\n                <td class=\"text-right\">\r\n                  $56,142\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td>\r\n                  Philip Chaney\r\n                </td>\r\n                <td>\r\n                  Korea, South\r\n                </td>\r\n                <td>\r\n                  Overland Park\r\n                </td>\r\n                <td class=\"text-right\">\r\n                  $38,735\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td>\r\n                  Doris Greene\r\n                </td>\r\n                <td>\r\n                  Malawi\r\n                </td>\r\n                <td>\r\n                  Feldkirchen in Kärnten\r\n                </td>\r\n                <td class=\"text-right\">\r\n                  $63,542\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td>\r\n                  Mason Porter\r\n                </td>\r\n                <td>\r\n                  Chile\r\n                </td>\r\n                <td>\r\n                  Gloucester\r\n                </td>\r\n                <td class=\"text-right\">\r\n                  $78,615\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td>\r\n                  Jon Porter\r\n                </td>\r\n                <td>\r\n                  Portugal\r\n                </td>\r\n                <td>\r\n                  Gloucester\r\n                </td>\r\n                <td class=\"text-right\">\r\n                  $98,615\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"col-md-12\">\r\n    <div class=\"card card-plain\">\r\n      <div class=\"card-header\">\r\n        <h4 class=\"card-title\"> Table on Plain Background</h4>\r\n        <p class=\"card-category\"> Here is a subtitle for this table</p>\r\n      </div>\r\n      <div class=\"card-body\">\r\n        <div class=\"table-responsive\">\r\n          <table class=\"table\">\r\n            <thead class=\" text-primary\">\r\n              <th>\r\n                Name\r\n              </th>\r\n              <th>\r\n                Country\r\n              </th>\r\n              <th>\r\n                City\r\n              </th>\r\n              <th class=\"text-right\">\r\n                Salary\r\n              </th>\r\n            </thead>\r\n            <tbody>\r\n              <tr>\r\n                <td>\r\n                  Dakota Rice\r\n                </td>\r\n                <td>\r\n                  Niger\r\n                </td>\r\n                <td>\r\n                  Oud-Turnhout\r\n                </td>\r\n                <td class=\"text-right\">\r\n                  $36,738\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td>\r\n                  Minerva Hooper\r\n                </td>\r\n                <td>\r\n                  Curaçao\r\n                </td>\r\n                <td>\r\n                  Sinaai-Waas\r\n                </td>\r\n                <td class=\"text-right\">\r\n                  $23,789\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td>\r\n                  Sage Rodriguez\r\n                </td>\r\n                <td>\r\n                  Netherlands\r\n                </td>\r\n                <td>\r\n                  Baileux\r\n                </td>\r\n                <td class=\"text-right\">\r\n                  $56,142\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td>\r\n                  Philip Chaney\r\n                </td>\r\n                <td>\r\n                  Korea, South\r\n                </td>\r\n                <td>\r\n                  Overland Park\r\n                </td>\r\n                <td class=\"text-right\">\r\n                  $38,735\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td>\r\n                  Doris Greene\r\n                </td>\r\n                <td>\r\n                  Malawi\r\n                </td>\r\n                <td>\r\n                  Feldkirchen in Kärnten\r\n                </td>\r\n                <td class=\"text-right\">\r\n                  $63,542\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td>\r\n                  Mason Porter\r\n                </td>\r\n                <td>\r\n                  Chile\r\n                </td>\r\n                <td>\r\n                  Gloucester\r\n                </td>\r\n                <td class=\"text-right\">\r\n                  $78,615\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td>\r\n                  Jon Porter\r\n                </td>\r\n                <td>\r\n                  Portugal\r\n                </td>\r\n                <td>\r\n                  Gloucester\r\n                </td>\r\n                <td class=\"text-right\">\r\n                  $98,615\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n";
      /***/
    },

    /***/
    "HP3h": function HP3h(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Arabic (Lybia) [ar-ly]
      //! author : Ali Hmer: https://github.com/kikoanis
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var symbolMap = {
          1: '1',
          2: '2',
          3: '3',
          4: '4',
          5: '5',
          6: '6',
          7: '7',
          8: '8',
          9: '9',
          0: '0'
        },
            pluralForm = function pluralForm(n) {
          return n === 0 ? 0 : n === 1 ? 1 : n === 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5;
        },
            plurals = {
          s: ['أقل من ثانية', 'ثانية واحدة', ['ثانيتان', 'ثانيتين'], '%d ثوان', '%d ثانية', '%d ثانية'],
          m: ['أقل من دقيقة', 'دقيقة واحدة', ['دقيقتان', 'دقيقتين'], '%d دقائق', '%d دقيقة', '%d دقيقة'],
          h: ['أقل من ساعة', 'ساعة واحدة', ['ساعتان', 'ساعتين'], '%d ساعات', '%d ساعة', '%d ساعة'],
          d: ['أقل من يوم', 'يوم واحد', ['يومان', 'يومين'], '%d أيام', '%d يومًا', '%d يوم'],
          M: ['أقل من شهر', 'شهر واحد', ['شهران', 'شهرين'], '%d أشهر', '%d شهرا', '%d شهر'],
          y: ['أقل من عام', 'عام واحد', ['عامان', 'عامين'], '%d أعوام', '%d عامًا', '%d عام']
        },
            pluralize = function pluralize(u) {
          return function (number, withoutSuffix, string, isFuture) {
            var f = pluralForm(number),
                str = plurals[u][pluralForm(number)];

            if (f === 2) {
              str = str[withoutSuffix ? 0 : 1];
            }

            return str.replace(/%d/i, number);
          };
        },
            months = ['يناير', 'فبراير', 'مارس', 'أبريل', 'مايو', 'يونيو', 'يوليو', 'أغسطس', 'سبتمبر', 'أكتوبر', 'نوفمبر', 'ديسمبر'];

        var arLy = moment.defineLocale('ar-ly', {
          months: months,
          monthsShort: months,
          weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
          weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
          weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
          weekdaysParseExact: true,
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: "D/\u200FM/\u200FYYYY",
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
          },
          meridiemParse: /ص|م/,
          isPM: function isPM(input) {
            return 'م' === input;
          },
          meridiem: function meridiem(hour, minute, isLower) {
            if (hour < 12) {
              return 'ص';
            } else {
              return 'م';
            }
          },
          calendar: {
            sameDay: '[اليوم عند الساعة] LT',
            nextDay: '[غدًا عند الساعة] LT',
            nextWeek: 'dddd [عند الساعة] LT',
            lastDay: '[أمس عند الساعة] LT',
            lastWeek: 'dddd [عند الساعة] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: 'بعد %s',
            past: 'منذ %s',
            s: pluralize('s'),
            ss: pluralize('s'),
            m: pluralize('m'),
            mm: pluralize('m'),
            h: pluralize('h'),
            hh: pluralize('h'),
            d: pluralize('d'),
            dd: pluralize('d'),
            M: pluralize('M'),
            MM: pluralize('M'),
            y: pluralize('y'),
            yy: pluralize('y')
          },
          preparse: function preparse(string) {
            return string.replace(/،/g, ',');
          },
          postformat: function postformat(string) {
            return string.replace(/\d/g, function (match) {
              return symbolMap[match];
            }).replace(/,/g, '،');
          },
          week: {
            dow: 6,
            // Saturday is the first day of the week.
            doy: 12 // The week that contains Jan 12th is the first week of the year.

          }
        });
        return arLy;
      });
      /***/

    },

    /***/
    "IBtZ": function IBtZ(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Georgian [ka]
      //! author : Irakli Janiashvili : https://github.com/IrakliJani
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var ka = moment.defineLocale('ka', {
          months: 'იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი'.split('_'),
          monthsShort: 'იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ'.split('_'),
          weekdays: {
            standalone: 'კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი'.split('_'),
            format: 'კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს'.split('_'),
            isFormat: /(წინა|შემდეგ)/
          },
          weekdaysShort: 'კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ'.split('_'),
          weekdaysMin: 'კვ_ორ_სა_ოთ_ხუ_პა_შა'.split('_'),
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
          },
          calendar: {
            sameDay: '[დღეს] LT[-ზე]',
            nextDay: '[ხვალ] LT[-ზე]',
            lastDay: '[გუშინ] LT[-ზე]',
            nextWeek: '[შემდეგ] dddd LT[-ზე]',
            lastWeek: '[წინა] dddd LT-ზე',
            sameElse: 'L'
          },
          relativeTime: {
            future: function future(s) {
              return s.replace(/(წამ|წუთ|საათ|წელ|დღ|თვ)(ი|ე)/, function ($0, $1, $2) {
                return $2 === 'ი' ? $1 + 'ში' : $1 + $2 + 'ში';
              });
            },
            past: function past(s) {
              if (/(წამი|წუთი|საათი|დღე|თვე)/.test(s)) {
                return s.replace(/(ი|ე)$/, 'ის წინ');
              }

              if (/წელი/.test(s)) {
                return s.replace(/წელი$/, 'წლის წინ');
              }

              return s;
            },
            s: 'რამდენიმე წამი',
            ss: '%d წამი',
            m: 'წუთი',
            mm: '%d წუთი',
            h: 'საათი',
            hh: '%d საათი',
            d: 'დღე',
            dd: '%d დღე',
            M: 'თვე',
            MM: '%d თვე',
            y: 'წელი',
            yy: '%d წელი'
          },
          dayOfMonthOrdinalParse: /0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,
          ordinal: function ordinal(number) {
            if (number === 0) {
              return number;
            }

            if (number === 1) {
              return number + '-ლი';
            }

            if (number < 20 || number <= 100 && number % 20 === 0 || number % 100 === 0) {
              return 'მე-' + number;
            }

            return number + '-ე';
          },
          week: {
            dow: 1,
            doy: 7
          }
        });
        return ka;
      });
      /***/

    },

    /***/
    "Iab2": function Iab2(module, exports, __webpack_require__) {
      var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

      (function (a, b) {
        if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = b, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else {}
      })(this, function () {
        "use strict";

        function b(a, b) {
          return "undefined" == typeof b ? b = {
            autoBom: !1
          } : "object" != typeof b && (console.warn("Deprecated: Expected third argument to be a object"), b = {
            autoBom: !b
          }), b.autoBom && /^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(a.type) ? new Blob(["\uFEFF", a], {
            type: a.type
          }) : a;
        }

        function c(a, b, c) {
          var d = new XMLHttpRequest();
          d.open("GET", a), d.responseType = "blob", d.onload = function () {
            g(d.response, b, c);
          }, d.onerror = function () {
            console.error("could not download file");
          }, d.send();
        }

        function d(a) {
          var b = new XMLHttpRequest();
          b.open("HEAD", a, !1);

          try {
            b.send();
          } catch (a) {}

          return 200 <= b.status && 299 >= b.status;
        }

        function e(a) {
          try {
            a.dispatchEvent(new MouseEvent("click"));
          } catch (c) {
            var b = document.createEvent("MouseEvents");
            b.initMouseEvent("click", !0, !0, window, 0, 0, 0, 80, 20, !1, !1, !1, !1, 0, null), a.dispatchEvent(b);
          }
        }

        var f = "object" == typeof window && window.window === window ? window : "object" == typeof self && self.self === self ? self : "object" == typeof global && global.global === global ? global : void 0,
            a = f.navigator && /Macintosh/.test(navigator.userAgent) && /AppleWebKit/.test(navigator.userAgent) && !/Safari/.test(navigator.userAgent),
            g = f.saveAs || ("object" != typeof window || window !== f ? function () {} : "download" in HTMLAnchorElement.prototype && !a ? function (b, g, h) {
          var i = f.URL || f.webkitURL,
              j = document.createElement("a");
          g = g || b.name || "download", j.download = g, j.rel = "noopener", "string" == typeof b ? (j.href = b, j.origin === location.origin ? e(j) : d(j.href) ? c(b, g, h) : e(j, j.target = "_blank")) : (j.href = i.createObjectURL(b), setTimeout(function () {
            i.revokeObjectURL(j.href);
          }, 4E4), setTimeout(function () {
            e(j);
          }, 0));
        } : "msSaveOrOpenBlob" in navigator ? function (f, g, h) {
          if (g = g || f.name || "download", "string" != typeof f) navigator.msSaveOrOpenBlob(b(f, h), g);else if (d(f)) c(f, g, h);else {
            var i = document.createElement("a");
            i.href = f, i.target = "_blank", setTimeout(function () {
              e(i);
            });
          }
        } : function (b, d, e, g) {
          if (g = g || open("", "_blank"), g && (g.document.title = g.document.body.innerText = "downloading..."), "string" == typeof b) return c(b, d, e);
          var h = "application/octet-stream" === b.type,
              i = /constructor/i.test(f.HTMLElement) || f.safari,
              j = /CriOS\/[\d]+/.test(navigator.userAgent);

          if ((j || h && i || a) && "undefined" != typeof FileReader) {
            var k = new FileReader();
            k.onloadend = function () {
              var a = k.result;
              a = j ? a : a.replace(/^data:[^;]*;/, "data:attachment/file;"), g ? g.location.href = a : location = a, g = null;
            }, k.readAsDataURL(b);
          } else {
            var l = f.URL || f.webkitURL,
                m = l.createObjectURL(b);
            g ? g.location = m : location.href = m, g = null, setTimeout(function () {
              l.revokeObjectURL(m);
            }, 4E4);
          }
        });
        f.saveAs = g.saveAs = g, true && (module.exports = g);
      }); //# sourceMappingURL=FileSaver.min.js.map

      /***/

    },

    /***/
    "IqXj": function IqXj(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AdminLayoutModule", function () {
        return AdminLayoutModule;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/router */
      "tyNb");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/common */
      "ofXK");
      /* harmony import */


      var _angular_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/forms */
      "3Pt+");
      /* harmony import */


      var _admin_layout_routing__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! ./admin-layout.routing */
      "qZ7x");
      /* harmony import */


      var _pages_Inicio_dashboard_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! ../../pages/Inicio/dashboard.component */
      "rvqg");
      /* harmony import */


      var _pages_various_table_table_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! ../../pages/various/table/table.component */
      "ReYQ");
      /* harmony import */


      var _pages_various_typography_typography_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! ../../pages/various/typography/typography.component */
      "Xmc7");
      /* harmony import */


      var _pages_various_icons_icons_component__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! ../../pages/various/icons/icons.component */
      "xxtN");
      /* harmony import */


      var _pages_various_maps_maps_component__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
      /*! ../../pages/various/maps/maps.component */
      "yTW8");
      /* harmony import */


      var _pages_various_notifications_notifications_component__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
      /*! ../../pages/various/notifications/notifications.component */
      "OfYG");
      /* harmony import */


      var _pages_various_upgrade_upgrade_component__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(
      /*! ../../pages/various/upgrade/upgrade.component */
      "0Sn1");
      /* harmony import */


      var _ng_bootstrap_ng_bootstrap__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(
      /*! @ng-bootstrap/ng-bootstrap */
      "1kSV");
      /* harmony import */


      var app_pages_registrar_operadorRegistro_operadora_component__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(
      /*! app/pages/registrar/operadorRegistro/operadora.component */
      "j56B");
      /* harmony import */


      var app_pages_registrar_tratamientoRegistrar_tratamientoRegistrar_component__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(
      /*! app/pages/registrar/tratamientoRegistrar/tratamientoRegistrar.component */
      "pei9");
      /* harmony import */


      var _pages_historial_doctoraHistorial_historialDoc_component__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(
      /*! ../../pages/historial/doctoraHistorial/historialDoc.component */
      "gOJ3");
      /* harmony import */


      var _pages_productos_tratamiento_tratamiento_component__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(
      /*! ../../pages/productos/tratamiento/tratamiento.component */
      "pZTO");
      /* harmony import */


      var _pages_productos_inventario_inventario_component__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(
      /*! ../../pages/productos/inventario/inventario.component */
      "5U8x");
      /* harmony import */


      var _pages_registrar_usuario_registro_usuario_registro_component__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(
      /*! ../../pages/registrar/usuario-registro/usuario-registro.component */
      "uh9s");
      /* harmony import */


      var _pages_historial_empleado_historial_empleado_historial_component__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(
      /*! ../../pages/historial/empleado-historial/empleado-historial.component */
      "9BCX");
      /* harmony import */


      var _pages_registrar_registrar_producto_registrar_producto_component__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(
      /*! ../../pages/registrar/registrar-producto/registrar-producto.component */
      "/pQ5");
      /* harmony import */


      var _angular_material_table__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(
      /*! @angular/material/table */
      "+0xr");
      /* harmony import */


      var _angular_material_form_field__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(
      /*! @angular/material/form-field */
      "kmnG");
      /* harmony import */


      var _angular_material_sort__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(
      /*! @angular/material/sort */
      "Dh3D");
      /* harmony import */


      var _angular_material_paginator__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(
      /*! @angular/material/paginator */
      "M9IT");
      /* harmony import */


      var _angular_material_card__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(
      /*! @angular/material/card */
      "Wp6s");
      /* harmony import */


      var _angular_material_datepicker__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(
      /*! @angular/material/datepicker */
      "iadO");
      /* harmony import */


      var _angular_material_core__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(
      /*! @angular/material/core */
      "FKr1");
      /* harmony import */


      var _angular_material_input__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(
      /*! @angular/material/input */
      "qFsG");
      /* harmony import */


      var _angular_material_select__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(
      /*! @angular/material/select */
      "d3UM");
      /* harmony import */


      var _angular_material_button__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(
      /*! @angular/material/button */
      "bTqV");

      var AdminLayoutModule = function AdminLayoutModule() {
        _classCallCheck(this, AdminLayoutModule);
      };

      AdminLayoutModule = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [_angular_common__WEBPACK_IMPORTED_MODULE_3__["CommonModule"], _angular_router__WEBPACK_IMPORTED_MODULE_2__["RouterModule"].forChild(_admin_layout_routing__WEBPACK_IMPORTED_MODULE_5__["AdminLayoutRoutes"]), _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormsModule"], _ng_bootstrap_ng_bootstrap__WEBPACK_IMPORTED_MODULE_13__["NgbModule"], _angular_material_table__WEBPACK_IMPORTED_MODULE_22__["MatTableModule"], _angular_material_form_field__WEBPACK_IMPORTED_MODULE_23__["MatFormFieldModule"], _angular_material_sort__WEBPACK_IMPORTED_MODULE_24__["MatSortModule"], _angular_material_paginator__WEBPACK_IMPORTED_MODULE_25__["MatPaginatorModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_4__["ReactiveFormsModule"], _angular_material_card__WEBPACK_IMPORTED_MODULE_26__["MatCardModule"], _angular_material_datepicker__WEBPACK_IMPORTED_MODULE_27__["MatDatepickerModule"], _angular_material_core__WEBPACK_IMPORTED_MODULE_28__["MatNativeDateModule"], _angular_material_input__WEBPACK_IMPORTED_MODULE_29__["MatInputModule"], _angular_material_core__WEBPACK_IMPORTED_MODULE_28__["MatOptionModule"], _angular_material_select__WEBPACK_IMPORTED_MODULE_30__["MatSelectModule"], _angular_material_button__WEBPACK_IMPORTED_MODULE_31__["MatButtonModule"]],
        declarations: [_pages_Inicio_dashboard_component__WEBPACK_IMPORTED_MODULE_6__["DashboardComponent"], _pages_various_table_table_component__WEBPACK_IMPORTED_MODULE_7__["TableComponent"], _pages_historial_doctoraHistorial_historialDoc_component__WEBPACK_IMPORTED_MODULE_16__["HistorialDocComponent"], _pages_various_upgrade_upgrade_component__WEBPACK_IMPORTED_MODULE_12__["UpgradeComponent"], _pages_productos_tratamiento_tratamiento_component__WEBPACK_IMPORTED_MODULE_17__["TratamientoComponent"], _pages_productos_inventario_inventario_component__WEBPACK_IMPORTED_MODULE_18__["InventarioComponent"], _pages_various_typography_typography_component__WEBPACK_IMPORTED_MODULE_8__["TypographyComponent"], _pages_various_icons_icons_component__WEBPACK_IMPORTED_MODULE_9__["IconsComponent"], _pages_various_maps_maps_component__WEBPACK_IMPORTED_MODULE_10__["MapsComponent"], _pages_various_notifications_notifications_component__WEBPACK_IMPORTED_MODULE_11__["NotificationsComponent"], app_pages_registrar_operadorRegistro_operadora_component__WEBPACK_IMPORTED_MODULE_14__["OperadoraComponent"], app_pages_registrar_tratamientoRegistrar_tratamientoRegistrar_component__WEBPACK_IMPORTED_MODULE_15__["TratamientoRegistrarComponent"], _pages_registrar_usuario_registro_usuario_registro_component__WEBPACK_IMPORTED_MODULE_19__["UsuarioRegistroComponent"], _pages_historial_empleado_historial_empleado_historial_component__WEBPACK_IMPORTED_MODULE_20__["EmpleadoHistorialComponent"], _pages_registrar_registrar_producto_registrar_producto_component__WEBPACK_IMPORTED_MODULE_21__["RegistrarProductoComponent"]]
      })], AdminLayoutModule);
      /***/
    },

    /***/
    "Ivi+": function Ivi(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Korean [ko]
      //! author : Kyungwook, Park : https://github.com/kyungw00k
      //! author : Jeeeyul Lee <jeeeyul@gmail.com>
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var ko = moment.defineLocale('ko', {
          months: '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
          monthsShort: '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
          weekdays: '일요일_월요일_화요일_수요일_목요일_금요일_토요일'.split('_'),
          weekdaysShort: '일_월_화_수_목_금_토'.split('_'),
          weekdaysMin: '일_월_화_수_목_금_토'.split('_'),
          longDateFormat: {
            LT: 'A h:mm',
            LTS: 'A h:mm:ss',
            L: 'YYYY.MM.DD.',
            LL: 'YYYY년 MMMM D일',
            LLL: 'YYYY년 MMMM D일 A h:mm',
            LLLL: 'YYYY년 MMMM D일 dddd A h:mm',
            l: 'YYYY.MM.DD.',
            ll: 'YYYY년 MMMM D일',
            lll: 'YYYY년 MMMM D일 A h:mm',
            llll: 'YYYY년 MMMM D일 dddd A h:mm'
          },
          calendar: {
            sameDay: '오늘 LT',
            nextDay: '내일 LT',
            nextWeek: 'dddd LT',
            lastDay: '어제 LT',
            lastWeek: '지난주 dddd LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: '%s 후',
            past: '%s 전',
            s: '몇 초',
            ss: '%d초',
            m: '1분',
            mm: '%d분',
            h: '한 시간',
            hh: '%d시간',
            d: '하루',
            dd: '%d일',
            M: '한 달',
            MM: '%d달',
            y: '일 년',
            yy: '%d년'
          },
          dayOfMonthOrdinalParse: /\d{1,2}(일|월|주)/,
          ordinal: function ordinal(number, period) {
            switch (period) {
              case 'd':
              case 'D':
              case 'DDD':
                return number + '일';

              case 'M':
                return number + '월';

              case 'w':
              case 'W':
                return number + '주';

              default:
                return number;
            }
          },
          meridiemParse: /오전|오후/,
          isPM: function isPM(token) {
            return token === '오후';
          },
          meridiem: function meridiem(hour, minute, isUpper) {
            return hour < 12 ? '오전' : '오후';
          }
        });
        return ko;
      });
      /***/

    },

    /***/
    "JCF/": function JCF(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Kurdish [ku]
      //! author : Shahram Mebashar : https://github.com/ShahramMebashar
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var symbolMap = {
          1: '١',
          2: '٢',
          3: '٣',
          4: '٤',
          5: '٥',
          6: '٦',
          7: '٧',
          8: '٨',
          9: '٩',
          0: '٠'
        },
            numberMap = {
          '١': '1',
          '٢': '2',
          '٣': '3',
          '٤': '4',
          '٥': '5',
          '٦': '6',
          '٧': '7',
          '٨': '8',
          '٩': '9',
          '٠': '0'
        },
            months = ['کانونی دووەم', 'شوبات', 'ئازار', 'نیسان', 'ئایار', 'حوزەیران', 'تەمموز', 'ئاب', 'ئەیلوول', 'تشرینی یەكەم', 'تشرینی دووەم', 'كانونی یەکەم'];
        var ku = moment.defineLocale('ku', {
          months: months,
          monthsShort: months,
          weekdays: 'یه‌كشه‌ممه‌_دووشه‌ممه‌_سێشه‌ممه‌_چوارشه‌ممه‌_پێنجشه‌ممه‌_هه‌ینی_شه‌ممه‌'.split('_'),
          weekdaysShort: 'یه‌كشه‌م_دووشه‌م_سێشه‌م_چوارشه‌م_پێنجشه‌م_هه‌ینی_شه‌ممه‌'.split('_'),
          weekdaysMin: 'ی_د_س_چ_پ_ه_ش'.split('_'),
          weekdaysParseExact: true,
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
          },
          meridiemParse: /ئێواره‌|به‌یانی/,
          isPM: function isPM(input) {
            return /ئێواره‌/.test(input);
          },
          meridiem: function meridiem(hour, minute, isLower) {
            if (hour < 12) {
              return 'به‌یانی';
            } else {
              return 'ئێواره‌';
            }
          },
          calendar: {
            sameDay: '[ئه‌مرۆ كاتژمێر] LT',
            nextDay: '[به‌یانی كاتژمێر] LT',
            nextWeek: 'dddd [كاتژمێر] LT',
            lastDay: '[دوێنێ كاتژمێر] LT',
            lastWeek: 'dddd [كاتژمێر] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: 'له‌ %s',
            past: '%s',
            s: 'چه‌ند چركه‌یه‌ك',
            ss: 'چركه‌ %d',
            m: 'یه‌ك خوله‌ك',
            mm: '%d خوله‌ك',
            h: 'یه‌ك كاتژمێر',
            hh: '%d كاتژمێر',
            d: 'یه‌ك ڕۆژ',
            dd: '%d ڕۆژ',
            M: 'یه‌ك مانگ',
            MM: '%d مانگ',
            y: 'یه‌ك ساڵ',
            yy: '%d ساڵ'
          },
          preparse: function preparse(string) {
            return string.replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
              return numberMap[match];
            }).replace(/،/g, ',');
          },
          postformat: function postformat(string) {
            return string.replace(/\d/g, function (match) {
              return symbolMap[match];
            }).replace(/,/g, '،');
          },
          week: {
            dow: 6,
            // Saturday is the first day of the week.
            doy: 12 // The week that contains Jan 12th is the first week of the year.

          }
        });
        return ku;
      });
      /***/

    },

    /***/
    "JVSJ": function JVSJ(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Bosnian [bs]
      //! author : Nedim Cholich : https://github.com/frontyard
      //! based on (hr) translation by Bojan Marković
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        function translate(number, withoutSuffix, key) {
          var result = number + ' ';

          switch (key) {
            case 'ss':
              if (number === 1) {
                result += 'sekunda';
              } else if (number === 2 || number === 3 || number === 4) {
                result += 'sekunde';
              } else {
                result += 'sekundi';
              }

              return result;

            case 'm':
              return withoutSuffix ? 'jedna minuta' : 'jedne minute';

            case 'mm':
              if (number === 1) {
                result += 'minuta';
              } else if (number === 2 || number === 3 || number === 4) {
                result += 'minute';
              } else {
                result += 'minuta';
              }

              return result;

            case 'h':
              return withoutSuffix ? 'jedan sat' : 'jednog sata';

            case 'hh':
              if (number === 1) {
                result += 'sat';
              } else if (number === 2 || number === 3 || number === 4) {
                result += 'sata';
              } else {
                result += 'sati';
              }

              return result;

            case 'dd':
              if (number === 1) {
                result += 'dan';
              } else {
                result += 'dana';
              }

              return result;

            case 'MM':
              if (number === 1) {
                result += 'mjesec';
              } else if (number === 2 || number === 3 || number === 4) {
                result += 'mjeseca';
              } else {
                result += 'mjeseci';
              }

              return result;

            case 'yy':
              if (number === 1) {
                result += 'godina';
              } else if (number === 2 || number === 3 || number === 4) {
                result += 'godine';
              } else {
                result += 'godina';
              }

              return result;
          }
        }

        var bs = moment.defineLocale('bs', {
          months: 'januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar'.split('_'),
          monthsShort: 'jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.'.split('_'),
          monthsParseExact: true,
          weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
          weekdaysShort: 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
          weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
          weekdaysParseExact: true,
          longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd, D. MMMM YYYY H:mm'
          },
          calendar: {
            sameDay: '[danas u] LT',
            nextDay: '[sutra u] LT',
            nextWeek: function nextWeek() {
              switch (this.day()) {
                case 0:
                  return '[u] [nedjelju] [u] LT';

                case 3:
                  return '[u] [srijedu] [u] LT';

                case 6:
                  return '[u] [subotu] [u] LT';

                case 1:
                case 2:
                case 4:
                case 5:
                  return '[u] dddd [u] LT';
              }
            },
            lastDay: '[jučer u] LT',
            lastWeek: function lastWeek() {
              switch (this.day()) {
                case 0:
                case 3:
                  return '[prošlu] dddd [u] LT';

                case 6:
                  return '[prošle] [subote] [u] LT';

                case 1:
                case 2:
                case 4:
                case 5:
                  return '[prošli] dddd [u] LT';
              }
            },
            sameElse: 'L'
          },
          relativeTime: {
            future: 'za %s',
            past: 'prije %s',
            s: 'par sekundi',
            ss: translate,
            m: translate,
            mm: translate,
            h: translate,
            hh: translate,
            d: 'dan',
            dd: translate,
            M: 'mjesec',
            MM: translate,
            y: 'godinu',
            yy: translate
          },
          dayOfMonthOrdinalParse: /\d{1,2}\./,
          ordinal: '%d.',
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 7th is the first week of the year.

          }
        });
        return bs;
      });
      /***/

    },

    /***/
    "JvlW": function JvlW(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Lithuanian [lt]
      //! author : Mindaugas Mozūras : https://github.com/mmozuras
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var units = {
          ss: 'sekundė_sekundžių_sekundes',
          m: 'minutė_minutės_minutę',
          mm: 'minutės_minučių_minutes',
          h: 'valanda_valandos_valandą',
          hh: 'valandos_valandų_valandas',
          d: 'diena_dienos_dieną',
          dd: 'dienos_dienų_dienas',
          M: 'mėnuo_mėnesio_mėnesį',
          MM: 'mėnesiai_mėnesių_mėnesius',
          y: 'metai_metų_metus',
          yy: 'metai_metų_metus'
        };

        function translateSeconds(number, withoutSuffix, key, isFuture) {
          if (withoutSuffix) {
            return 'kelios sekundės';
          } else {
            return isFuture ? 'kelių sekundžių' : 'kelias sekundes';
          }
        }

        function translateSingular(number, withoutSuffix, key, isFuture) {
          return withoutSuffix ? forms(key)[0] : isFuture ? forms(key)[1] : forms(key)[2];
        }

        function special(number) {
          return number % 10 === 0 || number > 10 && number < 20;
        }

        function forms(key) {
          return units[key].split('_');
        }

        function translate(number, withoutSuffix, key, isFuture) {
          var result = number + ' ';

          if (number === 1) {
            return result + translateSingular(number, withoutSuffix, key[0], isFuture);
          } else if (withoutSuffix) {
            return result + (special(number) ? forms(key)[1] : forms(key)[0]);
          } else {
            if (isFuture) {
              return result + forms(key)[1];
            } else {
              return result + (special(number) ? forms(key)[1] : forms(key)[2]);
            }
          }
        }

        var lt = moment.defineLocale('lt', {
          months: {
            format: 'sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio'.split('_'),
            standalone: 'sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis'.split('_'),
            isFormat: /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/
          },
          monthsShort: 'sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd'.split('_'),
          weekdays: {
            format: 'sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį'.split('_'),
            standalone: 'sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis'.split('_'),
            isFormat: /dddd HH:mm/
          },
          weekdaysShort: 'Sek_Pir_Ant_Tre_Ket_Pen_Šeš'.split('_'),
          weekdaysMin: 'S_P_A_T_K_Pn_Š'.split('_'),
          weekdaysParseExact: true,
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY-MM-DD',
            LL: 'YYYY [m.] MMMM D [d.]',
            LLL: 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
            LLLL: 'YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]',
            l: 'YYYY-MM-DD',
            ll: 'YYYY [m.] MMMM D [d.]',
            lll: 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
            llll: 'YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]'
          },
          calendar: {
            sameDay: '[Šiandien] LT',
            nextDay: '[Rytoj] LT',
            nextWeek: 'dddd LT',
            lastDay: '[Vakar] LT',
            lastWeek: '[Praėjusį] dddd LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: 'po %s',
            past: 'prieš %s',
            s: translateSeconds,
            ss: translate,
            m: translateSingular,
            mm: translate,
            h: translateSingular,
            hh: translate,
            d: translateSingular,
            dd: translate,
            M: translateSingular,
            MM: translate,
            y: translateSingular,
            yy: translate
          },
          dayOfMonthOrdinalParse: /\d{1,2}-oji/,
          ordinal: function ordinal(number) {
            return number + '-oji';
          },
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.

          }
        });
        return lt;
      });
      /***/

    },

    /***/
    "K/tc": function KTc(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Afrikaans [af]
      //! author : Werner Mollentze : https://github.com/wernerm
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var af = moment.defineLocale('af', {
          months: 'Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember'.split('_'),
          monthsShort: 'Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des'.split('_'),
          weekdays: 'Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag'.split('_'),
          weekdaysShort: 'Son_Maa_Din_Woe_Don_Vry_Sat'.split('_'),
          weekdaysMin: 'So_Ma_Di_Wo_Do_Vr_Sa'.split('_'),
          meridiemParse: /vm|nm/i,
          isPM: function isPM(input) {
            return /^nm$/i.test(input);
          },
          meridiem: function meridiem(hours, minutes, isLower) {
            if (hours < 12) {
              return isLower ? 'vm' : 'VM';
            } else {
              return isLower ? 'nm' : 'NM';
            }
          },
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
          },
          calendar: {
            sameDay: '[Vandag om] LT',
            nextDay: '[Môre om] LT',
            nextWeek: 'dddd [om] LT',
            lastDay: '[Gister om] LT',
            lastWeek: '[Laas] dddd [om] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: 'oor %s',
            past: '%s gelede',
            s: "'n paar sekondes",
            ss: '%d sekondes',
            m: "'n minuut",
            mm: '%d minute',
            h: "'n uur",
            hh: '%d ure',
            d: "'n dag",
            dd: '%d dae',
            M: "'n maand",
            MM: '%d maande',
            y: "'n jaar",
            yy: '%d jaar'
          },
          dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
          ordinal: function ordinal(number) {
            return number + (number === 1 || number === 8 || number >= 20 ? 'ste' : 'de'); // Thanks to Joris Röling : https://github.com/jjupiter
          },
          week: {
            dow: 1,
            // Maandag is die eerste dag van die week.
            doy: 4 // Die week wat die 4de Januarie bevat is die eerste week van die jaar.

          }
        });
        return af;
      });
      /***/

    },

    /***/
    "KSF8": function KSF8(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Vietnamese [vi]
      //! author : Bang Nguyen : https://github.com/bangnk
      //! author : Chien Kira : https://github.com/chienkira
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var vi = moment.defineLocale('vi', {
          months: 'tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12'.split('_'),
          monthsShort: 'Thg 01_Thg 02_Thg 03_Thg 04_Thg 05_Thg 06_Thg 07_Thg 08_Thg 09_Thg 10_Thg 11_Thg 12'.split('_'),
          monthsParseExact: true,
          weekdays: 'chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy'.split('_'),
          weekdaysShort: 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
          weekdaysMin: 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
          weekdaysParseExact: true,
          meridiemParse: /sa|ch/i,
          isPM: function isPM(input) {
            return /^ch$/i.test(input);
          },
          meridiem: function meridiem(hours, minutes, isLower) {
            if (hours < 12) {
              return isLower ? 'sa' : 'SA';
            } else {
              return isLower ? 'ch' : 'CH';
            }
          },
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM [năm] YYYY',
            LLL: 'D MMMM [năm] YYYY HH:mm',
            LLLL: 'dddd, D MMMM [năm] YYYY HH:mm',
            l: 'DD/M/YYYY',
            ll: 'D MMM YYYY',
            lll: 'D MMM YYYY HH:mm',
            llll: 'ddd, D MMM YYYY HH:mm'
          },
          calendar: {
            sameDay: '[Hôm nay lúc] LT',
            nextDay: '[Ngày mai lúc] LT',
            nextWeek: 'dddd [tuần tới lúc] LT',
            lastDay: '[Hôm qua lúc] LT',
            lastWeek: 'dddd [tuần trước lúc] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: '%s tới',
            past: '%s trước',
            s: 'vài giây',
            ss: '%d giây',
            m: 'một phút',
            mm: '%d phút',
            h: 'một giờ',
            hh: '%d giờ',
            d: 'một ngày',
            dd: '%d ngày',
            w: 'một tuần',
            ww: '%d tuần',
            M: 'một tháng',
            MM: '%d tháng',
            y: 'một năm',
            yy: '%d năm'
          },
          dayOfMonthOrdinalParse: /\d{1,2}/,
          ordinal: function ordinal(number) {
            return number;
          },
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.

          }
        });
        return vi;
      });
      /***/

    },

    /***/
    "KTz0": function KTz0(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Montenegrin [me]
      //! author : Miodrag Nikač <miodrag@restartit.me> : https://github.com/miodragnikac
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var translator = {
          words: {
            //Different grammatical cases
            ss: ['sekund', 'sekunda', 'sekundi'],
            m: ['jedan minut', 'jednog minuta'],
            mm: ['minut', 'minuta', 'minuta'],
            h: ['jedan sat', 'jednog sata'],
            hh: ['sat', 'sata', 'sati'],
            dd: ['dan', 'dana', 'dana'],
            MM: ['mjesec', 'mjeseca', 'mjeseci'],
            yy: ['godina', 'godine', 'godina']
          },
          correctGrammaticalCase: function correctGrammaticalCase(number, wordKey) {
            return number === 1 ? wordKey[0] : number >= 2 && number <= 4 ? wordKey[1] : wordKey[2];
          },
          translate: function translate(number, withoutSuffix, key) {
            var wordKey = translator.words[key];

            if (key.length === 1) {
              return withoutSuffix ? wordKey[0] : wordKey[1];
            } else {
              return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
            }
          }
        };
        var me = moment.defineLocale('me', {
          months: 'januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar'.split('_'),
          monthsShort: 'jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.'.split('_'),
          monthsParseExact: true,
          weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
          weekdaysShort: 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
          weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
          weekdaysParseExact: true,
          longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd, D. MMMM YYYY H:mm'
          },
          calendar: {
            sameDay: '[danas u] LT',
            nextDay: '[sjutra u] LT',
            nextWeek: function nextWeek() {
              switch (this.day()) {
                case 0:
                  return '[u] [nedjelju] [u] LT';

                case 3:
                  return '[u] [srijedu] [u] LT';

                case 6:
                  return '[u] [subotu] [u] LT';

                case 1:
                case 2:
                case 4:
                case 5:
                  return '[u] dddd [u] LT';
              }
            },
            lastDay: '[juče u] LT',
            lastWeek: function lastWeek() {
              var lastWeekDays = ['[prošle] [nedjelje] [u] LT', '[prošlog] [ponedjeljka] [u] LT', '[prošlog] [utorka] [u] LT', '[prošle] [srijede] [u] LT', '[prošlog] [četvrtka] [u] LT', '[prošlog] [petka] [u] LT', '[prošle] [subote] [u] LT'];
              return lastWeekDays[this.day()];
            },
            sameElse: 'L'
          },
          relativeTime: {
            future: 'za %s',
            past: 'prije %s',
            s: 'nekoliko sekundi',
            ss: translator.translate,
            m: translator.translate,
            mm: translator.translate,
            h: translator.translate,
            hh: translator.translate,
            d: 'dan',
            dd: translator.translate,
            M: 'mjesec',
            MM: translator.translate,
            y: 'godinu',
            yy: translator.translate
          },
          dayOfMonthOrdinalParse: /\d{1,2}\./,
          ordinal: '%d.',
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 7th is the first week of the year.

          }
        });
        return me;
      });
      /***/

    },

    /***/
    "LWCY": function LWCY(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony default export */


      __webpack_exports__["default"] = "<div style=\"overflow-x: hidden\" fxLayout=\"column\">\r\n    <form [formGroup]=\"filters\">\r\n      <div class=\"col-md-12\">\r\n        <div class=\"card\">\r\n          <div class=\"card-header\">\r\n            <mat-label class=\"card-title\">Historial de Empleados</mat-label>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <div class=\"row\">\r\n              <div class=\"col-md-4 pr-1\">\r\n                <mat-form-field style=\"width: 100%;\">\r\n                  <mat-label>Nombre</mat-label>\r\n                  <input matInput formControlName=\"name\" >\r\n                  <mat-error>\r\n                  </mat-error>\r\n                </mat-form-field>\r\n              </div>\r\n              <div class=\"col-md-4 px-1\">\r\n                <mat-form-field style=\"width: 100%;\">\r\n                  <mat-label>Cedula</mat-label>\r\n                  <input matInput formControlName=\"identification\" >\r\n                  <mat-error>\r\n                  </mat-error>\r\n                </mat-form-field>\r\n              </div>\r\n              <div class=\"col-md-4 pl-1\">\r\n                <mat-form-field style=\"width: 100%;\">\r\n                  <mat-label>Cargo</mat-label>\r\n                  <input matInput formControlName=\"cargo\" >\r\n                  <mat-error>\r\n                  </mat-error>\r\n                </mat-form-field>\r\n              </div>\r\n            </div>\r\n            <div  class=\"row\">\r\n              <div class=\"col-md-6 pr-1\">\r\n                  <mat-form-field style=\"width: 100%;\">\r\n                    <mat-label>Fecha Inicial</mat-label>\r\n                    <input matInput formControlName=\"initialDate\" [matDatepicker]=\"initialDate\">\r\n                    <mat-datepicker-toggle matSuffix [for]=\"initialDate\"></mat-datepicker-toggle>\r\n                    <mat-datepicker #initialDate disabled=\"false\"></mat-datepicker>\r\n                  </mat-form-field>\r\n              </div>\r\n              <div class=\"col-md-6 px-1\">\r\n                  <mat-form-field style=\"width: 100%;\">\r\n                    <mat-label>Fecha Final</mat-label>\r\n                    <input matInput formControlName=\"finalDate\" [matDatepicker]=\"finalDate\">\r\n                    <mat-datepicker-toggle matSuffix [for]=\"finalDate\"></mat-datepicker-toggle>\r\n                    <mat-datepicker #finalDate disabled=\"false\"></mat-datepicker>\r\n                  </mat-form-field>\r\n              </div>\r\n            </div>\r\n            <div style=\"position:relative; top:50%; display: flex; justify-content: space-around;\" class=\"row\">\r\n              <button mat-raised-button mat-stroked-button style=\"height:40px; width:200px; margin-right: 3px;\"\r\n                      type=\"button\" class=\"\" (click)=\"search()\">Buscar</button>\r\n              <button mat-raised-button mat-stroked-button style=\"height:40px; width:200px; margin-right: 3px;\"\r\n                    type=\"reset\" class=\"\">Limpiar</button>\r\n              <button mat-raised-button mat-stroked-button style=\"height:40px; width:200px;\" type=\"\" class=\"\" (click)=\"download()\">Descargar Excel</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </form>\r\n    <mat-card class=\"mat-elevation-z4\">\r\n      <div fxlayout=\"column\">\r\n        <div class=\"flex-p container-tab\">\r\n          <table mat-table [dataSource]=\"dataSource\" matSort class=\"mat-elevation-z8\" style=\"width: 100%;\">\r\n\r\n            <ng-container  matColumnDef=\"dateA\" >\r\n              <th mat-header-cell *matHeaderCellDef mat-sort-header style=\"font-weight: bold;\">Fecha de atención </th>\r\n              <td mat-cell  style=\"width:10%;\" *matCellDef=\"let row\" class=\"mat-cell-id\"> {{row.fechaAttemption}} </td>\r\n            </ng-container>\r\n\r\n            <ng-container  matColumnDef=\"name\" >\r\n              <th mat-header-cell *matHeaderCellDef mat-sort-header style=\"font-weight: bold;\">Nombre</th>\r\n              <td mat-cell  style=\"width:10%;\" *matCellDef=\"let row\" class=\"mat-cell-id\"> {{row.name}} </td>\r\n            </ng-container>\r\n\r\n            <ng-container  matColumnDef=\"lastName\">\r\n              <th mat-header-cell *matHeaderCellDef mat-sort-header style=\"font-weight: bold;\" > Apellido </th>\r\n              <td mat-cell  style=\"width:10%;\" *matCellDef=\"let row\" class=\"mat-cell-id\"> {{row.lastName}} </td>\r\n            </ng-container>\r\n\r\n            <ng-container  matColumnDef=\"identification\">\r\n              <th mat-header-cell *matHeaderCellDef mat-sort-header style=\"font-weight: bold;\"> Cedula </th>\r\n              <td mat-cell  style=\"width:10%;\" *matCellDef=\"let row\" class=\"mat-cell-id\"> {{row.identification}} </td>\r\n            </ng-container>\r\n\r\n            <ng-container  matColumnDef=\"age\">\r\n              <th mat-header-cell *matHeaderCellDef mat-sort-header style=\"font-weight: bold;\"> Edad </th>\r\n              <td mat-cell  style=\"width:5%;\" *matCellDef=\"let row\" class=\"mat-cell-id\"> {{row.age}} </td>\r\n            </ng-container>\r\n\r\n            <ng-container  matColumnDef=\"phone\">\r\n              <th mat-header-cell *matHeaderCellDef mat-sort-header style=\"font-weight: bold;\"> Teléfono </th>\r\n              <td mat-cell  style=\"width:10%;\" *matCellDef=\"let row\" class=\"mat-cell-id\"> {{row.phone}} </td>\r\n            </ng-container>\r\n\r\n            <ng-container  matColumnDef=\"email\">\r\n              <th mat-header-cell *matHeaderCellDef mat-sort-header style=\"font-weight: bold;\"> Email </th>\r\n              <td mat-cell style=\"width:15%;\" *matCellDef=\"let row\" class=\"mat-cell-id\"> {{row.email}} </td>\r\n            </ng-container>\r\n\r\n            <ng-container  matColumnDef=\"birthday\">\r\n              <th mat-header-cell *matHeaderCellDef mat-sort-header style=\"font-weight: bold;\"> Fecha de nacimiento </th>\r\n              <td mat-cell  style=\"width:10%;\" *matCellDef=\"let row\" class=\"mat-cell-id\"> {{row.birthday}} </td>\r\n            </ng-container>\r\n\r\n\r\n            <ng-container matColumnDef=\"address\">\r\n              <th mat-header-cell *matHeaderCellDef mat-sort-header style=\"font-weight: bold;\"> Dirección </th>\r\n              <td mat-cell  style=\"width:10%;\" *matCellDef=\"let row\" class=\"mat-cell-id\"> {{row.address}} </td>\r\n            </ng-container>\r\n\r\n            <ng-container matColumnDef=\"cargo\">\r\n                <th mat-header-cell *matHeaderCellDef mat-sort-header style=\"font-weight: bold;\"> Cargo </th>\r\n                <td mat-cell  style=\"width:10%;\" *matCellDef=\"let row\" class=\"mat-cell-id\"> {{row.charge}} </td>\r\n            </ng-container>\r\n\r\n            <ng-container matColumnDef=\"actions\">\r\n                <th mat-header-cell *matHeaderCellDef mat-sort-header style=\"font-weight: bold;\"> Acciones </th>\r\n                <td mat-cell *matCellDef=\"let row\">\r\n                <div fxFlex=\"row\">\r\n                  <div fxLayout=\"column\" mat-stroked-button class=\"pointer\"\r\n                       (click)=\"goEdit(row.id);\">\r\n                    <i style=\"font-size: 25px\" class=\"nc-icon nc-tap-01\" title=\"Editar\"></i>\r\n                  </div>\r\n                </div>\r\n                </td>\r\n            </ng-container>\r\n\r\n            <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n            <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n          </table>\r\n        </div>\r\n        <mat-paginator [pageSizeOptions]=\"[5, 10, 25, 100]\" ></mat-paginator>\r\n      </div>\r\n    </mat-card>\r\n  </div>\r\n";
      /***/
    },

    /***/
    "Loxo": function Loxo(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Uzbek [uz]
      //! author : Sardor Muminov : https://github.com/muminoff
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var uz = moment.defineLocale('uz', {
          months: 'январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр'.split('_'),
          monthsShort: 'янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек'.split('_'),
          weekdays: 'Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба'.split('_'),
          weekdaysShort: 'Якш_Душ_Сеш_Чор_Пай_Жум_Шан'.split('_'),
          weekdaysMin: 'Як_Ду_Се_Чо_Па_Жу_Ша'.split('_'),
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'D MMMM YYYY, dddd HH:mm'
          },
          calendar: {
            sameDay: '[Бугун соат] LT [да]',
            nextDay: '[Эртага] LT [да]',
            nextWeek: 'dddd [куни соат] LT [да]',
            lastDay: '[Кеча соат] LT [да]',
            lastWeek: '[Утган] dddd [куни соат] LT [да]',
            sameElse: 'L'
          },
          relativeTime: {
            future: 'Якин %s ичида',
            past: 'Бир неча %s олдин',
            s: 'фурсат',
            ss: '%d фурсат',
            m: 'бир дакика',
            mm: '%d дакика',
            h: 'бир соат',
            hh: '%d соат',
            d: 'бир кун',
            dd: '%d кун',
            M: 'бир ой',
            MM: '%d ой',
            y: 'бир йил',
            yy: '%d йил'
          },
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 4th is the first week of the year.

          }
        });
        return uz;
      });
      /***/

    },

    /***/
    "M9IT": function M9IT(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MAT_PAGINATOR_DEFAULT_OPTIONS", function () {
        return MAT_PAGINATOR_DEFAULT_OPTIONS;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MAT_PAGINATOR_INTL_PROVIDER", function () {
        return MAT_PAGINATOR_INTL_PROVIDER;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MAT_PAGINATOR_INTL_PROVIDER_FACTORY", function () {
        return MAT_PAGINATOR_INTL_PROVIDER_FACTORY;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MatPaginator", function () {
        return MatPaginator;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MatPaginatorIntl", function () {
        return MatPaginatorIntl;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MatPaginatorModule", function () {
        return MatPaginatorModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "PageEvent", function () {
        return PageEvent;
      });
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/common */
      "ofXK");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var _angular_material_button__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/material/button */
      "bTqV");
      /* harmony import */


      var _angular_material_select__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/material/select */
      "d3UM");
      /* harmony import */


      var _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/material/tooltip */
      "Qu3c");
      /* harmony import */


      var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @angular/cdk/coercion */
      "8LU1");
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! rxjs */
      "qCKp");
      /* harmony import */


      var _angular_material_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! @angular/material/core */
      "FKr1");
      /* harmony import */


      var _angular_material_form_field__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! @angular/material/form-field */
      "kmnG");
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and
       * include it in a custom provider
       */


      function MatPaginator_div_2_mat_form_field_3_mat_option_2_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "mat-option", 19);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var pageSizeOption_r6 = ctx.$implicit;

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("value", pageSizeOption_r6);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtextInterpolate1"](" ", pageSizeOption_r6, " ");
        }
      }

      function MatPaginator_div_2_mat_form_field_3_Template(rf, ctx) {
        if (rf & 1) {
          var _r8 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵgetCurrentView"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "mat-form-field", 16);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](1, "mat-select", 17);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("selectionChange", function MatPaginator_div_2_mat_form_field_3_Template_mat_select_selectionChange_1_listener($event) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r8);

            var ctx_r7 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"](2);

            return ctx_r7._changePageSize($event.value);
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](2, MatPaginator_div_2_mat_form_field_3_mat_option_2_Template, 2, 2, "mat-option", 18);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"](2);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("appearance", ctx_r3._formFieldAppearance)("color", ctx_r3.color);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("value", ctx_r3.pageSize)("disabled", ctx_r3.disabled)("aria-label", ctx_r3._intl.itemsPerPageLabel);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngForOf", ctx_r3._displayedPageSizeOptions);
        }
      }

      function MatPaginator_div_2_div_4_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "div", 20);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var ctx_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"](2);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtextInterpolate"](ctx_r4.pageSize);
        }
      }

      function MatPaginator_div_2_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "div", 12);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](1, "div", 13);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](2);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](3, MatPaginator_div_2_mat_form_field_3_Template, 3, 6, "mat-form-field", 14);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](4, MatPaginator_div_2_div_4_Template, 2, 1, "div", 15);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](2);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtextInterpolate1"](" ", ctx_r0._intl.itemsPerPageLabel, " ");

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", ctx_r0._displayedPageSizeOptions.length > 1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", ctx_r0._displayedPageSizeOptions.length <= 1);
        }
      }

      function MatPaginator_button_6_Template(rf, ctx) {
        if (rf & 1) {
          var _r10 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵgetCurrentView"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "button", 21);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("click", function MatPaginator_button_6_Template_button_click_0_listener() {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r10);

            var ctx_r9 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

            return ctx_r9.firstPage();
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnamespaceSVG"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](1, "svg", 7);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](2, "path", 22);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("matTooltip", ctx_r1._intl.firstPageLabel)("matTooltipDisabled", ctx_r1._previousButtonsDisabled())("matTooltipPosition", "above")("disabled", ctx_r1._previousButtonsDisabled());

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵattribute"]("aria-label", ctx_r1._intl.firstPageLabel);
        }
      }

      function MatPaginator_button_13_Template(rf, ctx) {
        if (rf & 1) {
          var _r12 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵgetCurrentView"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnamespaceSVG"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnamespaceHTML"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "button", 23);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("click", function MatPaginator_button_13_Template_button_click_0_listener() {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r12);

            var ctx_r11 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

            return ctx_r11.lastPage();
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnamespaceSVG"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](1, "svg", 7);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](2, "path", 24);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("matTooltip", ctx_r2._intl.lastPageLabel)("matTooltipDisabled", ctx_r2._nextButtonsDisabled())("matTooltipPosition", "above")("disabled", ctx_r2._nextButtonsDisabled());

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵattribute"]("aria-label", ctx_r2._intl.lastPageLabel);
        }
      }

      var MatPaginatorIntl = function MatPaginatorIntl() {
        _classCallCheck(this, MatPaginatorIntl);

        /**
         * Stream to emit from when labels are changed. Use this to notify components when the labels have
         * changed after initialization.
         */
        this.changes = new rxjs__WEBPACK_IMPORTED_MODULE_6__["Subject"]();
        /** A label for the page size selector. */

        this.itemsPerPageLabel = 'Items per page:';
        /** A label for the button that increments the current page. */

        this.nextPageLabel = 'Next page';
        /** A label for the button that decrements the current page. */

        this.previousPageLabel = 'Previous page';
        /** A label for the button that moves to the first page. */

        this.firstPageLabel = 'First page';
        /** A label for the button that moves to the last page. */

        this.lastPageLabel = 'Last page';
        /** A label for the range of items within the current page and the length of the whole list. */

        this.getRangeLabel = function (page, pageSize, length) {
          if (length == 0 || pageSize == 0) {
            return "0 of ".concat(length);
          }

          length = Math.max(length, 0);
          var startIndex = page * pageSize; // If the start index exceeds the list length, do not try and fix the end index to the end.

          var endIndex = startIndex < length ? Math.min(startIndex + pageSize, length) : startIndex + pageSize;
          return "".concat(startIndex + 1, " \u2013 ").concat(endIndex, " of ").concat(length);
        };
      };

      MatPaginatorIntl.ɵfac = function MatPaginatorIntl_Factory(t) {
        return new (t || MatPaginatorIntl)();
      };

      MatPaginatorIntl.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
        factory: function MatPaginatorIntl_Factory() {
          return new MatPaginatorIntl();
        },
        token: MatPaginatorIntl,
        providedIn: "root"
      });
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](MatPaginatorIntl, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"],
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [];
        }, null);
      })();
      /** @docs-private */


      function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl) {
        return parentIntl || new MatPaginatorIntl();
      }
      /** @docs-private */


      var MAT_PAGINATOR_INTL_PROVIDER = {
        // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.
        provide: MatPaginatorIntl,
        deps: [[new _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"](), new _angular_core__WEBPACK_IMPORTED_MODULE_1__["SkipSelf"](), MatPaginatorIntl]],
        useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY
      };
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /** The default page size if there is no page size and there are no provided page size options. */

      var DEFAULT_PAGE_SIZE = 50;
      /**
       * Change event object that is emitted when the user selects a
       * different page size or navigates to another page.
       */

      var PageEvent = function PageEvent() {
        _classCallCheck(this, PageEvent);
      };
      /** Injection token that can be used to provide the default options for the paginator module. */


      var MAT_PAGINATOR_DEFAULT_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('MAT_PAGINATOR_DEFAULT_OPTIONS'); // Boilerplate for applying mixins to MatPaginator.

      /** @docs-private */

      var MatPaginatorBase = function MatPaginatorBase() {
        _classCallCheck(this, MatPaginatorBase);
      };

      var _MatPaginatorBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_7__["mixinDisabled"])(Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_7__["mixinInitialized"])(MatPaginatorBase));
      /**
       * Component to provide navigation between paged information. Displays the size of the current
       * page, user-selectable options to change that size, what items are being shown, and
       * navigational button to go to the previous or next page.
       */


      var MatPaginator = /*#__PURE__*/function (_MatPaginatorBase2) {
        _inherits(MatPaginator, _MatPaginatorBase2);

        var _super20 = _createSuper(MatPaginator);

        function MatPaginator(_intl, _changeDetectorRef, defaults) {
          var _this20;

          _classCallCheck(this, MatPaginator);

          _this20 = _super20.call(this);
          _this20._intl = _intl;
          _this20._changeDetectorRef = _changeDetectorRef;
          _this20._pageIndex = 0;
          _this20._length = 0;
          _this20._pageSizeOptions = [];
          _this20._hidePageSize = false;
          _this20._showFirstLastButtons = false;
          /** Event emitted when the paginator changes the page size or page index. */

          _this20.page = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
          _this20._intlChanges = _intl.changes.subscribe(function () {
            return _this20._changeDetectorRef.markForCheck();
          });

          if (defaults) {
            var pageSize = defaults.pageSize,
                pageSizeOptions = defaults.pageSizeOptions,
                hidePageSize = defaults.hidePageSize,
                showFirstLastButtons = defaults.showFirstLastButtons,
                formFieldAppearance = defaults.formFieldAppearance;

            if (pageSize != null) {
              _this20._pageSize = pageSize;
            }

            if (pageSizeOptions != null) {
              _this20._pageSizeOptions = pageSizeOptions;
            }

            if (hidePageSize != null) {
              _this20._hidePageSize = hidePageSize;
            }

            if (showFirstLastButtons != null) {
              _this20._showFirstLastButtons = showFirstLastButtons;
            }

            if (formFieldAppearance != null) {
              _this20._formFieldAppearance = formFieldAppearance;
            }
          }

          return _this20;
        }
        /** The zero-based page index of the displayed list of items. Defaulted to 0. */


        _createClass(MatPaginator, [{
          key: "pageIndex",
          get: function get() {
            return this._pageIndex;
          },
          set: function set(value) {
            this._pageIndex = Math.max(Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__["coerceNumberProperty"])(value), 0);

            this._changeDetectorRef.markForCheck();
          }
          /** The length of the total number of items that are being paginated. Defaulted to 0. */

        }, {
          key: "length",
          get: function get() {
            return this._length;
          },
          set: function set(value) {
            this._length = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__["coerceNumberProperty"])(value);

            this._changeDetectorRef.markForCheck();
          }
          /** Number of items to display on a page. By default set to 50. */

        }, {
          key: "pageSize",
          get: function get() {
            return this._pageSize;
          },
          set: function set(value) {
            this._pageSize = Math.max(Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__["coerceNumberProperty"])(value), 0);

            this._updateDisplayedPageSizeOptions();
          }
          /** The set of provided page size options to display to the user. */

        }, {
          key: "pageSizeOptions",
          get: function get() {
            return this._pageSizeOptions;
          },
          set: function set(value) {
            this._pageSizeOptions = (value || []).map(function (p) {
              return Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__["coerceNumberProperty"])(p);
            });

            this._updateDisplayedPageSizeOptions();
          }
          /** Whether to hide the page size selection UI from the user. */

        }, {
          key: "hidePageSize",
          get: function get() {
            return this._hidePageSize;
          },
          set: function set(value) {
            this._hidePageSize = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__["coerceBooleanProperty"])(value);
          }
          /** Whether to show the first/last buttons UI to the user. */

        }, {
          key: "showFirstLastButtons",
          get: function get() {
            return this._showFirstLastButtons;
          },
          set: function set(value) {
            this._showFirstLastButtons = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__["coerceBooleanProperty"])(value);
          }
        }, {
          key: "ngOnInit",
          value: function ngOnInit() {
            this._initialized = true;

            this._updateDisplayedPageSizeOptions();

            this._markInitialized();
          }
        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this._intlChanges.unsubscribe();
          }
          /** Advances to the next page if it exists. */

        }, {
          key: "nextPage",
          value: function nextPage() {
            if (!this.hasNextPage()) {
              return;
            }

            var previousPageIndex = this.pageIndex;
            this.pageIndex++;

            this._emitPageEvent(previousPageIndex);
          }
          /** Move back to the previous page if it exists. */

        }, {
          key: "previousPage",
          value: function previousPage() {
            if (!this.hasPreviousPage()) {
              return;
            }

            var previousPageIndex = this.pageIndex;
            this.pageIndex--;

            this._emitPageEvent(previousPageIndex);
          }
          /** Move to the first page if not already there. */

        }, {
          key: "firstPage",
          value: function firstPage() {
            // hasPreviousPage being false implies at the start
            if (!this.hasPreviousPage()) {
              return;
            }

            var previousPageIndex = this.pageIndex;
            this.pageIndex = 0;

            this._emitPageEvent(previousPageIndex);
          }
          /** Move to the last page if not already there. */

        }, {
          key: "lastPage",
          value: function lastPage() {
            // hasNextPage being false implies at the end
            if (!this.hasNextPage()) {
              return;
            }

            var previousPageIndex = this.pageIndex;
            this.pageIndex = this.getNumberOfPages() - 1;

            this._emitPageEvent(previousPageIndex);
          }
          /** Whether there is a previous page. */

        }, {
          key: "hasPreviousPage",
          value: function hasPreviousPage() {
            return this.pageIndex >= 1 && this.pageSize != 0;
          }
          /** Whether there is a next page. */

        }, {
          key: "hasNextPage",
          value: function hasNextPage() {
            var maxPageIndex = this.getNumberOfPages() - 1;
            return this.pageIndex < maxPageIndex && this.pageSize != 0;
          }
          /** Calculate the number of pages */

        }, {
          key: "getNumberOfPages",
          value: function getNumberOfPages() {
            if (!this.pageSize) {
              return 0;
            }

            return Math.ceil(this.length / this.pageSize);
          }
          /**
           * Changes the page size so that the first item displayed on the page will still be
           * displayed using the new page size.
           *
           * For example, if the page size is 10 and on the second page (items indexed 10-19) then
           * switching so that the page size is 5 will set the third page as the current page so
           * that the 10th item will still be displayed.
           */

        }, {
          key: "_changePageSize",
          value: function _changePageSize(pageSize) {
            // Current page needs to be updated to reflect the new page size. Navigate to the page
            // containing the previous page's first item.
            var startIndex = this.pageIndex * this.pageSize;
            var previousPageIndex = this.pageIndex;
            this.pageIndex = Math.floor(startIndex / pageSize) || 0;
            this.pageSize = pageSize;

            this._emitPageEvent(previousPageIndex);
          }
          /** Checks whether the buttons for going forwards should be disabled. */

        }, {
          key: "_nextButtonsDisabled",
          value: function _nextButtonsDisabled() {
            return this.disabled || !this.hasNextPage();
          }
          /** Checks whether the buttons for going backwards should be disabled. */

        }, {
          key: "_previousButtonsDisabled",
          value: function _previousButtonsDisabled() {
            return this.disabled || !this.hasPreviousPage();
          }
          /**
           * Updates the list of page size options to display to the user. Includes making sure that
           * the page size is an option and that the list is sorted.
           */

        }, {
          key: "_updateDisplayedPageSizeOptions",
          value: function _updateDisplayedPageSizeOptions() {
            if (!this._initialized) {
              return;
            } // If no page size is provided, use the first page size option or the default page size.


            if (!this.pageSize) {
              this._pageSize = this.pageSizeOptions.length != 0 ? this.pageSizeOptions[0] : DEFAULT_PAGE_SIZE;
            }

            this._displayedPageSizeOptions = this.pageSizeOptions.slice();

            if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {
              this._displayedPageSizeOptions.push(this.pageSize);
            } // Sort the numbers using a number-specific sort function.


            this._displayedPageSizeOptions.sort(function (a, b) {
              return a - b;
            });

            this._changeDetectorRef.markForCheck();
          }
          /** Emits an event notifying that a change of the paginator's properties has been triggered. */

        }, {
          key: "_emitPageEvent",
          value: function _emitPageEvent(previousPageIndex) {
            this.page.emit({
              previousPageIndex: previousPageIndex,
              pageIndex: this.pageIndex,
              pageSize: this.pageSize,
              length: this.length
            });
          }
        }]);

        return MatPaginator;
      }(_MatPaginatorBase);

      MatPaginator.ɵfac = function MatPaginator_Factory(t) {
        return new (t || MatPaginator)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](MatPaginatorIntl), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](MAT_PAGINATOR_DEFAULT_OPTIONS, 8));
      };

      MatPaginator.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineComponent"]({
        type: MatPaginator,
        selectors: [["mat-paginator"]],
        hostAttrs: [1, "mat-paginator"],
        inputs: {
          disabled: "disabled",
          pageIndex: "pageIndex",
          length: "length",
          pageSize: "pageSize",
          pageSizeOptions: "pageSizeOptions",
          hidePageSize: "hidePageSize",
          showFirstLastButtons: "showFirstLastButtons",
          color: "color"
        },
        outputs: {
          page: "page"
        },
        exportAs: ["matPaginator"],
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵInheritDefinitionFeature"]],
        decls: 14,
        vars: 14,
        consts: [[1, "mat-paginator-outer-container"], [1, "mat-paginator-container"], ["class", "mat-paginator-page-size", 4, "ngIf"], [1, "mat-paginator-range-actions"], [1, "mat-paginator-range-label"], ["mat-icon-button", "", "type", "button", "class", "mat-paginator-navigation-first", 3, "matTooltip", "matTooltipDisabled", "matTooltipPosition", "disabled", "click", 4, "ngIf"], ["mat-icon-button", "", "type", "button", 1, "mat-paginator-navigation-previous", 3, "matTooltip", "matTooltipDisabled", "matTooltipPosition", "disabled", "click"], ["viewBox", "0 0 24 24", "focusable", "false", 1, "mat-paginator-icon"], ["d", "M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"], ["mat-icon-button", "", "type", "button", 1, "mat-paginator-navigation-next", 3, "matTooltip", "matTooltipDisabled", "matTooltipPosition", "disabled", "click"], ["d", "M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"], ["mat-icon-button", "", "type", "button", "class", "mat-paginator-navigation-last", 3, "matTooltip", "matTooltipDisabled", "matTooltipPosition", "disabled", "click", 4, "ngIf"], [1, "mat-paginator-page-size"], [1, "mat-paginator-page-size-label"], ["class", "mat-paginator-page-size-select", 3, "appearance", "color", 4, "ngIf"], ["class", "mat-paginator-page-size-value", 4, "ngIf"], [1, "mat-paginator-page-size-select", 3, "appearance", "color"], [3, "value", "disabled", "aria-label", "selectionChange"], [3, "value", 4, "ngFor", "ngForOf"], [3, "value"], [1, "mat-paginator-page-size-value"], ["mat-icon-button", "", "type", "button", 1, "mat-paginator-navigation-first", 3, "matTooltip", "matTooltipDisabled", "matTooltipPosition", "disabled", "click"], ["d", "M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z"], ["mat-icon-button", "", "type", "button", 1, "mat-paginator-navigation-last", 3, "matTooltip", "matTooltipDisabled", "matTooltipPosition", "disabled", "click"], ["d", "M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z"]],
        template: function MatPaginator_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "div", 0);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](1, "div", 1);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](2, MatPaginator_div_2_Template, 5, 3, "div", 2);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](3, "div", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](4, "div", 4);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](5);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](6, MatPaginator_button_6_Template, 3, 5, "button", 5);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](7, "button", 6);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("click", function MatPaginator_Template_button_click_7_listener() {
              return ctx.previousPage();
            });

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnamespaceSVG"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](8, "svg", 7);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](9, "path", 8);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnamespaceHTML"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](10, "button", 9);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("click", function MatPaginator_Template_button_click_10_listener() {
              return ctx.nextPage();
            });

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnamespaceSVG"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](11, "svg", 7);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](12, "path", 10);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](13, MatPaginator_button_13_Template, 3, 5, "button", 11);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](2);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", !ctx.hidePageSize);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](3);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtextInterpolate1"](" ", ctx._intl.getRangeLabel(ctx.pageIndex, ctx.pageSize, ctx.length), " ");

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", ctx.showFirstLastButtons);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("matTooltip", ctx._intl.previousPageLabel)("matTooltipDisabled", ctx._previousButtonsDisabled())("matTooltipPosition", "above")("disabled", ctx._previousButtonsDisabled());

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵattribute"]("aria-label", ctx._intl.previousPageLabel);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](3);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("matTooltip", ctx._intl.nextPageLabel)("matTooltipDisabled", ctx._nextButtonsDisabled())("matTooltipPosition", "above")("disabled", ctx._nextButtonsDisabled());

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵattribute"]("aria-label", ctx._intl.nextPageLabel);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](3);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", ctx.showFirstLastButtons);
          }
        },
        directives: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["NgIf"], _angular_material_button__WEBPACK_IMPORTED_MODULE_2__["MatButton"], _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_4__["MatTooltip"], _angular_material_form_field__WEBPACK_IMPORTED_MODULE_8__["MatFormField"], _angular_material_select__WEBPACK_IMPORTED_MODULE_3__["MatSelect"], _angular_common__WEBPACK_IMPORTED_MODULE_0__["NgForOf"], _angular_material_core__WEBPACK_IMPORTED_MODULE_7__["MatOption"]],
        styles: [".mat-paginator{display:block}.mat-paginator-outer-container{display:flex}.mat-paginator-container{display:flex;align-items:center;justify-content:flex-end;padding:0 8px;flex-wrap:wrap-reverse;width:100%}.mat-paginator-page-size{display:flex;align-items:baseline;margin-right:8px}[dir=rtl] .mat-paginator-page-size{margin-right:0;margin-left:8px}.mat-paginator-page-size-label{margin:0 4px}.mat-paginator-page-size-select{margin:6px 4px 0 4px;width:56px}.mat-paginator-page-size-select.mat-form-field-appearance-outline{width:64px}.mat-paginator-page-size-select.mat-form-field-appearance-fill{width:64px}.mat-paginator-range-label{margin:0 32px 0 24px}.mat-paginator-range-actions{display:flex;align-items:center}.mat-paginator-icon{width:28px;fill:currentColor}[dir=rtl] .mat-paginator-icon{transform:rotate(180deg)}\n"],
        encapsulation: 2,
        changeDetection: 0
      });

      MatPaginator.ctorParameters = function () {
        return [{
          type: MatPaginatorIntl
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
            args: [MAT_PAGINATOR_DEFAULT_OPTIONS]
          }]
        }];
      };

      MatPaginator.propDecorators = {
        color: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }],
        pageIndex: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }],
        length: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }],
        pageSize: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }],
        pageSizeOptions: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }],
        hidePageSize: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }],
        showFirstLastButtons: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }],
        page: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"]
        }]
      };
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](MatPaginator, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"],
          args: [{
            selector: 'mat-paginator',
            exportAs: 'matPaginator',
            template: "<div class=\"mat-paginator-outer-container\">\n  <div class=\"mat-paginator-container\">\n    <div class=\"mat-paginator-page-size\" *ngIf=\"!hidePageSize\">\n      <div class=\"mat-paginator-page-size-label\">\n        {{_intl.itemsPerPageLabel}}\n      </div>\n\n      <mat-form-field\n        *ngIf=\"_displayedPageSizeOptions.length > 1\"\n        [appearance]=\"_formFieldAppearance!\"\n        [color]=\"color\"\n        class=\"mat-paginator-page-size-select\">\n        <mat-select\n          [value]=\"pageSize\"\n          [disabled]=\"disabled\"\n          [aria-label]=\"_intl.itemsPerPageLabel\"\n          (selectionChange)=\"_changePageSize($event.value)\">\n          <mat-option *ngFor=\"let pageSizeOption of _displayedPageSizeOptions\" [value]=\"pageSizeOption\">\n            {{pageSizeOption}}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n\n      <div\n        class=\"mat-paginator-page-size-value\"\n        *ngIf=\"_displayedPageSizeOptions.length <= 1\">{{pageSize}}</div>\n    </div>\n\n    <div class=\"mat-paginator-range-actions\">\n      <div class=\"mat-paginator-range-label\">\n        {{_intl.getRangeLabel(pageIndex, pageSize, length)}}\n      </div>\n\n      <button mat-icon-button type=\"button\"\n              class=\"mat-paginator-navigation-first\"\n              (click)=\"firstPage()\"\n              [attr.aria-label]=\"_intl.firstPageLabel\"\n              [matTooltip]=\"_intl.firstPageLabel\"\n              [matTooltipDisabled]=\"_previousButtonsDisabled()\"\n              [matTooltipPosition]=\"'above'\"\n              [disabled]=\"_previousButtonsDisabled()\"\n              *ngIf=\"showFirstLastButtons\">\n        <svg class=\"mat-paginator-icon\" viewBox=\"0 0 24 24\" focusable=\"false\">\n          <path d=\"M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z\"/>\n        </svg>\n      </button>\n      <button mat-icon-button type=\"button\"\n              class=\"mat-paginator-navigation-previous\"\n              (click)=\"previousPage()\"\n              [attr.aria-label]=\"_intl.previousPageLabel\"\n              [matTooltip]=\"_intl.previousPageLabel\"\n              [matTooltipDisabled]=\"_previousButtonsDisabled()\"\n              [matTooltipPosition]=\"'above'\"\n              [disabled]=\"_previousButtonsDisabled()\">\n        <svg class=\"mat-paginator-icon\" viewBox=\"0 0 24 24\" focusable=\"false\">\n          <path d=\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\"/>\n        </svg>\n      </button>\n      <button mat-icon-button type=\"button\"\n              class=\"mat-paginator-navigation-next\"\n              (click)=\"nextPage()\"\n              [attr.aria-label]=\"_intl.nextPageLabel\"\n              [matTooltip]=\"_intl.nextPageLabel\"\n              [matTooltipDisabled]=\"_nextButtonsDisabled()\"\n              [matTooltipPosition]=\"'above'\"\n              [disabled]=\"_nextButtonsDisabled()\">\n        <svg class=\"mat-paginator-icon\" viewBox=\"0 0 24 24\" focusable=\"false\">\n          <path d=\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\"/>\n        </svg>\n      </button>\n      <button mat-icon-button type=\"button\"\n              class=\"mat-paginator-navigation-last\"\n              (click)=\"lastPage()\"\n              [attr.aria-label]=\"_intl.lastPageLabel\"\n              [matTooltip]=\"_intl.lastPageLabel\"\n              [matTooltipDisabled]=\"_nextButtonsDisabled()\"\n              [matTooltipPosition]=\"'above'\"\n              [disabled]=\"_nextButtonsDisabled()\"\n              *ngIf=\"showFirstLastButtons\">\n        <svg class=\"mat-paginator-icon\" viewBox=\"0 0 24 24\" focusable=\"false\">\n          <path d=\"M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z\"/>\n        </svg>\n      </button>\n    </div>\n  </div>\n</div>\n",
            inputs: ['disabled'],
            host: {
              'class': 'mat-paginator'
            },
            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
            styles: [".mat-paginator{display:block}.mat-paginator-outer-container{display:flex}.mat-paginator-container{display:flex;align-items:center;justify-content:flex-end;padding:0 8px;flex-wrap:wrap-reverse;width:100%}.mat-paginator-page-size{display:flex;align-items:baseline;margin-right:8px}[dir=rtl] .mat-paginator-page-size{margin-right:0;margin-left:8px}.mat-paginator-page-size-label{margin:0 4px}.mat-paginator-page-size-select{margin:6px 4px 0 4px;width:56px}.mat-paginator-page-size-select.mat-form-field-appearance-outline{width:64px}.mat-paginator-page-size-select.mat-form-field-appearance-fill{width:64px}.mat-paginator-range-label{margin:0 32px 0 24px}.mat-paginator-range-actions{display:flex;align-items:center}.mat-paginator-icon{width:28px;fill:currentColor}[dir=rtl] .mat-paginator-icon{transform:rotate(180deg)}\n"]
          }]
        }], function () {
          return [{
            type: MatPaginatorIntl
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
              args: [MAT_PAGINATOR_DEFAULT_OPTIONS]
            }]
          }];
        }, {
          page: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"]
          }],
          pageIndex: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          length: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          pageSize: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          pageSizeOptions: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          hidePageSize: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          showFirstLastButtons: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          color: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }]
        });
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var MatPaginatorModule = function MatPaginatorModule() {
        _classCallCheck(this, MatPaginatorModule);
      };

      MatPaginatorModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
        type: MatPaginatorModule
      });
      MatPaginatorModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({
        factory: function MatPaginatorModule_Factory(t) {
          return new (t || MatPaginatorModule)();
        },
        providers: [MAT_PAGINATOR_INTL_PROVIDER],
        imports: [[_angular_common__WEBPACK_IMPORTED_MODULE_0__["CommonModule"], _angular_material_button__WEBPACK_IMPORTED_MODULE_2__["MatButtonModule"], _angular_material_select__WEBPACK_IMPORTED_MODULE_3__["MatSelectModule"], _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_4__["MatTooltipModule"]]]
      });

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵsetNgModuleScope"](MatPaginatorModule, {
          declarations: function declarations() {
            return [MatPaginator];
          },
          imports: function imports() {
            return [_angular_common__WEBPACK_IMPORTED_MODULE_0__["CommonModule"], _angular_material_button__WEBPACK_IMPORTED_MODULE_2__["MatButtonModule"], _angular_material_select__WEBPACK_IMPORTED_MODULE_3__["MatSelectModule"], _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_4__["MatTooltipModule"]];
          },
          exports: function exports() {
            return [MatPaginator];
          }
        });
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](MatPaginatorModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"],
          args: [{
            imports: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["CommonModule"], _angular_material_button__WEBPACK_IMPORTED_MODULE_2__["MatButtonModule"], _angular_material_select__WEBPACK_IMPORTED_MODULE_3__["MatSelectModule"], _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_4__["MatTooltipModule"]],
            exports: [MatPaginator],
            declarations: [MatPaginator],
            providers: [MAT_PAGINATOR_INTL_PROVIDER]
          }]
        }], null, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Generated bundle index. Do not edit.
       */
      //# sourceMappingURL=paginator.js.map

      /***/

    },

    /***/
    "MO+k": function MOK(module, exports, __webpack_require__) {
      /*!
       * Chart.js v2.9.3
       * https://www.chartjs.org
       * (c) 2019 Chart.js Contributors
       * Released under the MIT License
       */
      (function (global, factory) {
        true ? module.exports = factory(function () {
          try {
            return __webpack_require__(
            /*! moment */
            "wd/R");
          } catch (e) {}
        }()) : undefined;
      })(this, function (moment) {
        'use strict';

        moment = moment && moment.hasOwnProperty('default') ? moment['default'] : moment;

        function createCommonjsModule(fn, module) {
          return module = {
            exports: {}
          }, fn(module, module.exports), module.exports;
        }

        function getCjsExportFromNamespace(n) {
          return n && n['default'] || n;
        }

        var colorName = {
          "aliceblue": [240, 248, 255],
          "antiquewhite": [250, 235, 215],
          "aqua": [0, 255, 255],
          "aquamarine": [127, 255, 212],
          "azure": [240, 255, 255],
          "beige": [245, 245, 220],
          "bisque": [255, 228, 196],
          "black": [0, 0, 0],
          "blanchedalmond": [255, 235, 205],
          "blue": [0, 0, 255],
          "blueviolet": [138, 43, 226],
          "brown": [165, 42, 42],
          "burlywood": [222, 184, 135],
          "cadetblue": [95, 158, 160],
          "chartreuse": [127, 255, 0],
          "chocolate": [210, 105, 30],
          "coral": [255, 127, 80],
          "cornflowerblue": [100, 149, 237],
          "cornsilk": [255, 248, 220],
          "crimson": [220, 20, 60],
          "cyan": [0, 255, 255],
          "darkblue": [0, 0, 139],
          "darkcyan": [0, 139, 139],
          "darkgoldenrod": [184, 134, 11],
          "darkgray": [169, 169, 169],
          "darkgreen": [0, 100, 0],
          "darkgrey": [169, 169, 169],
          "darkkhaki": [189, 183, 107],
          "darkmagenta": [139, 0, 139],
          "darkolivegreen": [85, 107, 47],
          "darkorange": [255, 140, 0],
          "darkorchid": [153, 50, 204],
          "darkred": [139, 0, 0],
          "darksalmon": [233, 150, 122],
          "darkseagreen": [143, 188, 143],
          "darkslateblue": [72, 61, 139],
          "darkslategray": [47, 79, 79],
          "darkslategrey": [47, 79, 79],
          "darkturquoise": [0, 206, 209],
          "darkviolet": [148, 0, 211],
          "deeppink": [255, 20, 147],
          "deepskyblue": [0, 191, 255],
          "dimgray": [105, 105, 105],
          "dimgrey": [105, 105, 105],
          "dodgerblue": [30, 144, 255],
          "firebrick": [178, 34, 34],
          "floralwhite": [255, 250, 240],
          "forestgreen": [34, 139, 34],
          "fuchsia": [255, 0, 255],
          "gainsboro": [220, 220, 220],
          "ghostwhite": [248, 248, 255],
          "gold": [255, 215, 0],
          "goldenrod": [218, 165, 32],
          "gray": [128, 128, 128],
          "green": [0, 128, 0],
          "greenyellow": [173, 255, 47],
          "grey": [128, 128, 128],
          "honeydew": [240, 255, 240],
          "hotpink": [255, 105, 180],
          "indianred": [205, 92, 92],
          "indigo": [75, 0, 130],
          "ivory": [255, 255, 240],
          "khaki": [240, 230, 140],
          "lavender": [230, 230, 250],
          "lavenderblush": [255, 240, 245],
          "lawngreen": [124, 252, 0],
          "lemonchiffon": [255, 250, 205],
          "lightblue": [173, 216, 230],
          "lightcoral": [240, 128, 128],
          "lightcyan": [224, 255, 255],
          "lightgoldenrodyellow": [250, 250, 210],
          "lightgray": [211, 211, 211],
          "lightgreen": [144, 238, 144],
          "lightgrey": [211, 211, 211],
          "lightpink": [255, 182, 193],
          "lightsalmon": [255, 160, 122],
          "lightseagreen": [32, 178, 170],
          "lightskyblue": [135, 206, 250],
          "lightslategray": [119, 136, 153],
          "lightslategrey": [119, 136, 153],
          "lightsteelblue": [176, 196, 222],
          "lightyellow": [255, 255, 224],
          "lime": [0, 255, 0],
          "limegreen": [50, 205, 50],
          "linen": [250, 240, 230],
          "magenta": [255, 0, 255],
          "maroon": [128, 0, 0],
          "mediumaquamarine": [102, 205, 170],
          "mediumblue": [0, 0, 205],
          "mediumorchid": [186, 85, 211],
          "mediumpurple": [147, 112, 219],
          "mediumseagreen": [60, 179, 113],
          "mediumslateblue": [123, 104, 238],
          "mediumspringgreen": [0, 250, 154],
          "mediumturquoise": [72, 209, 204],
          "mediumvioletred": [199, 21, 133],
          "midnightblue": [25, 25, 112],
          "mintcream": [245, 255, 250],
          "mistyrose": [255, 228, 225],
          "moccasin": [255, 228, 181],
          "navajowhite": [255, 222, 173],
          "navy": [0, 0, 128],
          "oldlace": [253, 245, 230],
          "olive": [128, 128, 0],
          "olivedrab": [107, 142, 35],
          "orange": [255, 165, 0],
          "orangered": [255, 69, 0],
          "orchid": [218, 112, 214],
          "palegoldenrod": [238, 232, 170],
          "palegreen": [152, 251, 152],
          "paleturquoise": [175, 238, 238],
          "palevioletred": [219, 112, 147],
          "papayawhip": [255, 239, 213],
          "peachpuff": [255, 218, 185],
          "peru": [205, 133, 63],
          "pink": [255, 192, 203],
          "plum": [221, 160, 221],
          "powderblue": [176, 224, 230],
          "purple": [128, 0, 128],
          "rebeccapurple": [102, 51, 153],
          "red": [255, 0, 0],
          "rosybrown": [188, 143, 143],
          "royalblue": [65, 105, 225],
          "saddlebrown": [139, 69, 19],
          "salmon": [250, 128, 114],
          "sandybrown": [244, 164, 96],
          "seagreen": [46, 139, 87],
          "seashell": [255, 245, 238],
          "sienna": [160, 82, 45],
          "silver": [192, 192, 192],
          "skyblue": [135, 206, 235],
          "slateblue": [106, 90, 205],
          "slategray": [112, 128, 144],
          "slategrey": [112, 128, 144],
          "snow": [255, 250, 250],
          "springgreen": [0, 255, 127],
          "steelblue": [70, 130, 180],
          "tan": [210, 180, 140],
          "teal": [0, 128, 128],
          "thistle": [216, 191, 216],
          "tomato": [255, 99, 71],
          "turquoise": [64, 224, 208],
          "violet": [238, 130, 238],
          "wheat": [245, 222, 179],
          "white": [255, 255, 255],
          "whitesmoke": [245, 245, 245],
          "yellow": [255, 255, 0],
          "yellowgreen": [154, 205, 50]
        };
        var conversions = createCommonjsModule(function (module) {
          /* MIT license */
          // NOTE: conversions should only return primitive values (i.e. arrays, or
          //       values that give correct `typeof` results).
          //       do not use box values types (i.e. Number(), String(), etc.)
          var reverseKeywords = {};

          for (var key in colorName) {
            if (colorName.hasOwnProperty(key)) {
              reverseKeywords[colorName[key]] = key;
            }
          }

          var convert = module.exports = {
            rgb: {
              channels: 3,
              labels: 'rgb'
            },
            hsl: {
              channels: 3,
              labels: 'hsl'
            },
            hsv: {
              channels: 3,
              labels: 'hsv'
            },
            hwb: {
              channels: 3,
              labels: 'hwb'
            },
            cmyk: {
              channels: 4,
              labels: 'cmyk'
            },
            xyz: {
              channels: 3,
              labels: 'xyz'
            },
            lab: {
              channels: 3,
              labels: 'lab'
            },
            lch: {
              channels: 3,
              labels: 'lch'
            },
            hex: {
              channels: 1,
              labels: ['hex']
            },
            keyword: {
              channels: 1,
              labels: ['keyword']
            },
            ansi16: {
              channels: 1,
              labels: ['ansi16']
            },
            ansi256: {
              channels: 1,
              labels: ['ansi256']
            },
            hcg: {
              channels: 3,
              labels: ['h', 'c', 'g']
            },
            apple: {
              channels: 3,
              labels: ['r16', 'g16', 'b16']
            },
            gray: {
              channels: 1,
              labels: ['gray']
            }
          }; // hide .channels and .labels properties

          for (var model in convert) {
            if (convert.hasOwnProperty(model)) {
              if (!('channels' in convert[model])) {
                throw new Error('missing channels property: ' + model);
              }

              if (!('labels' in convert[model])) {
                throw new Error('missing channel labels property: ' + model);
              }

              if (convert[model].labels.length !== convert[model].channels) {
                throw new Error('channel and label counts mismatch: ' + model);
              }

              var channels = convert[model].channels;
              var labels = convert[model].labels;
              delete convert[model].channels;
              delete convert[model].labels;
              Object.defineProperty(convert[model], 'channels', {
                value: channels
              });
              Object.defineProperty(convert[model], 'labels', {
                value: labels
              });
            }
          }

          convert.rgb.hsl = function (rgb) {
            var r = rgb[0] / 255;
            var g = rgb[1] / 255;
            var b = rgb[2] / 255;
            var min = Math.min(r, g, b);
            var max = Math.max(r, g, b);
            var delta = max - min;
            var h;
            var s;
            var l;

            if (max === min) {
              h = 0;
            } else if (r === max) {
              h = (g - b) / delta;
            } else if (g === max) {
              h = 2 + (b - r) / delta;
            } else if (b === max) {
              h = 4 + (r - g) / delta;
            }

            h = Math.min(h * 60, 360);

            if (h < 0) {
              h += 360;
            }

            l = (min + max) / 2;

            if (max === min) {
              s = 0;
            } else if (l <= 0.5) {
              s = delta / (max + min);
            } else {
              s = delta / (2 - max - min);
            }

            return [h, s * 100, l * 100];
          };

          convert.rgb.hsv = function (rgb) {
            var rdif;
            var gdif;
            var bdif;
            var h;
            var s;
            var r = rgb[0] / 255;
            var g = rgb[1] / 255;
            var b = rgb[2] / 255;
            var v = Math.max(r, g, b);
            var diff = v - Math.min(r, g, b);

            var diffc = function diffc(c) {
              return (v - c) / 6 / diff + 1 / 2;
            };

            if (diff === 0) {
              h = s = 0;
            } else {
              s = diff / v;
              rdif = diffc(r);
              gdif = diffc(g);
              bdif = diffc(b);

              if (r === v) {
                h = bdif - gdif;
              } else if (g === v) {
                h = 1 / 3 + rdif - bdif;
              } else if (b === v) {
                h = 2 / 3 + gdif - rdif;
              }

              if (h < 0) {
                h += 1;
              } else if (h > 1) {
                h -= 1;
              }
            }

            return [h * 360, s * 100, v * 100];
          };

          convert.rgb.hwb = function (rgb) {
            var r = rgb[0];
            var g = rgb[1];
            var b = rgb[2];
            var h = convert.rgb.hsl(rgb)[0];
            var w = 1 / 255 * Math.min(r, Math.min(g, b));
            b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
            return [h, w * 100, b * 100];
          };

          convert.rgb.cmyk = function (rgb) {
            var r = rgb[0] / 255;
            var g = rgb[1] / 255;
            var b = rgb[2] / 255;
            var c;
            var m;
            var y;
            var k;
            k = Math.min(1 - r, 1 - g, 1 - b);
            c = (1 - r - k) / (1 - k) || 0;
            m = (1 - g - k) / (1 - k) || 0;
            y = (1 - b - k) / (1 - k) || 0;
            return [c * 100, m * 100, y * 100, k * 100];
          };
          /**
           * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance
           * */


          function comparativeDistance(x, y) {
            return Math.pow(x[0] - y[0], 2) + Math.pow(x[1] - y[1], 2) + Math.pow(x[2] - y[2], 2);
          }

          convert.rgb.keyword = function (rgb) {
            var reversed = reverseKeywords[rgb];

            if (reversed) {
              return reversed;
            }

            var currentClosestDistance = Infinity;
            var currentClosestKeyword;

            for (var keyword in colorName) {
              if (colorName.hasOwnProperty(keyword)) {
                var value = colorName[keyword]; // Compute comparative distance

                var distance = comparativeDistance(rgb, value); // Check if its less, if so set as closest

                if (distance < currentClosestDistance) {
                  currentClosestDistance = distance;
                  currentClosestKeyword = keyword;
                }
              }
            }

            return currentClosestKeyword;
          };

          convert.keyword.rgb = function (keyword) {
            return colorName[keyword];
          };

          convert.rgb.xyz = function (rgb) {
            var r = rgb[0] / 255;
            var g = rgb[1] / 255;
            var b = rgb[2] / 255; // assume sRGB

            r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
            g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
            b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;
            var x = r * 0.4124 + g * 0.3576 + b * 0.1805;
            var y = r * 0.2126 + g * 0.7152 + b * 0.0722;
            var z = r * 0.0193 + g * 0.1192 + b * 0.9505;
            return [x * 100, y * 100, z * 100];
          };

          convert.rgb.lab = function (rgb) {
            var xyz = convert.rgb.xyz(rgb);
            var x = xyz[0];
            var y = xyz[1];
            var z = xyz[2];
            var l;
            var a;
            var b;
            x /= 95.047;
            y /= 100;
            z /= 108.883;
            x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
            y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
            z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
            l = 116 * y - 16;
            a = 500 * (x - y);
            b = 200 * (y - z);
            return [l, a, b];
          };

          convert.hsl.rgb = function (hsl) {
            var h = hsl[0] / 360;
            var s = hsl[1] / 100;
            var l = hsl[2] / 100;
            var t1;
            var t2;
            var t3;
            var rgb;
            var val;

            if (s === 0) {
              val = l * 255;
              return [val, val, val];
            }

            if (l < 0.5) {
              t2 = l * (1 + s);
            } else {
              t2 = l + s - l * s;
            }

            t1 = 2 * l - t2;
            rgb = [0, 0, 0];

            for (var i = 0; i < 3; i++) {
              t3 = h + 1 / 3 * -(i - 1);

              if (t3 < 0) {
                t3++;
              }

              if (t3 > 1) {
                t3--;
              }

              if (6 * t3 < 1) {
                val = t1 + (t2 - t1) * 6 * t3;
              } else if (2 * t3 < 1) {
                val = t2;
              } else if (3 * t3 < 2) {
                val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
              } else {
                val = t1;
              }

              rgb[i] = val * 255;
            }

            return rgb;
          };

          convert.hsl.hsv = function (hsl) {
            var h = hsl[0];
            var s = hsl[1] / 100;
            var l = hsl[2] / 100;
            var smin = s;
            var lmin = Math.max(l, 0.01);
            var sv;
            var v;
            l *= 2;
            s *= l <= 1 ? l : 2 - l;
            smin *= lmin <= 1 ? lmin : 2 - lmin;
            v = (l + s) / 2;
            sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
            return [h, sv * 100, v * 100];
          };

          convert.hsv.rgb = function (hsv) {
            var h = hsv[0] / 60;
            var s = hsv[1] / 100;
            var v = hsv[2] / 100;
            var hi = Math.floor(h) % 6;
            var f = h - Math.floor(h);
            var p = 255 * v * (1 - s);
            var q = 255 * v * (1 - s * f);
            var t = 255 * v * (1 - s * (1 - f));
            v *= 255;

            switch (hi) {
              case 0:
                return [v, t, p];

              case 1:
                return [q, v, p];

              case 2:
                return [p, v, t];

              case 3:
                return [p, q, v];

              case 4:
                return [t, p, v];

              case 5:
                return [v, p, q];
            }
          };

          convert.hsv.hsl = function (hsv) {
            var h = hsv[0];
            var s = hsv[1] / 100;
            var v = hsv[2] / 100;
            var vmin = Math.max(v, 0.01);
            var lmin;
            var sl;
            var l;
            l = (2 - s) * v;
            lmin = (2 - s) * vmin;
            sl = s * vmin;
            sl /= lmin <= 1 ? lmin : 2 - lmin;
            sl = sl || 0;
            l /= 2;
            return [h, sl * 100, l * 100];
          }; // http://dev.w3.org/csswg/css-color/#hwb-to-rgb


          convert.hwb.rgb = function (hwb) {
            var h = hwb[0] / 360;
            var wh = hwb[1] / 100;
            var bl = hwb[2] / 100;
            var ratio = wh + bl;
            var i;
            var v;
            var f;
            var n; // wh + bl cant be > 1

            if (ratio > 1) {
              wh /= ratio;
              bl /= ratio;
            }

            i = Math.floor(6 * h);
            v = 1 - bl;
            f = 6 * h - i;

            if ((i & 0x01) !== 0) {
              f = 1 - f;
            }

            n = wh + f * (v - wh); // linear interpolation

            var r;
            var g;
            var b;

            switch (i) {
              default:
              case 6:
              case 0:
                r = v;
                g = n;
                b = wh;
                break;

              case 1:
                r = n;
                g = v;
                b = wh;
                break;

              case 2:
                r = wh;
                g = v;
                b = n;
                break;

              case 3:
                r = wh;
                g = n;
                b = v;
                break;

              case 4:
                r = n;
                g = wh;
                b = v;
                break;

              case 5:
                r = v;
                g = wh;
                b = n;
                break;
            }

            return [r * 255, g * 255, b * 255];
          };

          convert.cmyk.rgb = function (cmyk) {
            var c = cmyk[0] / 100;
            var m = cmyk[1] / 100;
            var y = cmyk[2] / 100;
            var k = cmyk[3] / 100;
            var r;
            var g;
            var b;
            r = 1 - Math.min(1, c * (1 - k) + k);
            g = 1 - Math.min(1, m * (1 - k) + k);
            b = 1 - Math.min(1, y * (1 - k) + k);
            return [r * 255, g * 255, b * 255];
          };

          convert.xyz.rgb = function (xyz) {
            var x = xyz[0] / 100;
            var y = xyz[1] / 100;
            var z = xyz[2] / 100;
            var r;
            var g;
            var b;
            r = x * 3.2406 + y * -1.5372 + z * -0.4986;
            g = x * -0.9689 + y * 1.8758 + z * 0.0415;
            b = x * 0.0557 + y * -0.2040 + z * 1.0570; // assume sRGB

            r = r > 0.0031308 ? 1.055 * Math.pow(r, 1.0 / 2.4) - 0.055 : r * 12.92;
            g = g > 0.0031308 ? 1.055 * Math.pow(g, 1.0 / 2.4) - 0.055 : g * 12.92;
            b = b > 0.0031308 ? 1.055 * Math.pow(b, 1.0 / 2.4) - 0.055 : b * 12.92;
            r = Math.min(Math.max(0, r), 1);
            g = Math.min(Math.max(0, g), 1);
            b = Math.min(Math.max(0, b), 1);
            return [r * 255, g * 255, b * 255];
          };

          convert.xyz.lab = function (xyz) {
            var x = xyz[0];
            var y = xyz[1];
            var z = xyz[2];
            var l;
            var a;
            var b;
            x /= 95.047;
            y /= 100;
            z /= 108.883;
            x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
            y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
            z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
            l = 116 * y - 16;
            a = 500 * (x - y);
            b = 200 * (y - z);
            return [l, a, b];
          };

          convert.lab.xyz = function (lab) {
            var l = lab[0];
            var a = lab[1];
            var b = lab[2];
            var x;
            var y;
            var z;
            y = (l + 16) / 116;
            x = a / 500 + y;
            z = y - b / 200;
            var y2 = Math.pow(y, 3);
            var x2 = Math.pow(x, 3);
            var z2 = Math.pow(z, 3);
            y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;
            x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;
            z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;
            x *= 95.047;
            y *= 100;
            z *= 108.883;
            return [x, y, z];
          };

          convert.lab.lch = function (lab) {
            var l = lab[0];
            var a = lab[1];
            var b = lab[2];
            var hr;
            var h;
            var c;
            hr = Math.atan2(b, a);
            h = hr * 360 / 2 / Math.PI;

            if (h < 0) {
              h += 360;
            }

            c = Math.sqrt(a * a + b * b);
            return [l, c, h];
          };

          convert.lch.lab = function (lch) {
            var l = lch[0];
            var c = lch[1];
            var h = lch[2];
            var a;
            var b;
            var hr;
            hr = h / 360 * 2 * Math.PI;
            a = c * Math.cos(hr);
            b = c * Math.sin(hr);
            return [l, a, b];
          };

          convert.rgb.ansi16 = function (args) {
            var r = args[0];
            var g = args[1];
            var b = args[2];
            var value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2]; // hsv -> ansi16 optimization

            value = Math.round(value / 50);

            if (value === 0) {
              return 30;
            }

            var ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));

            if (value === 2) {
              ansi += 60;
            }

            return ansi;
          };

          convert.hsv.ansi16 = function (args) {
            // optimization here; we already know the value and don't need to get
            // it converted for us.
            return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
          };

          convert.rgb.ansi256 = function (args) {
            var r = args[0];
            var g = args[1];
            var b = args[2]; // we use the extended greyscale palette here, with the exception of
            // black and white. normal palette only has 4 greyscale shades.

            if (r === g && g === b) {
              if (r < 8) {
                return 16;
              }

              if (r > 248) {
                return 231;
              }

              return Math.round((r - 8) / 247 * 24) + 232;
            }

            var ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
            return ansi;
          };

          convert.ansi16.rgb = function (args) {
            var color = args % 10; // handle greyscale

            if (color === 0 || color === 7) {
              if (args > 50) {
                color += 3.5;
              }

              color = color / 10.5 * 255;
              return [color, color, color];
            }

            var mult = (~~(args > 50) + 1) * 0.5;
            var r = (color & 1) * mult * 255;
            var g = (color >> 1 & 1) * mult * 255;
            var b = (color >> 2 & 1) * mult * 255;
            return [r, g, b];
          };

          convert.ansi256.rgb = function (args) {
            // handle greyscale
            if (args >= 232) {
              var c = (args - 232) * 10 + 8;
              return [c, c, c];
            }

            args -= 16;
            var rem;
            var r = Math.floor(args / 36) / 5 * 255;
            var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
            var b = rem % 6 / 5 * 255;
            return [r, g, b];
          };

          convert.rgb.hex = function (args) {
            var integer = ((Math.round(args[0]) & 0xFF) << 16) + ((Math.round(args[1]) & 0xFF) << 8) + (Math.round(args[2]) & 0xFF);
            var string = integer.toString(16).toUpperCase();
            return '000000'.substring(string.length) + string;
          };

          convert.hex.rgb = function (args) {
            var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);

            if (!match) {
              return [0, 0, 0];
            }

            var colorString = match[0];

            if (match[0].length === 3) {
              colorString = colorString.split('').map(function (_char) {
                return _char + _char;
              }).join('');
            }

            var integer = parseInt(colorString, 16);
            var r = integer >> 16 & 0xFF;
            var g = integer >> 8 & 0xFF;
            var b = integer & 0xFF;
            return [r, g, b];
          };

          convert.rgb.hcg = function (rgb) {
            var r = rgb[0] / 255;
            var g = rgb[1] / 255;
            var b = rgb[2] / 255;
            var max = Math.max(Math.max(r, g), b);
            var min = Math.min(Math.min(r, g), b);
            var chroma = max - min;
            var grayscale;
            var hue;

            if (chroma < 1) {
              grayscale = min / (1 - chroma);
            } else {
              grayscale = 0;
            }

            if (chroma <= 0) {
              hue = 0;
            } else if (max === r) {
              hue = (g - b) / chroma % 6;
            } else if (max === g) {
              hue = 2 + (b - r) / chroma;
            } else {
              hue = 4 + (r - g) / chroma + 4;
            }

            hue /= 6;
            hue %= 1;
            return [hue * 360, chroma * 100, grayscale * 100];
          };

          convert.hsl.hcg = function (hsl) {
            var s = hsl[1] / 100;
            var l = hsl[2] / 100;
            var c = 1;
            var f = 0;

            if (l < 0.5) {
              c = 2.0 * s * l;
            } else {
              c = 2.0 * s * (1.0 - l);
            }

            if (c < 1.0) {
              f = (l - 0.5 * c) / (1.0 - c);
            }

            return [hsl[0], c * 100, f * 100];
          };

          convert.hsv.hcg = function (hsv) {
            var s = hsv[1] / 100;
            var v = hsv[2] / 100;
            var c = s * v;
            var f = 0;

            if (c < 1.0) {
              f = (v - c) / (1 - c);
            }

            return [hsv[0], c * 100, f * 100];
          };

          convert.hcg.rgb = function (hcg) {
            var h = hcg[0] / 360;
            var c = hcg[1] / 100;
            var g = hcg[2] / 100;

            if (c === 0.0) {
              return [g * 255, g * 255, g * 255];
            }

            var pure = [0, 0, 0];
            var hi = h % 1 * 6;
            var v = hi % 1;
            var w = 1 - v;
            var mg = 0;

            switch (Math.floor(hi)) {
              case 0:
                pure[0] = 1;
                pure[1] = v;
                pure[2] = 0;
                break;

              case 1:
                pure[0] = w;
                pure[1] = 1;
                pure[2] = 0;
                break;

              case 2:
                pure[0] = 0;
                pure[1] = 1;
                pure[2] = v;
                break;

              case 3:
                pure[0] = 0;
                pure[1] = w;
                pure[2] = 1;
                break;

              case 4:
                pure[0] = v;
                pure[1] = 0;
                pure[2] = 1;
                break;

              default:
                pure[0] = 1;
                pure[1] = 0;
                pure[2] = w;
            }

            mg = (1.0 - c) * g;
            return [(c * pure[0] + mg) * 255, (c * pure[1] + mg) * 255, (c * pure[2] + mg) * 255];
          };

          convert.hcg.hsv = function (hcg) {
            var c = hcg[1] / 100;
            var g = hcg[2] / 100;
            var v = c + g * (1.0 - c);
            var f = 0;

            if (v > 0.0) {
              f = c / v;
            }

            return [hcg[0], f * 100, v * 100];
          };

          convert.hcg.hsl = function (hcg) {
            var c = hcg[1] / 100;
            var g = hcg[2] / 100;
            var l = g * (1.0 - c) + 0.5 * c;
            var s = 0;

            if (l > 0.0 && l < 0.5) {
              s = c / (2 * l);
            } else if (l >= 0.5 && l < 1.0) {
              s = c / (2 * (1 - l));
            }

            return [hcg[0], s * 100, l * 100];
          };

          convert.hcg.hwb = function (hcg) {
            var c = hcg[1] / 100;
            var g = hcg[2] / 100;
            var v = c + g * (1.0 - c);
            return [hcg[0], (v - c) * 100, (1 - v) * 100];
          };

          convert.hwb.hcg = function (hwb) {
            var w = hwb[1] / 100;
            var b = hwb[2] / 100;
            var v = 1 - b;
            var c = v - w;
            var g = 0;

            if (c < 1) {
              g = (v - c) / (1 - c);
            }

            return [hwb[0], c * 100, g * 100];
          };

          convert.apple.rgb = function (apple) {
            return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
          };

          convert.rgb.apple = function (rgb) {
            return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
          };

          convert.gray.rgb = function (args) {
            return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
          };

          convert.gray.hsl = convert.gray.hsv = function (args) {
            return [0, 0, args[0]];
          };

          convert.gray.hwb = function (gray) {
            return [0, 100, gray[0]];
          };

          convert.gray.cmyk = function (gray) {
            return [0, 0, 0, gray[0]];
          };

          convert.gray.lab = function (gray) {
            return [gray[0], 0, 0];
          };

          convert.gray.hex = function (gray) {
            var val = Math.round(gray[0] / 100 * 255) & 0xFF;
            var integer = (val << 16) + (val << 8) + val;
            var string = integer.toString(16).toUpperCase();
            return '000000'.substring(string.length) + string;
          };

          convert.rgb.gray = function (rgb) {
            var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
            return [val / 255 * 100];
          };
        });
        var conversions_1 = conversions.rgb;
        var conversions_2 = conversions.hsl;
        var conversions_3 = conversions.hsv;
        var conversions_4 = conversions.hwb;
        var conversions_5 = conversions.cmyk;
        var conversions_6 = conversions.xyz;
        var conversions_7 = conversions.lab;
        var conversions_8 = conversions.lch;
        var conversions_9 = conversions.hex;
        var conversions_10 = conversions.keyword;
        var conversions_11 = conversions.ansi16;
        var conversions_12 = conversions.ansi256;
        var conversions_13 = conversions.hcg;
        var conversions_14 = conversions.apple;
        var conversions_15 = conversions.gray;
        /*
        	this function routes a model to all other models.
        
        	all functions that are routed have a property `.conversion` attached
        	to the returned synthetic function. This property is an array
        	of strings, each with the steps in between the 'from' and 'to'
        	color models (inclusive).
        
        	conversions that are not possible simply are not included.
        */

        function buildGraph() {
          var graph = {}; // https://jsperf.com/object-keys-vs-for-in-with-closure/3

          var models = Object.keys(conversions);

          for (var len = models.length, i = 0; i < len; i++) {
            graph[models[i]] = {
              // http://jsperf.com/1-vs-infinity
              // micro-opt, but this is simple.
              distance: -1,
              parent: null
            };
          }

          return graph;
        } // https://en.wikipedia.org/wiki/Breadth-first_search


        function deriveBFS(fromModel) {
          var graph = buildGraph();
          var queue = [fromModel]; // unshift -> queue -> pop

          graph[fromModel].distance = 0;

          while (queue.length) {
            var current = queue.pop();
            var adjacents = Object.keys(conversions[current]);

            for (var len = adjacents.length, i = 0; i < len; i++) {
              var adjacent = adjacents[i];
              var node = graph[adjacent];

              if (node.distance === -1) {
                node.distance = graph[current].distance + 1;
                node.parent = current;
                queue.unshift(adjacent);
              }
            }
          }

          return graph;
        }

        function link(from, to) {
          return function (args) {
            return to(from(args));
          };
        }

        function wrapConversion(toModel, graph) {
          var path = [graph[toModel].parent, toModel];
          var fn = conversions[graph[toModel].parent][toModel];
          var cur = graph[toModel].parent;

          while (graph[cur].parent) {
            path.unshift(graph[cur].parent);
            fn = link(conversions[graph[cur].parent][cur], fn);
            cur = graph[cur].parent;
          }

          fn.conversion = path;
          return fn;
        }

        var route = function route(fromModel) {
          var graph = deriveBFS(fromModel);
          var conversion = {};
          var models = Object.keys(graph);

          for (var len = models.length, i = 0; i < len; i++) {
            var toModel = models[i];
            var node = graph[toModel];

            if (node.parent === null) {
              // no possible conversion, or this node is the source model.
              continue;
            }

            conversion[toModel] = wrapConversion(toModel, graph);
          }

          return conversion;
        };

        var convert = {};
        var models = Object.keys(conversions);

        function wrapRaw(fn) {
          var wrappedFn = function wrappedFn(args) {
            if (args === undefined || args === null) {
              return args;
            }

            if (arguments.length > 1) {
              args = Array.prototype.slice.call(arguments);
            }

            return fn(args);
          }; // preserve .conversion property if there is one


          if ('conversion' in fn) {
            wrappedFn.conversion = fn.conversion;
          }

          return wrappedFn;
        }

        function wrapRounded(fn) {
          var wrappedFn = function wrappedFn(args) {
            if (args === undefined || args === null) {
              return args;
            }

            if (arguments.length > 1) {
              args = Array.prototype.slice.call(arguments);
            }

            var result = fn(args); // we're assuming the result is an array here.
            // see notice in conversions.js; don't use box types
            // in conversion functions.

            if (typeof result === 'object') {
              for (var len = result.length, i = 0; i < len; i++) {
                result[i] = Math.round(result[i]);
              }
            }

            return result;
          }; // preserve .conversion property if there is one


          if ('conversion' in fn) {
            wrappedFn.conversion = fn.conversion;
          }

          return wrappedFn;
        }

        models.forEach(function (fromModel) {
          convert[fromModel] = {};
          Object.defineProperty(convert[fromModel], 'channels', {
            value: conversions[fromModel].channels
          });
          Object.defineProperty(convert[fromModel], 'labels', {
            value: conversions[fromModel].labels
          });
          var routes = route(fromModel);
          var routeModels = Object.keys(routes);
          routeModels.forEach(function (toModel) {
            var fn = routes[toModel];
            convert[fromModel][toModel] = wrapRounded(fn);
            convert[fromModel][toModel].raw = wrapRaw(fn);
          });
        });
        var colorConvert = convert;
        var colorName$1 = {
          "aliceblue": [240, 248, 255],
          "antiquewhite": [250, 235, 215],
          "aqua": [0, 255, 255],
          "aquamarine": [127, 255, 212],
          "azure": [240, 255, 255],
          "beige": [245, 245, 220],
          "bisque": [255, 228, 196],
          "black": [0, 0, 0],
          "blanchedalmond": [255, 235, 205],
          "blue": [0, 0, 255],
          "blueviolet": [138, 43, 226],
          "brown": [165, 42, 42],
          "burlywood": [222, 184, 135],
          "cadetblue": [95, 158, 160],
          "chartreuse": [127, 255, 0],
          "chocolate": [210, 105, 30],
          "coral": [255, 127, 80],
          "cornflowerblue": [100, 149, 237],
          "cornsilk": [255, 248, 220],
          "crimson": [220, 20, 60],
          "cyan": [0, 255, 255],
          "darkblue": [0, 0, 139],
          "darkcyan": [0, 139, 139],
          "darkgoldenrod": [184, 134, 11],
          "darkgray": [169, 169, 169],
          "darkgreen": [0, 100, 0],
          "darkgrey": [169, 169, 169],
          "darkkhaki": [189, 183, 107],
          "darkmagenta": [139, 0, 139],
          "darkolivegreen": [85, 107, 47],
          "darkorange": [255, 140, 0],
          "darkorchid": [153, 50, 204],
          "darkred": [139, 0, 0],
          "darksalmon": [233, 150, 122],
          "darkseagreen": [143, 188, 143],
          "darkslateblue": [72, 61, 139],
          "darkslategray": [47, 79, 79],
          "darkslategrey": [47, 79, 79],
          "darkturquoise": [0, 206, 209],
          "darkviolet": [148, 0, 211],
          "deeppink": [255, 20, 147],
          "deepskyblue": [0, 191, 255],
          "dimgray": [105, 105, 105],
          "dimgrey": [105, 105, 105],
          "dodgerblue": [30, 144, 255],
          "firebrick": [178, 34, 34],
          "floralwhite": [255, 250, 240],
          "forestgreen": [34, 139, 34],
          "fuchsia": [255, 0, 255],
          "gainsboro": [220, 220, 220],
          "ghostwhite": [248, 248, 255],
          "gold": [255, 215, 0],
          "goldenrod": [218, 165, 32],
          "gray": [128, 128, 128],
          "green": [0, 128, 0],
          "greenyellow": [173, 255, 47],
          "grey": [128, 128, 128],
          "honeydew": [240, 255, 240],
          "hotpink": [255, 105, 180],
          "indianred": [205, 92, 92],
          "indigo": [75, 0, 130],
          "ivory": [255, 255, 240],
          "khaki": [240, 230, 140],
          "lavender": [230, 230, 250],
          "lavenderblush": [255, 240, 245],
          "lawngreen": [124, 252, 0],
          "lemonchiffon": [255, 250, 205],
          "lightblue": [173, 216, 230],
          "lightcoral": [240, 128, 128],
          "lightcyan": [224, 255, 255],
          "lightgoldenrodyellow": [250, 250, 210],
          "lightgray": [211, 211, 211],
          "lightgreen": [144, 238, 144],
          "lightgrey": [211, 211, 211],
          "lightpink": [255, 182, 193],
          "lightsalmon": [255, 160, 122],
          "lightseagreen": [32, 178, 170],
          "lightskyblue": [135, 206, 250],
          "lightslategray": [119, 136, 153],
          "lightslategrey": [119, 136, 153],
          "lightsteelblue": [176, 196, 222],
          "lightyellow": [255, 255, 224],
          "lime": [0, 255, 0],
          "limegreen": [50, 205, 50],
          "linen": [250, 240, 230],
          "magenta": [255, 0, 255],
          "maroon": [128, 0, 0],
          "mediumaquamarine": [102, 205, 170],
          "mediumblue": [0, 0, 205],
          "mediumorchid": [186, 85, 211],
          "mediumpurple": [147, 112, 219],
          "mediumseagreen": [60, 179, 113],
          "mediumslateblue": [123, 104, 238],
          "mediumspringgreen": [0, 250, 154],
          "mediumturquoise": [72, 209, 204],
          "mediumvioletred": [199, 21, 133],
          "midnightblue": [25, 25, 112],
          "mintcream": [245, 255, 250],
          "mistyrose": [255, 228, 225],
          "moccasin": [255, 228, 181],
          "navajowhite": [255, 222, 173],
          "navy": [0, 0, 128],
          "oldlace": [253, 245, 230],
          "olive": [128, 128, 0],
          "olivedrab": [107, 142, 35],
          "orange": [255, 165, 0],
          "orangered": [255, 69, 0],
          "orchid": [218, 112, 214],
          "palegoldenrod": [238, 232, 170],
          "palegreen": [152, 251, 152],
          "paleturquoise": [175, 238, 238],
          "palevioletred": [219, 112, 147],
          "papayawhip": [255, 239, 213],
          "peachpuff": [255, 218, 185],
          "peru": [205, 133, 63],
          "pink": [255, 192, 203],
          "plum": [221, 160, 221],
          "powderblue": [176, 224, 230],
          "purple": [128, 0, 128],
          "rebeccapurple": [102, 51, 153],
          "red": [255, 0, 0],
          "rosybrown": [188, 143, 143],
          "royalblue": [65, 105, 225],
          "saddlebrown": [139, 69, 19],
          "salmon": [250, 128, 114],
          "sandybrown": [244, 164, 96],
          "seagreen": [46, 139, 87],
          "seashell": [255, 245, 238],
          "sienna": [160, 82, 45],
          "silver": [192, 192, 192],
          "skyblue": [135, 206, 235],
          "slateblue": [106, 90, 205],
          "slategray": [112, 128, 144],
          "slategrey": [112, 128, 144],
          "snow": [255, 250, 250],
          "springgreen": [0, 255, 127],
          "steelblue": [70, 130, 180],
          "tan": [210, 180, 140],
          "teal": [0, 128, 128],
          "thistle": [216, 191, 216],
          "tomato": [255, 99, 71],
          "turquoise": [64, 224, 208],
          "violet": [238, 130, 238],
          "wheat": [245, 222, 179],
          "white": [255, 255, 255],
          "whitesmoke": [245, 245, 245],
          "yellow": [255, 255, 0],
          "yellowgreen": [154, 205, 50]
        };
        /* MIT license */

        var colorString = {
          getRgba: getRgba,
          getHsla: getHsla,
          getRgb: getRgb,
          getHsl: getHsl,
          getHwb: getHwb,
          getAlpha: getAlpha,
          hexString: hexString,
          rgbString: rgbString,
          rgbaString: rgbaString,
          percentString: percentString,
          percentaString: percentaString,
          hslString: hslString,
          hslaString: hslaString,
          hwbString: hwbString,
          keyword: keyword
        };

        function getRgba(string) {
          if (!string) {
            return;
          }

          var abbr = /^#([a-fA-F0-9]{3,4})$/i,
              hex = /^#([a-fA-F0-9]{6}([a-fA-F0-9]{2})?)$/i,
              rgba = /^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i,
              per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i,
              keyword = /(\w+)/;
          var rgb = [0, 0, 0],
              a = 1,
              match = string.match(abbr),
              hexAlpha = "";

          if (match) {
            match = match[1];
            hexAlpha = match[3];

            for (var i = 0; i < rgb.length; i++) {
              rgb[i] = parseInt(match[i] + match[i], 16);
            }

            if (hexAlpha) {
              a = Math.round(parseInt(hexAlpha + hexAlpha, 16) / 255 * 100) / 100;
            }
          } else if (match = string.match(hex)) {
            hexAlpha = match[2];
            match = match[1];

            for (var i = 0; i < rgb.length; i++) {
              rgb[i] = parseInt(match.slice(i * 2, i * 2 + 2), 16);
            }

            if (hexAlpha) {
              a = Math.round(parseInt(hexAlpha, 16) / 255 * 100) / 100;
            }
          } else if (match = string.match(rgba)) {
            for (var i = 0; i < rgb.length; i++) {
              rgb[i] = parseInt(match[i + 1]);
            }

            a = parseFloat(match[4]);
          } else if (match = string.match(per)) {
            for (var i = 0; i < rgb.length; i++) {
              rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);
            }

            a = parseFloat(match[4]);
          } else if (match = string.match(keyword)) {
            if (match[1] == "transparent") {
              return [0, 0, 0, 0];
            }

            rgb = colorName$1[match[1]];

            if (!rgb) {
              return;
            }
          }

          for (var i = 0; i < rgb.length; i++) {
            rgb[i] = scale(rgb[i], 0, 255);
          }

          if (!a && a != 0) {
            a = 1;
          } else {
            a = scale(a, 0, 1);
          }

          rgb[3] = a;
          return rgb;
        }

        function getHsla(string) {
          if (!string) {
            return;
          }

          var hsl = /^hsla?\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/;
          var match = string.match(hsl);

          if (match) {
            var alpha = parseFloat(match[4]);
            var h = scale(parseInt(match[1]), 0, 360),
                s = scale(parseFloat(match[2]), 0, 100),
                l = scale(parseFloat(match[3]), 0, 100),
                a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);
            return [h, s, l, a];
          }
        }

        function getHwb(string) {
          if (!string) {
            return;
          }

          var hwb = /^hwb\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/;
          var match = string.match(hwb);

          if (match) {
            var alpha = parseFloat(match[4]);
            var h = scale(parseInt(match[1]), 0, 360),
                w = scale(parseFloat(match[2]), 0, 100),
                b = scale(parseFloat(match[3]), 0, 100),
                a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);
            return [h, w, b, a];
          }
        }

        function getRgb(string) {
          var rgba = getRgba(string);
          return rgba && rgba.slice(0, 3);
        }

        function getHsl(string) {
          var hsla = getHsla(string);
          return hsla && hsla.slice(0, 3);
        }

        function getAlpha(string) {
          var vals = getRgba(string);

          if (vals) {
            return vals[3];
          } else if (vals = getHsla(string)) {
            return vals[3];
          } else if (vals = getHwb(string)) {
            return vals[3];
          }
        } // generators


        function hexString(rgba, a) {
          var a = a !== undefined && rgba.length === 3 ? a : rgba[3];
          return "#" + hexDouble(rgba[0]) + hexDouble(rgba[1]) + hexDouble(rgba[2]) + (a >= 0 && a < 1 ? hexDouble(Math.round(a * 255)) : "");
        }

        function rgbString(rgba, alpha) {
          if (alpha < 1 || rgba[3] && rgba[3] < 1) {
            return rgbaString(rgba, alpha);
          }

          return "rgb(" + rgba[0] + ", " + rgba[1] + ", " + rgba[2] + ")";
        }

        function rgbaString(rgba, alpha) {
          if (alpha === undefined) {
            alpha = rgba[3] !== undefined ? rgba[3] : 1;
          }

          return "rgba(" + rgba[0] + ", " + rgba[1] + ", " + rgba[2] + ", " + alpha + ")";
        }

        function percentString(rgba, alpha) {
          if (alpha < 1 || rgba[3] && rgba[3] < 1) {
            return percentaString(rgba, alpha);
          }

          var r = Math.round(rgba[0] / 255 * 100),
              g = Math.round(rgba[1] / 255 * 100),
              b = Math.round(rgba[2] / 255 * 100);
          return "rgb(" + r + "%, " + g + "%, " + b + "%)";
        }

        function percentaString(rgba, alpha) {
          var r = Math.round(rgba[0] / 255 * 100),
              g = Math.round(rgba[1] / 255 * 100),
              b = Math.round(rgba[2] / 255 * 100);
          return "rgba(" + r + "%, " + g + "%, " + b + "%, " + (alpha || rgba[3] || 1) + ")";
        }

        function hslString(hsla, alpha) {
          if (alpha < 1 || hsla[3] && hsla[3] < 1) {
            return hslaString(hsla, alpha);
          }

          return "hsl(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%)";
        }

        function hslaString(hsla, alpha) {
          if (alpha === undefined) {
            alpha = hsla[3] !== undefined ? hsla[3] : 1;
          }

          return "hsla(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%, " + alpha + ")";
        } // hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax
        // (hwb have alpha optional & 1 is default value)


        function hwbString(hwb, alpha) {
          if (alpha === undefined) {
            alpha = hwb[3] !== undefined ? hwb[3] : 1;
          }

          return "hwb(" + hwb[0] + ", " + hwb[1] + "%, " + hwb[2] + "%" + (alpha !== undefined && alpha !== 1 ? ", " + alpha : "") + ")";
        }

        function keyword(rgb) {
          return reverseNames[rgb.slice(0, 3)];
        } // helpers


        function scale(num, min, max) {
          return Math.min(Math.max(min, num), max);
        }

        function hexDouble(num) {
          var str = num.toString(16).toUpperCase();
          return str.length < 2 ? "0" + str : str;
        } //create a list of reverse color names


        var reverseNames = {};

        for (var name in colorName$1) {
          reverseNames[colorName$1[name]] = name;
        }
        /* MIT license */


        var Color = function Color(obj) {
          if (obj instanceof Color) {
            return obj;
          }

          if (!(this instanceof Color)) {
            return new Color(obj);
          }

          this.valid = false;
          this.values = {
            rgb: [0, 0, 0],
            hsl: [0, 0, 0],
            hsv: [0, 0, 0],
            hwb: [0, 0, 0],
            cmyk: [0, 0, 0, 0],
            alpha: 1
          }; // parse Color() argument

          var vals;

          if (typeof obj === 'string') {
            vals = colorString.getRgba(obj);

            if (vals) {
              this.setValues('rgb', vals);
            } else if (vals = colorString.getHsla(obj)) {
              this.setValues('hsl', vals);
            } else if (vals = colorString.getHwb(obj)) {
              this.setValues('hwb', vals);
            }
          } else if (typeof obj === 'object') {
            vals = obj;

            if (vals.r !== undefined || vals.red !== undefined) {
              this.setValues('rgb', vals);
            } else if (vals.l !== undefined || vals.lightness !== undefined) {
              this.setValues('hsl', vals);
            } else if (vals.v !== undefined || vals.value !== undefined) {
              this.setValues('hsv', vals);
            } else if (vals.w !== undefined || vals.whiteness !== undefined) {
              this.setValues('hwb', vals);
            } else if (vals.c !== undefined || vals.cyan !== undefined) {
              this.setValues('cmyk', vals);
            }
          }
        };

        Color.prototype = {
          isValid: function isValid() {
            return this.valid;
          },
          rgb: function rgb() {
            return this.setSpace('rgb', arguments);
          },
          hsl: function hsl() {
            return this.setSpace('hsl', arguments);
          },
          hsv: function hsv() {
            return this.setSpace('hsv', arguments);
          },
          hwb: function hwb() {
            return this.setSpace('hwb', arguments);
          },
          cmyk: function cmyk() {
            return this.setSpace('cmyk', arguments);
          },
          rgbArray: function rgbArray() {
            return this.values.rgb;
          },
          hslArray: function hslArray() {
            return this.values.hsl;
          },
          hsvArray: function hsvArray() {
            return this.values.hsv;
          },
          hwbArray: function hwbArray() {
            var values = this.values;

            if (values.alpha !== 1) {
              return values.hwb.concat([values.alpha]);
            }

            return values.hwb;
          },
          cmykArray: function cmykArray() {
            return this.values.cmyk;
          },
          rgbaArray: function rgbaArray() {
            var values = this.values;
            return values.rgb.concat([values.alpha]);
          },
          hslaArray: function hslaArray() {
            var values = this.values;
            return values.hsl.concat([values.alpha]);
          },
          alpha: function alpha(val) {
            if (val === undefined) {
              return this.values.alpha;
            }

            this.setValues('alpha', val);
            return this;
          },
          red: function red(val) {
            return this.setChannel('rgb', 0, val);
          },
          green: function green(val) {
            return this.setChannel('rgb', 1, val);
          },
          blue: function blue(val) {
            return this.setChannel('rgb', 2, val);
          },
          hue: function hue(val) {
            if (val) {
              val %= 360;
              val = val < 0 ? 360 + val : val;
            }

            return this.setChannel('hsl', 0, val);
          },
          saturation: function saturation(val) {
            return this.setChannel('hsl', 1, val);
          },
          lightness: function lightness(val) {
            return this.setChannel('hsl', 2, val);
          },
          saturationv: function saturationv(val) {
            return this.setChannel('hsv', 1, val);
          },
          whiteness: function whiteness(val) {
            return this.setChannel('hwb', 1, val);
          },
          blackness: function blackness(val) {
            return this.setChannel('hwb', 2, val);
          },
          value: function value(val) {
            return this.setChannel('hsv', 2, val);
          },
          cyan: function cyan(val) {
            return this.setChannel('cmyk', 0, val);
          },
          magenta: function magenta(val) {
            return this.setChannel('cmyk', 1, val);
          },
          yellow: function yellow(val) {
            return this.setChannel('cmyk', 2, val);
          },
          black: function black(val) {
            return this.setChannel('cmyk', 3, val);
          },
          hexString: function hexString() {
            return colorString.hexString(this.values.rgb);
          },
          rgbString: function rgbString() {
            return colorString.rgbString(this.values.rgb, this.values.alpha);
          },
          rgbaString: function rgbaString() {
            return colorString.rgbaString(this.values.rgb, this.values.alpha);
          },
          percentString: function percentString() {
            return colorString.percentString(this.values.rgb, this.values.alpha);
          },
          hslString: function hslString() {
            return colorString.hslString(this.values.hsl, this.values.alpha);
          },
          hslaString: function hslaString() {
            return colorString.hslaString(this.values.hsl, this.values.alpha);
          },
          hwbString: function hwbString() {
            return colorString.hwbString(this.values.hwb, this.values.alpha);
          },
          keyword: function keyword() {
            return colorString.keyword(this.values.rgb, this.values.alpha);
          },
          rgbNumber: function rgbNumber() {
            var rgb = this.values.rgb;
            return rgb[0] << 16 | rgb[1] << 8 | rgb[2];
          },
          luminosity: function luminosity() {
            // http://www.w3.org/TR/WCAG20/#relativeluminancedef
            var rgb = this.values.rgb;
            var lum = [];

            for (var i = 0; i < rgb.length; i++) {
              var chan = rgb[i] / 255;
              lum[i] = chan <= 0.03928 ? chan / 12.92 : Math.pow((chan + 0.055) / 1.055, 2.4);
            }

            return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];
          },
          contrast: function contrast(color2) {
            // http://www.w3.org/TR/WCAG20/#contrast-ratiodef
            var lum1 = this.luminosity();
            var lum2 = color2.luminosity();

            if (lum1 > lum2) {
              return (lum1 + 0.05) / (lum2 + 0.05);
            }

            return (lum2 + 0.05) / (lum1 + 0.05);
          },
          level: function level(color2) {
            var contrastRatio = this.contrast(color2);

            if (contrastRatio >= 7.1) {
              return 'AAA';
            }

            return contrastRatio >= 4.5 ? 'AA' : '';
          },
          dark: function dark() {
            // YIQ equation from http://24ways.org/2010/calculating-color-contrast
            var rgb = this.values.rgb;
            var yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;
            return yiq < 128;
          },
          light: function light() {
            return !this.dark();
          },
          negate: function negate() {
            var rgb = [];

            for (var i = 0; i < 3; i++) {
              rgb[i] = 255 - this.values.rgb[i];
            }

            this.setValues('rgb', rgb);
            return this;
          },
          lighten: function lighten(ratio) {
            var hsl = this.values.hsl;
            hsl[2] += hsl[2] * ratio;
            this.setValues('hsl', hsl);
            return this;
          },
          darken: function darken(ratio) {
            var hsl = this.values.hsl;
            hsl[2] -= hsl[2] * ratio;
            this.setValues('hsl', hsl);
            return this;
          },
          saturate: function saturate(ratio) {
            var hsl = this.values.hsl;
            hsl[1] += hsl[1] * ratio;
            this.setValues('hsl', hsl);
            return this;
          },
          desaturate: function desaturate(ratio) {
            var hsl = this.values.hsl;
            hsl[1] -= hsl[1] * ratio;
            this.setValues('hsl', hsl);
            return this;
          },
          whiten: function whiten(ratio) {
            var hwb = this.values.hwb;
            hwb[1] += hwb[1] * ratio;
            this.setValues('hwb', hwb);
            return this;
          },
          blacken: function blacken(ratio) {
            var hwb = this.values.hwb;
            hwb[2] += hwb[2] * ratio;
            this.setValues('hwb', hwb);
            return this;
          },
          greyscale: function greyscale() {
            var rgb = this.values.rgb; // http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale

            var val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;
            this.setValues('rgb', [val, val, val]);
            return this;
          },
          clearer: function clearer(ratio) {
            var alpha = this.values.alpha;
            this.setValues('alpha', alpha - alpha * ratio);
            return this;
          },
          opaquer: function opaquer(ratio) {
            var alpha = this.values.alpha;
            this.setValues('alpha', alpha + alpha * ratio);
            return this;
          },
          rotate: function rotate(degrees) {
            var hsl = this.values.hsl;
            var hue = (hsl[0] + degrees) % 360;
            hsl[0] = hue < 0 ? 360 + hue : hue;
            this.setValues('hsl', hsl);
            return this;
          },

          /**
           * Ported from sass implementation in C
           * https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209
           */
          mix: function mix(mixinColor, weight) {
            var color1 = this;
            var color2 = mixinColor;
            var p = weight === undefined ? 0.5 : weight;
            var w = 2 * p - 1;
            var a = color1.alpha() - color2.alpha();
            var w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;
            var w2 = 1 - w1;
            return this.rgb(w1 * color1.red() + w2 * color2.red(), w1 * color1.green() + w2 * color2.green(), w1 * color1.blue() + w2 * color2.blue()).alpha(color1.alpha() * p + color2.alpha() * (1 - p));
          },
          toJSON: function toJSON() {
            return this.rgb();
          },
          clone: function clone() {
            // NOTE(SB): using node-clone creates a dependency to Buffer when using browserify,
            // making the final build way to big to embed in Chart.js. So let's do it manually,
            // assuming that values to clone are 1 dimension arrays containing only numbers,
            // except 'alpha' which is a number.
            var result = new Color();
            var source = this.values;
            var target = result.values;
            var value, type;

            for (var prop in source) {
              if (source.hasOwnProperty(prop)) {
                value = source[prop];
                type = {}.toString.call(value);

                if (type === '[object Array]') {
                  target[prop] = value.slice(0);
                } else if (type === '[object Number]') {
                  target[prop] = value;
                } else {
                  console.error('unexpected color value:', value);
                }
              }
            }

            return result;
          }
        };
        Color.prototype.spaces = {
          rgb: ['red', 'green', 'blue'],
          hsl: ['hue', 'saturation', 'lightness'],
          hsv: ['hue', 'saturation', 'value'],
          hwb: ['hue', 'whiteness', 'blackness'],
          cmyk: ['cyan', 'magenta', 'yellow', 'black']
        };
        Color.prototype.maxes = {
          rgb: [255, 255, 255],
          hsl: [360, 100, 100],
          hsv: [360, 100, 100],
          hwb: [360, 100, 100],
          cmyk: [100, 100, 100, 100]
        };

        Color.prototype.getValues = function (space) {
          var values = this.values;
          var vals = {};

          for (var i = 0; i < space.length; i++) {
            vals[space.charAt(i)] = values[space][i];
          }

          if (values.alpha !== 1) {
            vals.a = values.alpha;
          } // {r: 255, g: 255, b: 255, a: 0.4}


          return vals;
        };

        Color.prototype.setValues = function (space, vals) {
          var values = this.values;
          var spaces = this.spaces;
          var maxes = this.maxes;
          var alpha = 1;
          var i;
          this.valid = true;

          if (space === 'alpha') {
            alpha = vals;
          } else if (vals.length) {
            // [10, 10, 10]
            values[space] = vals.slice(0, space.length);
            alpha = vals[space.length];
          } else if (vals[space.charAt(0)] !== undefined) {
            // {r: 10, g: 10, b: 10}
            for (i = 0; i < space.length; i++) {
              values[space][i] = vals[space.charAt(i)];
            }

            alpha = vals.a;
          } else if (vals[spaces[space][0]] !== undefined) {
            // {red: 10, green: 10, blue: 10}
            var chans = spaces[space];

            for (i = 0; i < space.length; i++) {
              values[space][i] = vals[chans[i]];
            }

            alpha = vals.alpha;
          }

          values.alpha = Math.max(0, Math.min(1, alpha === undefined ? values.alpha : alpha));

          if (space === 'alpha') {
            return false;
          }

          var capped; // cap values of the space prior converting all values

          for (i = 0; i < space.length; i++) {
            capped = Math.max(0, Math.min(maxes[space][i], values[space][i]));
            values[space][i] = Math.round(capped);
          } // convert to all the other color spaces


          for (var sname in spaces) {
            if (sname !== space) {
              values[sname] = colorConvert[space][sname](values[space]);
            }
          }

          return true;
        };

        Color.prototype.setSpace = function (space, args) {
          var vals = args[0];

          if (vals === undefined) {
            // color.rgb()
            return this.getValues(space);
          } // color.rgb(10, 10, 10)


          if (typeof vals === 'number') {
            vals = Array.prototype.slice.call(args);
          }

          this.setValues(space, vals);
          return this;
        };

        Color.prototype.setChannel = function (space, index, val) {
          var svalues = this.values[space];

          if (val === undefined) {
            // color.red()
            return svalues[index];
          } else if (val === svalues[index]) {
            // color.red(color.red())
            return this;
          } // color.red(100)


          svalues[index] = val;
          this.setValues(space, svalues);
          return this;
        };

        if (typeof window !== 'undefined') {
          window.Color = Color;
        }

        var chartjsColor = Color;
        /**
         * @namespace Chart.helpers
         */

        var helpers = {
          /**
           * An empty function that can be used, for example, for optional callback.
           */
          noop: function noop() {},

          /**
           * Returns a unique id, sequentially generated from a global variable.
           * @returns {number}
           * @function
           */
          uid: function () {
            var id = 0;
            return function () {
              return id++;
            };
          }(),

          /**
           * Returns true if `value` is neither null nor undefined, else returns false.
           * @param {*} value - The value to test.
           * @returns {boolean}
           * @since 2.7.0
           */
          isNullOrUndef: function isNullOrUndef(value) {
            return value === null || typeof value === 'undefined';
          },

          /**
           * Returns true if `value` is an array (including typed arrays), else returns false.
           * @param {*} value - The value to test.
           * @returns {boolean}
           * @function
           */
          isArray: function isArray(value) {
            if (Array.isArray && Array.isArray(value)) {
              return true;
            }

            var type = Object.prototype.toString.call(value);

            if (type.substr(0, 7) === '[object' && type.substr(-6) === 'Array]') {
              return true;
            }

            return false;
          },

          /**
           * Returns true if `value` is an object (excluding null), else returns false.
           * @param {*} value - The value to test.
           * @returns {boolean}
           * @since 2.7.0
           */
          isObject: function isObject(value) {
            return value !== null && Object.prototype.toString.call(value) === '[object Object]';
          },

          /**
           * Returns true if `value` is a finite number, else returns false
           * @param {*} value  - The value to test.
           * @returns {boolean}
           */
          isFinite: function (_isFinite) {
            function isFinite(_x) {
              return _isFinite.apply(this, arguments);
            }

            isFinite.toString = function () {
              return _isFinite.toString();
            };

            return isFinite;
          }(function (value) {
            return (typeof value === 'number' || value instanceof Number) && isFinite(value);
          }),

          /**
           * Returns `value` if defined, else returns `defaultValue`.
           * @param {*} value - The value to return if defined.
           * @param {*} defaultValue - The value to return if `value` is undefined.
           * @returns {*}
           */
          valueOrDefault: function valueOrDefault(value, defaultValue) {
            return typeof value === 'undefined' ? defaultValue : value;
          },

          /**
           * Returns value at the given `index` in array if defined, else returns `defaultValue`.
           * @param {Array} value - The array to lookup for value at `index`.
           * @param {number} index - The index in `value` to lookup for value.
           * @param {*} defaultValue - The value to return if `value[index]` is undefined.
           * @returns {*}
           */
          valueAtIndexOrDefault: function valueAtIndexOrDefault(value, index, defaultValue) {
            return helpers.valueOrDefault(helpers.isArray(value) ? value[index] : value, defaultValue);
          },

          /**
           * Calls `fn` with the given `args` in the scope defined by `thisArg` and returns the
           * value returned by `fn`. If `fn` is not a function, this method returns undefined.
           * @param {function} fn - The function to call.
           * @param {Array|undefined|null} args - The arguments with which `fn` should be called.
           * @param {object} [thisArg] - The value of `this` provided for the call to `fn`.
           * @returns {*}
           */
          callback: function callback(fn, args, thisArg) {
            if (fn && typeof fn.call === 'function') {
              return fn.apply(thisArg, args);
            }
          },

          /**
           * Note(SB) for performance sake, this method should only be used when loopable type
           * is unknown or in none intensive code (not called often and small loopable). Else
           * it's preferable to use a regular for() loop and save extra function calls.
           * @param {object|Array} loopable - The object or array to be iterated.
           * @param {function} fn - The function to call for each item.
           * @param {object} [thisArg] - The value of `this` provided for the call to `fn`.
           * @param {boolean} [reverse] - If true, iterates backward on the loopable.
           */
          each: function each(loopable, fn, thisArg, reverse) {
            var i, len, keys;

            if (helpers.isArray(loopable)) {
              len = loopable.length;

              if (reverse) {
                for (i = len - 1; i >= 0; i--) {
                  fn.call(thisArg, loopable[i], i);
                }
              } else {
                for (i = 0; i < len; i++) {
                  fn.call(thisArg, loopable[i], i);
                }
              }
            } else if (helpers.isObject(loopable)) {
              keys = Object.keys(loopable);
              len = keys.length;

              for (i = 0; i < len; i++) {
                fn.call(thisArg, loopable[keys[i]], keys[i]);
              }
            }
          },

          /**
           * Returns true if the `a0` and `a1` arrays have the same content, else returns false.
           * @see https://stackoverflow.com/a/14853974
           * @param {Array} a0 - The array to compare
           * @param {Array} a1 - The array to compare
           * @returns {boolean}
           */
          arrayEquals: function arrayEquals(a0, a1) {
            var i, ilen, v0, v1;

            if (!a0 || !a1 || a0.length !== a1.length) {
              return false;
            }

            for (i = 0, ilen = a0.length; i < ilen; ++i) {
              v0 = a0[i];
              v1 = a1[i];

              if (v0 instanceof Array && v1 instanceof Array) {
                if (!helpers.arrayEquals(v0, v1)) {
                  return false;
                }
              } else if (v0 !== v1) {
                // NOTE: two different object instances will never be equal: {x:20} != {x:20}
                return false;
              }
            }

            return true;
          },

          /**
           * Returns a deep copy of `source` without keeping references on objects and arrays.
           * @param {*} source - The value to clone.
           * @returns {*}
           */
          clone: function clone(source) {
            if (helpers.isArray(source)) {
              return source.map(helpers.clone);
            }

            if (helpers.isObject(source)) {
              var target = {};
              var keys = Object.keys(source);
              var klen = keys.length;
              var k = 0;

              for (; k < klen; ++k) {
                target[keys[k]] = helpers.clone(source[keys[k]]);
              }

              return target;
            }

            return source;
          },

          /**
           * The default merger when Chart.helpers.merge is called without merger option.
           * Note(SB): also used by mergeConfig and mergeScaleConfig as fallback.
           * @private
           */
          _merger: function _merger(key, target, source, options) {
            var tval = target[key];
            var sval = source[key];

            if (helpers.isObject(tval) && helpers.isObject(sval)) {
              helpers.merge(tval, sval, options);
            } else {
              target[key] = helpers.clone(sval);
            }
          },

          /**
           * Merges source[key] in target[key] only if target[key] is undefined.
           * @private
           */
          _mergerIf: function _mergerIf(key, target, source) {
            var tval = target[key];
            var sval = source[key];

            if (helpers.isObject(tval) && helpers.isObject(sval)) {
              helpers.mergeIf(tval, sval);
            } else if (!target.hasOwnProperty(key)) {
              target[key] = helpers.clone(sval);
            }
          },

          /**
           * Recursively deep copies `source` properties into `target` with the given `options`.
           * IMPORTANT: `target` is not cloned and will be updated with `source` properties.
           * @param {object} target - The target object in which all sources are merged into.
           * @param {object|object[]} source - Object(s) to merge into `target`.
           * @param {object} [options] - Merging options:
           * @param {function} [options.merger] - The merge method (key, target, source, options)
           * @returns {object} The `target` object.
           */
          merge: function merge(target, source, options) {
            var sources = helpers.isArray(source) ? source : [source];
            var ilen = sources.length;
            var merge, i, keys, klen, k;

            if (!helpers.isObject(target)) {
              return target;
            }

            options = options || {};
            merge = options.merger || helpers._merger;

            for (i = 0; i < ilen; ++i) {
              source = sources[i];

              if (!helpers.isObject(source)) {
                continue;
              }

              keys = Object.keys(source);

              for (k = 0, klen = keys.length; k < klen; ++k) {
                merge(keys[k], target, source, options);
              }
            }

            return target;
          },

          /**
           * Recursively deep copies `source` properties into `target` *only* if not defined in target.
           * IMPORTANT: `target` is not cloned and will be updated with `source` properties.
           * @param {object} target - The target object in which all sources are merged into.
           * @param {object|object[]} source - Object(s) to merge into `target`.
           * @returns {object} The `target` object.
           */
          mergeIf: function mergeIf(target, source) {
            return helpers.merge(target, source, {
              merger: helpers._mergerIf
            });
          },

          /**
           * Applies the contents of two or more objects together into the first object.
           * @param {object} target - The target object in which all objects are merged into.
           * @param {object} arg1 - Object containing additional properties to merge in target.
           * @param {object} argN - Additional objects containing properties to merge in target.
           * @returns {object} The `target` object.
           */
          extend: Object.assign || function (target) {
            return helpers.merge(target, [].slice.call(arguments, 1), {
              merger: function merger(key, dst, src) {
                dst[key] = src[key];
              }
            });
          },

          /**
           * Basic javascript inheritance based on the model created in Backbone.js
           */
          inherits: function inherits(extensions) {
            var me = this;
            var ChartElement = extensions && extensions.hasOwnProperty('constructor') ? extensions.constructor : function () {
              return me.apply(this, arguments);
            };

            var Surrogate = function Surrogate() {
              this.constructor = ChartElement;
            };

            Surrogate.prototype = me.prototype;
            ChartElement.prototype = new Surrogate();
            ChartElement.extend = helpers.inherits;

            if (extensions) {
              helpers.extend(ChartElement.prototype, extensions);
            }

            ChartElement.__super__ = me.prototype;
            return ChartElement;
          },
          _deprecated: function _deprecated(scope, value, previous, current) {
            if (value !== undefined) {
              console.warn(scope + ': "' + previous + '" is deprecated. Please use "' + current + '" instead');
            }
          }
        };
        var helpers_core = helpers; // DEPRECATIONS

        /**
         * Provided for backward compatibility, use Chart.helpers.callback instead.
         * @function Chart.helpers.callCallback
         * @deprecated since version 2.6.0
         * @todo remove at version 3
         * @private
         */

        helpers.callCallback = helpers.callback;
        /**
         * Provided for backward compatibility, use Array.prototype.indexOf instead.
         * Array.prototype.indexOf compatibility: Chrome, Opera, Safari, FF1.5+, IE9+
         * @function Chart.helpers.indexOf
         * @deprecated since version 2.7.0
         * @todo remove at version 3
         * @private
         */

        helpers.indexOf = function (array, item, fromIndex) {
          return Array.prototype.indexOf.call(array, item, fromIndex);
        };
        /**
         * Provided for backward compatibility, use Chart.helpers.valueOrDefault instead.
         * @function Chart.helpers.getValueOrDefault
         * @deprecated since version 2.7.0
         * @todo remove at version 3
         * @private
         */


        helpers.getValueOrDefault = helpers.valueOrDefault;
        /**
         * Provided for backward compatibility, use Chart.helpers.valueAtIndexOrDefault instead.
         * @function Chart.helpers.getValueAtIndexOrDefault
         * @deprecated since version 2.7.0
         * @todo remove at version 3
         * @private
         */

        helpers.getValueAtIndexOrDefault = helpers.valueAtIndexOrDefault;
        /**
         * Easing functions adapted from Robert Penner's easing equations.
         * @namespace Chart.helpers.easingEffects
         * @see http://www.robertpenner.com/easing/
         */

        var effects = {
          linear: function linear(t) {
            return t;
          },
          easeInQuad: function easeInQuad(t) {
            return t * t;
          },
          easeOutQuad: function easeOutQuad(t) {
            return -t * (t - 2);
          },
          easeInOutQuad: function easeInOutQuad(t) {
            if ((t /= 0.5) < 1) {
              return 0.5 * t * t;
            }

            return -0.5 * (--t * (t - 2) - 1);
          },
          easeInCubic: function easeInCubic(t) {
            return t * t * t;
          },
          easeOutCubic: function easeOutCubic(t) {
            return (t = t - 1) * t * t + 1;
          },
          easeInOutCubic: function easeInOutCubic(t) {
            if ((t /= 0.5) < 1) {
              return 0.5 * t * t * t;
            }

            return 0.5 * ((t -= 2) * t * t + 2);
          },
          easeInQuart: function easeInQuart(t) {
            return t * t * t * t;
          },
          easeOutQuart: function easeOutQuart(t) {
            return -((t = t - 1) * t * t * t - 1);
          },
          easeInOutQuart: function easeInOutQuart(t) {
            if ((t /= 0.5) < 1) {
              return 0.5 * t * t * t * t;
            }

            return -0.5 * ((t -= 2) * t * t * t - 2);
          },
          easeInQuint: function easeInQuint(t) {
            return t * t * t * t * t;
          },
          easeOutQuint: function easeOutQuint(t) {
            return (t = t - 1) * t * t * t * t + 1;
          },
          easeInOutQuint: function easeInOutQuint(t) {
            if ((t /= 0.5) < 1) {
              return 0.5 * t * t * t * t * t;
            }

            return 0.5 * ((t -= 2) * t * t * t * t + 2);
          },
          easeInSine: function easeInSine(t) {
            return -Math.cos(t * (Math.PI / 2)) + 1;
          },
          easeOutSine: function easeOutSine(t) {
            return Math.sin(t * (Math.PI / 2));
          },
          easeInOutSine: function easeInOutSine(t) {
            return -0.5 * (Math.cos(Math.PI * t) - 1);
          },
          easeInExpo: function easeInExpo(t) {
            return t === 0 ? 0 : Math.pow(2, 10 * (t - 1));
          },
          easeOutExpo: function easeOutExpo(t) {
            return t === 1 ? 1 : -Math.pow(2, -10 * t) + 1;
          },
          easeInOutExpo: function easeInOutExpo(t) {
            if (t === 0) {
              return 0;
            }

            if (t === 1) {
              return 1;
            }

            if ((t /= 0.5) < 1) {
              return 0.5 * Math.pow(2, 10 * (t - 1));
            }

            return 0.5 * (-Math.pow(2, -10 * --t) + 2);
          },
          easeInCirc: function easeInCirc(t) {
            if (t >= 1) {
              return t;
            }

            return -(Math.sqrt(1 - t * t) - 1);
          },
          easeOutCirc: function easeOutCirc(t) {
            return Math.sqrt(1 - (t = t - 1) * t);
          },
          easeInOutCirc: function easeInOutCirc(t) {
            if ((t /= 0.5) < 1) {
              return -0.5 * (Math.sqrt(1 - t * t) - 1);
            }

            return 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1);
          },
          easeInElastic: function easeInElastic(t) {
            var s = 1.70158;
            var p = 0;
            var a = 1;

            if (t === 0) {
              return 0;
            }

            if (t === 1) {
              return 1;
            }

            if (!p) {
              p = 0.3;
            }

            if (a < 1) {
              a = 1;
              s = p / 4;
            } else {
              s = p / (2 * Math.PI) * Math.asin(1 / a);
            }

            return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p));
          },
          easeOutElastic: function easeOutElastic(t) {
            var s = 1.70158;
            var p = 0;
            var a = 1;

            if (t === 0) {
              return 0;
            }

            if (t === 1) {
              return 1;
            }

            if (!p) {
              p = 0.3;
            }

            if (a < 1) {
              a = 1;
              s = p / 4;
            } else {
              s = p / (2 * Math.PI) * Math.asin(1 / a);
            }

            return a * Math.pow(2, -10 * t) * Math.sin((t - s) * (2 * Math.PI) / p) + 1;
          },
          easeInOutElastic: function easeInOutElastic(t) {
            var s = 1.70158;
            var p = 0;
            var a = 1;

            if (t === 0) {
              return 0;
            }

            if ((t /= 0.5) === 2) {
              return 1;
            }

            if (!p) {
              p = 0.45;
            }

            if (a < 1) {
              a = 1;
              s = p / 4;
            } else {
              s = p / (2 * Math.PI) * Math.asin(1 / a);
            }

            if (t < 1) {
              return -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p));
            }

            return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p) * 0.5 + 1;
          },
          easeInBack: function easeInBack(t) {
            var s = 1.70158;
            return t * t * ((s + 1) * t - s);
          },
          easeOutBack: function easeOutBack(t) {
            var s = 1.70158;
            return (t = t - 1) * t * ((s + 1) * t + s) + 1;
          },
          easeInOutBack: function easeInOutBack(t) {
            var s = 1.70158;

            if ((t /= 0.5) < 1) {
              return 0.5 * (t * t * (((s *= 1.525) + 1) * t - s));
            }

            return 0.5 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2);
          },
          easeInBounce: function easeInBounce(t) {
            return 1 - effects.easeOutBounce(1 - t);
          },
          easeOutBounce: function easeOutBounce(t) {
            if (t < 1 / 2.75) {
              return 7.5625 * t * t;
            }

            if (t < 2 / 2.75) {
              return 7.5625 * (t -= 1.5 / 2.75) * t + 0.75;
            }

            if (t < 2.5 / 2.75) {
              return 7.5625 * (t -= 2.25 / 2.75) * t + 0.9375;
            }

            return 7.5625 * (t -= 2.625 / 2.75) * t + 0.984375;
          },
          easeInOutBounce: function easeInOutBounce(t) {
            if (t < 0.5) {
              return effects.easeInBounce(t * 2) * 0.5;
            }

            return effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5;
          }
        };
        var helpers_easing = {
          effects: effects
        }; // DEPRECATIONS

        /**
         * Provided for backward compatibility, use Chart.helpers.easing.effects instead.
         * @function Chart.helpers.easingEffects
         * @deprecated since version 2.7.0
         * @todo remove at version 3
         * @private
         */

        helpers_core.easingEffects = effects;
        var PI = Math.PI;
        var RAD_PER_DEG = PI / 180;
        var DOUBLE_PI = PI * 2;
        var HALF_PI = PI / 2;
        var QUARTER_PI = PI / 4;
        var TWO_THIRDS_PI = PI * 2 / 3;
        /**
         * @namespace Chart.helpers.canvas
         */

        var exports$1 = {
          /**
           * Clears the entire canvas associated to the given `chart`.
           * @param {Chart} chart - The chart for which to clear the canvas.
           */
          clear: function clear(chart) {
            chart.ctx.clearRect(0, 0, chart.width, chart.height);
          },

          /**
           * Creates a "path" for a rectangle with rounded corners at position (x, y) with a
           * given size (width, height) and the same `radius` for all corners.
           * @param {CanvasRenderingContext2D} ctx - The canvas 2D Context.
           * @param {number} x - The x axis of the coordinate for the rectangle starting point.
           * @param {number} y - The y axis of the coordinate for the rectangle starting point.
           * @param {number} width - The rectangle's width.
           * @param {number} height - The rectangle's height.
           * @param {number} radius - The rounded amount (in pixels) for the four corners.
           * @todo handle `radius` as top-left, top-right, bottom-right, bottom-left array/object?
           */
          roundedRect: function roundedRect(ctx, x, y, width, height, radius) {
            if (radius) {
              var r = Math.min(radius, height / 2, width / 2);
              var left = x + r;
              var top = y + r;
              var right = x + width - r;
              var bottom = y + height - r;
              ctx.moveTo(x, top);

              if (left < right && top < bottom) {
                ctx.arc(left, top, r, -PI, -HALF_PI);
                ctx.arc(right, top, r, -HALF_PI, 0);
                ctx.arc(right, bottom, r, 0, HALF_PI);
                ctx.arc(left, bottom, r, HALF_PI, PI);
              } else if (left < right) {
                ctx.moveTo(left, y);
                ctx.arc(right, top, r, -HALF_PI, HALF_PI);
                ctx.arc(left, top, r, HALF_PI, PI + HALF_PI);
              } else if (top < bottom) {
                ctx.arc(left, top, r, -PI, 0);
                ctx.arc(left, bottom, r, 0, PI);
              } else {
                ctx.arc(left, top, r, -PI, PI);
              }

              ctx.closePath();
              ctx.moveTo(x, y);
            } else {
              ctx.rect(x, y, width, height);
            }
          },
          drawPoint: function drawPoint(ctx, style, radius, x, y, rotation) {
            var type, xOffset, yOffset, size, cornerRadius;
            var rad = (rotation || 0) * RAD_PER_DEG;

            if (style && typeof style === 'object') {
              type = style.toString();

              if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {
                ctx.save();
                ctx.translate(x, y);
                ctx.rotate(rad);
                ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);
                ctx.restore();
                return;
              }
            }

            if (isNaN(radius) || radius <= 0) {
              return;
            }

            ctx.beginPath();

            switch (style) {
              // Default includes circle
              default:
                ctx.arc(x, y, radius, 0, DOUBLE_PI);
                ctx.closePath();
                break;

              case 'triangle':
                ctx.moveTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
                rad += TWO_THIRDS_PI;
                ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
                rad += TWO_THIRDS_PI;
                ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
                ctx.closePath();
                break;

              case 'rectRounded':
                // NOTE: the rounded rect implementation changed to use `arc` instead of
                // `quadraticCurveTo` since it generates better results when rect is
                // almost a circle. 0.516 (instead of 0.5) produces results with visually
                // closer proportion to the previous impl and it is inscribed in the
                // circle with `radius`. For more details, see the following PRs:
                // https://github.com/chartjs/Chart.js/issues/5597
                // https://github.com/chartjs/Chart.js/issues/5858
                cornerRadius = radius * 0.516;
                size = radius - cornerRadius;
                xOffset = Math.cos(rad + QUARTER_PI) * size;
                yOffset = Math.sin(rad + QUARTER_PI) * size;
                ctx.arc(x - xOffset, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);
                ctx.arc(x + yOffset, y - xOffset, cornerRadius, rad - HALF_PI, rad);
                ctx.arc(x + xOffset, y + yOffset, cornerRadius, rad, rad + HALF_PI);
                ctx.arc(x - yOffset, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);
                ctx.closePath();
                break;

              case 'rect':
                if (!rotation) {
                  size = Math.SQRT1_2 * radius;
                  ctx.rect(x - size, y - size, 2 * size, 2 * size);
                  break;
                }

                rad += QUARTER_PI;

              /* falls through */

              case 'rectRot':
                xOffset = Math.cos(rad) * radius;
                yOffset = Math.sin(rad) * radius;
                ctx.moveTo(x - xOffset, y - yOffset);
                ctx.lineTo(x + yOffset, y - xOffset);
                ctx.lineTo(x + xOffset, y + yOffset);
                ctx.lineTo(x - yOffset, y + xOffset);
                ctx.closePath();
                break;

              case 'crossRot':
                rad += QUARTER_PI;

              /* falls through */

              case 'cross':
                xOffset = Math.cos(rad) * radius;
                yOffset = Math.sin(rad) * radius;
                ctx.moveTo(x - xOffset, y - yOffset);
                ctx.lineTo(x + xOffset, y + yOffset);
                ctx.moveTo(x + yOffset, y - xOffset);
                ctx.lineTo(x - yOffset, y + xOffset);
                break;

              case 'star':
                xOffset = Math.cos(rad) * radius;
                yOffset = Math.sin(rad) * radius;
                ctx.moveTo(x - xOffset, y - yOffset);
                ctx.lineTo(x + xOffset, y + yOffset);
                ctx.moveTo(x + yOffset, y - xOffset);
                ctx.lineTo(x - yOffset, y + xOffset);
                rad += QUARTER_PI;
                xOffset = Math.cos(rad) * radius;
                yOffset = Math.sin(rad) * radius;
                ctx.moveTo(x - xOffset, y - yOffset);
                ctx.lineTo(x + xOffset, y + yOffset);
                ctx.moveTo(x + yOffset, y - xOffset);
                ctx.lineTo(x - yOffset, y + xOffset);
                break;

              case 'line':
                xOffset = Math.cos(rad) * radius;
                yOffset = Math.sin(rad) * radius;
                ctx.moveTo(x - xOffset, y - yOffset);
                ctx.lineTo(x + xOffset, y + yOffset);
                break;

              case 'dash':
                ctx.moveTo(x, y);
                ctx.lineTo(x + Math.cos(rad) * radius, y + Math.sin(rad) * radius);
                break;
            }

            ctx.fill();
            ctx.stroke();
          },

          /**
           * Returns true if the point is inside the rectangle
           * @param {object} point - The point to test
           * @param {object} area - The rectangle
           * @returns {boolean}
           * @private
           */
          _isPointInArea: function _isPointInArea(point, area) {
            var epsilon = 1e-6; // 1e-6 is margin in pixels for accumulated error.

            return point.x > area.left - epsilon && point.x < area.right + epsilon && point.y > area.top - epsilon && point.y < area.bottom + epsilon;
          },
          clipArea: function clipArea(ctx, area) {
            ctx.save();
            ctx.beginPath();
            ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);
            ctx.clip();
          },
          unclipArea: function unclipArea(ctx) {
            ctx.restore();
          },
          lineTo: function lineTo(ctx, previous, target, flip) {
            var stepped = target.steppedLine;

            if (stepped) {
              if (stepped === 'middle') {
                var midpoint = (previous.x + target.x) / 2.0;
                ctx.lineTo(midpoint, flip ? target.y : previous.y);
                ctx.lineTo(midpoint, flip ? previous.y : target.y);
              } else if (stepped === 'after' && !flip || stepped !== 'after' && flip) {
                ctx.lineTo(previous.x, target.y);
              } else {
                ctx.lineTo(target.x, previous.y);
              }

              ctx.lineTo(target.x, target.y);
              return;
            }

            if (!target.tension) {
              ctx.lineTo(target.x, target.y);
              return;
            }

            ctx.bezierCurveTo(flip ? previous.controlPointPreviousX : previous.controlPointNextX, flip ? previous.controlPointPreviousY : previous.controlPointNextY, flip ? target.controlPointNextX : target.controlPointPreviousX, flip ? target.controlPointNextY : target.controlPointPreviousY, target.x, target.y);
          }
        };
        var helpers_canvas = exports$1; // DEPRECATIONS

        /**
         * Provided for backward compatibility, use Chart.helpers.canvas.clear instead.
         * @namespace Chart.helpers.clear
         * @deprecated since version 2.7.0
         * @todo remove at version 3
         * @private
         */

        helpers_core.clear = exports$1.clear;
        /**
         * Provided for backward compatibility, use Chart.helpers.canvas.roundedRect instead.
         * @namespace Chart.helpers.drawRoundedRectangle
         * @deprecated since version 2.7.0
         * @todo remove at version 3
         * @private
         */

        helpers_core.drawRoundedRectangle = function (ctx) {
          ctx.beginPath();
          exports$1.roundedRect.apply(exports$1, arguments);
        };

        var defaults = {
          /**
           * @private
           */
          _set: function _set(scope, values) {
            return helpers_core.merge(this[scope] || (this[scope] = {}), values);
          }
        }; // TODO(v3): remove 'global' from namespace.  all default are global and
        // there's inconsistency around which options are under 'global'

        defaults._set('global', {
          defaultColor: 'rgba(0,0,0,0.1)',
          defaultFontColor: '#666',
          defaultFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
          defaultFontSize: 12,
          defaultFontStyle: 'normal',
          defaultLineHeight: 1.2,
          showLines: true
        });

        var core_defaults = defaults;
        var valueOrDefault = helpers_core.valueOrDefault;
        /**
         * Converts the given font object into a CSS font string.
         * @param {object} font - A font object.
         * @return {string} The CSS font string. See https://developer.mozilla.org/en-US/docs/Web/CSS/font
         * @private
         */

        function toFontString(font) {
          if (!font || helpers_core.isNullOrUndef(font.size) || helpers_core.isNullOrUndef(font.family)) {
            return null;
          }

          return (font.style ? font.style + ' ' : '') + (font.weight ? font.weight + ' ' : '') + font.size + 'px ' + font.family;
        }
        /**
         * @alias Chart.helpers.options
         * @namespace
         */


        var helpers_options = {
          /**
           * Converts the given line height `value` in pixels for a specific font `size`.
           * @param {number|string} value - The lineHeight to parse (eg. 1.6, '14px', '75%', '1.6em').
           * @param {number} size - The font size (in pixels) used to resolve relative `value`.
           * @returns {number} The effective line height in pixels (size * 1.2 if value is invalid).
           * @see https://developer.mozilla.org/en-US/docs/Web/CSS/line-height
           * @since 2.7.0
           */
          toLineHeight: function toLineHeight(value, size) {
            var matches = ('' + value).match(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/);

            if (!matches || matches[1] === 'normal') {
              return size * 1.2;
            }

            value = +matches[2];

            switch (matches[3]) {
              case 'px':
                return value;

              case '%':
                value /= 100;
                break;
            }

            return size * value;
          },

          /**
           * Converts the given value into a padding object with pre-computed width/height.
           * @param {number|object} value - If a number, set the value to all TRBL component,
           *  else, if and object, use defined properties and sets undefined ones to 0.
           * @returns {object} The padding values (top, right, bottom, left, width, height)
           * @since 2.7.0
           */
          toPadding: function toPadding(value) {
            var t, r, b, l;

            if (helpers_core.isObject(value)) {
              t = +value.top || 0;
              r = +value.right || 0;
              b = +value.bottom || 0;
              l = +value.left || 0;
            } else {
              t = r = b = l = +value || 0;
            }

            return {
              top: t,
              right: r,
              bottom: b,
              left: l,
              height: t + b,
              width: l + r
            };
          },

          /**
           * Parses font options and returns the font object.
           * @param {object} options - A object that contains font options to be parsed.
           * @return {object} The font object.
           * @todo Support font.* options and renamed to toFont().
           * @private
           */
          _parseFont: function _parseFont(options) {
            var globalDefaults = core_defaults.global;
            var size = valueOrDefault(options.fontSize, globalDefaults.defaultFontSize);
            var font = {
              family: valueOrDefault(options.fontFamily, globalDefaults.defaultFontFamily),
              lineHeight: helpers_core.options.toLineHeight(valueOrDefault(options.lineHeight, globalDefaults.defaultLineHeight), size),
              size: size,
              style: valueOrDefault(options.fontStyle, globalDefaults.defaultFontStyle),
              weight: null,
              string: ''
            };
            font.string = toFontString(font);
            return font;
          },

          /**
           * Evaluates the given `inputs` sequentially and returns the first defined value.
           * @param {Array} inputs - An array of values, falling back to the last value.
           * @param {object} [context] - If defined and the current value is a function, the value
           * is called with `context` as first argument and the result becomes the new input.
           * @param {number} [index] - If defined and the current value is an array, the value
           * at `index` become the new input.
           * @param {object} [info] - object to return information about resolution in
           * @param {boolean} [info.cacheable] - Will be set to `false` if option is not cacheable.
           * @since 2.7.0
           */
          resolve: function resolve(inputs, context, index, info) {
            var cacheable = true;
            var i, ilen, value;

            for (i = 0, ilen = inputs.length; i < ilen; ++i) {
              value = inputs[i];

              if (value === undefined) {
                continue;
              }

              if (context !== undefined && typeof value === 'function') {
                value = value(context);
                cacheable = false;
              }

              if (index !== undefined && helpers_core.isArray(value)) {
                value = value[index];
                cacheable = false;
              }

              if (value !== undefined) {
                if (info && !cacheable) {
                  info.cacheable = false;
                }

                return value;
              }
            }
          }
        };
        /**
         * @alias Chart.helpers.math
         * @namespace
         */

        var exports$2 = {
          /**
           * Returns an array of factors sorted from 1 to sqrt(value)
           * @private
           */
          _factorize: function _factorize(value) {
            var result = [];
            var sqrt = Math.sqrt(value);
            var i;

            for (i = 1; i < sqrt; i++) {
              if (value % i === 0) {
                result.push(i);
                result.push(value / i);
              }
            }

            if (sqrt === (sqrt | 0)) {
              // if value is a square number
              result.push(sqrt);
            }

            result.sort(function (a, b) {
              return a - b;
            }).pop();
            return result;
          },
          log10: Math.log10 || function (x) {
            var exponent = Math.log(x) * Math.LOG10E; // Math.LOG10E = 1 / Math.LN10.
            // Check for whole powers of 10,
            // which due to floating point rounding error should be corrected.

            var powerOf10 = Math.round(exponent);
            var isPowerOf10 = x === Math.pow(10, powerOf10);
            return isPowerOf10 ? powerOf10 : exponent;
          }
        };
        var helpers_math = exports$2; // DEPRECATIONS

        /**
         * Provided for backward compatibility, use Chart.helpers.math.log10 instead.
         * @namespace Chart.helpers.log10
         * @deprecated since version 2.9.0
         * @todo remove at version 3
         * @private
         */

        helpers_core.log10 = exports$2.log10;

        var getRtlAdapter = function getRtlAdapter(rectX, width) {
          return {
            x: function x(_x2) {
              return rectX + rectX + width - _x2;
            },
            setWidth: function setWidth(w) {
              width = w;
            },
            textAlign: function textAlign(align) {
              if (align === 'center') {
                return align;
              }

              return align === 'right' ? 'left' : 'right';
            },
            xPlus: function xPlus(x, value) {
              return x - value;
            },
            leftForLtr: function leftForLtr(x, itemWidth) {
              return x - itemWidth;
            }
          };
        };

        var getLtrAdapter = function getLtrAdapter() {
          return {
            x: function x(_x3) {
              return _x3;
            },
            setWidth: function setWidth(w) {// eslint-disable-line no-unused-vars
            },
            textAlign: function textAlign(align) {
              return align;
            },
            xPlus: function xPlus(x, value) {
              return x + value;
            },
            leftForLtr: function leftForLtr(x, _itemWidth) {
              // eslint-disable-line no-unused-vars
              return x;
            }
          };
        };

        var getAdapter = function getAdapter(rtl, rectX, width) {
          return rtl ? getRtlAdapter(rectX, width) : getLtrAdapter();
        };

        var overrideTextDirection = function overrideTextDirection(ctx, direction) {
          var style, original;

          if (direction === 'ltr' || direction === 'rtl') {
            style = ctx.canvas.style;
            original = [style.getPropertyValue('direction'), style.getPropertyPriority('direction')];
            style.setProperty('direction', direction, 'important');
            ctx.prevTextDirection = original;
          }
        };

        var restoreTextDirection = function restoreTextDirection(ctx) {
          var original = ctx.prevTextDirection;

          if (original !== undefined) {
            delete ctx.prevTextDirection;
            ctx.canvas.style.setProperty('direction', original[0], original[1]);
          }
        };

        var helpers_rtl = {
          getRtlAdapter: getAdapter,
          overrideTextDirection: overrideTextDirection,
          restoreTextDirection: restoreTextDirection
        };
        var helpers$1 = helpers_core;
        var easing = helpers_easing;
        var canvas = helpers_canvas;
        var options = helpers_options;
        var math = helpers_math;
        var rtl = helpers_rtl;
        helpers$1.easing = easing;
        helpers$1.canvas = canvas;
        helpers$1.options = options;
        helpers$1.math = math;
        helpers$1.rtl = rtl;

        function interpolate(start, view, model, ease) {
          var keys = Object.keys(model);
          var i, ilen, key, actual, origin, target, type, c0, c1;

          for (i = 0, ilen = keys.length; i < ilen; ++i) {
            key = keys[i];
            target = model[key]; // if a value is added to the model after pivot() has been called, the view
            // doesn't contain it, so let's initialize the view to the target value.

            if (!view.hasOwnProperty(key)) {
              view[key] = target;
            }

            actual = view[key];

            if (actual === target || key[0] === '_') {
              continue;
            }

            if (!start.hasOwnProperty(key)) {
              start[key] = actual;
            }

            origin = start[key];
            type = typeof target;

            if (type === typeof origin) {
              if (type === 'string') {
                c0 = chartjsColor(origin);

                if (c0.valid) {
                  c1 = chartjsColor(target);

                  if (c1.valid) {
                    view[key] = c1.mix(c0, ease).rgbString();
                    continue;
                  }
                }
              } else if (helpers$1.isFinite(origin) && helpers$1.isFinite(target)) {
                view[key] = origin + (target - origin) * ease;
                continue;
              }
            }

            view[key] = target;
          }
        }

        var Element = function Element(configuration) {
          helpers$1.extend(this, configuration);
          this.initialize.apply(this, arguments);
        };

        helpers$1.extend(Element.prototype, {
          _type: undefined,
          initialize: function initialize() {
            this.hidden = false;
          },
          pivot: function pivot() {
            var me = this;

            if (!me._view) {
              me._view = helpers$1.extend({}, me._model);
            }

            me._start = {};
            return me;
          },
          transition: function transition(ease) {
            var me = this;
            var model = me._model;
            var start = me._start;
            var view = me._view; // No animation -> No Transition

            if (!model || ease === 1) {
              me._view = helpers$1.extend({}, model);
              me._start = null;
              return me;
            }

            if (!view) {
              view = me._view = {};
            }

            if (!start) {
              start = me._start = {};
            }

            interpolate(start, view, model, ease);
            return me;
          },
          tooltipPosition: function tooltipPosition() {
            return {
              x: this._model.x,
              y: this._model.y
            };
          },
          hasValue: function hasValue() {
            return helpers$1.isNumber(this._model.x) && helpers$1.isNumber(this._model.y);
          }
        });
        Element.extend = helpers$1.inherits;
        var core_element = Element;
        var exports$3 = core_element.extend({
          chart: null,
          // the animation associated chart instance
          currentStep: 0,
          // the current animation step
          numSteps: 60,
          // default number of steps
          easing: '',
          // the easing to use for this animation
          render: null,
          // render function used by the animation service
          onAnimationProgress: null,
          // user specified callback to fire on each step of the animation
          onAnimationComplete: null // user specified callback to fire when the animation finishes

        });
        var core_animation = exports$3; // DEPRECATIONS

        /**
         * Provided for backward compatibility, use Chart.Animation instead
         * @prop Chart.Animation#animationObject
         * @deprecated since version 2.6.0
         * @todo remove at version 3
         */

        Object.defineProperty(exports$3.prototype, 'animationObject', {
          get: function get() {
            return this;
          }
        });
        /**
         * Provided for backward compatibility, use Chart.Animation#chart instead
         * @prop Chart.Animation#chartInstance
         * @deprecated since version 2.6.0
         * @todo remove at version 3
         */

        Object.defineProperty(exports$3.prototype, 'chartInstance', {
          get: function get() {
            return this.chart;
          },
          set: function set(value) {
            this.chart = value;
          }
        });

        core_defaults._set('global', {
          animation: {
            duration: 1000,
            easing: 'easeOutQuart',
            onProgress: helpers$1.noop,
            onComplete: helpers$1.noop
          }
        });

        var core_animations = {
          animations: [],
          request: null,

          /**
           * @param {Chart} chart - The chart to animate.
           * @param {Chart.Animation} animation - The animation that we will animate.
           * @param {number} duration - The animation duration in ms.
           * @param {boolean} lazy - if true, the chart is not marked as animating to enable more responsive interactions
           */
          addAnimation: function addAnimation(chart, animation, duration, lazy) {
            var animations = this.animations;
            var i, ilen;
            animation.chart = chart;
            animation.startTime = Date.now();
            animation.duration = duration;

            if (!lazy) {
              chart.animating = true;
            }

            for (i = 0, ilen = animations.length; i < ilen; ++i) {
              if (animations[i].chart === chart) {
                animations[i] = animation;
                return;
              }
            }

            animations.push(animation); // If there are no animations queued, manually kickstart a digest, for lack of a better word

            if (animations.length === 1) {
              this.requestAnimationFrame();
            }
          },
          cancelAnimation: function cancelAnimation(chart) {
            var index = helpers$1.findIndex(this.animations, function (animation) {
              return animation.chart === chart;
            });

            if (index !== -1) {
              this.animations.splice(index, 1);
              chart.animating = false;
            }
          },
          requestAnimationFrame: function requestAnimationFrame() {
            var me = this;

            if (me.request === null) {
              // Skip animation frame requests until the active one is executed.
              // This can happen when processing mouse events, e.g. 'mousemove'
              // and 'mouseout' events will trigger multiple renders.
              me.request = helpers$1.requestAnimFrame.call(window, function () {
                me.request = null;
                me.startDigest();
              });
            }
          },

          /**
           * @private
           */
          startDigest: function startDigest() {
            var me = this;
            me.advance(); // Do we have more stuff to animate?

            if (me.animations.length > 0) {
              me.requestAnimationFrame();
            }
          },

          /**
           * @private
           */
          advance: function advance() {
            var animations = this.animations;
            var animation, chart, numSteps, nextStep;
            var i = 0; // 1 animation per chart, so we are looping charts here

            while (i < animations.length) {
              animation = animations[i];
              chart = animation.chart;
              numSteps = animation.numSteps; // Make sure that currentStep starts at 1
              // https://github.com/chartjs/Chart.js/issues/6104

              nextStep = Math.floor((Date.now() - animation.startTime) / animation.duration * numSteps) + 1;
              animation.currentStep = Math.min(nextStep, numSteps);
              helpers$1.callback(animation.render, [chart, animation], chart);
              helpers$1.callback(animation.onAnimationProgress, [animation], chart);

              if (animation.currentStep >= numSteps) {
                helpers$1.callback(animation.onAnimationComplete, [animation], chart);
                chart.animating = false;
                animations.splice(i, 1);
              } else {
                ++i;
              }
            }
          }
        };
        var resolve = helpers$1.options.resolve;
        var arrayEvents = ['push', 'pop', 'shift', 'splice', 'unshift'];
        /**
         * Hooks the array methods that add or remove values ('push', pop', 'shift', 'splice',
         * 'unshift') and notify the listener AFTER the array has been altered. Listeners are
         * called on the 'onData*' callbacks (e.g. onDataPush, etc.) with same arguments.
         */

        function listenArrayEvents(array, listener) {
          if (array._chartjs) {
            array._chartjs.listeners.push(listener);

            return;
          }

          Object.defineProperty(array, '_chartjs', {
            configurable: true,
            enumerable: false,
            value: {
              listeners: [listener]
            }
          });
          arrayEvents.forEach(function (key) {
            var method = 'onData' + key.charAt(0).toUpperCase() + key.slice(1);
            var base = array[key];
            Object.defineProperty(array, key, {
              configurable: true,
              enumerable: false,
              value: function value() {
                var args = Array.prototype.slice.call(arguments);
                var res = base.apply(this, args);
                helpers$1.each(array._chartjs.listeners, function (object) {
                  if (typeof object[method] === 'function') {
                    object[method].apply(object, args);
                  }
                });
                return res;
              }
            });
          });
        }
        /**
         * Removes the given array event listener and cleanup extra attached properties (such as
         * the _chartjs stub and overridden methods) if array doesn't have any more listeners.
         */


        function unlistenArrayEvents(array, listener) {
          var stub = array._chartjs;

          if (!stub) {
            return;
          }

          var listeners = stub.listeners;
          var index = listeners.indexOf(listener);

          if (index !== -1) {
            listeners.splice(index, 1);
          }

          if (listeners.length > 0) {
            return;
          }

          arrayEvents.forEach(function (key) {
            delete array[key];
          });
          delete array._chartjs;
        } // Base class for all dataset controllers (line, bar, etc)


        var DatasetController = function DatasetController(chart, datasetIndex) {
          this.initialize(chart, datasetIndex);
        };

        helpers$1.extend(DatasetController.prototype, {
          /**
           * Element type used to generate a meta dataset (e.g. Chart.element.Line).
           * @type {Chart.core.element}
           */
          datasetElementType: null,

          /**
           * Element type used to generate a meta data (e.g. Chart.element.Point).
           * @type {Chart.core.element}
           */
          dataElementType: null,

          /**
           * Dataset element option keys to be resolved in _resolveDatasetElementOptions.
           * A derived controller may override this to resolve controller-specific options.
           * The keys defined here are for backward compatibility for legend styles.
           * @private
           */
          _datasetElementOptions: ['backgroundColor', 'borderCapStyle', 'borderColor', 'borderDash', 'borderDashOffset', 'borderJoinStyle', 'borderWidth'],

          /**
           * Data element option keys to be resolved in _resolveDataElementOptions.
           * A derived controller may override this to resolve controller-specific options.
           * The keys defined here are for backward compatibility for legend styles.
           * @private
           */
          _dataElementOptions: ['backgroundColor', 'borderColor', 'borderWidth', 'pointStyle'],
          initialize: function initialize(chart, datasetIndex) {
            var me = this;
            me.chart = chart;
            me.index = datasetIndex;
            me.linkScales();
            me.addElements();
            me._type = me.getMeta().type;
          },
          updateIndex: function updateIndex(datasetIndex) {
            this.index = datasetIndex;
          },
          linkScales: function linkScales() {
            var me = this;
            var meta = me.getMeta();
            var chart = me.chart;
            var scales = chart.scales;
            var dataset = me.getDataset();
            var scalesOpts = chart.options.scales;

            if (meta.xAxisID === null || !(meta.xAxisID in scales) || dataset.xAxisID) {
              meta.xAxisID = dataset.xAxisID || scalesOpts.xAxes[0].id;
            }

            if (meta.yAxisID === null || !(meta.yAxisID in scales) || dataset.yAxisID) {
              meta.yAxisID = dataset.yAxisID || scalesOpts.yAxes[0].id;
            }
          },
          getDataset: function getDataset() {
            return this.chart.data.datasets[this.index];
          },
          getMeta: function getMeta() {
            return this.chart.getDatasetMeta(this.index);
          },
          getScaleForId: function getScaleForId(scaleID) {
            return this.chart.scales[scaleID];
          },

          /**
           * @private
           */
          _getValueScaleId: function _getValueScaleId() {
            return this.getMeta().yAxisID;
          },

          /**
           * @private
           */
          _getIndexScaleId: function _getIndexScaleId() {
            return this.getMeta().xAxisID;
          },

          /**
           * @private
           */
          _getValueScale: function _getValueScale() {
            return this.getScaleForId(this._getValueScaleId());
          },

          /**
           * @private
           */
          _getIndexScale: function _getIndexScale() {
            return this.getScaleForId(this._getIndexScaleId());
          },
          reset: function reset() {
            this._update(true);
          },

          /**
           * @private
           */
          destroy: function destroy() {
            if (this._data) {
              unlistenArrayEvents(this._data, this);
            }
          },
          createMetaDataset: function createMetaDataset() {
            var me = this;
            var type = me.datasetElementType;
            return type && new type({
              _chart: me.chart,
              _datasetIndex: me.index
            });
          },
          createMetaData: function createMetaData(index) {
            var me = this;
            var type = me.dataElementType;
            return type && new type({
              _chart: me.chart,
              _datasetIndex: me.index,
              _index: index
            });
          },
          addElements: function addElements() {
            var me = this;
            var meta = me.getMeta();
            var data = me.getDataset().data || [];
            var metaData = meta.data;
            var i, ilen;

            for (i = 0, ilen = data.length; i < ilen; ++i) {
              metaData[i] = metaData[i] || me.createMetaData(i);
            }

            meta.dataset = meta.dataset || me.createMetaDataset();
          },
          addElementAndReset: function addElementAndReset(index) {
            var element = this.createMetaData(index);
            this.getMeta().data.splice(index, 0, element);
            this.updateElement(element, index, true);
          },
          buildOrUpdateElements: function buildOrUpdateElements() {
            var me = this;
            var dataset = me.getDataset();
            var data = dataset.data || (dataset.data = []); // In order to correctly handle data addition/deletion animation (an thus simulate
            // real-time charts), we need to monitor these data modifications and synchronize
            // the internal meta data accordingly.

            if (me._data !== data) {
              if (me._data) {
                // This case happens when the user replaced the data array instance.
                unlistenArrayEvents(me._data, me);
              }

              if (data && Object.isExtensible(data)) {
                listenArrayEvents(data, me);
              }

              me._data = data;
            } // Re-sync meta data in case the user replaced the data array or if we missed
            // any updates and so make sure that we handle number of datapoints changing.


            me.resyncElements();
          },

          /**
           * Returns the merged user-supplied and default dataset-level options
           * @private
           */
          _configure: function _configure() {
            var me = this;
            me._config = helpers$1.merge({}, [me.chart.options.datasets[me._type], me.getDataset()], {
              merger: function merger(key, target, source) {
                if (key !== '_meta' && key !== 'data') {
                  helpers$1._merger(key, target, source);
                }
              }
            });
          },
          _update: function _update(reset) {
            var me = this;

            me._configure();

            me._cachedDataOpts = null;
            me.update(reset);
          },
          update: helpers$1.noop,
          transition: function transition(easingValue) {
            var meta = this.getMeta();
            var elements = meta.data || [];
            var ilen = elements.length;
            var i = 0;

            for (; i < ilen; ++i) {
              elements[i].transition(easingValue);
            }

            if (meta.dataset) {
              meta.dataset.transition(easingValue);
            }
          },
          draw: function draw() {
            var meta = this.getMeta();
            var elements = meta.data || [];
            var ilen = elements.length;
            var i = 0;

            if (meta.dataset) {
              meta.dataset.draw();
            }

            for (; i < ilen; ++i) {
              elements[i].draw();
            }
          },

          /**
           * Returns a set of predefined style properties that should be used to represent the dataset
           * or the data if the index is specified
           * @param {number} index - data index
           * @return {IStyleInterface} style object
           */
          getStyle: function getStyle(index) {
            var me = this;
            var meta = me.getMeta();
            var dataset = meta.dataset;
            var style;

            me._configure();

            if (dataset && index === undefined) {
              style = me._resolveDatasetElementOptions(dataset || {});
            } else {
              index = index || 0;
              style = me._resolveDataElementOptions(meta.data[index] || {}, index);
            }

            if (style.fill === false || style.fill === null) {
              style.backgroundColor = style.borderColor;
            }

            return style;
          },

          /**
           * @private
           */
          _resolveDatasetElementOptions: function _resolveDatasetElementOptions(element, hover) {
            var me = this;
            var chart = me.chart;
            var datasetOpts = me._config;
            var custom = element.custom || {};
            var options = chart.options.elements[me.datasetElementType.prototype._type] || {};
            var elementOptions = me._datasetElementOptions;
            var values = {};
            var i, ilen, key, readKey; // Scriptable options

            var context = {
              chart: chart,
              dataset: me.getDataset(),
              datasetIndex: me.index,
              hover: hover
            };

            for (i = 0, ilen = elementOptions.length; i < ilen; ++i) {
              key = elementOptions[i];
              readKey = hover ? 'hover' + key.charAt(0).toUpperCase() + key.slice(1) : key;
              values[key] = resolve([custom[readKey], datasetOpts[readKey], options[readKey]], context);
            }

            return values;
          },

          /**
           * @private
           */
          _resolveDataElementOptions: function _resolveDataElementOptions(element, index) {
            var me = this;
            var custom = element && element.custom;
            var cached = me._cachedDataOpts;

            if (cached && !custom) {
              return cached;
            }

            var chart = me.chart;
            var datasetOpts = me._config;
            var options = chart.options.elements[me.dataElementType.prototype._type] || {};
            var elementOptions = me._dataElementOptions;
            var values = {}; // Scriptable options

            var context = {
              chart: chart,
              dataIndex: index,
              dataset: me.getDataset(),
              datasetIndex: me.index
            }; // `resolve` sets cacheable to `false` if any option is indexed or scripted

            var info = {
              cacheable: !custom
            };
            var keys, i, ilen, key;
            custom = custom || {};

            if (helpers$1.isArray(elementOptions)) {
              for (i = 0, ilen = elementOptions.length; i < ilen; ++i) {
                key = elementOptions[i];
                values[key] = resolve([custom[key], datasetOpts[key], options[key]], context, index, info);
              }
            } else {
              keys = Object.keys(elementOptions);

              for (i = 0, ilen = keys.length; i < ilen; ++i) {
                key = keys[i];
                values[key] = resolve([custom[key], datasetOpts[elementOptions[key]], datasetOpts[key], options[key]], context, index, info);
              }
            }

            if (info.cacheable) {
              me._cachedDataOpts = Object.freeze(values);
            }

            return values;
          },
          removeHoverStyle: function removeHoverStyle(element) {
            helpers$1.merge(element._model, element.$previousStyle || {});
            delete element.$previousStyle;
          },
          setHoverStyle: function setHoverStyle(element) {
            var dataset = this.chart.data.datasets[element._datasetIndex];
            var index = element._index;
            var custom = element.custom || {};
            var model = element._model;
            var getHoverColor = helpers$1.getHoverColor;
            element.$previousStyle = {
              backgroundColor: model.backgroundColor,
              borderColor: model.borderColor,
              borderWidth: model.borderWidth
            };
            model.backgroundColor = resolve([custom.hoverBackgroundColor, dataset.hoverBackgroundColor, getHoverColor(model.backgroundColor)], undefined, index);
            model.borderColor = resolve([custom.hoverBorderColor, dataset.hoverBorderColor, getHoverColor(model.borderColor)], undefined, index);
            model.borderWidth = resolve([custom.hoverBorderWidth, dataset.hoverBorderWidth, model.borderWidth], undefined, index);
          },

          /**
           * @private
           */
          _removeDatasetHoverStyle: function _removeDatasetHoverStyle() {
            var element = this.getMeta().dataset;

            if (element) {
              this.removeHoverStyle(element);
            }
          },

          /**
           * @private
           */
          _setDatasetHoverStyle: function _setDatasetHoverStyle() {
            var element = this.getMeta().dataset;
            var prev = {};
            var i, ilen, key, keys, hoverOptions, model;

            if (!element) {
              return;
            }

            model = element._model;
            hoverOptions = this._resolveDatasetElementOptions(element, true);
            keys = Object.keys(hoverOptions);

            for (i = 0, ilen = keys.length; i < ilen; ++i) {
              key = keys[i];
              prev[key] = model[key];
              model[key] = hoverOptions[key];
            }

            element.$previousStyle = prev;
          },

          /**
           * @private
           */
          resyncElements: function resyncElements() {
            var me = this;
            var meta = me.getMeta();
            var data = me.getDataset().data;
            var numMeta = meta.data.length;
            var numData = data.length;

            if (numData < numMeta) {
              meta.data.splice(numData, numMeta - numData);
            } else if (numData > numMeta) {
              me.insertElements(numMeta, numData - numMeta);
            }
          },

          /**
           * @private
           */
          insertElements: function insertElements(start, count) {
            for (var i = 0; i < count; ++i) {
              this.addElementAndReset(start + i);
            }
          },

          /**
           * @private
           */
          onDataPush: function onDataPush() {
            var count = arguments.length;
            this.insertElements(this.getDataset().data.length - count, count);
          },

          /**
           * @private
           */
          onDataPop: function onDataPop() {
            this.getMeta().data.pop();
          },

          /**
           * @private
           */
          onDataShift: function onDataShift() {
            this.getMeta().data.shift();
          },

          /**
           * @private
           */
          onDataSplice: function onDataSplice(start, count) {
            this.getMeta().data.splice(start, count);
            this.insertElements(start, arguments.length - 2);
          },

          /**
           * @private
           */
          onDataUnshift: function onDataUnshift() {
            this.insertElements(0, arguments.length);
          }
        });
        DatasetController.extend = helpers$1.inherits;
        var core_datasetController = DatasetController;
        var TAU = Math.PI * 2;

        core_defaults._set('global', {
          elements: {
            arc: {
              backgroundColor: core_defaults.global.defaultColor,
              borderColor: '#fff',
              borderWidth: 2,
              borderAlign: 'center'
            }
          }
        });

        function clipArc(ctx, arc) {
          var startAngle = arc.startAngle;
          var endAngle = arc.endAngle;
          var pixelMargin = arc.pixelMargin;
          var angleMargin = pixelMargin / arc.outerRadius;
          var x = arc.x;
          var y = arc.y; // Draw an inner border by cliping the arc and drawing a double-width border
          // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders

          ctx.beginPath();
          ctx.arc(x, y, arc.outerRadius, startAngle - angleMargin, endAngle + angleMargin);

          if (arc.innerRadius > pixelMargin) {
            angleMargin = pixelMargin / arc.innerRadius;
            ctx.arc(x, y, arc.innerRadius - pixelMargin, endAngle + angleMargin, startAngle - angleMargin, true);
          } else {
            ctx.arc(x, y, pixelMargin, endAngle + Math.PI / 2, startAngle - Math.PI / 2);
          }

          ctx.closePath();
          ctx.clip();
        }

        function drawFullCircleBorders(ctx, vm, arc, inner) {
          var endAngle = arc.endAngle;
          var i;

          if (inner) {
            arc.endAngle = arc.startAngle + TAU;
            clipArc(ctx, arc);
            arc.endAngle = endAngle;

            if (arc.endAngle === arc.startAngle && arc.fullCircles) {
              arc.endAngle += TAU;
              arc.fullCircles--;
            }
          }

          ctx.beginPath();
          ctx.arc(arc.x, arc.y, arc.innerRadius, arc.startAngle + TAU, arc.startAngle, true);

          for (i = 0; i < arc.fullCircles; ++i) {
            ctx.stroke();
          }

          ctx.beginPath();
          ctx.arc(arc.x, arc.y, vm.outerRadius, arc.startAngle, arc.startAngle + TAU);

          for (i = 0; i < arc.fullCircles; ++i) {
            ctx.stroke();
          }
        }

        function drawBorder(ctx, vm, arc) {
          var inner = vm.borderAlign === 'inner';

          if (inner) {
            ctx.lineWidth = vm.borderWidth * 2;
            ctx.lineJoin = 'round';
          } else {
            ctx.lineWidth = vm.borderWidth;
            ctx.lineJoin = 'bevel';
          }

          if (arc.fullCircles) {
            drawFullCircleBorders(ctx, vm, arc, inner);
          }

          if (inner) {
            clipArc(ctx, arc);
          }

          ctx.beginPath();
          ctx.arc(arc.x, arc.y, vm.outerRadius, arc.startAngle, arc.endAngle);
          ctx.arc(arc.x, arc.y, arc.innerRadius, arc.endAngle, arc.startAngle, true);
          ctx.closePath();
          ctx.stroke();
        }

        var element_arc = core_element.extend({
          _type: 'arc',
          inLabelRange: function inLabelRange(mouseX) {
            var vm = this._view;

            if (vm) {
              return Math.pow(mouseX - vm.x, 2) < Math.pow(vm.radius + vm.hoverRadius, 2);
            }

            return false;
          },
          inRange: function inRange(chartX, chartY) {
            var vm = this._view;

            if (vm) {
              var pointRelativePosition = helpers$1.getAngleFromPoint(vm, {
                x: chartX,
                y: chartY
              });
              var angle = pointRelativePosition.angle;
              var distance = pointRelativePosition.distance; // Sanitise angle range

              var startAngle = vm.startAngle;
              var endAngle = vm.endAngle;

              while (endAngle < startAngle) {
                endAngle += TAU;
              }

              while (angle > endAngle) {
                angle -= TAU;
              }

              while (angle < startAngle) {
                angle += TAU;
              } // Check if within the range of the open/close angle


              var betweenAngles = angle >= startAngle && angle <= endAngle;
              var withinRadius = distance >= vm.innerRadius && distance <= vm.outerRadius;
              return betweenAngles && withinRadius;
            }

            return false;
          },
          getCenterPoint: function getCenterPoint() {
            var vm = this._view;
            var halfAngle = (vm.startAngle + vm.endAngle) / 2;
            var halfRadius = (vm.innerRadius + vm.outerRadius) / 2;
            return {
              x: vm.x + Math.cos(halfAngle) * halfRadius,
              y: vm.y + Math.sin(halfAngle) * halfRadius
            };
          },
          getArea: function getArea() {
            var vm = this._view;
            return Math.PI * ((vm.endAngle - vm.startAngle) / (2 * Math.PI)) * (Math.pow(vm.outerRadius, 2) - Math.pow(vm.innerRadius, 2));
          },
          tooltipPosition: function tooltipPosition() {
            var vm = this._view;
            var centreAngle = vm.startAngle + (vm.endAngle - vm.startAngle) / 2;
            var rangeFromCentre = (vm.outerRadius - vm.innerRadius) / 2 + vm.innerRadius;
            return {
              x: vm.x + Math.cos(centreAngle) * rangeFromCentre,
              y: vm.y + Math.sin(centreAngle) * rangeFromCentre
            };
          },
          draw: function draw() {
            var ctx = this._chart.ctx;
            var vm = this._view;
            var pixelMargin = vm.borderAlign === 'inner' ? 0.33 : 0;
            var arc = {
              x: vm.x,
              y: vm.y,
              innerRadius: vm.innerRadius,
              outerRadius: Math.max(vm.outerRadius - pixelMargin, 0),
              pixelMargin: pixelMargin,
              startAngle: vm.startAngle,
              endAngle: vm.endAngle,
              fullCircles: Math.floor(vm.circumference / TAU)
            };
            var i;
            ctx.save();
            ctx.fillStyle = vm.backgroundColor;
            ctx.strokeStyle = vm.borderColor;

            if (arc.fullCircles) {
              arc.endAngle = arc.startAngle + TAU;
              ctx.beginPath();
              ctx.arc(arc.x, arc.y, arc.outerRadius, arc.startAngle, arc.endAngle);
              ctx.arc(arc.x, arc.y, arc.innerRadius, arc.endAngle, arc.startAngle, true);
              ctx.closePath();

              for (i = 0; i < arc.fullCircles; ++i) {
                ctx.fill();
              }

              arc.endAngle = arc.startAngle + vm.circumference % TAU;
            }

            ctx.beginPath();
            ctx.arc(arc.x, arc.y, arc.outerRadius, arc.startAngle, arc.endAngle);
            ctx.arc(arc.x, arc.y, arc.innerRadius, arc.endAngle, arc.startAngle, true);
            ctx.closePath();
            ctx.fill();

            if (vm.borderWidth) {
              drawBorder(ctx, vm, arc);
            }

            ctx.restore();
          }
        });
        var valueOrDefault$1 = helpers$1.valueOrDefault;
        var defaultColor = core_defaults.global.defaultColor;

        core_defaults._set('global', {
          elements: {
            line: {
              tension: 0.4,
              backgroundColor: defaultColor,
              borderWidth: 3,
              borderColor: defaultColor,
              borderCapStyle: 'butt',
              borderDash: [],
              borderDashOffset: 0.0,
              borderJoinStyle: 'miter',
              capBezierPoints: true,
              fill: true // do we fill in the area between the line and its base axis

            }
          }
        });

        var element_line = core_element.extend({
          _type: 'line',
          draw: function draw() {
            var me = this;
            var vm = me._view;
            var ctx = me._chart.ctx;
            var spanGaps = vm.spanGaps;

            var points = me._children.slice(); // clone array


            var globalDefaults = core_defaults.global;
            var globalOptionLineElements = globalDefaults.elements.line;
            var lastDrawnIndex = -1;
            var closePath = me._loop;
            var index, previous, currentVM;

            if (!points.length) {
              return;
            }

            if (me._loop) {
              for (index = 0; index < points.length; ++index) {
                previous = helpers$1.previousItem(points, index); // If the line has an open path, shift the point array

                if (!points[index]._view.skip && previous._view.skip) {
                  points = points.slice(index).concat(points.slice(0, index));
                  closePath = spanGaps;
                  break;
                }
              } // If the line has a close path, add the first point again


              if (closePath) {
                points.push(points[0]);
              }
            }

            ctx.save(); // Stroke Line Options

            ctx.lineCap = vm.borderCapStyle || globalOptionLineElements.borderCapStyle; // IE 9 and 10 do not support line dash

            if (ctx.setLineDash) {
              ctx.setLineDash(vm.borderDash || globalOptionLineElements.borderDash);
            }

            ctx.lineDashOffset = valueOrDefault$1(vm.borderDashOffset, globalOptionLineElements.borderDashOffset);
            ctx.lineJoin = vm.borderJoinStyle || globalOptionLineElements.borderJoinStyle;
            ctx.lineWidth = valueOrDefault$1(vm.borderWidth, globalOptionLineElements.borderWidth);
            ctx.strokeStyle = vm.borderColor || globalDefaults.defaultColor; // Stroke Line

            ctx.beginPath(); // First point moves to it's starting position no matter what

            currentVM = points[0]._view;

            if (!currentVM.skip) {
              ctx.moveTo(currentVM.x, currentVM.y);
              lastDrawnIndex = 0;
            }

            for (index = 1; index < points.length; ++index) {
              currentVM = points[index]._view;
              previous = lastDrawnIndex === -1 ? helpers$1.previousItem(points, index) : points[lastDrawnIndex];

              if (!currentVM.skip) {
                if (lastDrawnIndex !== index - 1 && !spanGaps || lastDrawnIndex === -1) {
                  // There was a gap and this is the first point after the gap
                  ctx.moveTo(currentVM.x, currentVM.y);
                } else {
                  // Line to next point
                  helpers$1.canvas.lineTo(ctx, previous._view, currentVM);
                }

                lastDrawnIndex = index;
              }
            }

            if (closePath) {
              ctx.closePath();
            }

            ctx.stroke();
            ctx.restore();
          }
        });
        var valueOrDefault$2 = helpers$1.valueOrDefault;
        var defaultColor$1 = core_defaults.global.defaultColor;

        core_defaults._set('global', {
          elements: {
            point: {
              radius: 3,
              pointStyle: 'circle',
              backgroundColor: defaultColor$1,
              borderColor: defaultColor$1,
              borderWidth: 1,
              // Hover
              hitRadius: 1,
              hoverRadius: 4,
              hoverBorderWidth: 1
            }
          }
        });

        function xRange(mouseX) {
          var vm = this._view;
          return vm ? Math.abs(mouseX - vm.x) < vm.radius + vm.hitRadius : false;
        }

        function yRange(mouseY) {
          var vm = this._view;
          return vm ? Math.abs(mouseY - vm.y) < vm.radius + vm.hitRadius : false;
        }

        var element_point = core_element.extend({
          _type: 'point',
          inRange: function inRange(mouseX, mouseY) {
            var vm = this._view;
            return vm ? Math.pow(mouseX - vm.x, 2) + Math.pow(mouseY - vm.y, 2) < Math.pow(vm.hitRadius + vm.radius, 2) : false;
          },
          inLabelRange: xRange,
          inXRange: xRange,
          inYRange: yRange,
          getCenterPoint: function getCenterPoint() {
            var vm = this._view;
            return {
              x: vm.x,
              y: vm.y
            };
          },
          getArea: function getArea() {
            return Math.PI * Math.pow(this._view.radius, 2);
          },
          tooltipPosition: function tooltipPosition() {
            var vm = this._view;
            return {
              x: vm.x,
              y: vm.y,
              padding: vm.radius + vm.borderWidth
            };
          },
          draw: function draw(chartArea) {
            var vm = this._view;
            var ctx = this._chart.ctx;
            var pointStyle = vm.pointStyle;
            var rotation = vm.rotation;
            var radius = vm.radius;
            var x = vm.x;
            var y = vm.y;
            var globalDefaults = core_defaults.global;
            var defaultColor = globalDefaults.defaultColor; // eslint-disable-line no-shadow

            if (vm.skip) {
              return;
            } // Clipping for Points.


            if (chartArea === undefined || helpers$1.canvas._isPointInArea(vm, chartArea)) {
              ctx.strokeStyle = vm.borderColor || defaultColor;
              ctx.lineWidth = valueOrDefault$2(vm.borderWidth, globalDefaults.elements.point.borderWidth);
              ctx.fillStyle = vm.backgroundColor || defaultColor;
              helpers$1.canvas.drawPoint(ctx, pointStyle, radius, x, y, rotation);
            }
          }
        });
        var defaultColor$2 = core_defaults.global.defaultColor;

        core_defaults._set('global', {
          elements: {
            rectangle: {
              backgroundColor: defaultColor$2,
              borderColor: defaultColor$2,
              borderSkipped: 'bottom',
              borderWidth: 0
            }
          }
        });

        function isVertical(vm) {
          return vm && vm.width !== undefined;
        }
        /**
         * Helper function to get the bounds of the bar regardless of the orientation
         * @param bar {Chart.Element.Rectangle} the bar
         * @return {Bounds} bounds of the bar
         * @private
         */


        function getBarBounds(vm) {
          var x1, x2, y1, y2, half;

          if (isVertical(vm)) {
            half = vm.width / 2;
            x1 = vm.x - half;
            x2 = vm.x + half;
            y1 = Math.min(vm.y, vm.base);
            y2 = Math.max(vm.y, vm.base);
          } else {
            half = vm.height / 2;
            x1 = Math.min(vm.x, vm.base);
            x2 = Math.max(vm.x, vm.base);
            y1 = vm.y - half;
            y2 = vm.y + half;
          }

          return {
            left: x1,
            top: y1,
            right: x2,
            bottom: y2
          };
        }

        function swap(orig, v1, v2) {
          return orig === v1 ? v2 : orig === v2 ? v1 : orig;
        }

        function parseBorderSkipped(vm) {
          var edge = vm.borderSkipped;
          var res = {};

          if (!edge) {
            return res;
          }

          if (vm.horizontal) {
            if (vm.base > vm.x) {
              edge = swap(edge, 'left', 'right');
            }
          } else if (vm.base < vm.y) {
            edge = swap(edge, 'bottom', 'top');
          }

          res[edge] = true;
          return res;
        }

        function parseBorderWidth(vm, maxW, maxH) {
          var value = vm.borderWidth;
          var skip = parseBorderSkipped(vm);
          var t, r, b, l;

          if (helpers$1.isObject(value)) {
            t = +value.top || 0;
            r = +value.right || 0;
            b = +value.bottom || 0;
            l = +value.left || 0;
          } else {
            t = r = b = l = +value || 0;
          }

          return {
            t: skip.top || t < 0 ? 0 : t > maxH ? maxH : t,
            r: skip.right || r < 0 ? 0 : r > maxW ? maxW : r,
            b: skip.bottom || b < 0 ? 0 : b > maxH ? maxH : b,
            l: skip.left || l < 0 ? 0 : l > maxW ? maxW : l
          };
        }

        function boundingRects(vm) {
          var bounds = getBarBounds(vm);
          var width = bounds.right - bounds.left;
          var height = bounds.bottom - bounds.top;
          var border = parseBorderWidth(vm, width / 2, height / 2);
          return {
            outer: {
              x: bounds.left,
              y: bounds.top,
              w: width,
              h: height
            },
            inner: {
              x: bounds.left + border.l,
              y: bounds.top + border.t,
              w: width - border.l - border.r,
              h: height - border.t - border.b
            }
          };
        }

        function _inRange(vm, x, y) {
          var skipX = x === null;
          var skipY = y === null;
          var bounds = !vm || skipX && skipY ? false : getBarBounds(vm);
          return bounds && (skipX || x >= bounds.left && x <= bounds.right) && (skipY || y >= bounds.top && y <= bounds.bottom);
        }

        var element_rectangle = core_element.extend({
          _type: 'rectangle',
          draw: function draw() {
            var ctx = this._chart.ctx;
            var vm = this._view;
            var rects = boundingRects(vm);
            var outer = rects.outer;
            var inner = rects.inner;
            ctx.fillStyle = vm.backgroundColor;
            ctx.fillRect(outer.x, outer.y, outer.w, outer.h);

            if (outer.w === inner.w && outer.h === inner.h) {
              return;
            }

            ctx.save();
            ctx.beginPath();
            ctx.rect(outer.x, outer.y, outer.w, outer.h);
            ctx.clip();
            ctx.fillStyle = vm.borderColor;
            ctx.rect(inner.x, inner.y, inner.w, inner.h);
            ctx.fill('evenodd');
            ctx.restore();
          },
          height: function height() {
            var vm = this._view;
            return vm.base - vm.y;
          },
          inRange: function inRange(mouseX, mouseY) {
            return _inRange(this._view, mouseX, mouseY);
          },
          inLabelRange: function inLabelRange(mouseX, mouseY) {
            var vm = this._view;
            return isVertical(vm) ? _inRange(vm, mouseX, null) : _inRange(vm, null, mouseY);
          },
          inXRange: function inXRange(mouseX) {
            return _inRange(this._view, mouseX, null);
          },
          inYRange: function inYRange(mouseY) {
            return _inRange(this._view, null, mouseY);
          },
          getCenterPoint: function getCenterPoint() {
            var vm = this._view;
            var x, y;

            if (isVertical(vm)) {
              x = vm.x;
              y = (vm.y + vm.base) / 2;
            } else {
              x = (vm.x + vm.base) / 2;
              y = vm.y;
            }

            return {
              x: x,
              y: y
            };
          },
          getArea: function getArea() {
            var vm = this._view;
            return isVertical(vm) ? vm.width * Math.abs(vm.y - vm.base) : vm.height * Math.abs(vm.x - vm.base);
          },
          tooltipPosition: function tooltipPosition() {
            var vm = this._view;
            return {
              x: vm.x,
              y: vm.y
            };
          }
        });
        var elements = {};
        var Arc = element_arc;
        var Line = element_line;
        var Point = element_point;
        var Rectangle = element_rectangle;
        elements.Arc = Arc;
        elements.Line = Line;
        elements.Point = Point;
        elements.Rectangle = Rectangle;
        var deprecated = helpers$1._deprecated;
        var valueOrDefault$3 = helpers$1.valueOrDefault;

        core_defaults._set('bar', {
          hover: {
            mode: 'label'
          },
          scales: {
            xAxes: [{
              type: 'category',
              offset: true,
              gridLines: {
                offsetGridLines: true
              }
            }],
            yAxes: [{
              type: 'linear'
            }]
          }
        });

        core_defaults._set('global', {
          datasets: {
            bar: {
              categoryPercentage: 0.8,
              barPercentage: 0.9
            }
          }
        });
        /**
         * Computes the "optimal" sample size to maintain bars equally sized while preventing overlap.
         * @private
         */


        function computeMinSampleSize(scale, pixels) {
          var min = scale._length;
          var prev, curr, i, ilen;

          for (i = 1, ilen = pixels.length; i < ilen; ++i) {
            min = Math.min(min, Math.abs(pixels[i] - pixels[i - 1]));
          }

          for (i = 0, ilen = scale.getTicks().length; i < ilen; ++i) {
            curr = scale.getPixelForTick(i);
            min = i > 0 ? Math.min(min, Math.abs(curr - prev)) : min;
            prev = curr;
          }

          return min;
        }
        /**
         * Computes an "ideal" category based on the absolute bar thickness or, if undefined or null,
         * uses the smallest interval (see computeMinSampleSize) that prevents bar overlapping. This
         * mode currently always generates bars equally sized (until we introduce scriptable options?).
         * @private
         */


        function computeFitCategoryTraits(index, ruler, options) {
          var thickness = options.barThickness;
          var count = ruler.stackCount;
          var curr = ruler.pixels[index];
          var min = helpers$1.isNullOrUndef(thickness) ? computeMinSampleSize(ruler.scale, ruler.pixels) : -1;
          var size, ratio;

          if (helpers$1.isNullOrUndef(thickness)) {
            size = min * options.categoryPercentage;
            ratio = options.barPercentage;
          } else {
            // When bar thickness is enforced, category and bar percentages are ignored.
            // Note(SB): we could add support for relative bar thickness (e.g. barThickness: '50%')
            // and deprecate barPercentage since this value is ignored when thickness is absolute.
            size = thickness * count;
            ratio = 1;
          }

          return {
            chunk: size / count,
            ratio: ratio,
            start: curr - size / 2
          };
        }
        /**
         * Computes an "optimal" category that globally arranges bars side by side (no gap when
         * percentage options are 1), based on the previous and following categories. This mode
         * generates bars with different widths when data are not evenly spaced.
         * @private
         */


        function computeFlexCategoryTraits(index, ruler, options) {
          var pixels = ruler.pixels;
          var curr = pixels[index];
          var prev = index > 0 ? pixels[index - 1] : null;
          var next = index < pixels.length - 1 ? pixels[index + 1] : null;
          var percent = options.categoryPercentage;
          var start, size;

          if (prev === null) {
            // first data: its size is double based on the next point or,
            // if it's also the last data, we use the scale size.
            prev = curr - (next === null ? ruler.end - ruler.start : next - curr);
          }

          if (next === null) {
            // last data: its size is also double based on the previous point.
            next = curr + curr - prev;
          }

          start = curr - (curr - Math.min(prev, next)) / 2 * percent;
          size = Math.abs(next - prev) / 2 * percent;
          return {
            chunk: size / ruler.stackCount,
            ratio: options.barPercentage,
            start: start
          };
        }

        var controller_bar = core_datasetController.extend({
          dataElementType: elements.Rectangle,

          /**
           * @private
           */
          _dataElementOptions: ['backgroundColor', 'borderColor', 'borderSkipped', 'borderWidth', 'barPercentage', 'barThickness', 'categoryPercentage', 'maxBarThickness', 'minBarLength'],
          initialize: function initialize() {
            var me = this;
            var meta, scaleOpts;
            core_datasetController.prototype.initialize.apply(me, arguments);
            meta = me.getMeta();
            meta.stack = me.getDataset().stack;
            meta.bar = true;
            scaleOpts = me._getIndexScale().options;
            deprecated('bar chart', scaleOpts.barPercentage, 'scales.[x/y]Axes.barPercentage', 'dataset.barPercentage');
            deprecated('bar chart', scaleOpts.barThickness, 'scales.[x/y]Axes.barThickness', 'dataset.barThickness');
            deprecated('bar chart', scaleOpts.categoryPercentage, 'scales.[x/y]Axes.categoryPercentage', 'dataset.categoryPercentage');
            deprecated('bar chart', me._getValueScale().options.minBarLength, 'scales.[x/y]Axes.minBarLength', 'dataset.minBarLength');
            deprecated('bar chart', scaleOpts.maxBarThickness, 'scales.[x/y]Axes.maxBarThickness', 'dataset.maxBarThickness');
          },
          update: function update(reset) {
            var me = this;
            var rects = me.getMeta().data;
            var i, ilen;
            me._ruler = me.getRuler();

            for (i = 0, ilen = rects.length; i < ilen; ++i) {
              me.updateElement(rects[i], i, reset);
            }
          },
          updateElement: function updateElement(rectangle, index, reset) {
            var me = this;
            var meta = me.getMeta();
            var dataset = me.getDataset();

            var options = me._resolveDataElementOptions(rectangle, index);

            rectangle._xScale = me.getScaleForId(meta.xAxisID);
            rectangle._yScale = me.getScaleForId(meta.yAxisID);
            rectangle._datasetIndex = me.index;
            rectangle._index = index;
            rectangle._model = {
              backgroundColor: options.backgroundColor,
              borderColor: options.borderColor,
              borderSkipped: options.borderSkipped,
              borderWidth: options.borderWidth,
              datasetLabel: dataset.label,
              label: me.chart.data.labels[index]
            };

            if (helpers$1.isArray(dataset.data[index])) {
              rectangle._model.borderSkipped = null;
            }

            me._updateElementGeometry(rectangle, index, reset, options);

            rectangle.pivot();
          },

          /**
           * @private
           */
          _updateElementGeometry: function _updateElementGeometry(rectangle, index, reset, options) {
            var me = this;
            var model = rectangle._model;

            var vscale = me._getValueScale();

            var base = vscale.getBasePixel();
            var horizontal = vscale.isHorizontal();
            var ruler = me._ruler || me.getRuler();
            var vpixels = me.calculateBarValuePixels(me.index, index, options);
            var ipixels = me.calculateBarIndexPixels(me.index, index, ruler, options);
            model.horizontal = horizontal;
            model.base = reset ? base : vpixels.base;
            model.x = horizontal ? reset ? base : vpixels.head : ipixels.center;
            model.y = horizontal ? ipixels.center : reset ? base : vpixels.head;
            model.height = horizontal ? ipixels.size : undefined;
            model.width = horizontal ? undefined : ipixels.size;
          },

          /**
           * Returns the stacks based on groups and bar visibility.
           * @param {number} [last] - The dataset index
           * @returns {string[]} The list of stack IDs
           * @private
           */
          _getStacks: function _getStacks(last) {
            var me = this;

            var scale = me._getIndexScale();

            var metasets = scale._getMatchingVisibleMetas(me._type);

            var stacked = scale.options.stacked;
            var ilen = metasets.length;
            var stacks = [];
            var i, meta;

            for (i = 0; i < ilen; ++i) {
              meta = metasets[i]; // stacked   | meta.stack
              //           | found | not found | undefined
              // false     |   x   |     x     |     x
              // true      |       |     x     |
              // undefined |       |     x     |     x

              if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === undefined && meta.stack === undefined) {
                stacks.push(meta.stack);
              }

              if (meta.index === last) {
                break;
              }
            }

            return stacks;
          },

          /**
           * Returns the effective number of stacks based on groups and bar visibility.
           * @private
           */
          getStackCount: function getStackCount() {
            return this._getStacks().length;
          },

          /**
           * Returns the stack index for the given dataset based on groups and bar visibility.
           * @param {number} [datasetIndex] - The dataset index
           * @param {string} [name] - The stack name to find
           * @returns {number} The stack index
           * @private
           */
          getStackIndex: function getStackIndex(datasetIndex, name) {
            var stacks = this._getStacks(datasetIndex);

            var index = name !== undefined ? stacks.indexOf(name) : -1; // indexOf returns -1 if element is not present

            return index === -1 ? stacks.length - 1 : index;
          },

          /**
           * @private
           */
          getRuler: function getRuler() {
            var me = this;

            var scale = me._getIndexScale();

            var pixels = [];
            var i, ilen;

            for (i = 0, ilen = me.getMeta().data.length; i < ilen; ++i) {
              pixels.push(scale.getPixelForValue(null, i, me.index));
            }

            return {
              pixels: pixels,
              start: scale._startPixel,
              end: scale._endPixel,
              stackCount: me.getStackCount(),
              scale: scale
            };
          },

          /**
           * Note: pixel values are not clamped to the scale area.
           * @private
           */
          calculateBarValuePixels: function calculateBarValuePixels(datasetIndex, index, options) {
            var me = this;
            var chart = me.chart;

            var scale = me._getValueScale();

            var isHorizontal = scale.isHorizontal();
            var datasets = chart.data.datasets;

            var metasets = scale._getMatchingVisibleMetas(me._type);

            var value = scale._parseValue(datasets[datasetIndex].data[index]);

            var minBarLength = options.minBarLength;
            var stacked = scale.options.stacked;
            var stack = me.getMeta().stack;
            var start = value.start === undefined ? 0 : value.max >= 0 && value.min >= 0 ? value.min : value.max;
            var length = value.start === undefined ? value.end : value.max >= 0 && value.min >= 0 ? value.max - value.min : value.min - value.max;
            var ilen = metasets.length;
            var i, imeta, ivalue, base, head, size, stackLength;

            if (stacked || stacked === undefined && stack !== undefined) {
              for (i = 0; i < ilen; ++i) {
                imeta = metasets[i];

                if (imeta.index === datasetIndex) {
                  break;
                }

                if (imeta.stack === stack) {
                  stackLength = scale._parseValue(datasets[imeta.index].data[index]);
                  ivalue = stackLength.start === undefined ? stackLength.end : stackLength.min >= 0 && stackLength.max >= 0 ? stackLength.max : stackLength.min;

                  if (value.min < 0 && ivalue < 0 || value.max >= 0 && ivalue > 0) {
                    start += ivalue;
                  }
                }
              }
            }

            base = scale.getPixelForValue(start);
            head = scale.getPixelForValue(start + length);
            size = head - base;

            if (minBarLength !== undefined && Math.abs(size) < minBarLength) {
              size = minBarLength;

              if (length >= 0 && !isHorizontal || length < 0 && isHorizontal) {
                head = base - minBarLength;
              } else {
                head = base + minBarLength;
              }
            }

            return {
              size: size,
              base: base,
              head: head,
              center: head + size / 2
            };
          },

          /**
           * @private
           */
          calculateBarIndexPixels: function calculateBarIndexPixels(datasetIndex, index, ruler, options) {
            var me = this;
            var range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options) : computeFitCategoryTraits(index, ruler, options);
            var stackIndex = me.getStackIndex(datasetIndex, me.getMeta().stack);
            var center = range.start + range.chunk * stackIndex + range.chunk / 2;
            var size = Math.min(valueOrDefault$3(options.maxBarThickness, Infinity), range.chunk * range.ratio);
            return {
              base: center - size / 2,
              head: center + size / 2,
              center: center,
              size: size
            };
          },
          draw: function draw() {
            var me = this;
            var chart = me.chart;

            var scale = me._getValueScale();

            var rects = me.getMeta().data;
            var dataset = me.getDataset();
            var ilen = rects.length;
            var i = 0;
            helpers$1.canvas.clipArea(chart.ctx, chart.chartArea);

            for (; i < ilen; ++i) {
              var val = scale._parseValue(dataset.data[i]);

              if (!isNaN(val.min) && !isNaN(val.max)) {
                rects[i].draw();
              }
            }

            helpers$1.canvas.unclipArea(chart.ctx);
          },

          /**
           * @private
           */
          _resolveDataElementOptions: function _resolveDataElementOptions() {
            var me = this;
            var values = helpers$1.extend({}, core_datasetController.prototype._resolveDataElementOptions.apply(me, arguments));

            var indexOpts = me._getIndexScale().options;

            var valueOpts = me._getValueScale().options;

            values.barPercentage = valueOrDefault$3(indexOpts.barPercentage, values.barPercentage);
            values.barThickness = valueOrDefault$3(indexOpts.barThickness, values.barThickness);
            values.categoryPercentage = valueOrDefault$3(indexOpts.categoryPercentage, values.categoryPercentage);
            values.maxBarThickness = valueOrDefault$3(indexOpts.maxBarThickness, values.maxBarThickness);
            values.minBarLength = valueOrDefault$3(valueOpts.minBarLength, values.minBarLength);
            return values;
          }
        });
        var valueOrDefault$4 = helpers$1.valueOrDefault;
        var resolve$1 = helpers$1.options.resolve;

        core_defaults._set('bubble', {
          hover: {
            mode: 'single'
          },
          scales: {
            xAxes: [{
              type: 'linear',
              // bubble should probably use a linear scale by default
              position: 'bottom',
              id: 'x-axis-0' // need an ID so datasets can reference the scale

            }],
            yAxes: [{
              type: 'linear',
              position: 'left',
              id: 'y-axis-0'
            }]
          },
          tooltips: {
            callbacks: {
              title: function title() {
                // Title doesn't make sense for scatter since we format the data as a point
                return '';
              },
              label: function label(item, data) {
                var datasetLabel = data.datasets[item.datasetIndex].label || '';
                var dataPoint = data.datasets[item.datasetIndex].data[item.index];
                return datasetLabel + ': (' + item.xLabel + ', ' + item.yLabel + ', ' + dataPoint.r + ')';
              }
            }
          }
        });

        var controller_bubble = core_datasetController.extend({
          /**
           * @protected
           */
          dataElementType: elements.Point,

          /**
           * @private
           */
          _dataElementOptions: ['backgroundColor', 'borderColor', 'borderWidth', 'hoverBackgroundColor', 'hoverBorderColor', 'hoverBorderWidth', 'hoverRadius', 'hitRadius', 'pointStyle', 'rotation'],

          /**
           * @protected
           */
          update: function update(reset) {
            var me = this;
            var meta = me.getMeta();
            var points = meta.data; // Update Points

            helpers$1.each(points, function (point, index) {
              me.updateElement(point, index, reset);
            });
          },

          /**
           * @protected
           */
          updateElement: function updateElement(point, index, reset) {
            var me = this;
            var meta = me.getMeta();
            var custom = point.custom || {};
            var xScale = me.getScaleForId(meta.xAxisID);
            var yScale = me.getScaleForId(meta.yAxisID);

            var options = me._resolveDataElementOptions(point, index);

            var data = me.getDataset().data[index];
            var dsIndex = me.index;
            var x = reset ? xScale.getPixelForDecimal(0.5) : xScale.getPixelForValue(typeof data === 'object' ? data : NaN, index, dsIndex);
            var y = reset ? yScale.getBasePixel() : yScale.getPixelForValue(data, index, dsIndex);
            point._xScale = xScale;
            point._yScale = yScale;
            point._options = options;
            point._datasetIndex = dsIndex;
            point._index = index;
            point._model = {
              backgroundColor: options.backgroundColor,
              borderColor: options.borderColor,
              borderWidth: options.borderWidth,
              hitRadius: options.hitRadius,
              pointStyle: options.pointStyle,
              rotation: options.rotation,
              radius: reset ? 0 : options.radius,
              skip: custom.skip || isNaN(x) || isNaN(y),
              x: x,
              y: y
            };
            point.pivot();
          },

          /**
           * @protected
           */
          setHoverStyle: function setHoverStyle(point) {
            var model = point._model;
            var options = point._options;
            var getHoverColor = helpers$1.getHoverColor;
            point.$previousStyle = {
              backgroundColor: model.backgroundColor,
              borderColor: model.borderColor,
              borderWidth: model.borderWidth,
              radius: model.radius
            };
            model.backgroundColor = valueOrDefault$4(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));
            model.borderColor = valueOrDefault$4(options.hoverBorderColor, getHoverColor(options.borderColor));
            model.borderWidth = valueOrDefault$4(options.hoverBorderWidth, options.borderWidth);
            model.radius = options.radius + options.hoverRadius;
          },

          /**
           * @private
           */
          _resolveDataElementOptions: function _resolveDataElementOptions(point, index) {
            var me = this;
            var chart = me.chart;
            var dataset = me.getDataset();
            var custom = point.custom || {};
            var data = dataset.data[index] || {};

            var values = core_datasetController.prototype._resolveDataElementOptions.apply(me, arguments); // Scriptable options


            var context = {
              chart: chart,
              dataIndex: index,
              dataset: dataset,
              datasetIndex: me.index
            }; // In case values were cached (and thus frozen), we need to clone the values

            if (me._cachedDataOpts === values) {
              values = helpers$1.extend({}, values);
            } // Custom radius resolution


            values.radius = resolve$1([custom.radius, data.r, me._config.radius, chart.options.elements.point.radius], context, index);
            return values;
          }
        });
        var valueOrDefault$5 = helpers$1.valueOrDefault;
        var PI$1 = Math.PI;
        var DOUBLE_PI$1 = PI$1 * 2;
        var HALF_PI$1 = PI$1 / 2;

        core_defaults._set('doughnut', {
          animation: {
            // Boolean - Whether we animate the rotation of the Doughnut
            animateRotate: true,
            // Boolean - Whether we animate scaling the Doughnut from the centre
            animateScale: false
          },
          hover: {
            mode: 'single'
          },
          legendCallback: function legendCallback(chart) {
            var list = document.createElement('ul');
            var data = chart.data;
            var datasets = data.datasets;
            var labels = data.labels;
            var i, ilen, listItem, listItemSpan;
            list.setAttribute('class', chart.id + '-legend');

            if (datasets.length) {
              for (i = 0, ilen = datasets[0].data.length; i < ilen; ++i) {
                listItem = list.appendChild(document.createElement('li'));
                listItemSpan = listItem.appendChild(document.createElement('span'));
                listItemSpan.style.backgroundColor = datasets[0].backgroundColor[i];

                if (labels[i]) {
                  listItem.appendChild(document.createTextNode(labels[i]));
                }
              }
            }

            return list.outerHTML;
          },
          legend: {
            labels: {
              generateLabels: function generateLabels(chart) {
                var data = chart.data;

                if (data.labels.length && data.datasets.length) {
                  return data.labels.map(function (label, i) {
                    var meta = chart.getDatasetMeta(0);
                    var style = meta.controller.getStyle(i);
                    return {
                      text: label,
                      fillStyle: style.backgroundColor,
                      strokeStyle: style.borderColor,
                      lineWidth: style.borderWidth,
                      hidden: isNaN(data.datasets[0].data[i]) || meta.data[i].hidden,
                      // Extra data used for toggling the correct item
                      index: i
                    };
                  });
                }

                return [];
              }
            },
            onClick: function onClick(e, legendItem) {
              var index = legendItem.index;
              var chart = this.chart;
              var i, ilen, meta;

              for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
                meta = chart.getDatasetMeta(i); // toggle visibility of index if exists

                if (meta.data[index]) {
                  meta.data[index].hidden = !meta.data[index].hidden;
                }
              }

              chart.update();
            }
          },
          // The percentage of the chart that we cut out of the middle.
          cutoutPercentage: 50,
          // The rotation of the chart, where the first data arc begins.
          rotation: -HALF_PI$1,
          // The total circumference of the chart.
          circumference: DOUBLE_PI$1,
          // Need to override these to give a nice default
          tooltips: {
            callbacks: {
              title: function title() {
                return '';
              },
              label: function label(tooltipItem, data) {
                var dataLabel = data.labels[tooltipItem.index];
                var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];

                if (helpers$1.isArray(dataLabel)) {
                  // show value on first line of multiline label
                  // need to clone because we are changing the value
                  dataLabel = dataLabel.slice();
                  dataLabel[0] += value;
                } else {
                  dataLabel += value;
                }

                return dataLabel;
              }
            }
          }
        });

        var controller_doughnut = core_datasetController.extend({
          dataElementType: elements.Arc,
          linkScales: helpers$1.noop,

          /**
           * @private
           */
          _dataElementOptions: ['backgroundColor', 'borderColor', 'borderWidth', 'borderAlign', 'hoverBackgroundColor', 'hoverBorderColor', 'hoverBorderWidth'],
          // Get index of the dataset in relation to the visible datasets. This allows determining the inner and outer radius correctly
          getRingIndex: function getRingIndex(datasetIndex) {
            var ringIndex = 0;

            for (var j = 0; j < datasetIndex; ++j) {
              if (this.chart.isDatasetVisible(j)) {
                ++ringIndex;
              }
            }

            return ringIndex;
          },
          update: function update(reset) {
            var me = this;
            var chart = me.chart;
            var chartArea = chart.chartArea;
            var opts = chart.options;
            var ratioX = 1;
            var ratioY = 1;
            var offsetX = 0;
            var offsetY = 0;
            var meta = me.getMeta();
            var arcs = meta.data;
            var cutout = opts.cutoutPercentage / 100 || 0;
            var circumference = opts.circumference;

            var chartWeight = me._getRingWeight(me.index);

            var maxWidth, maxHeight, i, ilen; // If the chart's circumference isn't a full circle, calculate size as a ratio of the width/height of the arc

            if (circumference < DOUBLE_PI$1) {
              var startAngle = opts.rotation % DOUBLE_PI$1;
              startAngle += startAngle >= PI$1 ? -DOUBLE_PI$1 : startAngle < -PI$1 ? DOUBLE_PI$1 : 0;
              var endAngle = startAngle + circumference;
              var startX = Math.cos(startAngle);
              var startY = Math.sin(startAngle);
              var endX = Math.cos(endAngle);
              var endY = Math.sin(endAngle);
              var contains0 = startAngle <= 0 && endAngle >= 0 || endAngle >= DOUBLE_PI$1;
              var contains90 = startAngle <= HALF_PI$1 && endAngle >= HALF_PI$1 || endAngle >= DOUBLE_PI$1 + HALF_PI$1;
              var contains180 = startAngle === -PI$1 || endAngle >= PI$1;
              var contains270 = startAngle <= -HALF_PI$1 && endAngle >= -HALF_PI$1 || endAngle >= PI$1 + HALF_PI$1;
              var minX = contains180 ? -1 : Math.min(startX, startX * cutout, endX, endX * cutout);
              var minY = contains270 ? -1 : Math.min(startY, startY * cutout, endY, endY * cutout);
              var maxX = contains0 ? 1 : Math.max(startX, startX * cutout, endX, endX * cutout);
              var maxY = contains90 ? 1 : Math.max(startY, startY * cutout, endY, endY * cutout);
              ratioX = (maxX - minX) / 2;
              ratioY = (maxY - minY) / 2;
              offsetX = -(maxX + minX) / 2;
              offsetY = -(maxY + minY) / 2;
            }

            for (i = 0, ilen = arcs.length; i < ilen; ++i) {
              arcs[i]._options = me._resolveDataElementOptions(arcs[i], i);
            }

            chart.borderWidth = me.getMaxBorderWidth();
            maxWidth = (chartArea.right - chartArea.left - chart.borderWidth) / ratioX;
            maxHeight = (chartArea.bottom - chartArea.top - chart.borderWidth) / ratioY;
            chart.outerRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);
            chart.innerRadius = Math.max(chart.outerRadius * cutout, 0);
            chart.radiusLength = (chart.outerRadius - chart.innerRadius) / (me._getVisibleDatasetWeightTotal() || 1);
            chart.offsetX = offsetX * chart.outerRadius;
            chart.offsetY = offsetY * chart.outerRadius;
            meta.total = me.calculateTotal();
            me.outerRadius = chart.outerRadius - chart.radiusLength * me._getRingWeightOffset(me.index);
            me.innerRadius = Math.max(me.outerRadius - chart.radiusLength * chartWeight, 0);

            for (i = 0, ilen = arcs.length; i < ilen; ++i) {
              me.updateElement(arcs[i], i, reset);
            }
          },
          updateElement: function updateElement(arc, index, reset) {
            var me = this;
            var chart = me.chart;
            var chartArea = chart.chartArea;
            var opts = chart.options;
            var animationOpts = opts.animation;
            var centerX = (chartArea.left + chartArea.right) / 2;
            var centerY = (chartArea.top + chartArea.bottom) / 2;
            var startAngle = opts.rotation; // non reset case handled later

            var endAngle = opts.rotation; // non reset case handled later

            var dataset = me.getDataset();
            var circumference = reset && animationOpts.animateRotate ? 0 : arc.hidden ? 0 : me.calculateCircumference(dataset.data[index]) * (opts.circumference / DOUBLE_PI$1);
            var innerRadius = reset && animationOpts.animateScale ? 0 : me.innerRadius;
            var outerRadius = reset && animationOpts.animateScale ? 0 : me.outerRadius;
            var options = arc._options || {};
            helpers$1.extend(arc, {
              // Utility
              _datasetIndex: me.index,
              _index: index,
              // Desired view properties
              _model: {
                backgroundColor: options.backgroundColor,
                borderColor: options.borderColor,
                borderWidth: options.borderWidth,
                borderAlign: options.borderAlign,
                x: centerX + chart.offsetX,
                y: centerY + chart.offsetY,
                startAngle: startAngle,
                endAngle: endAngle,
                circumference: circumference,
                outerRadius: outerRadius,
                innerRadius: innerRadius,
                label: helpers$1.valueAtIndexOrDefault(dataset.label, index, chart.data.labels[index])
              }
            });
            var model = arc._model; // Set correct angles if not resetting

            if (!reset || !animationOpts.animateRotate) {
              if (index === 0) {
                model.startAngle = opts.rotation;
              } else {
                model.startAngle = me.getMeta().data[index - 1]._model.endAngle;
              }

              model.endAngle = model.startAngle + model.circumference;
            }

            arc.pivot();
          },
          calculateTotal: function calculateTotal() {
            var dataset = this.getDataset();
            var meta = this.getMeta();
            var total = 0;
            var value;
            helpers$1.each(meta.data, function (element, index) {
              value = dataset.data[index];

              if (!isNaN(value) && !element.hidden) {
                total += Math.abs(value);
              }
            });
            /* if (total === 0) {
            	total = NaN;
            }*/

            return total;
          },
          calculateCircumference: function calculateCircumference(value) {
            var total = this.getMeta().total;

            if (total > 0 && !isNaN(value)) {
              return DOUBLE_PI$1 * (Math.abs(value) / total);
            }

            return 0;
          },
          // gets the max border or hover width to properly scale pie charts
          getMaxBorderWidth: function getMaxBorderWidth(arcs) {
            var me = this;
            var max = 0;
            var chart = me.chart;
            var i, ilen, meta, arc, controller, options, borderWidth, hoverWidth;

            if (!arcs) {
              // Find the outmost visible dataset
              for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {
                if (chart.isDatasetVisible(i)) {
                  meta = chart.getDatasetMeta(i);
                  arcs = meta.data;

                  if (i !== me.index) {
                    controller = meta.controller;
                  }

                  break;
                }
              }
            }

            if (!arcs) {
              return 0;
            }

            for (i = 0, ilen = arcs.length; i < ilen; ++i) {
              arc = arcs[i];

              if (controller) {
                controller._configure();

                options = controller._resolveDataElementOptions(arc, i);
              } else {
                options = arc._options;
              }

              if (options.borderAlign !== 'inner') {
                borderWidth = options.borderWidth;
                hoverWidth = options.hoverBorderWidth;
                max = borderWidth > max ? borderWidth : max;
                max = hoverWidth > max ? hoverWidth : max;
              }
            }

            return max;
          },

          /**
           * @protected
           */
          setHoverStyle: function setHoverStyle(arc) {
            var model = arc._model;
            var options = arc._options;
            var getHoverColor = helpers$1.getHoverColor;
            arc.$previousStyle = {
              backgroundColor: model.backgroundColor,
              borderColor: model.borderColor,
              borderWidth: model.borderWidth
            };
            model.backgroundColor = valueOrDefault$5(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));
            model.borderColor = valueOrDefault$5(options.hoverBorderColor, getHoverColor(options.borderColor));
            model.borderWidth = valueOrDefault$5(options.hoverBorderWidth, options.borderWidth);
          },

          /**
           * Get radius length offset of the dataset in relation to the visible datasets weights. This allows determining the inner and outer radius correctly
           * @private
           */
          _getRingWeightOffset: function _getRingWeightOffset(datasetIndex) {
            var ringWeightOffset = 0;

            for (var i = 0; i < datasetIndex; ++i) {
              if (this.chart.isDatasetVisible(i)) {
                ringWeightOffset += this._getRingWeight(i);
              }
            }

            return ringWeightOffset;
          },

          /**
           * @private
           */
          _getRingWeight: function _getRingWeight(dataSetIndex) {
            return Math.max(valueOrDefault$5(this.chart.data.datasets[dataSetIndex].weight, 1), 0);
          },

          /**
           * Returns the sum of all visibile data set weights.  This value can be 0.
           * @private
           */
          _getVisibleDatasetWeightTotal: function _getVisibleDatasetWeightTotal() {
            return this._getRingWeightOffset(this.chart.data.datasets.length);
          }
        });

        core_defaults._set('horizontalBar', {
          hover: {
            mode: 'index',
            axis: 'y'
          },
          scales: {
            xAxes: [{
              type: 'linear',
              position: 'bottom'
            }],
            yAxes: [{
              type: 'category',
              position: 'left',
              offset: true,
              gridLines: {
                offsetGridLines: true
              }
            }]
          },
          elements: {
            rectangle: {
              borderSkipped: 'left'
            }
          },
          tooltips: {
            mode: 'index',
            axis: 'y'
          }
        });

        core_defaults._set('global', {
          datasets: {
            horizontalBar: {
              categoryPercentage: 0.8,
              barPercentage: 0.9
            }
          }
        });

        var controller_horizontalBar = controller_bar.extend({
          /**
           * @private
           */
          _getValueScaleId: function _getValueScaleId() {
            return this.getMeta().xAxisID;
          },

          /**
           * @private
           */
          _getIndexScaleId: function _getIndexScaleId() {
            return this.getMeta().yAxisID;
          }
        });
        var valueOrDefault$6 = helpers$1.valueOrDefault;
        var resolve$2 = helpers$1.options.resolve;
        var isPointInArea = helpers$1.canvas._isPointInArea;

        core_defaults._set('line', {
          showLines: true,
          spanGaps: false,
          hover: {
            mode: 'label'
          },
          scales: {
            xAxes: [{
              type: 'category',
              id: 'x-axis-0'
            }],
            yAxes: [{
              type: 'linear',
              id: 'y-axis-0'
            }]
          }
        });

        function scaleClip(scale, halfBorderWidth) {
          var tickOpts = scale && scale.options.ticks || {};
          var reverse = tickOpts.reverse;
          var min = tickOpts.min === undefined ? halfBorderWidth : 0;
          var max = tickOpts.max === undefined ? halfBorderWidth : 0;
          return {
            start: reverse ? max : min,
            end: reverse ? min : max
          };
        }

        function defaultClip(xScale, yScale, borderWidth) {
          var halfBorderWidth = borderWidth / 2;
          var x = scaleClip(xScale, halfBorderWidth);
          var y = scaleClip(yScale, halfBorderWidth);
          return {
            top: y.end,
            right: x.end,
            bottom: y.start,
            left: x.start
          };
        }

        function toClip(value) {
          var t, r, b, l;

          if (helpers$1.isObject(value)) {
            t = value.top;
            r = value.right;
            b = value.bottom;
            l = value.left;
          } else {
            t = r = b = l = value;
          }

          return {
            top: t,
            right: r,
            bottom: b,
            left: l
          };
        }

        var controller_line = core_datasetController.extend({
          datasetElementType: elements.Line,
          dataElementType: elements.Point,

          /**
           * @private
           */
          _datasetElementOptions: ['backgroundColor', 'borderCapStyle', 'borderColor', 'borderDash', 'borderDashOffset', 'borderJoinStyle', 'borderWidth', 'cubicInterpolationMode', 'fill'],

          /**
           * @private
           */
          _dataElementOptions: {
            backgroundColor: 'pointBackgroundColor',
            borderColor: 'pointBorderColor',
            borderWidth: 'pointBorderWidth',
            hitRadius: 'pointHitRadius',
            hoverBackgroundColor: 'pointHoverBackgroundColor',
            hoverBorderColor: 'pointHoverBorderColor',
            hoverBorderWidth: 'pointHoverBorderWidth',
            hoverRadius: 'pointHoverRadius',
            pointStyle: 'pointStyle',
            radius: 'pointRadius',
            rotation: 'pointRotation'
          },
          update: function update(reset) {
            var me = this;
            var meta = me.getMeta();
            var line = meta.dataset;
            var points = meta.data || [];
            var options = me.chart.options;
            var config = me._config;
            var showLine = me._showLine = valueOrDefault$6(config.showLine, options.showLines);
            var i, ilen;
            me._xScale = me.getScaleForId(meta.xAxisID);
            me._yScale = me.getScaleForId(meta.yAxisID); // Update Line

            if (showLine) {
              // Compatibility: If the properties are defined with only the old name, use those values
              if (config.tension !== undefined && config.lineTension === undefined) {
                config.lineTension = config.tension;
              } // Utility


              line._scale = me._yScale;
              line._datasetIndex = me.index; // Data

              line._children = points; // Model

              line._model = me._resolveDatasetElementOptions(line);
              line.pivot();
            } // Update Points


            for (i = 0, ilen = points.length; i < ilen; ++i) {
              me.updateElement(points[i], i, reset);
            }

            if (showLine && line._model.tension !== 0) {
              me.updateBezierControlPoints();
            } // Now pivot the point for animation


            for (i = 0, ilen = points.length; i < ilen; ++i) {
              points[i].pivot();
            }
          },
          updateElement: function updateElement(point, index, reset) {
            var me = this;
            var meta = me.getMeta();
            var custom = point.custom || {};
            var dataset = me.getDataset();
            var datasetIndex = me.index;
            var value = dataset.data[index];
            var xScale = me._xScale;
            var yScale = me._yScale;
            var lineModel = meta.dataset._model;
            var x, y;

            var options = me._resolveDataElementOptions(point, index);

            x = xScale.getPixelForValue(typeof value === 'object' ? value : NaN, index, datasetIndex);
            y = reset ? yScale.getBasePixel() : me.calculatePointY(value, index, datasetIndex); // Utility

            point._xScale = xScale;
            point._yScale = yScale;
            point._options = options;
            point._datasetIndex = datasetIndex;
            point._index = index; // Desired view properties

            point._model = {
              x: x,
              y: y,
              skip: custom.skip || isNaN(x) || isNaN(y),
              // Appearance
              radius: options.radius,
              pointStyle: options.pointStyle,
              rotation: options.rotation,
              backgroundColor: options.backgroundColor,
              borderColor: options.borderColor,
              borderWidth: options.borderWidth,
              tension: valueOrDefault$6(custom.tension, lineModel ? lineModel.tension : 0),
              steppedLine: lineModel ? lineModel.steppedLine : false,
              // Tooltip
              hitRadius: options.hitRadius
            };
          },

          /**
           * @private
           */
          _resolveDatasetElementOptions: function _resolveDatasetElementOptions(element) {
            var me = this;
            var config = me._config;
            var custom = element.custom || {};
            var options = me.chart.options;
            var lineOptions = options.elements.line;

            var values = core_datasetController.prototype._resolveDatasetElementOptions.apply(me, arguments); // The default behavior of lines is to break at null values, according
            // to https://github.com/chartjs/Chart.js/issues/2435#issuecomment-216718158
            // This option gives lines the ability to span gaps


            values.spanGaps = valueOrDefault$6(config.spanGaps, options.spanGaps);
            values.tension = valueOrDefault$6(config.lineTension, lineOptions.tension);
            values.steppedLine = resolve$2([custom.steppedLine, config.steppedLine, lineOptions.stepped]);
            values.clip = toClip(valueOrDefault$6(config.clip, defaultClip(me._xScale, me._yScale, values.borderWidth)));
            return values;
          },
          calculatePointY: function calculatePointY(value, index, datasetIndex) {
            var me = this;
            var chart = me.chart;
            var yScale = me._yScale;
            var sumPos = 0;
            var sumNeg = 0;
            var i, ds, dsMeta, stackedRightValue, rightValue, metasets, ilen;

            if (yScale.options.stacked) {
              rightValue = +yScale.getRightValue(value);
              metasets = chart._getSortedVisibleDatasetMetas();
              ilen = metasets.length;

              for (i = 0; i < ilen; ++i) {
                dsMeta = metasets[i];

                if (dsMeta.index === datasetIndex) {
                  break;
                }

                ds = chart.data.datasets[dsMeta.index];

                if (dsMeta.type === 'line' && dsMeta.yAxisID === yScale.id) {
                  stackedRightValue = +yScale.getRightValue(ds.data[index]);

                  if (stackedRightValue < 0) {
                    sumNeg += stackedRightValue || 0;
                  } else {
                    sumPos += stackedRightValue || 0;
                  }
                }
              }

              if (rightValue < 0) {
                return yScale.getPixelForValue(sumNeg + rightValue);
              }

              return yScale.getPixelForValue(sumPos + rightValue);
            }

            return yScale.getPixelForValue(value);
          },
          updateBezierControlPoints: function updateBezierControlPoints() {
            var me = this;
            var chart = me.chart;
            var meta = me.getMeta();
            var lineModel = meta.dataset._model;
            var area = chart.chartArea;
            var points = meta.data || [];
            var i, ilen, model, controlPoints; // Only consider points that are drawn in case the spanGaps option is used

            if (lineModel.spanGaps) {
              points = points.filter(function (pt) {
                return !pt._model.skip;
              });
            }

            function capControlPoint(pt, min, max) {
              return Math.max(Math.min(pt, max), min);
            }

            if (lineModel.cubicInterpolationMode === 'monotone') {
              helpers$1.splineCurveMonotone(points);
            } else {
              for (i = 0, ilen = points.length; i < ilen; ++i) {
                model = points[i]._model;
                controlPoints = helpers$1.splineCurve(helpers$1.previousItem(points, i)._model, model, helpers$1.nextItem(points, i)._model, lineModel.tension);
                model.controlPointPreviousX = controlPoints.previous.x;
                model.controlPointPreviousY = controlPoints.previous.y;
                model.controlPointNextX = controlPoints.next.x;
                model.controlPointNextY = controlPoints.next.y;
              }
            }

            if (chart.options.elements.line.capBezierPoints) {
              for (i = 0, ilen = points.length; i < ilen; ++i) {
                model = points[i]._model;

                if (isPointInArea(model, area)) {
                  if (i > 0 && isPointInArea(points[i - 1]._model, area)) {
                    model.controlPointPreviousX = capControlPoint(model.controlPointPreviousX, area.left, area.right);
                    model.controlPointPreviousY = capControlPoint(model.controlPointPreviousY, area.top, area.bottom);
                  }

                  if (i < points.length - 1 && isPointInArea(points[i + 1]._model, area)) {
                    model.controlPointNextX = capControlPoint(model.controlPointNextX, area.left, area.right);
                    model.controlPointNextY = capControlPoint(model.controlPointNextY, area.top, area.bottom);
                  }
                }
              }
            }
          },
          draw: function draw() {
            var me = this;
            var chart = me.chart;
            var meta = me.getMeta();
            var points = meta.data || [];
            var area = chart.chartArea;
            var canvas = chart.canvas;
            var i = 0;
            var ilen = points.length;
            var clip;

            if (me._showLine) {
              clip = meta.dataset._model.clip;
              helpers$1.canvas.clipArea(chart.ctx, {
                left: clip.left === false ? 0 : area.left - clip.left,
                right: clip.right === false ? canvas.width : area.right + clip.right,
                top: clip.top === false ? 0 : area.top - clip.top,
                bottom: clip.bottom === false ? canvas.height : area.bottom + clip.bottom
              });
              meta.dataset.draw();
              helpers$1.canvas.unclipArea(chart.ctx);
            } // Draw the points


            for (; i < ilen; ++i) {
              points[i].draw(area);
            }
          },

          /**
           * @protected
           */
          setHoverStyle: function setHoverStyle(point) {
            var model = point._model;
            var options = point._options;
            var getHoverColor = helpers$1.getHoverColor;
            point.$previousStyle = {
              backgroundColor: model.backgroundColor,
              borderColor: model.borderColor,
              borderWidth: model.borderWidth,
              radius: model.radius
            };
            model.backgroundColor = valueOrDefault$6(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));
            model.borderColor = valueOrDefault$6(options.hoverBorderColor, getHoverColor(options.borderColor));
            model.borderWidth = valueOrDefault$6(options.hoverBorderWidth, options.borderWidth);
            model.radius = valueOrDefault$6(options.hoverRadius, options.radius);
          }
        });
        var resolve$3 = helpers$1.options.resolve;

        core_defaults._set('polarArea', {
          scale: {
            type: 'radialLinear',
            angleLines: {
              display: false
            },
            gridLines: {
              circular: true
            },
            pointLabels: {
              display: false
            },
            ticks: {
              beginAtZero: true
            }
          },
          // Boolean - Whether to animate the rotation of the chart
          animation: {
            animateRotate: true,
            animateScale: true
          },
          startAngle: -0.5 * Math.PI,
          legendCallback: function legendCallback(chart) {
            var list = document.createElement('ul');
            var data = chart.data;
            var datasets = data.datasets;
            var labels = data.labels;
            var i, ilen, listItem, listItemSpan;
            list.setAttribute('class', chart.id + '-legend');

            if (datasets.length) {
              for (i = 0, ilen = datasets[0].data.length; i < ilen; ++i) {
                listItem = list.appendChild(document.createElement('li'));
                listItemSpan = listItem.appendChild(document.createElement('span'));
                listItemSpan.style.backgroundColor = datasets[0].backgroundColor[i];

                if (labels[i]) {
                  listItem.appendChild(document.createTextNode(labels[i]));
                }
              }
            }

            return list.outerHTML;
          },
          legend: {
            labels: {
              generateLabels: function generateLabels(chart) {
                var data = chart.data;

                if (data.labels.length && data.datasets.length) {
                  return data.labels.map(function (label, i) {
                    var meta = chart.getDatasetMeta(0);
                    var style = meta.controller.getStyle(i);
                    return {
                      text: label,
                      fillStyle: style.backgroundColor,
                      strokeStyle: style.borderColor,
                      lineWidth: style.borderWidth,
                      hidden: isNaN(data.datasets[0].data[i]) || meta.data[i].hidden,
                      // Extra data used for toggling the correct item
                      index: i
                    };
                  });
                }

                return [];
              }
            },
            onClick: function onClick(e, legendItem) {
              var index = legendItem.index;
              var chart = this.chart;
              var i, ilen, meta;

              for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
                meta = chart.getDatasetMeta(i);
                meta.data[index].hidden = !meta.data[index].hidden;
              }

              chart.update();
            }
          },
          // Need to override these to give a nice default
          tooltips: {
            callbacks: {
              title: function title() {
                return '';
              },
              label: function label(item, data) {
                return data.labels[item.index] + ': ' + item.yLabel;
              }
            }
          }
        });

        var controller_polarArea = core_datasetController.extend({
          dataElementType: elements.Arc,
          linkScales: helpers$1.noop,

          /**
           * @private
           */
          _dataElementOptions: ['backgroundColor', 'borderColor', 'borderWidth', 'borderAlign', 'hoverBackgroundColor', 'hoverBorderColor', 'hoverBorderWidth'],

          /**
           * @private
           */
          _getIndexScaleId: function _getIndexScaleId() {
            return this.chart.scale.id;
          },

          /**
           * @private
           */
          _getValueScaleId: function _getValueScaleId() {
            return this.chart.scale.id;
          },
          update: function update(reset) {
            var me = this;
            var dataset = me.getDataset();
            var meta = me.getMeta();
            var start = me.chart.options.startAngle || 0;
            var starts = me._starts = [];
            var angles = me._angles = [];
            var arcs = meta.data;
            var i, ilen, angle;

            me._updateRadius();

            meta.count = me.countVisibleElements();

            for (i = 0, ilen = dataset.data.length; i < ilen; i++) {
              starts[i] = start;
              angle = me._computeAngle(i);
              angles[i] = angle;
              start += angle;
            }

            for (i = 0, ilen = arcs.length; i < ilen; ++i) {
              arcs[i]._options = me._resolveDataElementOptions(arcs[i], i);
              me.updateElement(arcs[i], i, reset);
            }
          },

          /**
           * @private
           */
          _updateRadius: function _updateRadius() {
            var me = this;
            var chart = me.chart;
            var chartArea = chart.chartArea;
            var opts = chart.options;
            var minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);
            chart.outerRadius = Math.max(minSize / 2, 0);
            chart.innerRadius = Math.max(opts.cutoutPercentage ? chart.outerRadius / 100 * opts.cutoutPercentage : 1, 0);
            chart.radiusLength = (chart.outerRadius - chart.innerRadius) / chart.getVisibleDatasetCount();
            me.outerRadius = chart.outerRadius - chart.radiusLength * me.index;
            me.innerRadius = me.outerRadius - chart.radiusLength;
          },
          updateElement: function updateElement(arc, index, reset) {
            var me = this;
            var chart = me.chart;
            var dataset = me.getDataset();
            var opts = chart.options;
            var animationOpts = opts.animation;
            var scale = chart.scale;
            var labels = chart.data.labels;
            var centerX = scale.xCenter;
            var centerY = scale.yCenter; // var negHalfPI = -0.5 * Math.PI;

            var datasetStartAngle = opts.startAngle;
            var distance = arc.hidden ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);
            var startAngle = me._starts[index];
            var endAngle = startAngle + (arc.hidden ? 0 : me._angles[index]);
            var resetRadius = animationOpts.animateScale ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);
            var options = arc._options || {};
            helpers$1.extend(arc, {
              // Utility
              _datasetIndex: me.index,
              _index: index,
              _scale: scale,
              // Desired view properties
              _model: {
                backgroundColor: options.backgroundColor,
                borderColor: options.borderColor,
                borderWidth: options.borderWidth,
                borderAlign: options.borderAlign,
                x: centerX,
                y: centerY,
                innerRadius: 0,
                outerRadius: reset ? resetRadius : distance,
                startAngle: reset && animationOpts.animateRotate ? datasetStartAngle : startAngle,
                endAngle: reset && animationOpts.animateRotate ? datasetStartAngle : endAngle,
                label: helpers$1.valueAtIndexOrDefault(labels, index, labels[index])
              }
            });
            arc.pivot();
          },
          countVisibleElements: function countVisibleElements() {
            var dataset = this.getDataset();
            var meta = this.getMeta();
            var count = 0;
            helpers$1.each(meta.data, function (element, index) {
              if (!isNaN(dataset.data[index]) && !element.hidden) {
                count++;
              }
            });
            return count;
          },

          /**
           * @protected
           */
          setHoverStyle: function setHoverStyle(arc) {
            var model = arc._model;
            var options = arc._options;
            var getHoverColor = helpers$1.getHoverColor;
            var valueOrDefault = helpers$1.valueOrDefault;
            arc.$previousStyle = {
              backgroundColor: model.backgroundColor,
              borderColor: model.borderColor,
              borderWidth: model.borderWidth
            };
            model.backgroundColor = valueOrDefault(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));
            model.borderColor = valueOrDefault(options.hoverBorderColor, getHoverColor(options.borderColor));
            model.borderWidth = valueOrDefault(options.hoverBorderWidth, options.borderWidth);
          },

          /**
           * @private
           */
          _computeAngle: function _computeAngle(index) {
            var me = this;
            var count = this.getMeta().count;
            var dataset = me.getDataset();
            var meta = me.getMeta();

            if (isNaN(dataset.data[index]) || meta.data[index].hidden) {
              return 0;
            } // Scriptable options


            var context = {
              chart: me.chart,
              dataIndex: index,
              dataset: dataset,
              datasetIndex: me.index
            };
            return resolve$3([me.chart.options.elements.arc.angle, 2 * Math.PI / count], context, index);
          }
        });

        core_defaults._set('pie', helpers$1.clone(core_defaults.doughnut));

        core_defaults._set('pie', {
          cutoutPercentage: 0
        }); // Pie charts are Doughnut chart with different defaults


        var controller_pie = controller_doughnut;
        var valueOrDefault$7 = helpers$1.valueOrDefault;

        core_defaults._set('radar', {
          spanGaps: false,
          scale: {
            type: 'radialLinear'
          },
          elements: {
            line: {
              fill: 'start',
              tension: 0 // no bezier in radar

            }
          }
        });

        var controller_radar = core_datasetController.extend({
          datasetElementType: elements.Line,
          dataElementType: elements.Point,
          linkScales: helpers$1.noop,

          /**
           * @private
           */
          _datasetElementOptions: ['backgroundColor', 'borderWidth', 'borderColor', 'borderCapStyle', 'borderDash', 'borderDashOffset', 'borderJoinStyle', 'fill'],

          /**
           * @private
           */
          _dataElementOptions: {
            backgroundColor: 'pointBackgroundColor',
            borderColor: 'pointBorderColor',
            borderWidth: 'pointBorderWidth',
            hitRadius: 'pointHitRadius',
            hoverBackgroundColor: 'pointHoverBackgroundColor',
            hoverBorderColor: 'pointHoverBorderColor',
            hoverBorderWidth: 'pointHoverBorderWidth',
            hoverRadius: 'pointHoverRadius',
            pointStyle: 'pointStyle',
            radius: 'pointRadius',
            rotation: 'pointRotation'
          },

          /**
           * @private
           */
          _getIndexScaleId: function _getIndexScaleId() {
            return this.chart.scale.id;
          },

          /**
           * @private
           */
          _getValueScaleId: function _getValueScaleId() {
            return this.chart.scale.id;
          },
          update: function update(reset) {
            var me = this;
            var meta = me.getMeta();
            var line = meta.dataset;
            var points = meta.data || [];
            var scale = me.chart.scale;
            var config = me._config;
            var i, ilen; // Compatibility: If the properties are defined with only the old name, use those values

            if (config.tension !== undefined && config.lineTension === undefined) {
              config.lineTension = config.tension;
            } // Utility


            line._scale = scale;
            line._datasetIndex = me.index; // Data

            line._children = points;
            line._loop = true; // Model

            line._model = me._resolveDatasetElementOptions(line);
            line.pivot(); // Update Points

            for (i = 0, ilen = points.length; i < ilen; ++i) {
              me.updateElement(points[i], i, reset);
            } // Update bezier control points


            me.updateBezierControlPoints(); // Now pivot the point for animation

            for (i = 0, ilen = points.length; i < ilen; ++i) {
              points[i].pivot();
            }
          },
          updateElement: function updateElement(point, index, reset) {
            var me = this;
            var custom = point.custom || {};
            var dataset = me.getDataset();
            var scale = me.chart.scale;
            var pointPosition = scale.getPointPositionForValue(index, dataset.data[index]);

            var options = me._resolveDataElementOptions(point, index);

            var lineModel = me.getMeta().dataset._model;

            var x = reset ? scale.xCenter : pointPosition.x;
            var y = reset ? scale.yCenter : pointPosition.y; // Utility

            point._scale = scale;
            point._options = options;
            point._datasetIndex = me.index;
            point._index = index; // Desired view properties

            point._model = {
              x: x,
              // value not used in dataset scale, but we want a consistent API between scales
              y: y,
              skip: custom.skip || isNaN(x) || isNaN(y),
              // Appearance
              radius: options.radius,
              pointStyle: options.pointStyle,
              rotation: options.rotation,
              backgroundColor: options.backgroundColor,
              borderColor: options.borderColor,
              borderWidth: options.borderWidth,
              tension: valueOrDefault$7(custom.tension, lineModel ? lineModel.tension : 0),
              // Tooltip
              hitRadius: options.hitRadius
            };
          },

          /**
           * @private
           */
          _resolveDatasetElementOptions: function _resolveDatasetElementOptions() {
            var me = this;
            var config = me._config;
            var options = me.chart.options;

            var values = core_datasetController.prototype._resolveDatasetElementOptions.apply(me, arguments);

            values.spanGaps = valueOrDefault$7(config.spanGaps, options.spanGaps);
            values.tension = valueOrDefault$7(config.lineTension, options.elements.line.tension);
            return values;
          },
          updateBezierControlPoints: function updateBezierControlPoints() {
            var me = this;
            var meta = me.getMeta();
            var area = me.chart.chartArea;
            var points = meta.data || [];
            var i, ilen, model, controlPoints; // Only consider points that are drawn in case the spanGaps option is used

            if (meta.dataset._model.spanGaps) {
              points = points.filter(function (pt) {
                return !pt._model.skip;
              });
            }

            function capControlPoint(pt, min, max) {
              return Math.max(Math.min(pt, max), min);
            }

            for (i = 0, ilen = points.length; i < ilen; ++i) {
              model = points[i]._model;
              controlPoints = helpers$1.splineCurve(helpers$1.previousItem(points, i, true)._model, model, helpers$1.nextItem(points, i, true)._model, model.tension); // Prevent the bezier going outside of the bounds of the graph

              model.controlPointPreviousX = capControlPoint(controlPoints.previous.x, area.left, area.right);
              model.controlPointPreviousY = capControlPoint(controlPoints.previous.y, area.top, area.bottom);
              model.controlPointNextX = capControlPoint(controlPoints.next.x, area.left, area.right);
              model.controlPointNextY = capControlPoint(controlPoints.next.y, area.top, area.bottom);
            }
          },
          setHoverStyle: function setHoverStyle(point) {
            var model = point._model;
            var options = point._options;
            var getHoverColor = helpers$1.getHoverColor;
            point.$previousStyle = {
              backgroundColor: model.backgroundColor,
              borderColor: model.borderColor,
              borderWidth: model.borderWidth,
              radius: model.radius
            };
            model.backgroundColor = valueOrDefault$7(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));
            model.borderColor = valueOrDefault$7(options.hoverBorderColor, getHoverColor(options.borderColor));
            model.borderWidth = valueOrDefault$7(options.hoverBorderWidth, options.borderWidth);
            model.radius = valueOrDefault$7(options.hoverRadius, options.radius);
          }
        });

        core_defaults._set('scatter', {
          hover: {
            mode: 'single'
          },
          scales: {
            xAxes: [{
              id: 'x-axis-1',
              // need an ID so datasets can reference the scale
              type: 'linear',
              // scatter should not use a category axis
              position: 'bottom'
            }],
            yAxes: [{
              id: 'y-axis-1',
              type: 'linear',
              position: 'left'
            }]
          },
          tooltips: {
            callbacks: {
              title: function title() {
                return ''; // doesn't make sense for scatter since data are formatted as a point
              },
              label: function label(item) {
                return '(' + item.xLabel + ', ' + item.yLabel + ')';
              }
            }
          }
        });

        core_defaults._set('global', {
          datasets: {
            scatter: {
              showLine: false
            }
          }
        }); // Scatter charts use line controllers


        var controller_scatter = controller_line; // NOTE export a map in which the key represents the controller type, not
        // the class, and so must be CamelCase in order to be correctly retrieved
        // by the controller in core.controller.js (`controllers[meta.type]`).

        var controllers = {
          bar: controller_bar,
          bubble: controller_bubble,
          doughnut: controller_doughnut,
          horizontalBar: controller_horizontalBar,
          line: controller_line,
          polarArea: controller_polarArea,
          pie: controller_pie,
          radar: controller_radar,
          scatter: controller_scatter
        };
        /**
         * Helper function to get relative position for an event
         * @param {Event|IEvent} event - The event to get the position for
         * @param {Chart} chart - The chart
         * @returns {object} the event position
         */

        function getRelativePosition(e, chart) {
          if (e["native"]) {
            return {
              x: e.x,
              y: e.y
            };
          }

          return helpers$1.getRelativePosition(e, chart);
        }
        /**
         * Helper function to traverse all of the visible elements in the chart
         * @param {Chart} chart - the chart
         * @param {function} handler - the callback to execute for each visible item
         */


        function parseVisibleItems(chart, handler) {
          var metasets = chart._getSortedVisibleDatasetMetas();

          var metadata, i, j, ilen, jlen, element;

          for (i = 0, ilen = metasets.length; i < ilen; ++i) {
            metadata = metasets[i].data;

            for (j = 0, jlen = metadata.length; j < jlen; ++j) {
              element = metadata[j];

              if (!element._view.skip) {
                handler(element);
              }
            }
          }
        }
        /**
         * Helper function to get the items that intersect the event position
         * @param {ChartElement[]} items - elements to filter
         * @param {object} position - the point to be nearest to
         * @return {ChartElement[]} the nearest items
         */


        function getIntersectItems(chart, position) {
          var elements = [];
          parseVisibleItems(chart, function (element) {
            if (element.inRange(position.x, position.y)) {
              elements.push(element);
            }
          });
          return elements;
        }
        /**
         * Helper function to get the items nearest to the event position considering all visible items in teh chart
         * @param {Chart} chart - the chart to look at elements from
         * @param {object} position - the point to be nearest to
         * @param {boolean} intersect - if true, only consider items that intersect the position
         * @param {function} distanceMetric - function to provide the distance between points
         * @return {ChartElement[]} the nearest items
         */


        function getNearestItems(chart, position, intersect, distanceMetric) {
          var minDistance = Number.POSITIVE_INFINITY;
          var nearestItems = [];
          parseVisibleItems(chart, function (element) {
            if (intersect && !element.inRange(position.x, position.y)) {
              return;
            }

            var center = element.getCenterPoint();
            var distance = distanceMetric(position, center);

            if (distance < minDistance) {
              nearestItems = [element];
              minDistance = distance;
            } else if (distance === minDistance) {
              // Can have multiple items at the same distance in which case we sort by size
              nearestItems.push(element);
            }
          });
          return nearestItems;
        }
        /**
         * Get a distance metric function for two points based on the
         * axis mode setting
         * @param {string} axis - the axis mode. x|y|xy
         */


        function getDistanceMetricForAxis(axis) {
          var useX = axis.indexOf('x') !== -1;
          var useY = axis.indexOf('y') !== -1;
          return function (pt1, pt2) {
            var deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;
            var deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;
            return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));
          };
        }

        function indexMode(chart, e, options) {
          var position = getRelativePosition(e, chart); // Default axis for index mode is 'x' to match old behaviour

          options.axis = options.axis || 'x';
          var distanceMetric = getDistanceMetricForAxis(options.axis);
          var items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);
          var elements = [];

          if (!items.length) {
            return [];
          }

          chart._getSortedVisibleDatasetMetas().forEach(function (meta) {
            var element = meta.data[items[0]._index]; // don't count items that are skipped (null data)

            if (element && !element._view.skip) {
              elements.push(element);
            }
          });

          return elements;
        }
        /**
         * @interface IInteractionOptions
         */

        /**
         * If true, only consider items that intersect the point
         * @name IInterfaceOptions#boolean
         * @type Boolean
         */

        /**
         * Contains interaction related functions
         * @namespace Chart.Interaction
         */


        var core_interaction = {
          // Helper function for different modes
          modes: {
            single: function single(chart, e) {
              var position = getRelativePosition(e, chart);
              var elements = [];
              parseVisibleItems(chart, function (element) {
                if (element.inRange(position.x, position.y)) {
                  elements.push(element);
                  return elements;
                }
              });
              return elements.slice(0, 1);
            },

            /**
             * @function Chart.Interaction.modes.label
             * @deprecated since version 2.4.0
             * @todo remove at version 3
             * @private
             */
            label: indexMode,

            /**
             * Returns items at the same index. If the options.intersect parameter is true, we only return items if we intersect something
             * If the options.intersect mode is false, we find the nearest item and return the items at the same index as that item
             * @function Chart.Interaction.modes.index
             * @since v2.4.0
             * @param {Chart} chart - the chart we are returning items from
             * @param {Event} e - the event we are find things at
             * @param {IInteractionOptions} options - options to use during interaction
             * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
             */
            index: indexMode,

            /**
             * Returns items in the same dataset. If the options.intersect parameter is true, we only return items if we intersect something
             * If the options.intersect is false, we find the nearest item and return the items in that dataset
             * @function Chart.Interaction.modes.dataset
             * @param {Chart} chart - the chart we are returning items from
             * @param {Event} e - the event we are find things at
             * @param {IInteractionOptions} options - options to use during interaction
             * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
             */
            dataset: function dataset(chart, e, options) {
              var position = getRelativePosition(e, chart);
              options.axis = options.axis || 'xy';
              var distanceMetric = getDistanceMetricForAxis(options.axis);
              var items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);

              if (items.length > 0) {
                items = chart.getDatasetMeta(items[0]._datasetIndex).data;
              }

              return items;
            },

            /**
             * @function Chart.Interaction.modes.x-axis
             * @deprecated since version 2.4.0. Use index mode and intersect == true
             * @todo remove at version 3
             * @private
             */
            'x-axis': function xAxis(chart, e) {
              return indexMode(chart, e, {
                intersect: false
              });
            },

            /**
             * Point mode returns all elements that hit test based on the event position
             * of the event
             * @function Chart.Interaction.modes.intersect
             * @param {Chart} chart - the chart we are returning items from
             * @param {Event} e - the event we are find things at
             * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
             */
            point: function point(chart, e) {
              var position = getRelativePosition(e, chart);
              return getIntersectItems(chart, position);
            },

            /**
             * nearest mode returns the element closest to the point
             * @function Chart.Interaction.modes.intersect
             * @param {Chart} chart - the chart we are returning items from
             * @param {Event} e - the event we are find things at
             * @param {IInteractionOptions} options - options to use
             * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
             */
            nearest: function nearest(chart, e, options) {
              var position = getRelativePosition(e, chart);
              options.axis = options.axis || 'xy';
              var distanceMetric = getDistanceMetricForAxis(options.axis);
              return getNearestItems(chart, position, options.intersect, distanceMetric);
            },

            /**
             * x mode returns the elements that hit-test at the current x coordinate
             * @function Chart.Interaction.modes.x
             * @param {Chart} chart - the chart we are returning items from
             * @param {Event} e - the event we are find things at
             * @param {IInteractionOptions} options - options to use
             * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
             */
            x: function x(chart, e, options) {
              var position = getRelativePosition(e, chart);
              var items = [];
              var intersectsItem = false;
              parseVisibleItems(chart, function (element) {
                if (element.inXRange(position.x)) {
                  items.push(element);
                }

                if (element.inRange(position.x, position.y)) {
                  intersectsItem = true;
                }
              }); // If we want to trigger on an intersect and we don't have any items
              // that intersect the position, return nothing

              if (options.intersect && !intersectsItem) {
                items = [];
              }

              return items;
            },

            /**
             * y mode returns the elements that hit-test at the current y coordinate
             * @function Chart.Interaction.modes.y
             * @param {Chart} chart - the chart we are returning items from
             * @param {Event} e - the event we are find things at
             * @param {IInteractionOptions} options - options to use
             * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
             */
            y: function y(chart, e, options) {
              var position = getRelativePosition(e, chart);
              var items = [];
              var intersectsItem = false;
              parseVisibleItems(chart, function (element) {
                if (element.inYRange(position.y)) {
                  items.push(element);
                }

                if (element.inRange(position.x, position.y)) {
                  intersectsItem = true;
                }
              }); // If we want to trigger on an intersect and we don't have any items
              // that intersect the position, return nothing

              if (options.intersect && !intersectsItem) {
                items = [];
              }

              return items;
            }
          }
        };
        var extend = helpers$1.extend;

        function filterByPosition(array, position) {
          return helpers$1.where(array, function (v) {
            return v.pos === position;
          });
        }

        function sortByWeight(array, reverse) {
          return array.sort(function (a, b) {
            var v0 = reverse ? b : a;
            var v1 = reverse ? a : b;
            return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;
          });
        }

        function wrapBoxes(boxes) {
          var layoutBoxes = [];
          var i, ilen, box;

          for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {
            box = boxes[i];
            layoutBoxes.push({
              index: i,
              box: box,
              pos: box.position,
              horizontal: box.isHorizontal(),
              weight: box.weight
            });
          }

          return layoutBoxes;
        }

        function setLayoutDims(layouts, params) {
          var i, ilen, layout;

          for (i = 0, ilen = layouts.length; i < ilen; ++i) {
            layout = layouts[i]; // store width used instead of chartArea.w in fitBoxes

            layout.width = layout.horizontal ? layout.box.fullWidth && params.availableWidth : params.vBoxMaxWidth; // store height used instead of chartArea.h in fitBoxes

            layout.height = layout.horizontal && params.hBoxMaxHeight;
          }
        }

        function buildLayoutBoxes(boxes) {
          var layoutBoxes = wrapBoxes(boxes);
          var left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);
          var right = sortByWeight(filterByPosition(layoutBoxes, 'right'));
          var top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);
          var bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));
          return {
            leftAndTop: left.concat(top),
            rightAndBottom: right.concat(bottom),
            chartArea: filterByPosition(layoutBoxes, 'chartArea'),
            vertical: left.concat(right),
            horizontal: top.concat(bottom)
          };
        }

        function getCombinedMax(maxPadding, chartArea, a, b) {
          return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);
        }

        function updateDims(chartArea, params, layout) {
          var box = layout.box;
          var maxPadding = chartArea.maxPadding;
          var newWidth, newHeight;

          if (layout.size) {
            // this layout was already counted for, lets first reduce old size
            chartArea[layout.pos] -= layout.size;
          }

          layout.size = layout.horizontal ? box.height : box.width;
          chartArea[layout.pos] += layout.size;

          if (box.getPadding) {
            var boxPadding = box.getPadding();
            maxPadding.top = Math.max(maxPadding.top, boxPadding.top);
            maxPadding.left = Math.max(maxPadding.left, boxPadding.left);
            maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);
            maxPadding.right = Math.max(maxPadding.right, boxPadding.right);
          }

          newWidth = params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right');
          newHeight = params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom');

          if (newWidth !== chartArea.w || newHeight !== chartArea.h) {
            chartArea.w = newWidth;
            chartArea.h = newHeight; // return true if chart area changed in layout's direction

            return layout.horizontal ? newWidth !== chartArea.w : newHeight !== chartArea.h;
          }
        }

        function handleMaxPadding(chartArea) {
          var maxPadding = chartArea.maxPadding;

          function updatePos(pos) {
            var change = Math.max(maxPadding[pos] - chartArea[pos], 0);
            chartArea[pos] += change;
            return change;
          }

          chartArea.y += updatePos('top');
          chartArea.x += updatePos('left');
          updatePos('right');
          updatePos('bottom');
        }

        function getMargins(horizontal, chartArea) {
          var maxPadding = chartArea.maxPadding;

          function marginForPositions(positions) {
            var margin = {
              left: 0,
              top: 0,
              right: 0,
              bottom: 0
            };
            positions.forEach(function (pos) {
              margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);
            });
            return margin;
          }

          return horizontal ? marginForPositions(['left', 'right']) : marginForPositions(['top', 'bottom']);
        }

        function fitBoxes(boxes, chartArea, params) {
          var refitBoxes = [];
          var i, ilen, layout, box, refit, changed;

          for (i = 0, ilen = boxes.length; i < ilen; ++i) {
            layout = boxes[i];
            box = layout.box;
            box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));

            if (updateDims(chartArea, params, layout)) {
              changed = true;

              if (refitBoxes.length) {
                // Dimensions changed and there were non full width boxes before this
                // -> we have to refit those
                refit = true;
              }
            }

            if (!box.fullWidth) {
              // fullWidth boxes don't need to be re-fitted in any case
              refitBoxes.push(layout);
            }
          }

          return refit ? fitBoxes(refitBoxes, chartArea, params) || changed : changed;
        }

        function placeBoxes(boxes, chartArea, params) {
          var userPadding = params.padding;
          var x = chartArea.x;
          var y = chartArea.y;
          var i, ilen, layout, box;

          for (i = 0, ilen = boxes.length; i < ilen; ++i) {
            layout = boxes[i];
            box = layout.box;

            if (layout.horizontal) {
              box.left = box.fullWidth ? userPadding.left : chartArea.left;
              box.right = box.fullWidth ? params.outerWidth - userPadding.right : chartArea.left + chartArea.w;
              box.top = y;
              box.bottom = y + box.height;
              box.width = box.right - box.left;
              y = box.bottom;
            } else {
              box.left = x;
              box.right = x + box.width;
              box.top = chartArea.top;
              box.bottom = chartArea.top + chartArea.h;
              box.height = box.bottom - box.top;
              x = box.right;
            }
          }

          chartArea.x = x;
          chartArea.y = y;
        }

        core_defaults._set('global', {
          layout: {
            padding: {
              top: 0,
              right: 0,
              bottom: 0,
              left: 0
            }
          }
        });
        /**
         * @interface ILayoutItem
         * @prop {string} position - The position of the item in the chart layout. Possible values are
         * 'left', 'top', 'right', 'bottom', and 'chartArea'
         * @prop {number} weight - The weight used to sort the item. Higher weights are further away from the chart area
         * @prop {boolean} fullWidth - if true, and the item is horizontal, then push vertical boxes down
         * @prop {function} isHorizontal - returns true if the layout item is horizontal (ie. top or bottom)
         * @prop {function} update - Takes two parameters: width and height. Returns size of item
         * @prop {function} getPadding -  Returns an object with padding on the edges
         * @prop {number} width - Width of item. Must be valid after update()
         * @prop {number} height - Height of item. Must be valid after update()
         * @prop {number} left - Left edge of the item. Set by layout system and cannot be used in update
         * @prop {number} top - Top edge of the item. Set by layout system and cannot be used in update
         * @prop {number} right - Right edge of the item. Set by layout system and cannot be used in update
         * @prop {number} bottom - Bottom edge of the item. Set by layout system and cannot be used in update
         */
        // The layout service is very self explanatory.  It's responsible for the layout within a chart.
        // Scales, Legends and Plugins all rely on the layout service and can easily register to be placed anywhere they need
        // It is this service's responsibility of carrying out that layout.


        var core_layouts = {
          defaults: {},

          /**
           * Register a box to a chart.
           * A box is simply a reference to an object that requires layout. eg. Scales, Legend, Title.
           * @param {Chart} chart - the chart to use
           * @param {ILayoutItem} item - the item to add to be layed out
           */
          addBox: function addBox(chart, item) {
            if (!chart.boxes) {
              chart.boxes = [];
            } // initialize item with default values


            item.fullWidth = item.fullWidth || false;
            item.position = item.position || 'top';
            item.weight = item.weight || 0;

            item._layers = item._layers || function () {
              return [{
                z: 0,
                draw: function draw() {
                  item.draw.apply(item, arguments);
                }
              }];
            };

            chart.boxes.push(item);
          },

          /**
           * Remove a layoutItem from a chart
           * @param {Chart} chart - the chart to remove the box from
           * @param {ILayoutItem} layoutItem - the item to remove from the layout
           */
          removeBox: function removeBox(chart, layoutItem) {
            var index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;

            if (index !== -1) {
              chart.boxes.splice(index, 1);
            }
          },

          /**
           * Sets (or updates) options on the given `item`.
           * @param {Chart} chart - the chart in which the item lives (or will be added to)
           * @param {ILayoutItem} item - the item to configure with the given options
           * @param {object} options - the new item options.
           */
          configure: function configure(chart, item, options) {
            var props = ['fullWidth', 'position', 'weight'];
            var ilen = props.length;
            var i = 0;
            var prop;

            for (; i < ilen; ++i) {
              prop = props[i];

              if (options.hasOwnProperty(prop)) {
                item[prop] = options[prop];
              }
            }
          },

          /**
           * Fits boxes of the given chart into the given size by having each box measure itself
           * then running a fitting algorithm
           * @param {Chart} chart - the chart
           * @param {number} width - the width to fit into
           * @param {number} height - the height to fit into
           */
          update: function update(chart, width, height) {
            if (!chart) {
              return;
            }

            var layoutOptions = chart.options.layout || {};
            var padding = helpers$1.options.toPadding(layoutOptions.padding);
            var availableWidth = width - padding.width;
            var availableHeight = height - padding.height;
            var boxes = buildLayoutBoxes(chart.boxes);
            var verticalBoxes = boxes.vertical;
            var horizontalBoxes = boxes.horizontal; // Essentially we now have any number of boxes on each of the 4 sides.
            // Our canvas looks like the following.
            // The areas L1 and L2 are the left axes. R1 is the right axis, T1 is the top axis and
            // B1 is the bottom axis
            // There are also 4 quadrant-like locations (left to right instead of clockwise) reserved for chart overlays
            // These locations are single-box locations only, when trying to register a chartArea location that is already taken,
            // an error will be thrown.
            //
            // |----------------------------------------------------|
            // |                  T1 (Full Width)                   |
            // |----------------------------------------------------|
            // |    |    |                 T2                  |    |
            // |    |----|-------------------------------------|----|
            // |    |    | C1 |                           | C2 |    |
            // |    |    |----|                           |----|    |
            // |    |    |                                     |    |
            // | L1 | L2 |           ChartArea (C0)            | R1 |
            // |    |    |                                     |    |
            // |    |    |----|                           |----|    |
            // |    |    | C3 |                           | C4 |    |
            // |    |----|-------------------------------------|----|
            // |    |    |                 B1                  |    |
            // |----------------------------------------------------|
            // |                  B2 (Full Width)                   |
            // |----------------------------------------------------|
            //

            var params = Object.freeze({
              outerWidth: width,
              outerHeight: height,
              padding: padding,
              availableWidth: availableWidth,
              vBoxMaxWidth: availableWidth / 2 / verticalBoxes.length,
              hBoxMaxHeight: availableHeight / 2
            });
            var chartArea = extend({
              maxPadding: extend({}, padding),
              w: availableWidth,
              h: availableHeight,
              x: padding.left,
              y: padding.top
            }, padding);
            setLayoutDims(verticalBoxes.concat(horizontalBoxes), params); // First fit vertical boxes

            fitBoxes(verticalBoxes, chartArea, params); // Then fit horizontal boxes

            if (fitBoxes(horizontalBoxes, chartArea, params)) {
              // if the area changed, re-fit vertical boxes
              fitBoxes(verticalBoxes, chartArea, params);
            }

            handleMaxPadding(chartArea); // Finally place the boxes to correct coordinates

            placeBoxes(boxes.leftAndTop, chartArea, params); // Move to opposite side of chart

            chartArea.x += chartArea.w;
            chartArea.y += chartArea.h;
            placeBoxes(boxes.rightAndBottom, chartArea, params);
            chart.chartArea = {
              left: chartArea.left,
              top: chartArea.top,
              right: chartArea.left + chartArea.w,
              bottom: chartArea.top + chartArea.h
            }; // Finally update boxes in chartArea (radial scale for example)

            helpers$1.each(boxes.chartArea, function (layout) {
              var box = layout.box;
              extend(box, chart.chartArea);
              box.update(chartArea.w, chartArea.h);
            });
          }
        };
        /**
         * Platform fallback implementation (minimal).
         * @see https://github.com/chartjs/Chart.js/pull/4591#issuecomment-319575939
         */

        var platform_basic = {
          acquireContext: function acquireContext(item) {
            if (item && item.canvas) {
              // Support for any object associated to a canvas (including a context2d)
              item = item.canvas;
            }

            return item && item.getContext('2d') || null;
          }
        };
        var platform_dom = "/*\n * DOM element rendering detection\n * https://davidwalsh.name/detect-node-insertion\n */\n@keyframes chartjs-render-animation {\n\tfrom { opacity: 0.99; }\n\tto { opacity: 1; }\n}\n\n.chartjs-render-monitor {\n\tanimation: chartjs-render-animation 0.001s;\n}\n\n/*\n * DOM element resizing detection\n * https://github.com/marcj/css-element-queries\n */\n.chartjs-size-monitor,\n.chartjs-size-monitor-expand,\n.chartjs-size-monitor-shrink {\n\tposition: absolute;\n\tdirection: ltr;\n\tleft: 0;\n\ttop: 0;\n\tright: 0;\n\tbottom: 0;\n\toverflow: hidden;\n\tpointer-events: none;\n\tvisibility: hidden;\n\tz-index: -1;\n}\n\n.chartjs-size-monitor-expand > div {\n\tposition: absolute;\n\twidth: 1000000px;\n\theight: 1000000px;\n\tleft: 0;\n\ttop: 0;\n}\n\n.chartjs-size-monitor-shrink > div {\n\tposition: absolute;\n\twidth: 200%;\n\theight: 200%;\n\tleft: 0;\n\ttop: 0;\n}\n";
        var platform_dom$1 = /*#__PURE__*/Object.freeze({
          __proto__: null,
          'default': platform_dom
        });
        var stylesheet = getCjsExportFromNamespace(platform_dom$1);
        var EXPANDO_KEY = '$chartjs';
        var CSS_PREFIX = 'chartjs-';
        var CSS_SIZE_MONITOR = CSS_PREFIX + 'size-monitor';
        var CSS_RENDER_MONITOR = CSS_PREFIX + 'render-monitor';
        var CSS_RENDER_ANIMATION = CSS_PREFIX + 'render-animation';
        var ANIMATION_START_EVENTS = ['animationstart', 'webkitAnimationStart'];
        /**
         * DOM event types -> Chart.js event types.
         * Note: only events with different types are mapped.
         * @see https://developer.mozilla.org/en-US/docs/Web/Events
         */

        var EVENT_TYPES = {
          touchstart: 'mousedown',
          touchmove: 'mousemove',
          touchend: 'mouseup',
          pointerenter: 'mouseenter',
          pointerdown: 'mousedown',
          pointermove: 'mousemove',
          pointerup: 'mouseup',
          pointerleave: 'mouseout',
          pointerout: 'mouseout'
        };
        /**
         * The "used" size is the final value of a dimension property after all calculations have
         * been performed. This method uses the computed style of `element` but returns undefined
         * if the computed style is not expressed in pixels. That can happen in some cases where
         * `element` has a size relative to its parent and this last one is not yet displayed,
         * for example because of `display: none` on a parent node.
         * @see https://developer.mozilla.org/en-US/docs/Web/CSS/used_value
         * @returns {number} Size in pixels or undefined if unknown.
         */

        function readUsedSize(element, property) {
          var value = helpers$1.getStyle(element, property);
          var matches = value && value.match(/^(\d+)(\.\d+)?px$/);
          return matches ? Number(matches[1]) : undefined;
        }
        /**
         * Initializes the canvas style and render size without modifying the canvas display size,
         * since responsiveness is handled by the controller.resize() method. The config is used
         * to determine the aspect ratio to apply in case no explicit height has been specified.
         */


        function initCanvas(canvas, config) {
          var style = canvas.style; // NOTE(SB) canvas.getAttribute('width') !== canvas.width: in the first case it
          // returns null or '' if no explicit value has been set to the canvas attribute.

          var renderHeight = canvas.getAttribute('height');
          var renderWidth = canvas.getAttribute('width'); // Chart.js modifies some canvas values that we want to restore on destroy

          canvas[EXPANDO_KEY] = {
            initial: {
              height: renderHeight,
              width: renderWidth,
              style: {
                display: style.display,
                height: style.height,
                width: style.width
              }
            }
          }; // Force canvas to display as block to avoid extra space caused by inline
          // elements, which would interfere with the responsive resize process.
          // https://github.com/chartjs/Chart.js/issues/2538

          style.display = style.display || 'block';

          if (renderWidth === null || renderWidth === '') {
            var displayWidth = readUsedSize(canvas, 'width');

            if (displayWidth !== undefined) {
              canvas.width = displayWidth;
            }
          }

          if (renderHeight === null || renderHeight === '') {
            if (canvas.style.height === '') {
              // If no explicit render height and style height, let's apply the aspect ratio,
              // which one can be specified by the user but also by charts as default option
              // (i.e. options.aspectRatio). If not specified, use canvas aspect ratio of 2.
              canvas.height = canvas.width / (config.options.aspectRatio || 2);
            } else {
              var displayHeight = readUsedSize(canvas, 'height');

              if (displayWidth !== undefined) {
                canvas.height = displayHeight;
              }
            }
          }

          return canvas;
        }
        /**
         * Detects support for options object argument in addEventListener.
         * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support
         * @private
         */


        var supportsEventListenerOptions = function () {
          var supports = false;

          try {
            var options = Object.defineProperty({}, 'passive', {
              // eslint-disable-next-line getter-return
              get: function get() {
                supports = true;
              }
            });
            window.addEventListener('e', null, options);
          } catch (e) {// continue regardless of error
          }

          return supports;
        }(); // Default passive to true as expected by Chrome for 'touchstart' and 'touchend' events.
        // https://github.com/chartjs/Chart.js/issues/4287


        var eventListenerOptions = supportsEventListenerOptions ? {
          passive: true
        } : false;

        function addListener(node, type, listener) {
          node.addEventListener(type, listener, eventListenerOptions);
        }

        function removeListener(node, type, listener) {
          node.removeEventListener(type, listener, eventListenerOptions);
        }

        function createEvent(type, chart, x, y, nativeEvent) {
          return {
            type: type,
            chart: chart,
            "native": nativeEvent || null,
            x: x !== undefined ? x : null,
            y: y !== undefined ? y : null
          };
        }

        function fromNativeEvent(event, chart) {
          var type = EVENT_TYPES[event.type] || event.type;
          var pos = helpers$1.getRelativePosition(event, chart);
          return createEvent(type, chart, pos.x, pos.y, event);
        }

        function throttled(fn, thisArg) {
          var ticking = false;
          var args = [];
          return function () {
            args = Array.prototype.slice.call(arguments);
            thisArg = thisArg || this;

            if (!ticking) {
              ticking = true;
              helpers$1.requestAnimFrame.call(window, function () {
                ticking = false;
                fn.apply(thisArg, args);
              });
            }
          };
        }

        function createDiv(cls) {
          var el = document.createElement('div');
          el.className = cls || '';
          return el;
        } // Implementation based on https://github.com/marcj/css-element-queries


        function createResizer(handler) {
          var maxSize = 1000000; // NOTE(SB) Don't use innerHTML because it could be considered unsafe.
          // https://github.com/chartjs/Chart.js/issues/5902

          var resizer = createDiv(CSS_SIZE_MONITOR);
          var expand = createDiv(CSS_SIZE_MONITOR + '-expand');
          var shrink = createDiv(CSS_SIZE_MONITOR + '-shrink');
          expand.appendChild(createDiv());
          shrink.appendChild(createDiv());
          resizer.appendChild(expand);
          resizer.appendChild(shrink);

          resizer._reset = function () {
            expand.scrollLeft = maxSize;
            expand.scrollTop = maxSize;
            shrink.scrollLeft = maxSize;
            shrink.scrollTop = maxSize;
          };

          var onScroll = function onScroll() {
            resizer._reset();

            handler();
          };

          addListener(expand, 'scroll', onScroll.bind(expand, 'expand'));
          addListener(shrink, 'scroll', onScroll.bind(shrink, 'shrink'));
          return resizer;
        } // https://davidwalsh.name/detect-node-insertion


        function watchForRender(node, handler) {
          var expando = node[EXPANDO_KEY] || (node[EXPANDO_KEY] = {});

          var proxy = expando.renderProxy = function (e) {
            if (e.animationName === CSS_RENDER_ANIMATION) {
              handler();
            }
          };

          helpers$1.each(ANIMATION_START_EVENTS, function (type) {
            addListener(node, type, proxy);
          }); // #4737: Chrome might skip the CSS animation when the CSS_RENDER_MONITOR class
          // is removed then added back immediately (same animation frame?). Accessing the
          // `offsetParent` property will force a reflow and re-evaluate the CSS animation.
          // https://gist.github.com/paulirish/5d52fb081b3570c81e3a#box-metrics
          // https://github.com/chartjs/Chart.js/issues/4737

          expando.reflow = !!node.offsetParent;
          node.classList.add(CSS_RENDER_MONITOR);
        }

        function unwatchForRender(node) {
          var expando = node[EXPANDO_KEY] || {};
          var proxy = expando.renderProxy;

          if (proxy) {
            helpers$1.each(ANIMATION_START_EVENTS, function (type) {
              removeListener(node, type, proxy);
            });
            delete expando.renderProxy;
          }

          node.classList.remove(CSS_RENDER_MONITOR);
        }

        function addResizeListener(node, listener, chart) {
          var expando = node[EXPANDO_KEY] || (node[EXPANDO_KEY] = {}); // Let's keep track of this added resizer and thus avoid DOM query when removing it.

          var resizer = expando.resizer = createResizer(throttled(function () {
            if (expando.resizer) {
              var container = chart.options.maintainAspectRatio && node.parentNode;
              var w = container ? container.clientWidth : 0;
              listener(createEvent('resize', chart));

              if (container && container.clientWidth < w && chart.canvas) {
                // If the container size shrank during chart resize, let's assume
                // scrollbar appeared. So we resize again with the scrollbar visible -
                // effectively making chart smaller and the scrollbar hidden again.
                // Because we are inside `throttled`, and currently `ticking`, scroll
                // events are ignored during this whole 2 resize process.
                // If we assumed wrong and something else happened, we are resizing
                // twice in a frame (potential performance issue)
                listener(createEvent('resize', chart));
              }
            }
          })); // The resizer needs to be attached to the node parent, so we first need to be
          // sure that `node` is attached to the DOM before injecting the resizer element.

          watchForRender(node, function () {
            if (expando.resizer) {
              var container = node.parentNode;

              if (container && container !== resizer.parentNode) {
                container.insertBefore(resizer, container.firstChild);
              } // The container size might have changed, let's reset the resizer state.


              resizer._reset();
            }
          });
        }

        function removeResizeListener(node) {
          var expando = node[EXPANDO_KEY] || {};
          var resizer = expando.resizer;
          delete expando.resizer;
          unwatchForRender(node);

          if (resizer && resizer.parentNode) {
            resizer.parentNode.removeChild(resizer);
          }
        }
        /**
         * Injects CSS styles inline if the styles are not already present.
         * @param {HTMLDocument|ShadowRoot} rootNode - the node to contain the <style>.
         * @param {string} css - the CSS to be injected.
         */


        function injectCSS(rootNode, css) {
          // https://stackoverflow.com/q/3922139
          var expando = rootNode[EXPANDO_KEY] || (rootNode[EXPANDO_KEY] = {});

          if (!expando.containsStyles) {
            expando.containsStyles = true;
            css = '/* Chart.js */\n' + css;
            var style = document.createElement('style');
            style.setAttribute('type', 'text/css');
            style.appendChild(document.createTextNode(css));
            rootNode.appendChild(style);
          }
        }

        var platform_dom$2 = {
          /**
           * When `true`, prevents the automatic injection of the stylesheet required to
           * correctly detect when the chart is added to the DOM and then resized. This
           * switch has been added to allow external stylesheet (`dist/Chart(.min)?.js`)
           * to be manually imported to make this library compatible with any CSP.
           * See https://github.com/chartjs/Chart.js/issues/5208
           */
          disableCSSInjection: false,

          /**
           * This property holds whether this platform is enabled for the current environment.
           * Currently used by platform.js to select the proper implementation.
           * @private
           */
          _enabled: typeof window !== 'undefined' && typeof document !== 'undefined',

          /**
           * Initializes resources that depend on platform options.
           * @param {HTMLCanvasElement} canvas - The Canvas element.
           * @private
           */
          _ensureLoaded: function _ensureLoaded(canvas) {
            if (!this.disableCSSInjection) {
              // If the canvas is in a shadow DOM, then the styles must also be inserted
              // into the same shadow DOM.
              // https://github.com/chartjs/Chart.js/issues/5763
              var root = canvas.getRootNode ? canvas.getRootNode() : document;
              var targetNode = root.host ? root : document.head;
              injectCSS(targetNode, stylesheet);
            }
          },
          acquireContext: function acquireContext(item, config) {
            if (typeof item === 'string') {
              item = document.getElementById(item);
            } else if (item.length) {
              // Support for array based queries (such as jQuery)
              item = item[0];
            }

            if (item && item.canvas) {
              // Support for any object associated to a canvas (including a context2d)
              item = item.canvas;
            } // To prevent canvas fingerprinting, some add-ons undefine the getContext
            // method, for example: https://github.com/kkapsner/CanvasBlocker
            // https://github.com/chartjs/Chart.js/issues/2807


            var context = item && item.getContext && item.getContext('2d'); // `instanceof HTMLCanvasElement/CanvasRenderingContext2D` fails when the item is
            // inside an iframe or when running in a protected environment. We could guess the
            // types from their toString() value but let's keep things flexible and assume it's
            // a sufficient condition if the item has a context2D which has item as `canvas`.
            // https://github.com/chartjs/Chart.js/issues/3887
            // https://github.com/chartjs/Chart.js/issues/4102
            // https://github.com/chartjs/Chart.js/issues/4152

            if (context && context.canvas === item) {
              // Load platform resources on first chart creation, to make it possible to
              // import the library before setting platform options.
              this._ensureLoaded(item);

              initCanvas(item, config);
              return context;
            }

            return null;
          },
          releaseContext: function releaseContext(context) {
            var canvas = context.canvas;

            if (!canvas[EXPANDO_KEY]) {
              return;
            }

            var initial = canvas[EXPANDO_KEY].initial;
            ['height', 'width'].forEach(function (prop) {
              var value = initial[prop];

              if (helpers$1.isNullOrUndef(value)) {
                canvas.removeAttribute(prop);
              } else {
                canvas.setAttribute(prop, value);
              }
            });
            helpers$1.each(initial.style || {}, function (value, key) {
              canvas.style[key] = value;
            }); // The canvas render size might have been changed (and thus the state stack discarded),
            // we can't use save() and restore() to restore the initial state. So make sure that at
            // least the canvas context is reset to the default state by setting the canvas width.
            // https://www.w3.org/TR/2011/WD-html5-20110525/the-canvas-element.html
            // eslint-disable-next-line no-self-assign

            canvas.width = canvas.width;
            delete canvas[EXPANDO_KEY];
          },
          addEventListener: function addEventListener(chart, type, listener) {
            var canvas = chart.canvas;

            if (type === 'resize') {
              // Note: the resize event is not supported on all browsers.
              addResizeListener(canvas, listener, chart);
              return;
            }

            var expando = listener[EXPANDO_KEY] || (listener[EXPANDO_KEY] = {});
            var proxies = expando.proxies || (expando.proxies = {});

            var proxy = proxies[chart.id + '_' + type] = function (event) {
              listener(fromNativeEvent(event, chart));
            };

            addListener(canvas, type, proxy);
          },
          removeEventListener: function removeEventListener(chart, type, listener) {
            var canvas = chart.canvas;

            if (type === 'resize') {
              // Note: the resize event is not supported on all browsers.
              removeResizeListener(canvas);
              return;
            }

            var expando = listener[EXPANDO_KEY] || {};
            var proxies = expando.proxies || {};
            var proxy = proxies[chart.id + '_' + type];

            if (!proxy) {
              return;
            }

            removeListener(canvas, type, proxy);
          }
        }; // DEPRECATIONS

        /**
         * Provided for backward compatibility, use EventTarget.addEventListener instead.
         * EventTarget.addEventListener compatibility: Chrome, Opera 7, Safari, FF1.5+, IE9+
         * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener
         * @function Chart.helpers.addEvent
         * @deprecated since version 2.7.0
         * @todo remove at version 3
         * @private
         */

        helpers$1.addEvent = addListener;
        /**
         * Provided for backward compatibility, use EventTarget.removeEventListener instead.
         * EventTarget.removeEventListener compatibility: Chrome, Opera 7, Safari, FF1.5+, IE9+
         * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener
         * @function Chart.helpers.removeEvent
         * @deprecated since version 2.7.0
         * @todo remove at version 3
         * @private
         */

        helpers$1.removeEvent = removeListener; // @TODO Make possible to select another platform at build time.

        var implementation = platform_dom$2._enabled ? platform_dom$2 : platform_basic;
        /**
         * @namespace Chart.platform
         * @see https://chartjs.gitbooks.io/proposals/content/Platform.html
         * @since 2.4.0
         */

        var platform = helpers$1.extend({
          /**
           * @since 2.7.0
           */
          initialize: function initialize() {},

          /**
           * Called at chart construction time, returns a context2d instance implementing
           * the [W3C Canvas 2D Context API standard]{@link https://www.w3.org/TR/2dcontext/}.
           * @param {*} item - The native item from which to acquire context (platform specific)
           * @param {object} options - The chart options
           * @returns {CanvasRenderingContext2D} context2d instance
           */
          acquireContext: function acquireContext() {},

          /**
           * Called at chart destruction time, releases any resources associated to the context
           * previously returned by the acquireContext() method.
           * @param {CanvasRenderingContext2D} context - The context2d instance
           * @returns {boolean} true if the method succeeded, else false
           */
          releaseContext: function releaseContext() {},

          /**
           * Registers the specified listener on the given chart.
           * @param {Chart} chart - Chart from which to listen for event
           * @param {string} type - The ({@link IEvent}) type to listen for
           * @param {function} listener - Receives a notification (an object that implements
           * the {@link IEvent} interface) when an event of the specified type occurs.
           */
          addEventListener: function addEventListener() {},

          /**
           * Removes the specified listener previously registered with addEventListener.
           * @param {Chart} chart - Chart from which to remove the listener
           * @param {string} type - The ({@link IEvent}) type to remove
           * @param {function} listener - The listener function to remove from the event target.
           */
          removeEventListener: function removeEventListener() {}
        }, implementation);

        core_defaults._set('global', {
          plugins: {}
        });
        /**
         * The plugin service singleton
         * @namespace Chart.plugins
         * @since 2.1.0
         */


        var core_plugins = {
          /**
           * Globally registered plugins.
           * @private
           */
          _plugins: [],

          /**
           * This identifier is used to invalidate the descriptors cache attached to each chart
           * when a global plugin is registered or unregistered. In this case, the cache ID is
           * incremented and descriptors are regenerated during following API calls.
           * @private
           */
          _cacheId: 0,

          /**
           * Registers the given plugin(s) if not already registered.
           * @param {IPlugin[]|IPlugin} plugins plugin instance(s).
           */
          register: function register(plugins) {
            var p = this._plugins;
            [].concat(plugins).forEach(function (plugin) {
              if (p.indexOf(plugin) === -1) {
                p.push(plugin);
              }
            });
            this._cacheId++;
          },

          /**
           * Unregisters the given plugin(s) only if registered.
           * @param {IPlugin[]|IPlugin} plugins plugin instance(s).
           */
          unregister: function unregister(plugins) {
            var p = this._plugins;
            [].concat(plugins).forEach(function (plugin) {
              var idx = p.indexOf(plugin);

              if (idx !== -1) {
                p.splice(idx, 1);
              }
            });
            this._cacheId++;
          },

          /**
           * Remove all registered plugins.
           * @since 2.1.5
           */
          clear: function clear() {
            this._plugins = [];
            this._cacheId++;
          },

          /**
           * Returns the number of registered plugins?
           * @returns {number}
           * @since 2.1.5
           */
          count: function count() {
            return this._plugins.length;
          },

          /**
           * Returns all registered plugin instances.
           * @returns {IPlugin[]} array of plugin objects.
           * @since 2.1.5
           */
          getAll: function getAll() {
            return this._plugins;
          },

          /**
           * Calls enabled plugins for `chart` on the specified hook and with the given args.
           * This method immediately returns as soon as a plugin explicitly returns false. The
           * returned value can be used, for instance, to interrupt the current action.
           * @param {Chart} chart - The chart instance for which plugins should be called.
           * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').
           * @param {Array} [args] - Extra arguments to apply to the hook call.
           * @returns {boolean} false if any of the plugins return false, else returns true.
           */
          notify: function notify(chart, hook, args) {
            var descriptors = this.descriptors(chart);
            var ilen = descriptors.length;
            var i, descriptor, plugin, params, method;

            for (i = 0; i < ilen; ++i) {
              descriptor = descriptors[i];
              plugin = descriptor.plugin;
              method = plugin[hook];

              if (typeof method === 'function') {
                params = [chart].concat(args || []);
                params.push(descriptor.options);

                if (method.apply(plugin, params) === false) {
                  return false;
                }
              }
            }

            return true;
          },

          /**
           * Returns descriptors of enabled plugins for the given chart.
           * @returns {object[]} [{ plugin, options }]
           * @private
           */
          descriptors: function descriptors(chart) {
            var cache = chart.$plugins || (chart.$plugins = {});

            if (cache.id === this._cacheId) {
              return cache.descriptors;
            }

            var plugins = [];
            var descriptors = [];
            var config = chart && chart.config || {};
            var options = config.options && config.options.plugins || {};

            this._plugins.concat(config.plugins || []).forEach(function (plugin) {
              var idx = plugins.indexOf(plugin);

              if (idx !== -1) {
                return;
              }

              var id = plugin.id;
              var opts = options[id];

              if (opts === false) {
                return;
              }

              if (opts === true) {
                opts = helpers$1.clone(core_defaults.global.plugins[id]);
              }

              plugins.push(plugin);
              descriptors.push({
                plugin: plugin,
                options: opts || {}
              });
            });

            cache.descriptors = descriptors;
            cache.id = this._cacheId;
            return descriptors;
          },

          /**
           * Invalidates cache for the given chart: descriptors hold a reference on plugin option,
           * but in some cases, this reference can be changed by the user when updating options.
           * https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167
           * @private
           */
          _invalidate: function _invalidate(chart) {
            delete chart.$plugins;
          }
        };
        var core_scaleService = {
          // Scale registration object. Extensions can register new scale types (such as log or DB scales) and then
          // use the new chart options to grab the correct scale
          constructors: {},
          // Use a registration function so that we can move to an ES6 map when we no longer need to support
          // old browsers
          // Scale config defaults
          defaults: {},
          registerScaleType: function registerScaleType(type, scaleConstructor, scaleDefaults) {
            this.constructors[type] = scaleConstructor;
            this.defaults[type] = helpers$1.clone(scaleDefaults);
          },
          getScaleConstructor: function getScaleConstructor(type) {
            return this.constructors.hasOwnProperty(type) ? this.constructors[type] : undefined;
          },
          getScaleDefaults: function getScaleDefaults(type) {
            // Return the scale defaults merged with the global settings so that we always use the latest ones
            return this.defaults.hasOwnProperty(type) ? helpers$1.merge({}, [core_defaults.scale, this.defaults[type]]) : {};
          },
          updateScaleDefaults: function updateScaleDefaults(type, additions) {
            var me = this;

            if (me.defaults.hasOwnProperty(type)) {
              me.defaults[type] = helpers$1.extend(me.defaults[type], additions);
            }
          },
          addScalesToLayout: function addScalesToLayout(chart) {
            // Adds each scale to the chart.boxes array to be sized accordingly
            helpers$1.each(chart.scales, function (scale) {
              // Set ILayoutItem parameters for backwards compatibility
              scale.fullWidth = scale.options.fullWidth;
              scale.position = scale.options.position;
              scale.weight = scale.options.weight;
              core_layouts.addBox(chart, scale);
            });
          }
        };
        var valueOrDefault$8 = helpers$1.valueOrDefault;
        var getRtlHelper = helpers$1.rtl.getRtlAdapter;

        core_defaults._set('global', {
          tooltips: {
            enabled: true,
            custom: null,
            mode: 'nearest',
            position: 'average',
            intersect: true,
            backgroundColor: 'rgba(0,0,0,0.8)',
            titleFontStyle: 'bold',
            titleSpacing: 2,
            titleMarginBottom: 6,
            titleFontColor: '#fff',
            titleAlign: 'left',
            bodySpacing: 2,
            bodyFontColor: '#fff',
            bodyAlign: 'left',
            footerFontStyle: 'bold',
            footerSpacing: 2,
            footerMarginTop: 6,
            footerFontColor: '#fff',
            footerAlign: 'left',
            yPadding: 6,
            xPadding: 6,
            caretPadding: 2,
            caretSize: 5,
            cornerRadius: 6,
            multiKeyBackground: '#fff',
            displayColors: true,
            borderColor: 'rgba(0,0,0,0)',
            borderWidth: 0,
            callbacks: {
              // Args are: (tooltipItems, data)
              beforeTitle: helpers$1.noop,
              title: function title(tooltipItems, data) {
                var title = '';
                var labels = data.labels;
                var labelCount = labels ? labels.length : 0;

                if (tooltipItems.length > 0) {
                  var item = tooltipItems[0];

                  if (item.label) {
                    title = item.label;
                  } else if (item.xLabel) {
                    title = item.xLabel;
                  } else if (labelCount > 0 && item.index < labelCount) {
                    title = labels[item.index];
                  }
                }

                return title;
              },
              afterTitle: helpers$1.noop,
              // Args are: (tooltipItems, data)
              beforeBody: helpers$1.noop,
              // Args are: (tooltipItem, data)
              beforeLabel: helpers$1.noop,
              label: function label(tooltipItem, data) {
                var label = data.datasets[tooltipItem.datasetIndex].label || '';

                if (label) {
                  label += ': ';
                }

                if (!helpers$1.isNullOrUndef(tooltipItem.value)) {
                  label += tooltipItem.value;
                } else {
                  label += tooltipItem.yLabel;
                }

                return label;
              },
              labelColor: function labelColor(tooltipItem, chart) {
                var meta = chart.getDatasetMeta(tooltipItem.datasetIndex);
                var activeElement = meta.data[tooltipItem.index];
                var view = activeElement._view;
                return {
                  borderColor: view.borderColor,
                  backgroundColor: view.backgroundColor
                };
              },
              labelTextColor: function labelTextColor() {
                return this._options.bodyFontColor;
              },
              afterLabel: helpers$1.noop,
              // Args are: (tooltipItems, data)
              afterBody: helpers$1.noop,
              // Args are: (tooltipItems, data)
              beforeFooter: helpers$1.noop,
              footer: helpers$1.noop,
              afterFooter: helpers$1.noop
            }
          }
        });

        var positioners = {
          /**
           * Average mode places the tooltip at the average position of the elements shown
           * @function Chart.Tooltip.positioners.average
           * @param elements {ChartElement[]} the elements being displayed in the tooltip
           * @returns {object} tooltip position
           */
          average: function average(elements) {
            if (!elements.length) {
              return false;
            }

            var i, len;
            var x = 0;
            var y = 0;
            var count = 0;

            for (i = 0, len = elements.length; i < len; ++i) {
              var el = elements[i];

              if (el && el.hasValue()) {
                var pos = el.tooltipPosition();
                x += pos.x;
                y += pos.y;
                ++count;
              }
            }

            return {
              x: x / count,
              y: y / count
            };
          },

          /**
           * Gets the tooltip position nearest of the item nearest to the event position
           * @function Chart.Tooltip.positioners.nearest
           * @param elements {Chart.Element[]} the tooltip elements
           * @param eventPosition {object} the position of the event in canvas coordinates
           * @returns {object} the tooltip position
           */
          nearest: function nearest(elements, eventPosition) {
            var x = eventPosition.x;
            var y = eventPosition.y;
            var minDistance = Number.POSITIVE_INFINITY;
            var i, len, nearestElement;

            for (i = 0, len = elements.length; i < len; ++i) {
              var el = elements[i];

              if (el && el.hasValue()) {
                var center = el.getCenterPoint();
                var d = helpers$1.distanceBetweenPoints(eventPosition, center);

                if (d < minDistance) {
                  minDistance = d;
                  nearestElement = el;
                }
              }
            }

            if (nearestElement) {
              var tp = nearestElement.tooltipPosition();
              x = tp.x;
              y = tp.y;
            }

            return {
              x: x,
              y: y
            };
          }
        }; // Helper to push or concat based on if the 2nd parameter is an array or not

        function pushOrConcat(base, toPush) {
          if (toPush) {
            if (helpers$1.isArray(toPush)) {
              // base = base.concat(toPush);
              Array.prototype.push.apply(base, toPush);
            } else {
              base.push(toPush);
            }
          }

          return base;
        }
        /**
         * Returns array of strings split by newline
         * @param {string} value - The value to split by newline.
         * @returns {string[]} value if newline present - Returned from String split() method
         * @function
         */


        function splitNewlines(str) {
          if ((typeof str === 'string' || str instanceof String) && str.indexOf('\n') > -1) {
            return str.split('\n');
          }

          return str;
        }
        /**
         * Private helper to create a tooltip item model
         * @param element - the chart element (point, arc, bar) to create the tooltip item for
         * @return new tooltip item
         */


        function createTooltipItem(element) {
          var xScale = element._xScale;
          var yScale = element._yScale || element._scale; // handle radar || polarArea charts

          var index = element._index;
          var datasetIndex = element._datasetIndex;

          var controller = element._chart.getDatasetMeta(datasetIndex).controller;

          var indexScale = controller._getIndexScale();

          var valueScale = controller._getValueScale();

          return {
            xLabel: xScale ? xScale.getLabelForIndex(index, datasetIndex) : '',
            yLabel: yScale ? yScale.getLabelForIndex(index, datasetIndex) : '',
            label: indexScale ? '' + indexScale.getLabelForIndex(index, datasetIndex) : '',
            value: valueScale ? '' + valueScale.getLabelForIndex(index, datasetIndex) : '',
            index: index,
            datasetIndex: datasetIndex,
            x: element._model.x,
            y: element._model.y
          };
        }
        /**
         * Helper to get the reset model for the tooltip
         * @param tooltipOpts {object} the tooltip options
         */


        function getBaseModel(tooltipOpts) {
          var globalDefaults = core_defaults.global;
          return {
            // Positioning
            xPadding: tooltipOpts.xPadding,
            yPadding: tooltipOpts.yPadding,
            xAlign: tooltipOpts.xAlign,
            yAlign: tooltipOpts.yAlign,
            // Drawing direction and text direction
            rtl: tooltipOpts.rtl,
            textDirection: tooltipOpts.textDirection,
            // Body
            bodyFontColor: tooltipOpts.bodyFontColor,
            _bodyFontFamily: valueOrDefault$8(tooltipOpts.bodyFontFamily, globalDefaults.defaultFontFamily),
            _bodyFontStyle: valueOrDefault$8(tooltipOpts.bodyFontStyle, globalDefaults.defaultFontStyle),
            _bodyAlign: tooltipOpts.bodyAlign,
            bodyFontSize: valueOrDefault$8(tooltipOpts.bodyFontSize, globalDefaults.defaultFontSize),
            bodySpacing: tooltipOpts.bodySpacing,
            // Title
            titleFontColor: tooltipOpts.titleFontColor,
            _titleFontFamily: valueOrDefault$8(tooltipOpts.titleFontFamily, globalDefaults.defaultFontFamily),
            _titleFontStyle: valueOrDefault$8(tooltipOpts.titleFontStyle, globalDefaults.defaultFontStyle),
            titleFontSize: valueOrDefault$8(tooltipOpts.titleFontSize, globalDefaults.defaultFontSize),
            _titleAlign: tooltipOpts.titleAlign,
            titleSpacing: tooltipOpts.titleSpacing,
            titleMarginBottom: tooltipOpts.titleMarginBottom,
            // Footer
            footerFontColor: tooltipOpts.footerFontColor,
            _footerFontFamily: valueOrDefault$8(tooltipOpts.footerFontFamily, globalDefaults.defaultFontFamily),
            _footerFontStyle: valueOrDefault$8(tooltipOpts.footerFontStyle, globalDefaults.defaultFontStyle),
            footerFontSize: valueOrDefault$8(tooltipOpts.footerFontSize, globalDefaults.defaultFontSize),
            _footerAlign: tooltipOpts.footerAlign,
            footerSpacing: tooltipOpts.footerSpacing,
            footerMarginTop: tooltipOpts.footerMarginTop,
            // Appearance
            caretSize: tooltipOpts.caretSize,
            cornerRadius: tooltipOpts.cornerRadius,
            backgroundColor: tooltipOpts.backgroundColor,
            opacity: 0,
            legendColorBackground: tooltipOpts.multiKeyBackground,
            displayColors: tooltipOpts.displayColors,
            borderColor: tooltipOpts.borderColor,
            borderWidth: tooltipOpts.borderWidth
          };
        }
        /**
         * Get the size of the tooltip
         */


        function getTooltipSize(tooltip, model) {
          var ctx = tooltip._chart.ctx;
          var height = model.yPadding * 2; // Tooltip Padding

          var width = 0; // Count of all lines in the body

          var body = model.body;
          var combinedBodyLength = body.reduce(function (count, bodyItem) {
            return count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length;
          }, 0);
          combinedBodyLength += model.beforeBody.length + model.afterBody.length;
          var titleLineCount = model.title.length;
          var footerLineCount = model.footer.length;
          var titleFontSize = model.titleFontSize;
          var bodyFontSize = model.bodyFontSize;
          var footerFontSize = model.footerFontSize;
          height += titleLineCount * titleFontSize; // Title Lines

          height += titleLineCount ? (titleLineCount - 1) * model.titleSpacing : 0; // Title Line Spacing

          height += titleLineCount ? model.titleMarginBottom : 0; // Title's bottom Margin

          height += combinedBodyLength * bodyFontSize; // Body Lines

          height += combinedBodyLength ? (combinedBodyLength - 1) * model.bodySpacing : 0; // Body Line Spacing

          height += footerLineCount ? model.footerMarginTop : 0; // Footer Margin

          height += footerLineCount * footerFontSize; // Footer Lines

          height += footerLineCount ? (footerLineCount - 1) * model.footerSpacing : 0; // Footer Line Spacing
          // Title width

          var widthPadding = 0;

          var maxLineWidth = function maxLineWidth(line) {
            width = Math.max(width, ctx.measureText(line).width + widthPadding);
          };

          ctx.font = helpers$1.fontString(titleFontSize, model._titleFontStyle, model._titleFontFamily);
          helpers$1.each(model.title, maxLineWidth); // Body width

          ctx.font = helpers$1.fontString(bodyFontSize, model._bodyFontStyle, model._bodyFontFamily);
          helpers$1.each(model.beforeBody.concat(model.afterBody), maxLineWidth); // Body lines may include some extra width due to the color box

          widthPadding = model.displayColors ? bodyFontSize + 2 : 0;
          helpers$1.each(body, function (bodyItem) {
            helpers$1.each(bodyItem.before, maxLineWidth);
            helpers$1.each(bodyItem.lines, maxLineWidth);
            helpers$1.each(bodyItem.after, maxLineWidth);
          }); // Reset back to 0

          widthPadding = 0; // Footer width

          ctx.font = helpers$1.fontString(footerFontSize, model._footerFontStyle, model._footerFontFamily);
          helpers$1.each(model.footer, maxLineWidth); // Add padding

          width += 2 * model.xPadding;
          return {
            width: width,
            height: height
          };
        }
        /**
         * Helper to get the alignment of a tooltip given the size
         */


        function determineAlignment(tooltip, size) {
          var model = tooltip._model;
          var chart = tooltip._chart;
          var chartArea = tooltip._chart.chartArea;
          var xAlign = 'center';
          var yAlign = 'center';

          if (model.y < size.height) {
            yAlign = 'top';
          } else if (model.y > chart.height - size.height) {
            yAlign = 'bottom';
          }

          var lf, rf; // functions to determine left, right alignment

          var olf, orf; // functions to determine if left/right alignment causes tooltip to go outside chart

          var yf; // function to get the y alignment if the tooltip goes outside of the left or right edges

          var midX = (chartArea.left + chartArea.right) / 2;
          var midY = (chartArea.top + chartArea.bottom) / 2;

          if (yAlign === 'center') {
            lf = function lf(x) {
              return x <= midX;
            };

            rf = function rf(x) {
              return x > midX;
            };
          } else {
            lf = function lf(x) {
              return x <= size.width / 2;
            };

            rf = function rf(x) {
              return x >= chart.width - size.width / 2;
            };
          }

          olf = function olf(x) {
            return x + size.width + model.caretSize + model.caretPadding > chart.width;
          };

          orf = function orf(x) {
            return x - size.width - model.caretSize - model.caretPadding < 0;
          };

          yf = function yf(y) {
            return y <= midY ? 'top' : 'bottom';
          };

          if (lf(model.x)) {
            xAlign = 'left'; // Is tooltip too wide and goes over the right side of the chart.?

            if (olf(model.x)) {
              xAlign = 'center';
              yAlign = yf(model.y);
            }
          } else if (rf(model.x)) {
            xAlign = 'right'; // Is tooltip too wide and goes outside left edge of canvas?

            if (orf(model.x)) {
              xAlign = 'center';
              yAlign = yf(model.y);
            }
          }

          var opts = tooltip._options;
          return {
            xAlign: opts.xAlign ? opts.xAlign : xAlign,
            yAlign: opts.yAlign ? opts.yAlign : yAlign
          };
        }
        /**
         * Helper to get the location a tooltip needs to be placed at given the initial position (via the vm) and the size and alignment
         */


        function getBackgroundPoint(vm, size, alignment, chart) {
          // Background Position
          var x = vm.x;
          var y = vm.y;
          var caretSize = vm.caretSize;
          var caretPadding = vm.caretPadding;
          var cornerRadius = vm.cornerRadius;
          var xAlign = alignment.xAlign;
          var yAlign = alignment.yAlign;
          var paddingAndSize = caretSize + caretPadding;
          var radiusAndPadding = cornerRadius + caretPadding;

          if (xAlign === 'right') {
            x -= size.width;
          } else if (xAlign === 'center') {
            x -= size.width / 2;

            if (x + size.width > chart.width) {
              x = chart.width - size.width;
            }

            if (x < 0) {
              x = 0;
            }
          }

          if (yAlign === 'top') {
            y += paddingAndSize;
          } else if (yAlign === 'bottom') {
            y -= size.height + paddingAndSize;
          } else {
            y -= size.height / 2;
          }

          if (yAlign === 'center') {
            if (xAlign === 'left') {
              x += paddingAndSize;
            } else if (xAlign === 'right') {
              x -= paddingAndSize;
            }
          } else if (xAlign === 'left') {
            x -= radiusAndPadding;
          } else if (xAlign === 'right') {
            x += radiusAndPadding;
          }

          return {
            x: x,
            y: y
          };
        }

        function getAlignedX(vm, align) {
          return align === 'center' ? vm.x + vm.width / 2 : align === 'right' ? vm.x + vm.width - vm.xPadding : vm.x + vm.xPadding;
        }
        /**
         * Helper to build before and after body lines
         */


        function getBeforeAfterBodyLines(callback) {
          return pushOrConcat([], splitNewlines(callback));
        }

        var exports$4 = core_element.extend({
          initialize: function initialize() {
            this._model = getBaseModel(this._options);
            this._lastActive = [];
          },
          // Get the title
          // Args are: (tooltipItem, data)
          getTitle: function getTitle() {
            var me = this;
            var opts = me._options;
            var callbacks = opts.callbacks;
            var beforeTitle = callbacks.beforeTitle.apply(me, arguments);
            var title = callbacks.title.apply(me, arguments);
            var afterTitle = callbacks.afterTitle.apply(me, arguments);
            var lines = [];
            lines = pushOrConcat(lines, splitNewlines(beforeTitle));
            lines = pushOrConcat(lines, splitNewlines(title));
            lines = pushOrConcat(lines, splitNewlines(afterTitle));
            return lines;
          },
          // Args are: (tooltipItem, data)
          getBeforeBody: function getBeforeBody() {
            return getBeforeAfterBodyLines(this._options.callbacks.beforeBody.apply(this, arguments));
          },
          // Args are: (tooltipItem, data)
          getBody: function getBody(tooltipItems, data) {
            var me = this;
            var callbacks = me._options.callbacks;
            var bodyItems = [];
            helpers$1.each(tooltipItems, function (tooltipItem) {
              var bodyItem = {
                before: [],
                lines: [],
                after: []
              };
              pushOrConcat(bodyItem.before, splitNewlines(callbacks.beforeLabel.call(me, tooltipItem, data)));
              pushOrConcat(bodyItem.lines, callbacks.label.call(me, tooltipItem, data));
              pushOrConcat(bodyItem.after, splitNewlines(callbacks.afterLabel.call(me, tooltipItem, data)));
              bodyItems.push(bodyItem);
            });
            return bodyItems;
          },
          // Args are: (tooltipItem, data)
          getAfterBody: function getAfterBody() {
            return getBeforeAfterBodyLines(this._options.callbacks.afterBody.apply(this, arguments));
          },
          // Get the footer and beforeFooter and afterFooter lines
          // Args are: (tooltipItem, data)
          getFooter: function getFooter() {
            var me = this;
            var callbacks = me._options.callbacks;
            var beforeFooter = callbacks.beforeFooter.apply(me, arguments);
            var footer = callbacks.footer.apply(me, arguments);
            var afterFooter = callbacks.afterFooter.apply(me, arguments);
            var lines = [];
            lines = pushOrConcat(lines, splitNewlines(beforeFooter));
            lines = pushOrConcat(lines, splitNewlines(footer));
            lines = pushOrConcat(lines, splitNewlines(afterFooter));
            return lines;
          },
          update: function update(changed) {
            var me = this;
            var opts = me._options; // Need to regenerate the model because its faster than using extend and it is necessary due to the optimization in Chart.Element.transition
            // that does _view = _model if ease === 1. This causes the 2nd tooltip update to set properties in both the view and model at the same time
            // which breaks any animations.

            var existingModel = me._model;
            var model = me._model = getBaseModel(opts);
            var active = me._active;
            var data = me._data; // In the case where active.length === 0 we need to keep these at existing values for good animations

            var alignment = {
              xAlign: existingModel.xAlign,
              yAlign: existingModel.yAlign
            };
            var backgroundPoint = {
              x: existingModel.x,
              y: existingModel.y
            };
            var tooltipSize = {
              width: existingModel.width,
              height: existingModel.height
            };
            var tooltipPosition = {
              x: existingModel.caretX,
              y: existingModel.caretY
            };
            var i, len;

            if (active.length) {
              model.opacity = 1;
              var labelColors = [];
              var labelTextColors = [];
              tooltipPosition = positioners[opts.position].call(me, active, me._eventPosition);
              var tooltipItems = [];

              for (i = 0, len = active.length; i < len; ++i) {
                tooltipItems.push(createTooltipItem(active[i]));
              } // If the user provided a filter function, use it to modify the tooltip items


              if (opts.filter) {
                tooltipItems = tooltipItems.filter(function (a) {
                  return opts.filter(a, data);
                });
              } // If the user provided a sorting function, use it to modify the tooltip items


              if (opts.itemSort) {
                tooltipItems = tooltipItems.sort(function (a, b) {
                  return opts.itemSort(a, b, data);
                });
              } // Determine colors for boxes


              helpers$1.each(tooltipItems, function (tooltipItem) {
                labelColors.push(opts.callbacks.labelColor.call(me, tooltipItem, me._chart));
                labelTextColors.push(opts.callbacks.labelTextColor.call(me, tooltipItem, me._chart));
              }); // Build the Text Lines

              model.title = me.getTitle(tooltipItems, data);
              model.beforeBody = me.getBeforeBody(tooltipItems, data);
              model.body = me.getBody(tooltipItems, data);
              model.afterBody = me.getAfterBody(tooltipItems, data);
              model.footer = me.getFooter(tooltipItems, data); // Initial positioning and colors

              model.x = tooltipPosition.x;
              model.y = tooltipPosition.y;
              model.caretPadding = opts.caretPadding;
              model.labelColors = labelColors;
              model.labelTextColors = labelTextColors; // data points

              model.dataPoints = tooltipItems; // We need to determine alignment of the tooltip

              tooltipSize = getTooltipSize(this, model);
              alignment = determineAlignment(this, tooltipSize); // Final Size and Position

              backgroundPoint = getBackgroundPoint(model, tooltipSize, alignment, me._chart);
            } else {
              model.opacity = 0;
            }

            model.xAlign = alignment.xAlign;
            model.yAlign = alignment.yAlign;
            model.x = backgroundPoint.x;
            model.y = backgroundPoint.y;
            model.width = tooltipSize.width;
            model.height = tooltipSize.height; // Point where the caret on the tooltip points to

            model.caretX = tooltipPosition.x;
            model.caretY = tooltipPosition.y;
            me._model = model;

            if (changed && opts.custom) {
              opts.custom.call(me, model);
            }

            return me;
          },
          drawCaret: function drawCaret(tooltipPoint, size) {
            var ctx = this._chart.ctx;
            var vm = this._view;
            var caretPosition = this.getCaretPosition(tooltipPoint, size, vm);
            ctx.lineTo(caretPosition.x1, caretPosition.y1);
            ctx.lineTo(caretPosition.x2, caretPosition.y2);
            ctx.lineTo(caretPosition.x3, caretPosition.y3);
          },
          getCaretPosition: function getCaretPosition(tooltipPoint, size, vm) {
            var x1, x2, x3, y1, y2, y3;
            var caretSize = vm.caretSize;
            var cornerRadius = vm.cornerRadius;
            var xAlign = vm.xAlign;
            var yAlign = vm.yAlign;
            var ptX = tooltipPoint.x;
            var ptY = tooltipPoint.y;
            var width = size.width;
            var height = size.height;

            if (yAlign === 'center') {
              y2 = ptY + height / 2;

              if (xAlign === 'left') {
                x1 = ptX;
                x2 = x1 - caretSize;
                x3 = x1;
                y1 = y2 + caretSize;
                y3 = y2 - caretSize;
              } else {
                x1 = ptX + width;
                x2 = x1 + caretSize;
                x3 = x1;
                y1 = y2 - caretSize;
                y3 = y2 + caretSize;
              }
            } else {
              if (xAlign === 'left') {
                x2 = ptX + cornerRadius + caretSize;
                x1 = x2 - caretSize;
                x3 = x2 + caretSize;
              } else if (xAlign === 'right') {
                x2 = ptX + width - cornerRadius - caretSize;
                x1 = x2 - caretSize;
                x3 = x2 + caretSize;
              } else {
                x2 = vm.caretX;
                x1 = x2 - caretSize;
                x3 = x2 + caretSize;
              }

              if (yAlign === 'top') {
                y1 = ptY;
                y2 = y1 - caretSize;
                y3 = y1;
              } else {
                y1 = ptY + height;
                y2 = y1 + caretSize;
                y3 = y1; // invert drawing order

                var tmp = x3;
                x3 = x1;
                x1 = tmp;
              }
            }

            return {
              x1: x1,
              x2: x2,
              x3: x3,
              y1: y1,
              y2: y2,
              y3: y3
            };
          },
          drawTitle: function drawTitle(pt, vm, ctx) {
            var title = vm.title;
            var length = title.length;
            var titleFontSize, titleSpacing, i;

            if (length) {
              var rtlHelper = getRtlHelper(vm.rtl, vm.x, vm.width);
              pt.x = getAlignedX(vm, vm._titleAlign);
              ctx.textAlign = rtlHelper.textAlign(vm._titleAlign);
              ctx.textBaseline = 'middle';
              titleFontSize = vm.titleFontSize;
              titleSpacing = vm.titleSpacing;
              ctx.fillStyle = vm.titleFontColor;
              ctx.font = helpers$1.fontString(titleFontSize, vm._titleFontStyle, vm._titleFontFamily);

              for (i = 0; i < length; ++i) {
                ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFontSize / 2);
                pt.y += titleFontSize + titleSpacing; // Line Height and spacing

                if (i + 1 === length) {
                  pt.y += vm.titleMarginBottom - titleSpacing; // If Last, add margin, remove spacing
                }
              }
            }
          },
          drawBody: function drawBody(pt, vm, ctx) {
            var bodyFontSize = vm.bodyFontSize;
            var bodySpacing = vm.bodySpacing;
            var bodyAlign = vm._bodyAlign;
            var body = vm.body;
            var drawColorBoxes = vm.displayColors;
            var xLinePadding = 0;
            var colorX = drawColorBoxes ? getAlignedX(vm, 'left') : 0;
            var rtlHelper = getRtlHelper(vm.rtl, vm.x, vm.width);

            var fillLineOfText = function fillLineOfText(line) {
              ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyFontSize / 2);
              pt.y += bodyFontSize + bodySpacing;
            };

            var bodyItem, textColor, labelColors, lines, i, j, ilen, jlen;
            var bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);
            ctx.textAlign = bodyAlign;
            ctx.textBaseline = 'middle';
            ctx.font = helpers$1.fontString(bodyFontSize, vm._bodyFontStyle, vm._bodyFontFamily);
            pt.x = getAlignedX(vm, bodyAlignForCalculation); // Before body lines

            ctx.fillStyle = vm.bodyFontColor;
            helpers$1.each(vm.beforeBody, fillLineOfText);
            xLinePadding = drawColorBoxes && bodyAlignForCalculation !== 'right' ? bodyAlign === 'center' ? bodyFontSize / 2 + 1 : bodyFontSize + 2 : 0; // Draw body lines now

            for (i = 0, ilen = body.length; i < ilen; ++i) {
              bodyItem = body[i];
              textColor = vm.labelTextColors[i];
              labelColors = vm.labelColors[i];
              ctx.fillStyle = textColor;
              helpers$1.each(bodyItem.before, fillLineOfText);
              lines = bodyItem.lines;

              for (j = 0, jlen = lines.length; j < jlen; ++j) {
                // Draw Legend-like boxes if needed
                if (drawColorBoxes) {
                  var rtlColorX = rtlHelper.x(colorX); // Fill a white rect so that colours merge nicely if the opacity is < 1

                  ctx.fillStyle = vm.legendColorBackground;
                  ctx.fillRect(rtlHelper.leftForLtr(rtlColorX, bodyFontSize), pt.y, bodyFontSize, bodyFontSize); // Border

                  ctx.lineWidth = 1;
                  ctx.strokeStyle = labelColors.borderColor;
                  ctx.strokeRect(rtlHelper.leftForLtr(rtlColorX, bodyFontSize), pt.y, bodyFontSize, bodyFontSize); // Inner square

                  ctx.fillStyle = labelColors.backgroundColor;
                  ctx.fillRect(rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), bodyFontSize - 2), pt.y + 1, bodyFontSize - 2, bodyFontSize - 2);
                  ctx.fillStyle = textColor;
                }

                fillLineOfText(lines[j]);
              }

              helpers$1.each(bodyItem.after, fillLineOfText);
            } // Reset back to 0 for after body


            xLinePadding = 0; // After body lines

            helpers$1.each(vm.afterBody, fillLineOfText);
            pt.y -= bodySpacing; // Remove last body spacing
          },
          drawFooter: function drawFooter(pt, vm, ctx) {
            var footer = vm.footer;
            var length = footer.length;
            var footerFontSize, i;

            if (length) {
              var rtlHelper = getRtlHelper(vm.rtl, vm.x, vm.width);
              pt.x = getAlignedX(vm, vm._footerAlign);
              pt.y += vm.footerMarginTop;
              ctx.textAlign = rtlHelper.textAlign(vm._footerAlign);
              ctx.textBaseline = 'middle';
              footerFontSize = vm.footerFontSize;
              ctx.fillStyle = vm.footerFontColor;
              ctx.font = helpers$1.fontString(footerFontSize, vm._footerFontStyle, vm._footerFontFamily);

              for (i = 0; i < length; ++i) {
                ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFontSize / 2);
                pt.y += footerFontSize + vm.footerSpacing;
              }
            }
          },
          drawBackground: function drawBackground(pt, vm, ctx, tooltipSize) {
            ctx.fillStyle = vm.backgroundColor;
            ctx.strokeStyle = vm.borderColor;
            ctx.lineWidth = vm.borderWidth;
            var xAlign = vm.xAlign;
            var yAlign = vm.yAlign;
            var x = pt.x;
            var y = pt.y;
            var width = tooltipSize.width;
            var height = tooltipSize.height;
            var radius = vm.cornerRadius;
            ctx.beginPath();
            ctx.moveTo(x + radius, y);

            if (yAlign === 'top') {
              this.drawCaret(pt, tooltipSize);
            }

            ctx.lineTo(x + width - radius, y);
            ctx.quadraticCurveTo(x + width, y, x + width, y + radius);

            if (yAlign === 'center' && xAlign === 'right') {
              this.drawCaret(pt, tooltipSize);
            }

            ctx.lineTo(x + width, y + height - radius);
            ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);

            if (yAlign === 'bottom') {
              this.drawCaret(pt, tooltipSize);
            }

            ctx.lineTo(x + radius, y + height);
            ctx.quadraticCurveTo(x, y + height, x, y + height - radius);

            if (yAlign === 'center' && xAlign === 'left') {
              this.drawCaret(pt, tooltipSize);
            }

            ctx.lineTo(x, y + radius);
            ctx.quadraticCurveTo(x, y, x + radius, y);
            ctx.closePath();
            ctx.fill();

            if (vm.borderWidth > 0) {
              ctx.stroke();
            }
          },
          draw: function draw() {
            var ctx = this._chart.ctx;
            var vm = this._view;

            if (vm.opacity === 0) {
              return;
            }

            var tooltipSize = {
              width: vm.width,
              height: vm.height
            };
            var pt = {
              x: vm.x,
              y: vm.y
            }; // IE11/Edge does not like very small opacities, so snap to 0

            var opacity = Math.abs(vm.opacity < 1e-3) ? 0 : vm.opacity; // Truthy/falsey value for empty tooltip

            var hasTooltipContent = vm.title.length || vm.beforeBody.length || vm.body.length || vm.afterBody.length || vm.footer.length;

            if (this._options.enabled && hasTooltipContent) {
              ctx.save();
              ctx.globalAlpha = opacity; // Draw Background

              this.drawBackground(pt, vm, ctx, tooltipSize); // Draw Title, Body, and Footer

              pt.y += vm.yPadding;
              helpers$1.rtl.overrideTextDirection(ctx, vm.textDirection); // Titles

              this.drawTitle(pt, vm, ctx); // Body

              this.drawBody(pt, vm, ctx); // Footer

              this.drawFooter(pt, vm, ctx);
              helpers$1.rtl.restoreTextDirection(ctx, vm.textDirection);
              ctx.restore();
            }
          },

          /**
           * Handle an event
           * @private
           * @param {IEvent} event - The event to handle
           * @returns {boolean} true if the tooltip changed
           */
          handleEvent: function handleEvent(e) {
            var me = this;
            var options = me._options;
            var changed = false;
            me._lastActive = me._lastActive || []; // Find Active Elements for tooltips

            if (e.type === 'mouseout') {
              me._active = [];
            } else {
              me._active = me._chart.getElementsAtEventForMode(e, options.mode, options);

              if (options.reverse) {
                me._active.reverse();
              }
            } // Remember Last Actives


            changed = !helpers$1.arrayEquals(me._active, me._lastActive); // Only handle target event on tooltip change

            if (changed) {
              me._lastActive = me._active;

              if (options.enabled || options.custom) {
                me._eventPosition = {
                  x: e.x,
                  y: e.y
                };
                me.update(true);
                me.pivot();
              }
            }

            return changed;
          }
        });
        /**
         * @namespace Chart.Tooltip.positioners
         */

        var positioners_1 = positioners;
        var core_tooltip = exports$4;
        core_tooltip.positioners = positioners_1;
        var valueOrDefault$9 = helpers$1.valueOrDefault;

        core_defaults._set('global', {
          elements: {},
          events: ['mousemove', 'mouseout', 'click', 'touchstart', 'touchmove'],
          hover: {
            onHover: null,
            mode: 'nearest',
            intersect: true,
            animationDuration: 400
          },
          onClick: null,
          maintainAspectRatio: true,
          responsive: true,
          responsiveAnimationDuration: 0
        });
        /**
         * Recursively merge the given config objects representing the `scales` option
         * by incorporating scale defaults in `xAxes` and `yAxes` array items, then
         * returns a deep copy of the result, thus doesn't alter inputs.
         */


        function mergeScaleConfig() {
          return helpers$1.merge({}, [].slice.call(arguments), {
            merger: function merger(key, target, source, options) {
              if (key === 'xAxes' || key === 'yAxes') {
                var slen = source[key].length;
                var i, type, scale;

                if (!target[key]) {
                  target[key] = [];
                }

                for (i = 0; i < slen; ++i) {
                  scale = source[key][i];
                  type = valueOrDefault$9(scale.type, key === 'xAxes' ? 'category' : 'linear');

                  if (i >= target[key].length) {
                    target[key].push({});
                  }

                  if (!target[key][i].type || scale.type && scale.type !== target[key][i].type) {
                    // new/untyped scale or type changed: let's apply the new defaults
                    // then merge source scale to correctly overwrite the defaults.
                    helpers$1.merge(target[key][i], [core_scaleService.getScaleDefaults(type), scale]);
                  } else {
                    // scales type are the same
                    helpers$1.merge(target[key][i], scale);
                  }
                }
              } else {
                helpers$1._merger(key, target, source, options);
              }
            }
          });
        }
        /**
         * Recursively merge the given config objects as the root options by handling
         * default scale options for the `scales` and `scale` properties, then returns
         * a deep copy of the result, thus doesn't alter inputs.
         */


        function mergeConfig() {
          return helpers$1.merge({}, [].slice.call(arguments), {
            merger: function merger(key, target, source, options) {
              var tval = target[key] || {};
              var sval = source[key];

              if (key === 'scales') {
                // scale config merging is complex. Add our own function here for that
                target[key] = mergeScaleConfig(tval, sval);
              } else if (key === 'scale') {
                // used in polar area & radar charts since there is only one scale
                target[key] = helpers$1.merge(tval, [core_scaleService.getScaleDefaults(sval.type), sval]);
              } else {
                helpers$1._merger(key, target, source, options);
              }
            }
          });
        }

        function initConfig(config) {
          config = config || {}; // Do NOT use mergeConfig for the data object because this method merges arrays
          // and so would change references to labels and datasets, preventing data updates.

          var data = config.data = config.data || {};
          data.datasets = data.datasets || [];
          data.labels = data.labels || [];
          config.options = mergeConfig(core_defaults.global, core_defaults[config.type], config.options || {});
          return config;
        }

        function updateConfig(chart) {
          var newOptions = chart.options;
          helpers$1.each(chart.scales, function (scale) {
            core_layouts.removeBox(chart, scale);
          });
          newOptions = mergeConfig(core_defaults.global, core_defaults[chart.config.type], newOptions);
          chart.options = chart.config.options = newOptions;
          chart.ensureScalesHaveIDs();
          chart.buildOrUpdateScales(); // Tooltip

          chart.tooltip._options = newOptions.tooltips;
          chart.tooltip.initialize();
        }

        function nextAvailableScaleId(axesOpts, prefix, index) {
          var id;

          var hasId = function hasId(obj) {
            return obj.id === id;
          };

          do {
            id = prefix + index++;
          } while (helpers$1.findIndex(axesOpts, hasId) >= 0);

          return id;
        }

        function positionIsHorizontal(position) {
          return position === 'top' || position === 'bottom';
        }

        function compare2Level(l1, l2) {
          return function (a, b) {
            return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];
          };
        }

        var Chart = function Chart(item, config) {
          this.construct(item, config);
          return this;
        };

        helpers$1.extend(Chart.prototype,
        /** @lends Chart */
        {
          /**
           * @private
           */
          construct: function construct(item, config) {
            var me = this;
            config = initConfig(config);
            var context = platform.acquireContext(item, config);
            var canvas = context && context.canvas;
            var height = canvas && canvas.height;
            var width = canvas && canvas.width;
            me.id = helpers$1.uid();
            me.ctx = context;
            me.canvas = canvas;
            me.config = config;
            me.width = width;
            me.height = height;
            me.aspectRatio = height ? width / height : null;
            me.options = config.options;
            me._bufferedRender = false;
            me._layers = [];
            /**
             * Provided for backward compatibility, Chart and Chart.Controller have been merged,
             * the "instance" still need to be defined since it might be called from plugins.
             * @prop Chart#chart
             * @deprecated since version 2.6.0
             * @todo remove at version 3
             * @private
             */

            me.chart = me;
            me.controller = me; // chart.chart.controller #inception
            // Add the chart instance to the global namespace

            Chart.instances[me.id] = me; // Define alias to the config data: `chart.data === chart.config.data`

            Object.defineProperty(me, 'data', {
              get: function get() {
                return me.config.data;
              },
              set: function set(value) {
                me.config.data = value;
              }
            });

            if (!context || !canvas) {
              // The given item is not a compatible context2d element, let's return before finalizing
              // the chart initialization but after setting basic chart / controller properties that
              // can help to figure out that the chart is not valid (e.g chart.canvas !== null);
              // https://github.com/chartjs/Chart.js/issues/2807
              console.error("Failed to create chart: can't acquire context from the given item");
              return;
            }

            me.initialize();
            me.update();
          },

          /**
           * @private
           */
          initialize: function initialize() {
            var me = this; // Before init plugin notification

            core_plugins.notify(me, 'beforeInit');
            helpers$1.retinaScale(me, me.options.devicePixelRatio);
            me.bindEvents();

            if (me.options.responsive) {
              // Initial resize before chart draws (must be silent to preserve initial animations).
              me.resize(true);
            }

            me.initToolTip(); // After init plugin notification

            core_plugins.notify(me, 'afterInit');
            return me;
          },
          clear: function clear() {
            helpers$1.canvas.clear(this);
            return this;
          },
          stop: function stop() {
            // Stops any current animation loop occurring
            core_animations.cancelAnimation(this);
            return this;
          },
          resize: function resize(silent) {
            var me = this;
            var options = me.options;
            var canvas = me.canvas;
            var aspectRatio = options.maintainAspectRatio && me.aspectRatio || null; // the canvas render width and height will be casted to integers so make sure that
            // the canvas display style uses the same integer values to avoid blurring effect.
            // Set to 0 instead of canvas.size because the size defaults to 300x150 if the element is collapsed

            var newWidth = Math.max(0, Math.floor(helpers$1.getMaximumWidth(canvas)));
            var newHeight = Math.max(0, Math.floor(aspectRatio ? newWidth / aspectRatio : helpers$1.getMaximumHeight(canvas)));

            if (me.width === newWidth && me.height === newHeight) {
              return;
            }

            canvas.width = me.width = newWidth;
            canvas.height = me.height = newHeight;
            canvas.style.width = newWidth + 'px';
            canvas.style.height = newHeight + 'px';
            helpers$1.retinaScale(me, options.devicePixelRatio);

            if (!silent) {
              // Notify any plugins about the resize
              var newSize = {
                width: newWidth,
                height: newHeight
              };
              core_plugins.notify(me, 'resize', [newSize]); // Notify of resize

              if (options.onResize) {
                options.onResize(me, newSize);
              }

              me.stop();
              me.update({
                duration: options.responsiveAnimationDuration
              });
            }
          },
          ensureScalesHaveIDs: function ensureScalesHaveIDs() {
            var options = this.options;
            var scalesOptions = options.scales || {};
            var scaleOptions = options.scale;
            helpers$1.each(scalesOptions.xAxes, function (xAxisOptions, index) {
              if (!xAxisOptions.id) {
                xAxisOptions.id = nextAvailableScaleId(scalesOptions.xAxes, 'x-axis-', index);
              }
            });
            helpers$1.each(scalesOptions.yAxes, function (yAxisOptions, index) {
              if (!yAxisOptions.id) {
                yAxisOptions.id = nextAvailableScaleId(scalesOptions.yAxes, 'y-axis-', index);
              }
            });

            if (scaleOptions) {
              scaleOptions.id = scaleOptions.id || 'scale';
            }
          },

          /**
           * Builds a map of scale ID to scale object for future lookup.
           */
          buildOrUpdateScales: function buildOrUpdateScales() {
            var me = this;
            var options = me.options;
            var scales = me.scales || {};
            var items = [];
            var updated = Object.keys(scales).reduce(function (obj, id) {
              obj[id] = false;
              return obj;
            }, {});

            if (options.scales) {
              items = items.concat((options.scales.xAxes || []).map(function (xAxisOptions) {
                return {
                  options: xAxisOptions,
                  dtype: 'category',
                  dposition: 'bottom'
                };
              }), (options.scales.yAxes || []).map(function (yAxisOptions) {
                return {
                  options: yAxisOptions,
                  dtype: 'linear',
                  dposition: 'left'
                };
              }));
            }

            if (options.scale) {
              items.push({
                options: options.scale,
                dtype: 'radialLinear',
                isDefault: true,
                dposition: 'chartArea'
              });
            }

            helpers$1.each(items, function (item) {
              var scaleOptions = item.options;
              var id = scaleOptions.id;
              var scaleType = valueOrDefault$9(scaleOptions.type, item.dtype);

              if (positionIsHorizontal(scaleOptions.position) !== positionIsHorizontal(item.dposition)) {
                scaleOptions.position = item.dposition;
              }

              updated[id] = true;
              var scale = null;

              if (id in scales && scales[id].type === scaleType) {
                scale = scales[id];
                scale.options = scaleOptions;
                scale.ctx = me.ctx;
                scale.chart = me;
              } else {
                var scaleClass = core_scaleService.getScaleConstructor(scaleType);

                if (!scaleClass) {
                  return;
                }

                scale = new scaleClass({
                  id: id,
                  type: scaleType,
                  options: scaleOptions,
                  ctx: me.ctx,
                  chart: me
                });
                scales[scale.id] = scale;
              }

              scale.mergeTicksOptions(); // TODO(SB): I think we should be able to remove this custom case (options.scale)
              // and consider it as a regular scale part of the "scales"" map only! This would
              // make the logic easier and remove some useless? custom code.

              if (item.isDefault) {
                me.scale = scale;
              }
            }); // clear up discarded scales

            helpers$1.each(updated, function (hasUpdated, id) {
              if (!hasUpdated) {
                delete scales[id];
              }
            });
            me.scales = scales;
            core_scaleService.addScalesToLayout(this);
          },
          buildOrUpdateControllers: function buildOrUpdateControllers() {
            var me = this;
            var newControllers = [];
            var datasets = me.data.datasets;
            var i, ilen;

            for (i = 0, ilen = datasets.length; i < ilen; i++) {
              var dataset = datasets[i];
              var meta = me.getDatasetMeta(i);
              var type = dataset.type || me.config.type;

              if (meta.type && meta.type !== type) {
                me.destroyDatasetMeta(i);
                meta = me.getDatasetMeta(i);
              }

              meta.type = type;
              meta.order = dataset.order || 0;
              meta.index = i;

              if (meta.controller) {
                meta.controller.updateIndex(i);
                meta.controller.linkScales();
              } else {
                var ControllerClass = controllers[meta.type];

                if (ControllerClass === undefined) {
                  throw new Error('"' + meta.type + '" is not a chart type.');
                }

                meta.controller = new ControllerClass(me, i);
                newControllers.push(meta.controller);
              }
            }

            return newControllers;
          },

          /**
           * Reset the elements of all datasets
           * @private
           */
          resetElements: function resetElements() {
            var me = this;
            helpers$1.each(me.data.datasets, function (dataset, datasetIndex) {
              me.getDatasetMeta(datasetIndex).controller.reset();
            }, me);
          },

          /**
          * Resets the chart back to it's state before the initial animation
          */
          reset: function reset() {
            this.resetElements();
            this.tooltip.initialize();
          },
          update: function update(config) {
            var me = this;
            var i, ilen;

            if (!config || typeof config !== 'object') {
              // backwards compatibility
              config = {
                duration: config,
                lazy: arguments[1]
              };
            }

            updateConfig(me); // plugins options references might have change, let's invalidate the cache
            // https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167

            core_plugins._invalidate(me);

            if (core_plugins.notify(me, 'beforeUpdate') === false) {
              return;
            } // In case the entire data object changed


            me.tooltip._data = me.data; // Make sure dataset controllers are updated and new controllers are reset

            var newControllers = me.buildOrUpdateControllers(); // Make sure all dataset controllers have correct meta data counts

            for (i = 0, ilen = me.data.datasets.length; i < ilen; i++) {
              me.getDatasetMeta(i).controller.buildOrUpdateElements();
            }

            me.updateLayout(); // Can only reset the new controllers after the scales have been updated

            if (me.options.animation && me.options.animation.duration) {
              helpers$1.each(newControllers, function (controller) {
                controller.reset();
              });
            }

            me.updateDatasets(); // Need to reset tooltip in case it is displayed with elements that are removed
            // after update.

            me.tooltip.initialize(); // Last active contains items that were previously in the tooltip.
            // When we reset the tooltip, we need to clear it

            me.lastActive = []; // Do this before render so that any plugins that need final scale updates can use it

            core_plugins.notify(me, 'afterUpdate');

            me._layers.sort(compare2Level('z', '_idx'));

            if (me._bufferedRender) {
              me._bufferedRequest = {
                duration: config.duration,
                easing: config.easing,
                lazy: config.lazy
              };
            } else {
              me.render(config);
            }
          },

          /**
           * Updates the chart layout unless a plugin returns `false` to the `beforeLayout`
           * hook, in which case, plugins will not be called on `afterLayout`.
           * @private
           */
          updateLayout: function updateLayout() {
            var me = this;

            if (core_plugins.notify(me, 'beforeLayout') === false) {
              return;
            }

            core_layouts.update(this, this.width, this.height);
            me._layers = [];
            helpers$1.each(me.boxes, function (box) {
              // _configure is called twice, once in core.scale.update and once here.
              // Here the boxes are fully updated and at their final positions.
              if (box._configure) {
                box._configure();
              }

              me._layers.push.apply(me._layers, box._layers());
            }, me);

            me._layers.forEach(function (item, index) {
              item._idx = index;
            });
            /**
             * Provided for backward compatibility, use `afterLayout` instead.
             * @method IPlugin#afterScaleUpdate
             * @deprecated since version 2.5.0
             * @todo remove at version 3
             * @private
             */


            core_plugins.notify(me, 'afterScaleUpdate');
            core_plugins.notify(me, 'afterLayout');
          },

          /**
           * Updates all datasets unless a plugin returns `false` to the `beforeDatasetsUpdate`
           * hook, in which case, plugins will not be called on `afterDatasetsUpdate`.
           * @private
           */
          updateDatasets: function updateDatasets() {
            var me = this;

            if (core_plugins.notify(me, 'beforeDatasetsUpdate') === false) {
              return;
            }

            for (var i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {
              me.updateDataset(i);
            }

            core_plugins.notify(me, 'afterDatasetsUpdate');
          },

          /**
           * Updates dataset at index unless a plugin returns `false` to the `beforeDatasetUpdate`
           * hook, in which case, plugins will not be called on `afterDatasetUpdate`.
           * @private
           */
          updateDataset: function updateDataset(index) {
            var me = this;
            var meta = me.getDatasetMeta(index);
            var args = {
              meta: meta,
              index: index
            };

            if (core_plugins.notify(me, 'beforeDatasetUpdate', [args]) === false) {
              return;
            }

            meta.controller._update();

            core_plugins.notify(me, 'afterDatasetUpdate', [args]);
          },
          render: function render(config) {
            var me = this;

            if (!config || typeof config !== 'object') {
              // backwards compatibility
              config = {
                duration: config,
                lazy: arguments[1]
              };
            }

            var animationOptions = me.options.animation;
            var duration = valueOrDefault$9(config.duration, animationOptions && animationOptions.duration);
            var lazy = config.lazy;

            if (core_plugins.notify(me, 'beforeRender') === false) {
              return;
            }

            var onComplete = function onComplete(animation) {
              core_plugins.notify(me, 'afterRender');
              helpers$1.callback(animationOptions && animationOptions.onComplete, [animation], me);
            };

            if (animationOptions && duration) {
              var animation = new core_animation({
                numSteps: duration / 16.66,
                // 60 fps
                easing: config.easing || animationOptions.easing,
                render: function render(chart, animationObject) {
                  var easingFunction = helpers$1.easing.effects[animationObject.easing];
                  var currentStep = animationObject.currentStep;
                  var stepDecimal = currentStep / animationObject.numSteps;
                  chart.draw(easingFunction(stepDecimal), stepDecimal, currentStep);
                },
                onAnimationProgress: animationOptions.onProgress,
                onAnimationComplete: onComplete
              });
              core_animations.addAnimation(me, animation, duration, lazy);
            } else {
              me.draw(); // See https://github.com/chartjs/Chart.js/issues/3781

              onComplete(new core_animation({
                numSteps: 0,
                chart: me
              }));
            }

            return me;
          },
          draw: function draw(easingValue) {
            var me = this;
            var i, layers;
            me.clear();

            if (helpers$1.isNullOrUndef(easingValue)) {
              easingValue = 1;
            }

            me.transition(easingValue);

            if (me.width <= 0 || me.height <= 0) {
              return;
            }

            if (core_plugins.notify(me, 'beforeDraw', [easingValue]) === false) {
              return;
            } // Because of plugin hooks (before/afterDatasetsDraw), datasets can't
            // currently be part of layers. Instead, we draw
            // layers <= 0 before(default, backward compat), and the rest after


            layers = me._layers;

            for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {
              layers[i].draw(me.chartArea);
            }

            me.drawDatasets(easingValue); // Rest of layers

            for (; i < layers.length; ++i) {
              layers[i].draw(me.chartArea);
            }

            me._drawTooltip(easingValue);

            core_plugins.notify(me, 'afterDraw', [easingValue]);
          },

          /**
           * @private
           */
          transition: function transition(easingValue) {
            var me = this;

            for (var i = 0, ilen = (me.data.datasets || []).length; i < ilen; ++i) {
              if (me.isDatasetVisible(i)) {
                me.getDatasetMeta(i).controller.transition(easingValue);
              }
            }

            me.tooltip.transition(easingValue);
          },

          /**
           * @private
           */
          _getSortedDatasetMetas: function _getSortedDatasetMetas(filterVisible) {
            var me = this;
            var datasets = me.data.datasets || [];
            var result = [];
            var i, ilen;

            for (i = 0, ilen = datasets.length; i < ilen; ++i) {
              if (!filterVisible || me.isDatasetVisible(i)) {
                result.push(me.getDatasetMeta(i));
              }
            }

            result.sort(compare2Level('order', 'index'));
            return result;
          },

          /**
           * @private
           */
          _getSortedVisibleDatasetMetas: function _getSortedVisibleDatasetMetas() {
            return this._getSortedDatasetMetas(true);
          },

          /**
           * Draws all datasets unless a plugin returns `false` to the `beforeDatasetsDraw`
           * hook, in which case, plugins will not be called on `afterDatasetsDraw`.
           * @private
           */
          drawDatasets: function drawDatasets(easingValue) {
            var me = this;
            var metasets, i;

            if (core_plugins.notify(me, 'beforeDatasetsDraw', [easingValue]) === false) {
              return;
            }

            metasets = me._getSortedVisibleDatasetMetas();

            for (i = metasets.length - 1; i >= 0; --i) {
              me.drawDataset(metasets[i], easingValue);
            }

            core_plugins.notify(me, 'afterDatasetsDraw', [easingValue]);
          },

          /**
           * Draws dataset at index unless a plugin returns `false` to the `beforeDatasetDraw`
           * hook, in which case, plugins will not be called on `afterDatasetDraw`.
           * @private
           */
          drawDataset: function drawDataset(meta, easingValue) {
            var me = this;
            var args = {
              meta: meta,
              index: meta.index,
              easingValue: easingValue
            };

            if (core_plugins.notify(me, 'beforeDatasetDraw', [args]) === false) {
              return;
            }

            meta.controller.draw(easingValue);
            core_plugins.notify(me, 'afterDatasetDraw', [args]);
          },

          /**
           * Draws tooltip unless a plugin returns `false` to the `beforeTooltipDraw`
           * hook, in which case, plugins will not be called on `afterTooltipDraw`.
           * @private
           */
          _drawTooltip: function _drawTooltip(easingValue) {
            var me = this;
            var tooltip = me.tooltip;
            var args = {
              tooltip: tooltip,
              easingValue: easingValue
            };

            if (core_plugins.notify(me, 'beforeTooltipDraw', [args]) === false) {
              return;
            }

            tooltip.draw();
            core_plugins.notify(me, 'afterTooltipDraw', [args]);
          },

          /**
           * Get the single element that was clicked on
           * @return An object containing the dataset index and element index of the matching element. Also contains the rectangle that was draw
           */
          getElementAtEvent: function getElementAtEvent(e) {
            return core_interaction.modes.single(this, e);
          },
          getElementsAtEvent: function getElementsAtEvent(e) {
            return core_interaction.modes.label(this, e, {
              intersect: true
            });
          },
          getElementsAtXAxis: function getElementsAtXAxis(e) {
            return core_interaction.modes['x-axis'](this, e, {
              intersect: true
            });
          },
          getElementsAtEventForMode: function getElementsAtEventForMode(e, mode, options) {
            var method = core_interaction.modes[mode];

            if (typeof method === 'function') {
              return method(this, e, options);
            }

            return [];
          },
          getDatasetAtEvent: function getDatasetAtEvent(e) {
            return core_interaction.modes.dataset(this, e, {
              intersect: true
            });
          },
          getDatasetMeta: function getDatasetMeta(datasetIndex) {
            var me = this;
            var dataset = me.data.datasets[datasetIndex];

            if (!dataset._meta) {
              dataset._meta = {};
            }

            var meta = dataset._meta[me.id];

            if (!meta) {
              meta = dataset._meta[me.id] = {
                type: null,
                data: [],
                dataset: null,
                controller: null,
                hidden: null,
                // See isDatasetVisible() comment
                xAxisID: null,
                yAxisID: null,
                order: dataset.order || 0,
                index: datasetIndex
              };
            }

            return meta;
          },
          getVisibleDatasetCount: function getVisibleDatasetCount() {
            var count = 0;

            for (var i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {
              if (this.isDatasetVisible(i)) {
                count++;
              }
            }

            return count;
          },
          isDatasetVisible: function isDatasetVisible(datasetIndex) {
            var meta = this.getDatasetMeta(datasetIndex); // meta.hidden is a per chart dataset hidden flag override with 3 states: if true or false,
            // the dataset.hidden value is ignored, else if null, the dataset hidden state is returned.

            return typeof meta.hidden === 'boolean' ? !meta.hidden : !this.data.datasets[datasetIndex].hidden;
          },
          generateLegend: function generateLegend() {
            return this.options.legendCallback(this);
          },

          /**
           * @private
           */
          destroyDatasetMeta: function destroyDatasetMeta(datasetIndex) {
            var id = this.id;
            var dataset = this.data.datasets[datasetIndex];
            var meta = dataset._meta && dataset._meta[id];

            if (meta) {
              meta.controller.destroy();
              delete dataset._meta[id];
            }
          },
          destroy: function destroy() {
            var me = this;
            var canvas = me.canvas;
            var i, ilen;
            me.stop(); // dataset controllers need to cleanup associated data

            for (i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {
              me.destroyDatasetMeta(i);
            }

            if (canvas) {
              me.unbindEvents();
              helpers$1.canvas.clear(me);
              platform.releaseContext(me.ctx);
              me.canvas = null;
              me.ctx = null;
            }

            core_plugins.notify(me, 'destroy');
            delete Chart.instances[me.id];
          },
          toBase64Image: function toBase64Image() {
            return this.canvas.toDataURL.apply(this.canvas, arguments);
          },
          initToolTip: function initToolTip() {
            var me = this;
            me.tooltip = new core_tooltip({
              _chart: me,
              _chartInstance: me,
              // deprecated, backward compatibility
              _data: me.data,
              _options: me.options.tooltips
            }, me);
          },

          /**
           * @private
           */
          bindEvents: function bindEvents() {
            var me = this;
            var listeners = me._listeners = {};

            var listener = function listener() {
              me.eventHandler.apply(me, arguments);
            };

            helpers$1.each(me.options.events, function (type) {
              platform.addEventListener(me, type, listener);
              listeners[type] = listener;
            }); // Elements used to detect size change should not be injected for non responsive charts.
            // See https://github.com/chartjs/Chart.js/issues/2210

            if (me.options.responsive) {
              listener = function listener() {
                me.resize();
              };

              platform.addEventListener(me, 'resize', listener);
              listeners.resize = listener;
            }
          },

          /**
           * @private
           */
          unbindEvents: function unbindEvents() {
            var me = this;
            var listeners = me._listeners;

            if (!listeners) {
              return;
            }

            delete me._listeners;
            helpers$1.each(listeners, function (listener, type) {
              platform.removeEventListener(me, type, listener);
            });
          },
          updateHoverStyle: function updateHoverStyle(elements, mode, enabled) {
            var prefix = enabled ? 'set' : 'remove';
            var element, i, ilen;

            for (i = 0, ilen = elements.length; i < ilen; ++i) {
              element = elements[i];

              if (element) {
                this.getDatasetMeta(element._datasetIndex).controller[prefix + 'HoverStyle'](element);
              }
            }

            if (mode === 'dataset') {
              this.getDatasetMeta(elements[0]._datasetIndex).controller['_' + prefix + 'DatasetHoverStyle']();
            }
          },

          /**
           * @private
           */
          eventHandler: function eventHandler(e) {
            var me = this;
            var tooltip = me.tooltip;

            if (core_plugins.notify(me, 'beforeEvent', [e]) === false) {
              return;
            } // Buffer any update calls so that renders do not occur


            me._bufferedRender = true;
            me._bufferedRequest = null;
            var changed = me.handleEvent(e); // for smooth tooltip animations issue #4989
            // the tooltip should be the source of change
            // Animation check workaround:
            // tooltip._start will be null when tooltip isn't animating

            if (tooltip) {
              changed = tooltip._start ? tooltip.handleEvent(e) : changed | tooltip.handleEvent(e);
            }

            core_plugins.notify(me, 'afterEvent', [e]);
            var bufferedRequest = me._bufferedRequest;

            if (bufferedRequest) {
              // If we have an update that was triggered, we need to do a normal render
              me.render(bufferedRequest);
            } else if (changed && !me.animating) {
              // If entering, leaving, or changing elements, animate the change via pivot
              me.stop(); // We only need to render at this point. Updating will cause scales to be
              // recomputed generating flicker & using more memory than necessary.

              me.render({
                duration: me.options.hover.animationDuration,
                lazy: true
              });
            }

            me._bufferedRender = false;
            me._bufferedRequest = null;
            return me;
          },

          /**
           * Handle an event
           * @private
           * @param {IEvent} event the event to handle
           * @return {boolean} true if the chart needs to re-render
           */
          handleEvent: function handleEvent(e) {
            var me = this;
            var options = me.options || {};
            var hoverOptions = options.hover;
            var changed = false;
            me.lastActive = me.lastActive || []; // Find Active Elements for hover and tooltips

            if (e.type === 'mouseout') {
              me.active = [];
            } else {
              me.active = me.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions);
            } // Invoke onHover hook
            // Need to call with native event here to not break backwards compatibility


            helpers$1.callback(options.onHover || options.hover.onHover, [e["native"], me.active], me);

            if (e.type === 'mouseup' || e.type === 'click') {
              if (options.onClick) {
                // Use e.native here for backwards compatibility
                options.onClick.call(me, e["native"], me.active);
              }
            } // Remove styling for last active (even if it may still be active)


            if (me.lastActive.length) {
              me.updateHoverStyle(me.lastActive, hoverOptions.mode, false);
            } // Built in hover styling


            if (me.active.length && hoverOptions.mode) {
              me.updateHoverStyle(me.active, hoverOptions.mode, true);
            }

            changed = !helpers$1.arrayEquals(me.active, me.lastActive); // Remember Last Actives

            me.lastActive = me.active;
            return changed;
          }
        });
        /**
         * NOTE(SB) We actually don't use this container anymore but we need to keep it
         * for backward compatibility. Though, it can still be useful for plugins that
         * would need to work on multiple charts?!
         */

        Chart.instances = {};
        var core_controller = Chart; // DEPRECATIONS

        /**
         * Provided for backward compatibility, use Chart instead.
         * @class Chart.Controller
         * @deprecated since version 2.6
         * @todo remove at version 3
         * @private
         */

        Chart.Controller = Chart;
        /**
         * Provided for backward compatibility, not available anymore.
         * @namespace Chart
         * @deprecated since version 2.8
         * @todo remove at version 3
         * @private
         */

        Chart.types = {};
        /**
         * Provided for backward compatibility, not available anymore.
         * @namespace Chart.helpers.configMerge
         * @deprecated since version 2.8.0
         * @todo remove at version 3
         * @private
         */

        helpers$1.configMerge = mergeConfig;
        /**
         * Provided for backward compatibility, not available anymore.
         * @namespace Chart.helpers.scaleMerge
         * @deprecated since version 2.8.0
         * @todo remove at version 3
         * @private
         */

        helpers$1.scaleMerge = mergeScaleConfig;

        var core_helpers = function core_helpers() {
          // -- Basic js utility methods
          helpers$1.where = function (collection, filterCallback) {
            if (helpers$1.isArray(collection) && Array.prototype.filter) {
              return collection.filter(filterCallback);
            }

            var filtered = [];
            helpers$1.each(collection, function (item) {
              if (filterCallback(item)) {
                filtered.push(item);
              }
            });
            return filtered;
          };

          helpers$1.findIndex = Array.prototype.findIndex ? function (array, callback, scope) {
            return array.findIndex(callback, scope);
          } : function (array, callback, scope) {
            scope = scope === undefined ? array : scope;

            for (var i = 0, ilen = array.length; i < ilen; ++i) {
              if (callback.call(scope, array[i], i, array)) {
                return i;
              }
            }

            return -1;
          };

          helpers$1.findNextWhere = function (arrayToSearch, filterCallback, startIndex) {
            // Default to start of the array
            if (helpers$1.isNullOrUndef(startIndex)) {
              startIndex = -1;
            }

            for (var i = startIndex + 1; i < arrayToSearch.length; i++) {
              var currentItem = arrayToSearch[i];

              if (filterCallback(currentItem)) {
                return currentItem;
              }
            }
          };

          helpers$1.findPreviousWhere = function (arrayToSearch, filterCallback, startIndex) {
            // Default to end of the array
            if (helpers$1.isNullOrUndef(startIndex)) {
              startIndex = arrayToSearch.length;
            }

            for (var i = startIndex - 1; i >= 0; i--) {
              var currentItem = arrayToSearch[i];

              if (filterCallback(currentItem)) {
                return currentItem;
              }
            }
          }; // -- Math methods


          helpers$1.isNumber = function (n) {
            return !isNaN(parseFloat(n)) && isFinite(n);
          };

          helpers$1.almostEquals = function (x, y, epsilon) {
            return Math.abs(x - y) < epsilon;
          };

          helpers$1.almostWhole = function (x, epsilon) {
            var rounded = Math.round(x);
            return rounded - epsilon <= x && rounded + epsilon >= x;
          };

          helpers$1.max = function (array) {
            return array.reduce(function (max, value) {
              if (!isNaN(value)) {
                return Math.max(max, value);
              }

              return max;
            }, Number.NEGATIVE_INFINITY);
          };

          helpers$1.min = function (array) {
            return array.reduce(function (min, value) {
              if (!isNaN(value)) {
                return Math.min(min, value);
              }

              return min;
            }, Number.POSITIVE_INFINITY);
          };

          helpers$1.sign = Math.sign ? function (x) {
            return Math.sign(x);
          } : function (x) {
            x = +x; // convert to a number

            if (x === 0 || isNaN(x)) {
              return x;
            }

            return x > 0 ? 1 : -1;
          };

          helpers$1.toRadians = function (degrees) {
            return degrees * (Math.PI / 180);
          };

          helpers$1.toDegrees = function (radians) {
            return radians * (180 / Math.PI);
          };
          /**
           * Returns the number of decimal places
           * i.e. the number of digits after the decimal point, of the value of this Number.
           * @param {number} x - A number.
           * @returns {number} The number of decimal places.
           * @private
           */


          helpers$1._decimalPlaces = function (x) {
            if (!helpers$1.isFinite(x)) {
              return;
            }

            var e = 1;
            var p = 0;

            while (Math.round(x * e) / e !== x) {
              e *= 10;
              p++;
            }

            return p;
          }; // Gets the angle from vertical upright to the point about a centre.


          helpers$1.getAngleFromPoint = function (centrePoint, anglePoint) {
            var distanceFromXCenter = anglePoint.x - centrePoint.x;
            var distanceFromYCenter = anglePoint.y - centrePoint.y;
            var radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);
            var angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);

            if (angle < -0.5 * Math.PI) {
              angle += 2.0 * Math.PI; // make sure the returned angle is in the range of (-PI/2, 3PI/2]
            }

            return {
              angle: angle,
              distance: radialDistanceFromCenter
            };
          };

          helpers$1.distanceBetweenPoints = function (pt1, pt2) {
            return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));
          };
          /**
           * Provided for backward compatibility, not available anymore
           * @function Chart.helpers.aliasPixel
           * @deprecated since version 2.8.0
           * @todo remove at version 3
           */


          helpers$1.aliasPixel = function (pixelWidth) {
            return pixelWidth % 2 === 0 ? 0 : 0.5;
          };
          /**
           * Returns the aligned pixel value to avoid anti-aliasing blur
           * @param {Chart} chart - The chart instance.
           * @param {number} pixel - A pixel value.
           * @param {number} width - The width of the element.
           * @returns {number} The aligned pixel value.
           * @private
           */


          helpers$1._alignPixel = function (chart, pixel, width) {
            var devicePixelRatio = chart.currentDevicePixelRatio;
            var halfWidth = width / 2;
            return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;
          };

          helpers$1.splineCurve = function (firstPoint, middlePoint, afterPoint, t) {
            // Props to Rob Spencer at scaled innovation for his post on splining between points
            // http://scaledinnovation.com/analytics/splines/aboutSplines.html
            // This function must also respect "skipped" points
            var previous = firstPoint.skip ? middlePoint : firstPoint;
            var current = middlePoint;
            var next = afterPoint.skip ? middlePoint : afterPoint;
            var d01 = Math.sqrt(Math.pow(current.x - previous.x, 2) + Math.pow(current.y - previous.y, 2));
            var d12 = Math.sqrt(Math.pow(next.x - current.x, 2) + Math.pow(next.y - current.y, 2));
            var s01 = d01 / (d01 + d12);
            var s12 = d12 / (d01 + d12); // If all points are the same, s01 & s02 will be inf

            s01 = isNaN(s01) ? 0 : s01;
            s12 = isNaN(s12) ? 0 : s12;
            var fa = t * s01; // scaling factor for triangle Ta

            var fb = t * s12;
            return {
              previous: {
                x: current.x - fa * (next.x - previous.x),
                y: current.y - fa * (next.y - previous.y)
              },
              next: {
                x: current.x + fb * (next.x - previous.x),
                y: current.y + fb * (next.y - previous.y)
              }
            };
          };

          helpers$1.EPSILON = Number.EPSILON || 1e-14;

          helpers$1.splineCurveMonotone = function (points) {
            // This function calculates Bézier control points in a similar way than |splineCurve|,
            // but preserves monotonicity of the provided data and ensures no local extremums are added
            // between the dataset discrete points due to the interpolation.
            // See : https://en.wikipedia.org/wiki/Monotone_cubic_interpolation
            var pointsWithTangents = (points || []).map(function (point) {
              return {
                model: point._model,
                deltaK: 0,
                mK: 0
              };
            }); // Calculate slopes (deltaK) and initialize tangents (mK)

            var pointsLen = pointsWithTangents.length;
            var i, pointBefore, pointCurrent, pointAfter;

            for (i = 0; i < pointsLen; ++i) {
              pointCurrent = pointsWithTangents[i];

              if (pointCurrent.model.skip) {
                continue;
              }

              pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;
              pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;

              if (pointAfter && !pointAfter.model.skip) {
                var slopeDeltaX = pointAfter.model.x - pointCurrent.model.x; // In the case of two points that appear at the same x pixel, slopeDeltaX is 0

                pointCurrent.deltaK = slopeDeltaX !== 0 ? (pointAfter.model.y - pointCurrent.model.y) / slopeDeltaX : 0;
              }

              if (!pointBefore || pointBefore.model.skip) {
                pointCurrent.mK = pointCurrent.deltaK;
              } else if (!pointAfter || pointAfter.model.skip) {
                pointCurrent.mK = pointBefore.deltaK;
              } else if (this.sign(pointBefore.deltaK) !== this.sign(pointCurrent.deltaK)) {
                pointCurrent.mK = 0;
              } else {
                pointCurrent.mK = (pointBefore.deltaK + pointCurrent.deltaK) / 2;
              }
            } // Adjust tangents to ensure monotonic properties


            var alphaK, betaK, tauK, squaredMagnitude;

            for (i = 0; i < pointsLen - 1; ++i) {
              pointCurrent = pointsWithTangents[i];
              pointAfter = pointsWithTangents[i + 1];

              if (pointCurrent.model.skip || pointAfter.model.skip) {
                continue;
              }

              if (helpers$1.almostEquals(pointCurrent.deltaK, 0, this.EPSILON)) {
                pointCurrent.mK = pointAfter.mK = 0;
                continue;
              }

              alphaK = pointCurrent.mK / pointCurrent.deltaK;
              betaK = pointAfter.mK / pointCurrent.deltaK;
              squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);

              if (squaredMagnitude <= 9) {
                continue;
              }

              tauK = 3 / Math.sqrt(squaredMagnitude);
              pointCurrent.mK = alphaK * tauK * pointCurrent.deltaK;
              pointAfter.mK = betaK * tauK * pointCurrent.deltaK;
            } // Compute control points


            var deltaX;

            for (i = 0; i < pointsLen; ++i) {
              pointCurrent = pointsWithTangents[i];

              if (pointCurrent.model.skip) {
                continue;
              }

              pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;
              pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;

              if (pointBefore && !pointBefore.model.skip) {
                deltaX = (pointCurrent.model.x - pointBefore.model.x) / 3;
                pointCurrent.model.controlPointPreviousX = pointCurrent.model.x - deltaX;
                pointCurrent.model.controlPointPreviousY = pointCurrent.model.y - deltaX * pointCurrent.mK;
              }

              if (pointAfter && !pointAfter.model.skip) {
                deltaX = (pointAfter.model.x - pointCurrent.model.x) / 3;
                pointCurrent.model.controlPointNextX = pointCurrent.model.x + deltaX;
                pointCurrent.model.controlPointNextY = pointCurrent.model.y + deltaX * pointCurrent.mK;
              }
            }
          };

          helpers$1.nextItem = function (collection, index, loop) {
            if (loop) {
              return index >= collection.length - 1 ? collection[0] : collection[index + 1];
            }

            return index >= collection.length - 1 ? collection[collection.length - 1] : collection[index + 1];
          };

          helpers$1.previousItem = function (collection, index, loop) {
            if (loop) {
              return index <= 0 ? collection[collection.length - 1] : collection[index - 1];
            }

            return index <= 0 ? collection[0] : collection[index - 1];
          }; // Implementation of the nice number algorithm used in determining where axis labels will go


          helpers$1.niceNum = function (range, round) {
            var exponent = Math.floor(helpers$1.log10(range));
            var fraction = range / Math.pow(10, exponent);
            var niceFraction;

            if (round) {
              if (fraction < 1.5) {
                niceFraction = 1;
              } else if (fraction < 3) {
                niceFraction = 2;
              } else if (fraction < 7) {
                niceFraction = 5;
              } else {
                niceFraction = 10;
              }
            } else if (fraction <= 1.0) {
              niceFraction = 1;
            } else if (fraction <= 2) {
              niceFraction = 2;
            } else if (fraction <= 5) {
              niceFraction = 5;
            } else {
              niceFraction = 10;
            }

            return niceFraction * Math.pow(10, exponent);
          }; // Request animation polyfill - https://www.paulirish.com/2011/requestanimationframe-for-smart-animating/


          helpers$1.requestAnimFrame = function () {
            if (typeof window === 'undefined') {
              return function (callback) {
                callback();
              };
            }

            return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {
              return window.setTimeout(callback, 1000 / 60);
            };
          }(); // -- DOM methods


          helpers$1.getRelativePosition = function (evt, chart) {
            var mouseX, mouseY;
            var e = evt.originalEvent || evt;
            var canvas = evt.target || evt.srcElement;
            var boundingRect = canvas.getBoundingClientRect();
            var touches = e.touches;

            if (touches && touches.length > 0) {
              mouseX = touches[0].clientX;
              mouseY = touches[0].clientY;
            } else {
              mouseX = e.clientX;
              mouseY = e.clientY;
            } // Scale mouse coordinates into canvas coordinates
            // by following the pattern laid out by 'jerryj' in the comments of
            // https://www.html5canvastutorials.com/advanced/html5-canvas-mouse-coordinates/


            var paddingLeft = parseFloat(helpers$1.getStyle(canvas, 'padding-left'));
            var paddingTop = parseFloat(helpers$1.getStyle(canvas, 'padding-top'));
            var paddingRight = parseFloat(helpers$1.getStyle(canvas, 'padding-right'));
            var paddingBottom = parseFloat(helpers$1.getStyle(canvas, 'padding-bottom'));
            var width = boundingRect.right - boundingRect.left - paddingLeft - paddingRight;
            var height = boundingRect.bottom - boundingRect.top - paddingTop - paddingBottom; // We divide by the current device pixel ratio, because the canvas is scaled up by that amount in each direction. However
            // the backend model is in unscaled coordinates. Since we are going to deal with our model coordinates, we go back here

            mouseX = Math.round((mouseX - boundingRect.left - paddingLeft) / width * canvas.width / chart.currentDevicePixelRatio);
            mouseY = Math.round((mouseY - boundingRect.top - paddingTop) / height * canvas.height / chart.currentDevicePixelRatio);
            return {
              x: mouseX,
              y: mouseY
            };
          }; // Private helper function to convert max-width/max-height values that may be percentages into a number


          function parseMaxStyle(styleValue, node, parentProperty) {
            var valueInPixels;

            if (typeof styleValue === 'string') {
              valueInPixels = parseInt(styleValue, 10);

              if (styleValue.indexOf('%') !== -1) {
                // percentage * size in dimension
                valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];
              }
            } else {
              valueInPixels = styleValue;
            }

            return valueInPixels;
          }
          /**
           * Returns if the given value contains an effective constraint.
           * @private
           */


          function isConstrainedValue(value) {
            return value !== undefined && value !== null && value !== 'none';
          }
          /**
           * Returns the max width or height of the given DOM node in a cross-browser compatible fashion
           * @param {HTMLElement} domNode - the node to check the constraint on
           * @param {string} maxStyle - the style that defines the maximum for the direction we are using ('max-width' / 'max-height')
           * @param {string} percentageProperty - property of parent to use when calculating width as a percentage
           * @see {@link https://www.nathanaeljones.com/blog/2013/reading-max-width-cross-browser}
           */


          function getConstraintDimension(domNode, maxStyle, percentageProperty) {
            var view = document.defaultView;

            var parentNode = helpers$1._getParentNode(domNode);

            var constrainedNode = view.getComputedStyle(domNode)[maxStyle];
            var constrainedContainer = view.getComputedStyle(parentNode)[maxStyle];
            var hasCNode = isConstrainedValue(constrainedNode);
            var hasCContainer = isConstrainedValue(constrainedContainer);
            var infinity = Number.POSITIVE_INFINITY;

            if (hasCNode || hasCContainer) {
              return Math.min(hasCNode ? parseMaxStyle(constrainedNode, domNode, percentageProperty) : infinity, hasCContainer ? parseMaxStyle(constrainedContainer, parentNode, percentageProperty) : infinity);
            }

            return 'none';
          } // returns Number or undefined if no constraint


          helpers$1.getConstraintWidth = function (domNode) {
            return getConstraintDimension(domNode, 'max-width', 'clientWidth');
          }; // returns Number or undefined if no constraint


          helpers$1.getConstraintHeight = function (domNode) {
            return getConstraintDimension(domNode, 'max-height', 'clientHeight');
          };
          /**
           * @private
          	 */


          helpers$1._calculatePadding = function (container, padding, parentDimension) {
            padding = helpers$1.getStyle(container, padding);
            return padding.indexOf('%') > -1 ? parentDimension * parseInt(padding, 10) / 100 : parseInt(padding, 10);
          };
          /**
           * @private
           */


          helpers$1._getParentNode = function (domNode) {
            var parent = domNode.parentNode;

            if (parent && parent.toString() === '[object ShadowRoot]') {
              parent = parent.host;
            }

            return parent;
          };

          helpers$1.getMaximumWidth = function (domNode) {
            var container = helpers$1._getParentNode(domNode);

            if (!container) {
              return domNode.clientWidth;
            }

            var clientWidth = container.clientWidth;

            var paddingLeft = helpers$1._calculatePadding(container, 'padding-left', clientWidth);

            var paddingRight = helpers$1._calculatePadding(container, 'padding-right', clientWidth);

            var w = clientWidth - paddingLeft - paddingRight;
            var cw = helpers$1.getConstraintWidth(domNode);
            return isNaN(cw) ? w : Math.min(w, cw);
          };

          helpers$1.getMaximumHeight = function (domNode) {
            var container = helpers$1._getParentNode(domNode);

            if (!container) {
              return domNode.clientHeight;
            }

            var clientHeight = container.clientHeight;

            var paddingTop = helpers$1._calculatePadding(container, 'padding-top', clientHeight);

            var paddingBottom = helpers$1._calculatePadding(container, 'padding-bottom', clientHeight);

            var h = clientHeight - paddingTop - paddingBottom;
            var ch = helpers$1.getConstraintHeight(domNode);
            return isNaN(ch) ? h : Math.min(h, ch);
          };

          helpers$1.getStyle = function (el, property) {
            return el.currentStyle ? el.currentStyle[property] : document.defaultView.getComputedStyle(el, null).getPropertyValue(property);
          };

          helpers$1.retinaScale = function (chart, forceRatio) {
            var pixelRatio = chart.currentDevicePixelRatio = forceRatio || typeof window !== 'undefined' && window.devicePixelRatio || 1;

            if (pixelRatio === 1) {
              return;
            }

            var canvas = chart.canvas;
            var height = chart.height;
            var width = chart.width;
            canvas.height = height * pixelRatio;
            canvas.width = width * pixelRatio;
            chart.ctx.scale(pixelRatio, pixelRatio); // If no style has been set on the canvas, the render size is used as display size,
            // making the chart visually bigger, so let's enforce it to the "correct" values.
            // See https://github.com/chartjs/Chart.js/issues/3575

            if (!canvas.style.height && !canvas.style.width) {
              canvas.style.height = height + 'px';
              canvas.style.width = width + 'px';
            }
          }; // -- Canvas methods


          helpers$1.fontString = function (pixelSize, fontStyle, fontFamily) {
            return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;
          };

          helpers$1.longestText = function (ctx, font, arrayOfThings, cache) {
            cache = cache || {};
            var data = cache.data = cache.data || {};
            var gc = cache.garbageCollect = cache.garbageCollect || [];

            if (cache.font !== font) {
              data = cache.data = {};
              gc = cache.garbageCollect = [];
              cache.font = font;
            }

            ctx.font = font;
            var longest = 0;
            var ilen = arrayOfThings.length;
            var i, j, jlen, thing, nestedThing;

            for (i = 0; i < ilen; i++) {
              thing = arrayOfThings[i]; // Undefined strings and arrays should not be measured

              if (thing !== undefined && thing !== null && helpers$1.isArray(thing) !== true) {
                longest = helpers$1.measureText(ctx, data, gc, longest, thing);
              } else if (helpers$1.isArray(thing)) {
                // if it is an array lets measure each element
                // to do maybe simplify this function a bit so we can do this more recursively?
                for (j = 0, jlen = thing.length; j < jlen; j++) {
                  nestedThing = thing[j]; // Undefined strings and arrays should not be measured

                  if (nestedThing !== undefined && nestedThing !== null && !helpers$1.isArray(nestedThing)) {
                    longest = helpers$1.measureText(ctx, data, gc, longest, nestedThing);
                  }
                }
              }
            }

            var gcLen = gc.length / 2;

            if (gcLen > arrayOfThings.length) {
              for (i = 0; i < gcLen; i++) {
                delete data[gc[i]];
              }

              gc.splice(0, gcLen);
            }

            return longest;
          };

          helpers$1.measureText = function (ctx, data, gc, longest, string) {
            var textWidth = data[string];

            if (!textWidth) {
              textWidth = data[string] = ctx.measureText(string).width;
              gc.push(string);
            }

            if (textWidth > longest) {
              longest = textWidth;
            }

            return longest;
          };
          /**
           * @deprecated
           */


          helpers$1.numberOfLabelLines = function (arrayOfThings) {
            var numberOfLines = 1;
            helpers$1.each(arrayOfThings, function (thing) {
              if (helpers$1.isArray(thing)) {
                if (thing.length > numberOfLines) {
                  numberOfLines = thing.length;
                }
              }
            });
            return numberOfLines;
          };

          helpers$1.color = !chartjsColor ? function (value) {
            console.error('Color.js not found!');
            return value;
          } : function (value) {
            /* global CanvasGradient */
            if (value instanceof CanvasGradient) {
              value = core_defaults.global.defaultColor;
            }

            return chartjsColor(value);
          };

          helpers$1.getHoverColor = function (colorValue) {
            /* global CanvasPattern */
            return colorValue instanceof CanvasPattern || colorValue instanceof CanvasGradient ? colorValue : helpers$1.color(colorValue).saturate(0.5).darken(0.1).rgbString();
          };
        };

        function _abstract() {
          throw new Error('This method is not implemented: either no adapter can ' + 'be found or an incomplete integration was provided.');
        }
        /**
         * Date adapter (current used by the time scale)
         * @namespace Chart._adapters._date
         * @memberof Chart._adapters
         * @private
         */

        /**
         * Currently supported unit string values.
         * @typedef {('millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year')}
         * @memberof Chart._adapters._date
         * @name Unit
         */

        /**
         * @class
         */


        function DateAdapter(options) {
          this.options = options || {};
        }

        helpers$1.extend(DateAdapter.prototype,
        /** @lends DateAdapter */
        {
          /**
           * Returns a map of time formats for the supported formatting units defined
           * in Unit as well as 'datetime' representing a detailed date/time string.
           * @returns {{string: string}}
           */
          formats: _abstract,

          /**
           * Parses the given `value` and return the associated timestamp.
           * @param {any} value - the value to parse (usually comes from the data)
           * @param {string} [format] - the expected data format
           * @returns {(number|null)}
           * @function
           */
          parse: _abstract,

          /**
           * Returns the formatted date in the specified `format` for a given `timestamp`.
           * @param {number} timestamp - the timestamp to format
           * @param {string} format - the date/time token
           * @return {string}
           * @function
           */
          format: _abstract,

          /**
           * Adds the specified `amount` of `unit` to the given `timestamp`.
           * @param {number} timestamp - the input timestamp
           * @param {number} amount - the amount to add
           * @param {Unit} unit - the unit as string
           * @return {number}
           * @function
           */
          add: _abstract,

          /**
           * Returns the number of `unit` between the given timestamps.
           * @param {number} max - the input timestamp (reference)
           * @param {number} min - the timestamp to substract
           * @param {Unit} unit - the unit as string
           * @return {number}
           * @function
           */
          diff: _abstract,

          /**
           * Returns start of `unit` for the given `timestamp`.
           * @param {number} timestamp - the input timestamp
           * @param {Unit} unit - the unit as string
           * @param {number} [weekday] - the ISO day of the week with 1 being Monday
           * and 7 being Sunday (only needed if param *unit* is `isoWeek`).
           * @function
           */
          startOf: _abstract,

          /**
           * Returns end of `unit` for the given `timestamp`.
           * @param {number} timestamp - the input timestamp
           * @param {Unit} unit - the unit as string
           * @function
           */
          endOf: _abstract,
          // DEPRECATIONS

          /**
           * Provided for backward compatibility for scale.getValueForPixel(),
           * this method should be overridden only by the moment adapter.
           * @deprecated since version 2.8.0
           * @todo remove at version 3
           * @private
           */
          _create: function _create(value) {
            return value;
          }
        });

        DateAdapter.override = function (members) {
          helpers$1.extend(DateAdapter.prototype, members);
        };

        var _date = DateAdapter;
        var core_adapters = {
          _date: _date
        };
        /**
         * Namespace to hold static tick generation functions
         * @namespace Chart.Ticks
         */

        var core_ticks = {
          /**
           * Namespace to hold formatters for different types of ticks
           * @namespace Chart.Ticks.formatters
           */
          formatters: {
            /**
             * Formatter for value labels
             * @method Chart.Ticks.formatters.values
             * @param value the value to display
             * @return {string|string[]} the label to display
             */
            values: function values(value) {
              return helpers$1.isArray(value) ? value : '' + value;
            },

            /**
             * Formatter for linear numeric ticks
             * @method Chart.Ticks.formatters.linear
             * @param tickValue {number} the value to be formatted
             * @param index {number} the position of the tickValue parameter in the ticks array
             * @param ticks {number[]} the list of ticks being converted
             * @return {string} string representation of the tickValue parameter
             */
            linear: function linear(tickValue, index, ticks) {
              // If we have lots of ticks, don't use the ones
              var delta = ticks.length > 3 ? ticks[2] - ticks[1] : ticks[1] - ticks[0]; // If we have a number like 2.5 as the delta, figure out how many decimal places we need

              if (Math.abs(delta) > 1) {
                if (tickValue !== Math.floor(tickValue)) {
                  // not an integer
                  delta = tickValue - Math.floor(tickValue);
                }
              }

              var logDelta = helpers$1.log10(Math.abs(delta));
              var tickString = '';

              if (tickValue !== 0) {
                var maxTick = Math.max(Math.abs(ticks[0]), Math.abs(ticks[ticks.length - 1]));

                if (maxTick < 1e-4) {
                  // all ticks are small numbers; use scientific notation
                  var logTick = helpers$1.log10(Math.abs(tickValue));
                  var numExponential = Math.floor(logTick) - Math.floor(logDelta);
                  numExponential = Math.max(Math.min(numExponential, 20), 0);
                  tickString = tickValue.toExponential(numExponential);
                } else {
                  var numDecimal = -1 * Math.floor(logDelta);
                  numDecimal = Math.max(Math.min(numDecimal, 20), 0); // toFixed has a max of 20 decimal places

                  tickString = tickValue.toFixed(numDecimal);
                }
              } else {
                tickString = '0'; // never show decimal places for 0
              }

              return tickString;
            },
            logarithmic: function logarithmic(tickValue, index, ticks) {
              var remain = tickValue / Math.pow(10, Math.floor(helpers$1.log10(tickValue)));

              if (tickValue === 0) {
                return '0';
              } else if (remain === 1 || remain === 2 || remain === 5 || index === 0 || index === ticks.length - 1) {
                return tickValue.toExponential();
              }

              return '';
            }
          }
        };
        var isArray = helpers$1.isArray;
        var isNullOrUndef = helpers$1.isNullOrUndef;
        var valueOrDefault$a = helpers$1.valueOrDefault;
        var valueAtIndexOrDefault = helpers$1.valueAtIndexOrDefault;

        core_defaults._set('scale', {
          display: true,
          position: 'left',
          offset: false,
          // grid line settings
          gridLines: {
            display: true,
            color: 'rgba(0,0,0,0.1)',
            lineWidth: 1,
            drawBorder: true,
            drawOnChartArea: true,
            drawTicks: true,
            tickMarkLength: 10,
            zeroLineWidth: 1,
            zeroLineColor: 'rgba(0,0,0,0.25)',
            zeroLineBorderDash: [],
            zeroLineBorderDashOffset: 0.0,
            offsetGridLines: false,
            borderDash: [],
            borderDashOffset: 0.0
          },
          // scale label
          scaleLabel: {
            // display property
            display: false,
            // actual label
            labelString: '',
            // top/bottom padding
            padding: {
              top: 4,
              bottom: 4
            }
          },
          // label settings
          ticks: {
            beginAtZero: false,
            minRotation: 0,
            maxRotation: 50,
            mirror: false,
            padding: 0,
            reverse: false,
            display: true,
            autoSkip: true,
            autoSkipPadding: 0,
            labelOffset: 0,
            // We pass through arrays to be rendered as multiline labels, we convert Others to strings here.
            callback: core_ticks.formatters.values,
            minor: {},
            major: {}
          }
        });
        /** Returns a new array containing numItems from arr */


        function sample(arr, numItems) {
          var result = [];
          var increment = arr.length / numItems;
          var i = 0;
          var len = arr.length;

          for (; i < len; i += increment) {
            result.push(arr[Math.floor(i)]);
          }

          return result;
        }

        function getPixelForGridLine(scale, index, offsetGridLines) {
          var length = scale.getTicks().length;
          var validIndex = Math.min(index, length - 1);
          var lineValue = scale.getPixelForTick(validIndex);
          var start = scale._startPixel;
          var end = scale._endPixel;
          var epsilon = 1e-6; // 1e-6 is margin in pixels for accumulated error.

          var offset;

          if (offsetGridLines) {
            if (length === 1) {
              offset = Math.max(lineValue - start, end - lineValue);
            } else if (index === 0) {
              offset = (scale.getPixelForTick(1) - lineValue) / 2;
            } else {
              offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;
            }

            lineValue += validIndex < index ? offset : -offset; // Return undefined if the pixel is out of the range

            if (lineValue < start - epsilon || lineValue > end + epsilon) {
              return;
            }
          }

          return lineValue;
        }

        function garbageCollect(caches, length) {
          helpers$1.each(caches, function (cache) {
            var gc = cache.gc;
            var gcLen = gc.length / 2;
            var i;

            if (gcLen > length) {
              for (i = 0; i < gcLen; ++i) {
                delete cache.data[gc[i]];
              }

              gc.splice(0, gcLen);
            }
          });
        }
        /**
         * Returns {width, height, offset} objects for the first, last, widest, highest tick
         * labels where offset indicates the anchor point offset from the top in pixels.
         */


        function computeLabelSizes(ctx, tickFonts, ticks, caches) {
          var length = ticks.length;
          var widths = [];
          var heights = [];
          var offsets = [];
          var i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel, widest, highest;

          for (i = 0; i < length; ++i) {
            label = ticks[i].label;
            tickFont = ticks[i].major ? tickFonts.major : tickFonts.minor;
            ctx.font = fontString = tickFont.string;
            cache = caches[fontString] = caches[fontString] || {
              data: {},
              gc: []
            };
            lineHeight = tickFont.lineHeight;
            width = height = 0; // Undefined labels and arrays should not be measured

            if (!isNullOrUndef(label) && !isArray(label)) {
              width = helpers$1.measureText(ctx, cache.data, cache.gc, width, label);
              height = lineHeight;
            } else if (isArray(label)) {
              // if it is an array let's measure each element
              for (j = 0, jlen = label.length; j < jlen; ++j) {
                nestedLabel = label[j]; // Undefined labels and arrays should not be measured

                if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {
                  width = helpers$1.measureText(ctx, cache.data, cache.gc, width, nestedLabel);
                  height += lineHeight;
                }
              }
            }

            widths.push(width);
            heights.push(height);
            offsets.push(lineHeight / 2);
          }

          garbageCollect(caches, length);
          widest = widths.indexOf(Math.max.apply(null, widths));
          highest = heights.indexOf(Math.max.apply(null, heights));

          function valueAt(idx) {
            return {
              width: widths[idx] || 0,
              height: heights[idx] || 0,
              offset: offsets[idx] || 0
            };
          }

          return {
            first: valueAt(0),
            last: valueAt(length - 1),
            widest: valueAt(widest),
            highest: valueAt(highest)
          };
        }

        function getTickMarkLength(options) {
          return options.drawTicks ? options.tickMarkLength : 0;
        }

        function getScaleLabelHeight(options) {
          var font, padding;

          if (!options.display) {
            return 0;
          }

          font = helpers$1.options._parseFont(options);
          padding = helpers$1.options.toPadding(options.padding);
          return font.lineHeight + padding.height;
        }

        function parseFontOptions(options, nestedOpts) {
          return helpers$1.extend(helpers$1.options._parseFont({
            fontFamily: valueOrDefault$a(nestedOpts.fontFamily, options.fontFamily),
            fontSize: valueOrDefault$a(nestedOpts.fontSize, options.fontSize),
            fontStyle: valueOrDefault$a(nestedOpts.fontStyle, options.fontStyle),
            lineHeight: valueOrDefault$a(nestedOpts.lineHeight, options.lineHeight)
          }), {
            color: helpers$1.options.resolve([nestedOpts.fontColor, options.fontColor, core_defaults.global.defaultFontColor])
          });
        }

        function parseTickFontOptions(options) {
          var minor = parseFontOptions(options, options.minor);
          var major = options.major.enabled ? parseFontOptions(options, options.major) : minor;
          return {
            minor: minor,
            major: major
          };
        }

        function nonSkipped(ticksToFilter) {
          var filtered = [];
          var item, index, len;

          for (index = 0, len = ticksToFilter.length; index < len; ++index) {
            item = ticksToFilter[index];

            if (typeof item._index !== 'undefined') {
              filtered.push(item);
            }
          }

          return filtered;
        }

        function getEvenSpacing(arr) {
          var len = arr.length;
          var i, diff;

          if (len < 2) {
            return false;
          }

          for (diff = arr[0], i = 1; i < len; ++i) {
            if (arr[i] - arr[i - 1] !== diff) {
              return false;
            }
          }

          return diff;
        }

        function calculateSpacing(majorIndices, ticks, axisLength, ticksLimit) {
          var evenMajorSpacing = getEvenSpacing(majorIndices);
          var spacing = (ticks.length - 1) / ticksLimit;
          var factors, factor, i, ilen; // If the major ticks are evenly spaced apart, place the minor ticks
          // so that they divide the major ticks into even chunks

          if (!evenMajorSpacing) {
            return Math.max(spacing, 1);
          }

          factors = helpers$1.math._factorize(evenMajorSpacing);

          for (i = 0, ilen = factors.length - 1; i < ilen; i++) {
            factor = factors[i];

            if (factor > spacing) {
              return factor;
            }
          }

          return Math.max(spacing, 1);
        }

        function getMajorIndices(ticks) {
          var result = [];
          var i, ilen;

          for (i = 0, ilen = ticks.length; i < ilen; i++) {
            if (ticks[i].major) {
              result.push(i);
            }
          }

          return result;
        }

        function skipMajors(ticks, majorIndices, spacing) {
          var count = 0;
          var next = majorIndices[0];
          var i, tick;
          spacing = Math.ceil(spacing);

          for (i = 0; i < ticks.length; i++) {
            tick = ticks[i];

            if (i === next) {
              tick._index = i;
              count++;
              next = majorIndices[count * spacing];
            } else {
              delete tick.label;
            }
          }
        }

        function skip(ticks, spacing, majorStart, majorEnd) {
          var start = valueOrDefault$a(majorStart, 0);
          var end = Math.min(valueOrDefault$a(majorEnd, ticks.length), ticks.length);
          var count = 0;
          var length, i, tick, next;
          spacing = Math.ceil(spacing);

          if (majorEnd) {
            length = majorEnd - majorStart;
            spacing = length / Math.floor(length / spacing);
          }

          next = start;

          while (next < 0) {
            count++;
            next = Math.round(start + count * spacing);
          }

          for (i = Math.max(start, 0); i < end; i++) {
            tick = ticks[i];

            if (i === next) {
              tick._index = i;
              count++;
              next = Math.round(start + count * spacing);
            } else {
              delete tick.label;
            }
          }
        }

        var Scale = core_element.extend({
          zeroLineIndex: 0,

          /**
           * Get the padding needed for the scale
           * @method getPadding
           * @private
           * @returns {Padding} the necessary padding
           */
          getPadding: function getPadding() {
            var me = this;
            return {
              left: me.paddingLeft || 0,
              top: me.paddingTop || 0,
              right: me.paddingRight || 0,
              bottom: me.paddingBottom || 0
            };
          },

          /**
           * Returns the scale tick objects ({label, major})
           * @since 2.7
           */
          getTicks: function getTicks() {
            return this._ticks;
          },

          /**
          * @private
          */
          _getLabels: function _getLabels() {
            var data = this.chart.data;
            return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];
          },
          // These methods are ordered by lifecyle. Utilities then follow.
          // Any function defined here is inherited by all scale types.
          // Any function can be extended by the scale type

          /**
           * Provided for backward compatibility, not available anymore
           * @function Chart.Scale.mergeTicksOptions
           * @deprecated since version 2.8.0
           * @todo remove at version 3
           */
          mergeTicksOptions: function mergeTicksOptions() {// noop
          },
          beforeUpdate: function beforeUpdate() {
            helpers$1.callback(this.options.beforeUpdate, [this]);
          },

          /**
           * @param {number} maxWidth - the max width in pixels
           * @param {number} maxHeight - the max height in pixels
           * @param {object} margins - the space between the edge of the other scales and edge of the chart
           *   This space comes from two sources:
           *     - padding - space that's required to show the labels at the edges of the scale
           *     - thickness of scales or legends in another orientation
           */
          update: function update(maxWidth, maxHeight, margins) {
            var me = this;
            var tickOpts = me.options.ticks;
            var sampleSize = tickOpts.sampleSize;
            var i, ilen, labels, ticks, samplingEnabled; // Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)

            me.beforeUpdate(); // Absorb the master measurements

            me.maxWidth = maxWidth;
            me.maxHeight = maxHeight;
            me.margins = helpers$1.extend({
              left: 0,
              right: 0,
              top: 0,
              bottom: 0
            }, margins);
            me._ticks = null;
            me.ticks = null;
            me._labelSizes = null;
            me._maxLabelLines = 0;
            me.longestLabelWidth = 0;
            me.longestTextCache = me.longestTextCache || {};
            me._gridLineItems = null;
            me._labelItems = null; // Dimensions

            me.beforeSetDimensions();
            me.setDimensions();
            me.afterSetDimensions(); // Data min/max

            me.beforeDataLimits();
            me.determineDataLimits();
            me.afterDataLimits(); // Ticks - `this.ticks` is now DEPRECATED!
            // Internal ticks are now stored as objects in the PRIVATE `this._ticks` member
            // and must not be accessed directly from outside this class. `this.ticks` being
            // around for long time and not marked as private, we can't change its structure
            // without unexpected breaking changes. If you need to access the scale ticks,
            // use scale.getTicks() instead.

            me.beforeBuildTicks(); // New implementations should return an array of objects but for BACKWARD COMPAT,
            // we still support no return (`this.ticks` internally set by calling this method).

            ticks = me.buildTicks() || []; // Allow modification of ticks in callback.

            ticks = me.afterBuildTicks(ticks) || ticks; // Ensure ticks contains ticks in new tick format

            if ((!ticks || !ticks.length) && me.ticks) {
              ticks = [];

              for (i = 0, ilen = me.ticks.length; i < ilen; ++i) {
                ticks.push({
                  value: me.ticks[i],
                  major: false
                });
              }
            }

            me._ticks = ticks; // Compute tick rotation and fit using a sampled subset of labels
            // We generally don't need to compute the size of every single label for determining scale size

            samplingEnabled = sampleSize < ticks.length;
            labels = me._convertTicksToLabels(samplingEnabled ? sample(ticks, sampleSize) : ticks); // _configure is called twice, once here, once from core.controller.updateLayout.
            // Here we haven't been positioned yet, but dimensions are correct.
            // Variables set in _configure are needed for calculateTickRotation, and
            // it's ok that coordinates are not correct there, only dimensions matter.

            me._configure(); // Tick Rotation


            me.beforeCalculateTickRotation();
            me.calculateTickRotation();
            me.afterCalculateTickRotation();
            me.beforeFit();
            me.fit();
            me.afterFit(); // Auto-skip

            me._ticksToDraw = tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto') ? me._autoSkip(ticks) : ticks;

            if (samplingEnabled) {
              // Generate labels using all non-skipped ticks
              labels = me._convertTicksToLabels(me._ticksToDraw);
            }

            me.ticks = labels; // BACKWARD COMPATIBILITY
            // IMPORTANT: after this point, we consider that `this.ticks` will NEVER change!

            me.afterUpdate(); // TODO(v3): remove minSize as a public property and return value from all layout boxes. It is unused
            // make maxWidth and maxHeight private

            return me.minSize;
          },

          /**
           * @private
           */
          _configure: function _configure() {
            var me = this;
            var reversePixels = me.options.ticks.reverse;
            var startPixel, endPixel;

            if (me.isHorizontal()) {
              startPixel = me.left;
              endPixel = me.right;
            } else {
              startPixel = me.top;
              endPixel = me.bottom; // by default vertical scales are from bottom to top, so pixels are reversed

              reversePixels = !reversePixels;
            }

            me._startPixel = startPixel;
            me._endPixel = endPixel;
            me._reversePixels = reversePixels;
            me._length = endPixel - startPixel;
          },
          afterUpdate: function afterUpdate() {
            helpers$1.callback(this.options.afterUpdate, [this]);
          },
          //
          beforeSetDimensions: function beforeSetDimensions() {
            helpers$1.callback(this.options.beforeSetDimensions, [this]);
          },
          setDimensions: function setDimensions() {
            var me = this; // Set the unconstrained dimension before label rotation

            if (me.isHorizontal()) {
              // Reset position before calculating rotation
              me.width = me.maxWidth;
              me.left = 0;
              me.right = me.width;
            } else {
              me.height = me.maxHeight; // Reset position before calculating rotation

              me.top = 0;
              me.bottom = me.height;
            } // Reset padding


            me.paddingLeft = 0;
            me.paddingTop = 0;
            me.paddingRight = 0;
            me.paddingBottom = 0;
          },
          afterSetDimensions: function afterSetDimensions() {
            helpers$1.callback(this.options.afterSetDimensions, [this]);
          },
          // Data limits
          beforeDataLimits: function beforeDataLimits() {
            helpers$1.callback(this.options.beforeDataLimits, [this]);
          },
          determineDataLimits: helpers$1.noop,
          afterDataLimits: function afterDataLimits() {
            helpers$1.callback(this.options.afterDataLimits, [this]);
          },
          //
          beforeBuildTicks: function beforeBuildTicks() {
            helpers$1.callback(this.options.beforeBuildTicks, [this]);
          },
          buildTicks: helpers$1.noop,
          afterBuildTicks: function afterBuildTicks(ticks) {
            var me = this; // ticks is empty for old axis implementations here

            if (isArray(ticks) && ticks.length) {
              return helpers$1.callback(me.options.afterBuildTicks, [me, ticks]);
            } // Support old implementations (that modified `this.ticks` directly in buildTicks)


            me.ticks = helpers$1.callback(me.options.afterBuildTicks, [me, me.ticks]) || me.ticks;
            return ticks;
          },
          beforeTickToLabelConversion: function beforeTickToLabelConversion() {
            helpers$1.callback(this.options.beforeTickToLabelConversion, [this]);
          },
          convertTicksToLabels: function convertTicksToLabels() {
            var me = this; // Convert ticks to strings

            var tickOpts = me.options.ticks;
            me.ticks = me.ticks.map(tickOpts.userCallback || tickOpts.callback, this);
          },
          afterTickToLabelConversion: function afterTickToLabelConversion() {
            helpers$1.callback(this.options.afterTickToLabelConversion, [this]);
          },
          //
          beforeCalculateTickRotation: function beforeCalculateTickRotation() {
            helpers$1.callback(this.options.beforeCalculateTickRotation, [this]);
          },
          calculateTickRotation: function calculateTickRotation() {
            var me = this;
            var options = me.options;
            var tickOpts = options.ticks;
            var numTicks = me.getTicks().length;
            var minRotation = tickOpts.minRotation || 0;
            var maxRotation = tickOpts.maxRotation;
            var labelRotation = minRotation;
            var labelSizes, maxLabelWidth, maxLabelHeight, maxWidth, tickWidth, maxHeight, maxLabelDiagonal;

            if (!me._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !me.isHorizontal()) {
              me.labelRotation = minRotation;
              return;
            }

            labelSizes = me._getLabelSizes();
            maxLabelWidth = labelSizes.widest.width;
            maxLabelHeight = labelSizes.highest.height - labelSizes.highest.offset; // Estimate the width of each grid based on the canvas width, the maximum
            // label width and the number of tick intervals

            maxWidth = Math.min(me.maxWidth, me.chart.width - maxLabelWidth);
            tickWidth = options.offset ? me.maxWidth / numTicks : maxWidth / (numTicks - 1); // Allow 3 pixels x2 padding either side for label readability

            if (maxLabelWidth + 6 > tickWidth) {
              tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));
              maxHeight = me.maxHeight - getTickMarkLength(options.gridLines) - tickOpts.padding - getScaleLabelHeight(options.scaleLabel);
              maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);
              labelRotation = helpers$1.toDegrees(Math.min(Math.asin(Math.min((labelSizes.highest.height + 6) / tickWidth, 1)), Math.asin(Math.min(maxHeight / maxLabelDiagonal, 1)) - Math.asin(maxLabelHeight / maxLabelDiagonal)));
              labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));
            }

            me.labelRotation = labelRotation;
          },
          afterCalculateTickRotation: function afterCalculateTickRotation() {
            helpers$1.callback(this.options.afterCalculateTickRotation, [this]);
          },
          //
          beforeFit: function beforeFit() {
            helpers$1.callback(this.options.beforeFit, [this]);
          },
          fit: function fit() {
            var me = this; // Reset

            var minSize = me.minSize = {
              width: 0,
              height: 0
            };
            var chart = me.chart;
            var opts = me.options;
            var tickOpts = opts.ticks;
            var scaleLabelOpts = opts.scaleLabel;
            var gridLineOpts = opts.gridLines;

            var display = me._isVisible();

            var isBottom = opts.position === 'bottom';
            var isHorizontal = me.isHorizontal(); // Width

            if (isHorizontal) {
              minSize.width = me.maxWidth;
            } else if (display) {
              minSize.width = getTickMarkLength(gridLineOpts) + getScaleLabelHeight(scaleLabelOpts);
            } // height


            if (!isHorizontal) {
              minSize.height = me.maxHeight; // fill all the height
            } else if (display) {
              minSize.height = getTickMarkLength(gridLineOpts) + getScaleLabelHeight(scaleLabelOpts);
            } // Don't bother fitting the ticks if we are not showing the labels


            if (tickOpts.display && display) {
              var tickFonts = parseTickFontOptions(tickOpts);

              var labelSizes = me._getLabelSizes();

              var firstLabelSize = labelSizes.first;
              var lastLabelSize = labelSizes.last;
              var widestLabelSize = labelSizes.widest;
              var highestLabelSize = labelSizes.highest;
              var lineSpace = tickFonts.minor.lineHeight * 0.4;
              var tickPadding = tickOpts.padding;

              if (isHorizontal) {
                // A horizontal axis is more constrained by the height.
                var isRotated = me.labelRotation !== 0;
                var angleRadians = helpers$1.toRadians(me.labelRotation);
                var cosRotation = Math.cos(angleRadians);
                var sinRotation = Math.sin(angleRadians);
                var labelHeight = sinRotation * widestLabelSize.width + cosRotation * (highestLabelSize.height - (isRotated ? highestLabelSize.offset : 0)) + (isRotated ? 0 : lineSpace); // padding

                minSize.height = Math.min(me.maxHeight, minSize.height + labelHeight + tickPadding);
                var offsetLeft = me.getPixelForTick(0) - me.left;
                var offsetRight = me.right - me.getPixelForTick(me.getTicks().length - 1);
                var paddingLeft, paddingRight; // Ensure that our ticks are always inside the canvas. When rotated, ticks are right aligned
                // which means that the right padding is dominated by the font height

                if (isRotated) {
                  paddingLeft = isBottom ? cosRotation * firstLabelSize.width + sinRotation * firstLabelSize.offset : sinRotation * (firstLabelSize.height - firstLabelSize.offset);
                  paddingRight = isBottom ? sinRotation * (lastLabelSize.height - lastLabelSize.offset) : cosRotation * lastLabelSize.width + sinRotation * lastLabelSize.offset;
                } else {
                  paddingLeft = firstLabelSize.width / 2;
                  paddingRight = lastLabelSize.width / 2;
                } // Adjust padding taking into account changes in offsets
                // and add 3 px to move away from canvas edges


                me.paddingLeft = Math.max((paddingLeft - offsetLeft) * me.width / (me.width - offsetLeft), 0) + 3;
                me.paddingRight = Math.max((paddingRight - offsetRight) * me.width / (me.width - offsetRight), 0) + 3;
              } else {
                // A vertical axis is more constrained by the width. Labels are the
                // dominant factor here, so get that length first and account for padding
                var labelWidth = tickOpts.mirror ? 0 : // use lineSpace for consistency with horizontal axis
                // tickPadding is not implemented for horizontal
                widestLabelSize.width + tickPadding + lineSpace;
                minSize.width = Math.min(me.maxWidth, minSize.width + labelWidth);
                me.paddingTop = firstLabelSize.height / 2;
                me.paddingBottom = lastLabelSize.height / 2;
              }
            }

            me.handleMargins();

            if (isHorizontal) {
              me.width = me._length = chart.width - me.margins.left - me.margins.right;
              me.height = minSize.height;
            } else {
              me.width = minSize.width;
              me.height = me._length = chart.height - me.margins.top - me.margins.bottom;
            }
          },

          /**
           * Handle margins and padding interactions
           * @private
           */
          handleMargins: function handleMargins() {
            var me = this;

            if (me.margins) {
              me.margins.left = Math.max(me.paddingLeft, me.margins.left);
              me.margins.top = Math.max(me.paddingTop, me.margins.top);
              me.margins.right = Math.max(me.paddingRight, me.margins.right);
              me.margins.bottom = Math.max(me.paddingBottom, me.margins.bottom);
            }
          },
          afterFit: function afterFit() {
            helpers$1.callback(this.options.afterFit, [this]);
          },
          // Shared Methods
          isHorizontal: function isHorizontal() {
            var pos = this.options.position;
            return pos === 'top' || pos === 'bottom';
          },
          isFullWidth: function isFullWidth() {
            return this.options.fullWidth;
          },
          // Get the correct value. NaN bad inputs, If the value type is object get the x or y based on whether we are horizontal or not
          getRightValue: function getRightValue(rawValue) {
            // Null and undefined values first
            if (isNullOrUndef(rawValue)) {
              return NaN;
            } // isNaN(object) returns true, so make sure NaN is checking for a number; Discard Infinite values


            if ((typeof rawValue === 'number' || rawValue instanceof Number) && !isFinite(rawValue)) {
              return NaN;
            } // If it is in fact an object, dive in one more level


            if (rawValue) {
              if (this.isHorizontal()) {
                if (rawValue.x !== undefined) {
                  return this.getRightValue(rawValue.x);
                }
              } else if (rawValue.y !== undefined) {
                return this.getRightValue(rawValue.y);
              }
            } // Value is good, return it


            return rawValue;
          },
          _convertTicksToLabels: function _convertTicksToLabels(ticks) {
            var me = this;
            var labels, i, ilen;
            me.ticks = ticks.map(function (tick) {
              return tick.value;
            });
            me.beforeTickToLabelConversion(); // New implementations should return the formatted tick labels but for BACKWARD
            // COMPAT, we still support no return (`this.ticks` internally changed by calling
            // this method and supposed to contain only string values).

            labels = me.convertTicksToLabels(ticks) || me.ticks;
            me.afterTickToLabelConversion(); // BACKWARD COMPAT: synchronize `_ticks` with labels (so potentially `this.ticks`)

            for (i = 0, ilen = ticks.length; i < ilen; ++i) {
              ticks[i].label = labels[i];
            }

            return labels;
          },

          /**
           * @private
           */
          _getLabelSizes: function _getLabelSizes() {
            var me = this;
            var labelSizes = me._labelSizes;

            if (!labelSizes) {
              me._labelSizes = labelSizes = computeLabelSizes(me.ctx, parseTickFontOptions(me.options.ticks), me.getTicks(), me.longestTextCache);
              me.longestLabelWidth = labelSizes.widest.width;
            }

            return labelSizes;
          },

          /**
           * @private
           */
          _parseValue: function _parseValue(value) {
            var start, end, min, max;

            if (isArray(value)) {
              start = +this.getRightValue(value[0]);
              end = +this.getRightValue(value[1]);
              min = Math.min(start, end);
              max = Math.max(start, end);
            } else {
              value = +this.getRightValue(value);
              start = undefined;
              end = value;
              min = value;
              max = value;
            }

            return {
              min: min,
              max: max,
              start: start,
              end: end
            };
          },

          /**
          * @private
          */
          _getScaleLabel: function _getScaleLabel(rawValue) {
            var v = this._parseValue(rawValue);

            if (v.start !== undefined) {
              return '[' + v.start + ', ' + v.end + ']';
            }

            return +this.getRightValue(rawValue);
          },

          /**
           * Used to get the value to display in the tooltip for the data at the given index
           * @param index
           * @param datasetIndex
           */
          getLabelForIndex: helpers$1.noop,

          /**
           * Returns the location of the given data point. Value can either be an index or a numerical value
           * The coordinate (0, 0) is at the upper-left corner of the canvas
           * @param value
           * @param index
           * @param datasetIndex
           */
          getPixelForValue: helpers$1.noop,

          /**
           * Used to get the data value from a given pixel. This is the inverse of getPixelForValue
           * The coordinate (0, 0) is at the upper-left corner of the canvas
           * @param pixel
           */
          getValueForPixel: helpers$1.noop,

          /**
           * Returns the location of the tick at the given index
           * The coordinate (0, 0) is at the upper-left corner of the canvas
           */
          getPixelForTick: function getPixelForTick(index) {
            var me = this;
            var offset = me.options.offset;
            var numTicks = me._ticks.length;
            var tickWidth = 1 / Math.max(numTicks - (offset ? 0 : 1), 1);
            return index < 0 || index > numTicks - 1 ? null : me.getPixelForDecimal(index * tickWidth + (offset ? tickWidth / 2 : 0));
          },

          /**
           * Utility for getting the pixel location of a percentage of scale
           * The coordinate (0, 0) is at the upper-left corner of the canvas
           */
          getPixelForDecimal: function getPixelForDecimal(decimal) {
            var me = this;

            if (me._reversePixels) {
              decimal = 1 - decimal;
            }

            return me._startPixel + decimal * me._length;
          },
          getDecimalForPixel: function getDecimalForPixel(pixel) {
            var decimal = (pixel - this._startPixel) / this._length;
            return this._reversePixels ? 1 - decimal : decimal;
          },

          /**
           * Returns the pixel for the minimum chart value
           * The coordinate (0, 0) is at the upper-left corner of the canvas
           */
          getBasePixel: function getBasePixel() {
            return this.getPixelForValue(this.getBaseValue());
          },
          getBaseValue: function getBaseValue() {
            var me = this;
            var min = me.min;
            var max = me.max;
            return me.beginAtZero ? 0 : min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;
          },

          /**
           * Returns a subset of ticks to be plotted to avoid overlapping labels.
           * @private
           */
          _autoSkip: function _autoSkip(ticks) {
            var me = this;
            var tickOpts = me.options.ticks;
            var axisLength = me._length;
            var ticksLimit = tickOpts.maxTicksLimit || axisLength / me._tickSize() + 1;
            var majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];
            var numMajorIndices = majorIndices.length;
            var first = majorIndices[0];
            var last = majorIndices[numMajorIndices - 1];
            var i, ilen, spacing, avgMajorSpacing; // If there are too many major ticks to display them all

            if (numMajorIndices > ticksLimit) {
              skipMajors(ticks, majorIndices, numMajorIndices / ticksLimit);
              return nonSkipped(ticks);
            }

            spacing = calculateSpacing(majorIndices, ticks, axisLength, ticksLimit);

            if (numMajorIndices > 0) {
              for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {
                skip(ticks, spacing, majorIndices[i], majorIndices[i + 1]);
              }

              avgMajorSpacing = numMajorIndices > 1 ? (last - first) / (numMajorIndices - 1) : null;
              skip(ticks, spacing, helpers$1.isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);
              skip(ticks, spacing, last, helpers$1.isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);
              return nonSkipped(ticks);
            }

            skip(ticks, spacing);
            return nonSkipped(ticks);
          },

          /**
           * @private
           */
          _tickSize: function _tickSize() {
            var me = this;
            var optionTicks = me.options.ticks; // Calculate space needed by label in axis direction.

            var rot = helpers$1.toRadians(me.labelRotation);
            var cos = Math.abs(Math.cos(rot));
            var sin = Math.abs(Math.sin(rot));

            var labelSizes = me._getLabelSizes();

            var padding = optionTicks.autoSkipPadding || 0;
            var w = labelSizes ? labelSizes.widest.width + padding : 0;
            var h = labelSizes ? labelSizes.highest.height + padding : 0; // Calculate space needed for 1 tick in axis direction.

            return me.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;
          },

          /**
           * @private
           */
          _isVisible: function _isVisible() {
            var me = this;
            var chart = me.chart;
            var display = me.options.display;
            var i, ilen, meta;

            if (display !== 'auto') {
              return !!display;
            } // When 'auto', the scale is visible if at least one associated dataset is visible.


            for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {
              if (chart.isDatasetVisible(i)) {
                meta = chart.getDatasetMeta(i);

                if (meta.xAxisID === me.id || meta.yAxisID === me.id) {
                  return true;
                }
              }
            }

            return false;
          },

          /**
           * @private
           */
          _computeGridLineItems: function _computeGridLineItems(chartArea) {
            var me = this;
            var chart = me.chart;
            var options = me.options;
            var gridLines = options.gridLines;
            var position = options.position;
            var offsetGridLines = gridLines.offsetGridLines;
            var isHorizontal = me.isHorizontal();
            var ticks = me._ticksToDraw;
            var ticksLength = ticks.length + (offsetGridLines ? 1 : 0);
            var tl = getTickMarkLength(gridLines);
            var items = [];
            var axisWidth = gridLines.drawBorder ? valueAtIndexOrDefault(gridLines.lineWidth, 0, 0) : 0;
            var axisHalfWidth = axisWidth / 2;
            var alignPixel = helpers$1._alignPixel;

            var alignBorderValue = function alignBorderValue(pixel) {
              return alignPixel(chart, pixel, axisWidth);
            };

            var borderValue, i, tick, lineValue, alignedLineValue;
            var tx1, ty1, tx2, ty2, x1, y1, x2, y2, lineWidth, lineColor, borderDash, borderDashOffset;

            if (position === 'top') {
              borderValue = alignBorderValue(me.bottom);
              ty1 = me.bottom - tl;
              ty2 = borderValue - axisHalfWidth;
              y1 = alignBorderValue(chartArea.top) + axisHalfWidth;
              y2 = chartArea.bottom;
            } else if (position === 'bottom') {
              borderValue = alignBorderValue(me.top);
              y1 = chartArea.top;
              y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;
              ty1 = borderValue + axisHalfWidth;
              ty2 = me.top + tl;
            } else if (position === 'left') {
              borderValue = alignBorderValue(me.right);
              tx1 = me.right - tl;
              tx2 = borderValue - axisHalfWidth;
              x1 = alignBorderValue(chartArea.left) + axisHalfWidth;
              x2 = chartArea.right;
            } else {
              borderValue = alignBorderValue(me.left);
              x1 = chartArea.left;
              x2 = alignBorderValue(chartArea.right) - axisHalfWidth;
              tx1 = borderValue + axisHalfWidth;
              tx2 = me.left + tl;
            }

            for (i = 0; i < ticksLength; ++i) {
              tick = ticks[i] || {}; // autoskipper skipped this tick (#4635)

              if (isNullOrUndef(tick.label) && i < ticks.length) {
                continue;
              }

              if (i === me.zeroLineIndex && options.offset === offsetGridLines) {
                // Draw the first index specially
                lineWidth = gridLines.zeroLineWidth;
                lineColor = gridLines.zeroLineColor;
                borderDash = gridLines.zeroLineBorderDash || [];
                borderDashOffset = gridLines.zeroLineBorderDashOffset || 0.0;
              } else {
                lineWidth = valueAtIndexOrDefault(gridLines.lineWidth, i, 1);
                lineColor = valueAtIndexOrDefault(gridLines.color, i, 'rgba(0,0,0,0.1)');
                borderDash = gridLines.borderDash || [];
                borderDashOffset = gridLines.borderDashOffset || 0.0;
              }

              lineValue = getPixelForGridLine(me, tick._index || i, offsetGridLines); // Skip if the pixel is out of the range

              if (lineValue === undefined) {
                continue;
              }

              alignedLineValue = alignPixel(chart, lineValue, lineWidth);

              if (isHorizontal) {
                tx1 = tx2 = x1 = x2 = alignedLineValue;
              } else {
                ty1 = ty2 = y1 = y2 = alignedLineValue;
              }

              items.push({
                tx1: tx1,
                ty1: ty1,
                tx2: tx2,
                ty2: ty2,
                x1: x1,
                y1: y1,
                x2: x2,
                y2: y2,
                width: lineWidth,
                color: lineColor,
                borderDash: borderDash,
                borderDashOffset: borderDashOffset
              });
            }

            items.ticksLength = ticksLength;
            items.borderValue = borderValue;
            return items;
          },

          /**
           * @private
           */
          _computeLabelItems: function _computeLabelItems() {
            var me = this;
            var options = me.options;
            var optionTicks = options.ticks;
            var position = options.position;
            var isMirrored = optionTicks.mirror;
            var isHorizontal = me.isHorizontal();
            var ticks = me._ticksToDraw;
            var fonts = parseTickFontOptions(optionTicks);
            var tickPadding = optionTicks.padding;
            var tl = getTickMarkLength(options.gridLines);
            var rotation = -helpers$1.toRadians(me.labelRotation);
            var items = [];
            var i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;

            if (position === 'top') {
              y = me.bottom - tl - tickPadding;
              textAlign = !rotation ? 'center' : 'left';
            } else if (position === 'bottom') {
              y = me.top + tl + tickPadding;
              textAlign = !rotation ? 'center' : 'right';
            } else if (position === 'left') {
              x = me.right - (isMirrored ? 0 : tl) - tickPadding;
              textAlign = isMirrored ? 'left' : 'right';
            } else {
              x = me.left + (isMirrored ? 0 : tl) + tickPadding;
              textAlign = isMirrored ? 'right' : 'left';
            }

            for (i = 0, ilen = ticks.length; i < ilen; ++i) {
              tick = ticks[i];
              label = tick.label; // autoskipper skipped this tick (#4635)

              if (isNullOrUndef(label)) {
                continue;
              }

              pixel = me.getPixelForTick(tick._index || i) + optionTicks.labelOffset;
              font = tick.major ? fonts.major : fonts.minor;
              lineHeight = font.lineHeight;
              lineCount = isArray(label) ? label.length : 1;

              if (isHorizontal) {
                x = pixel;
                textOffset = position === 'top' ? ((!rotation ? 0.5 : 1) - lineCount) * lineHeight : (!rotation ? 0.5 : 0) * lineHeight;
              } else {
                y = pixel;
                textOffset = (1 - lineCount) * lineHeight / 2;
              }

              items.push({
                x: x,
                y: y,
                rotation: rotation,
                label: label,
                font: font,
                textOffset: textOffset,
                textAlign: textAlign
              });
            }

            return items;
          },

          /**
           * @private
           */
          _drawGrid: function _drawGrid(chartArea) {
            var me = this;
            var gridLines = me.options.gridLines;

            if (!gridLines.display) {
              return;
            }

            var ctx = me.ctx;
            var chart = me.chart;
            var alignPixel = helpers$1._alignPixel;
            var axisWidth = gridLines.drawBorder ? valueAtIndexOrDefault(gridLines.lineWidth, 0, 0) : 0;

            var items = me._gridLineItems || (me._gridLineItems = me._computeGridLineItems(chartArea));

            var width, color, i, ilen, item;

            for (i = 0, ilen = items.length; i < ilen; ++i) {
              item = items[i];
              width = item.width;
              color = item.color;

              if (width && color) {
                ctx.save();
                ctx.lineWidth = width;
                ctx.strokeStyle = color;

                if (ctx.setLineDash) {
                  ctx.setLineDash(item.borderDash);
                  ctx.lineDashOffset = item.borderDashOffset;
                }

                ctx.beginPath();

                if (gridLines.drawTicks) {
                  ctx.moveTo(item.tx1, item.ty1);
                  ctx.lineTo(item.tx2, item.ty2);
                }

                if (gridLines.drawOnChartArea) {
                  ctx.moveTo(item.x1, item.y1);
                  ctx.lineTo(item.x2, item.y2);
                }

                ctx.stroke();
                ctx.restore();
              }
            }

            if (axisWidth) {
              // Draw the line at the edge of the axis
              var firstLineWidth = axisWidth;
              var lastLineWidth = valueAtIndexOrDefault(gridLines.lineWidth, items.ticksLength - 1, 1);
              var borderValue = items.borderValue;
              var x1, x2, y1, y2;

              if (me.isHorizontal()) {
                x1 = alignPixel(chart, me.left, firstLineWidth) - firstLineWidth / 2;
                x2 = alignPixel(chart, me.right, lastLineWidth) + lastLineWidth / 2;
                y1 = y2 = borderValue;
              } else {
                y1 = alignPixel(chart, me.top, firstLineWidth) - firstLineWidth / 2;
                y2 = alignPixel(chart, me.bottom, lastLineWidth) + lastLineWidth / 2;
                x1 = x2 = borderValue;
              }

              ctx.lineWidth = axisWidth;
              ctx.strokeStyle = valueAtIndexOrDefault(gridLines.color, 0);
              ctx.beginPath();
              ctx.moveTo(x1, y1);
              ctx.lineTo(x2, y2);
              ctx.stroke();
            }
          },

          /**
           * @private
           */
          _drawLabels: function _drawLabels() {
            var me = this;
            var optionTicks = me.options.ticks;

            if (!optionTicks.display) {
              return;
            }

            var ctx = me.ctx;

            var items = me._labelItems || (me._labelItems = me._computeLabelItems());

            var i, j, ilen, jlen, item, tickFont, label, y;

            for (i = 0, ilen = items.length; i < ilen; ++i) {
              item = items[i];
              tickFont = item.font; // Make sure we draw text in the correct color and font

              ctx.save();
              ctx.translate(item.x, item.y);
              ctx.rotate(item.rotation);
              ctx.font = tickFont.string;
              ctx.fillStyle = tickFont.color;
              ctx.textBaseline = 'middle';
              ctx.textAlign = item.textAlign;
              label = item.label;
              y = item.textOffset;

              if (isArray(label)) {
                for (j = 0, jlen = label.length; j < jlen; ++j) {
                  // We just make sure the multiline element is a string here..
                  ctx.fillText('' + label[j], 0, y);
                  y += tickFont.lineHeight;
                }
              } else {
                ctx.fillText(label, 0, y);
              }

              ctx.restore();
            }
          },

          /**
           * @private
           */
          _drawTitle: function _drawTitle() {
            var me = this;
            var ctx = me.ctx;
            var options = me.options;
            var scaleLabel = options.scaleLabel;

            if (!scaleLabel.display) {
              return;
            }

            var scaleLabelFontColor = valueOrDefault$a(scaleLabel.fontColor, core_defaults.global.defaultFontColor);

            var scaleLabelFont = helpers$1.options._parseFont(scaleLabel);

            var scaleLabelPadding = helpers$1.options.toPadding(scaleLabel.padding);
            var halfLineHeight = scaleLabelFont.lineHeight / 2;
            var position = options.position;
            var rotation = 0;
            var scaleLabelX, scaleLabelY;

            if (me.isHorizontal()) {
              scaleLabelX = me.left + me.width / 2; // midpoint of the width

              scaleLabelY = position === 'bottom' ? me.bottom - halfLineHeight - scaleLabelPadding.bottom : me.top + halfLineHeight + scaleLabelPadding.top;
            } else {
              var isLeft = position === 'left';
              scaleLabelX = isLeft ? me.left + halfLineHeight + scaleLabelPadding.top : me.right - halfLineHeight - scaleLabelPadding.top;
              scaleLabelY = me.top + me.height / 2;
              rotation = isLeft ? -0.5 * Math.PI : 0.5 * Math.PI;
            }

            ctx.save();
            ctx.translate(scaleLabelX, scaleLabelY);
            ctx.rotate(rotation);
            ctx.textAlign = 'center';
            ctx.textBaseline = 'middle';
            ctx.fillStyle = scaleLabelFontColor; // render in correct colour

            ctx.font = scaleLabelFont.string;
            ctx.fillText(scaleLabel.labelString, 0, 0);
            ctx.restore();
          },
          draw: function draw(chartArea) {
            var me = this;

            if (!me._isVisible()) {
              return;
            }

            me._drawGrid(chartArea);

            me._drawTitle();

            me._drawLabels();
          },

          /**
           * @private
           */
          _layers: function _layers() {
            var me = this;
            var opts = me.options;
            var tz = opts.ticks && opts.ticks.z || 0;
            var gz = opts.gridLines && opts.gridLines.z || 0;

            if (!me._isVisible() || tz === gz || me.draw !== me._draw) {
              // backward compatibility: draw has been overridden by custom scale
              return [{
                z: tz,
                draw: function draw() {
                  me.draw.apply(me, arguments);
                }
              }];
            }

            return [{
              z: gz,
              draw: function draw() {
                me._drawGrid.apply(me, arguments);

                me._drawTitle.apply(me, arguments);
              }
            }, {
              z: tz,
              draw: function draw() {
                me._drawLabels.apply(me, arguments);
              }
            }];
          },

          /**
           * @private
           */
          _getMatchingVisibleMetas: function _getMatchingVisibleMetas(type) {
            var me = this;
            var isHorizontal = me.isHorizontal();
            return me.chart._getSortedVisibleDatasetMetas().filter(function (meta) {
              return (!type || meta.type === type) && (isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id);
            });
          }
        });
        Scale.prototype._draw = Scale.prototype.draw;
        var core_scale = Scale;
        var isNullOrUndef$1 = helpers$1.isNullOrUndef;
        var defaultConfig = {
          position: 'bottom'
        };
        var scale_category = core_scale.extend({
          determineDataLimits: function determineDataLimits() {
            var me = this;

            var labels = me._getLabels();

            var ticksOpts = me.options.ticks;
            var min = ticksOpts.min;
            var max = ticksOpts.max;
            var minIndex = 0;
            var maxIndex = labels.length - 1;
            var findIndex;

            if (min !== undefined) {
              // user specified min value
              findIndex = labels.indexOf(min);

              if (findIndex >= 0) {
                minIndex = findIndex;
              }
            }

            if (max !== undefined) {
              // user specified max value
              findIndex = labels.indexOf(max);

              if (findIndex >= 0) {
                maxIndex = findIndex;
              }
            }

            me.minIndex = minIndex;
            me.maxIndex = maxIndex;
            me.min = labels[minIndex];
            me.max = labels[maxIndex];
          },
          buildTicks: function buildTicks() {
            var me = this;

            var labels = me._getLabels();

            var minIndex = me.minIndex;
            var maxIndex = me.maxIndex; // If we are viewing some subset of labels, slice the original array

            me.ticks = minIndex === 0 && maxIndex === labels.length - 1 ? labels : labels.slice(minIndex, maxIndex + 1);
          },
          getLabelForIndex: function getLabelForIndex(index, datasetIndex) {
            var me = this;
            var chart = me.chart;

            if (chart.getDatasetMeta(datasetIndex).controller._getValueScaleId() === me.id) {
              return me.getRightValue(chart.data.datasets[datasetIndex].data[index]);
            }

            return me._getLabels()[index];
          },
          _configure: function _configure() {
            var me = this;
            var offset = me.options.offset;
            var ticks = me.ticks;

            core_scale.prototype._configure.call(me);

            if (!me.isHorizontal()) {
              // For backward compatibility, vertical category scale reverse is inverted.
              me._reversePixels = !me._reversePixels;
            }

            if (!ticks) {
              return;
            }

            me._startValue = me.minIndex - (offset ? 0.5 : 0);
            me._valueRange = Math.max(ticks.length - (offset ? 0 : 1), 1);
          },
          // Used to get data value locations.  Value can either be an index or a numerical value
          getPixelForValue: function getPixelForValue(value, index, datasetIndex) {
            var me = this;
            var valueCategory, labels, idx;

            if (!isNullOrUndef$1(index) && !isNullOrUndef$1(datasetIndex)) {
              value = me.chart.data.datasets[datasetIndex].data[index];
            } // If value is a data object, then index is the index in the data array,
            // not the index of the scale. We need to change that.


            if (!isNullOrUndef$1(value)) {
              valueCategory = me.isHorizontal() ? value.x : value.y;
            }

            if (valueCategory !== undefined || value !== undefined && isNaN(index)) {
              labels = me._getLabels();
              value = helpers$1.valueOrDefault(valueCategory, value);
              idx = labels.indexOf(value);
              index = idx !== -1 ? idx : index;

              if (isNaN(index)) {
                index = value;
              }
            }

            return me.getPixelForDecimal((index - me._startValue) / me._valueRange);
          },
          getPixelForTick: function getPixelForTick(index) {
            var ticks = this.ticks;
            return index < 0 || index > ticks.length - 1 ? null : this.getPixelForValue(ticks[index], index + this.minIndex);
          },
          getValueForPixel: function getValueForPixel(pixel) {
            var me = this;
            var value = Math.round(me._startValue + me.getDecimalForPixel(pixel) * me._valueRange);
            return Math.min(Math.max(value, 0), me.ticks.length - 1);
          },
          getBasePixel: function getBasePixel() {
            return this.bottom;
          }
        }); // INTERNAL: static default options, registered in src/index.js

        var _defaults = defaultConfig;
        scale_category._defaults = _defaults;
        var noop = helpers$1.noop;
        var isNullOrUndef$2 = helpers$1.isNullOrUndef;
        /**
         * Generate a set of linear ticks
         * @param generationOptions the options used to generate the ticks
         * @param dataRange the range of the data
         * @returns {number[]} array of tick values
         */

        function generateTicks(generationOptions, dataRange) {
          var ticks = []; // To get a "nice" value for the tick spacing, we will use the appropriately named
          // "nice number" algorithm. See https://stackoverflow.com/questions/8506881/nice-label-algorithm-for-charts-with-minimum-ticks
          // for details.

          var MIN_SPACING = 1e-14;
          var stepSize = generationOptions.stepSize;
          var unit = stepSize || 1;
          var maxNumSpaces = generationOptions.maxTicks - 1;
          var min = generationOptions.min;
          var max = generationOptions.max;
          var precision = generationOptions.precision;
          var rmin = dataRange.min;
          var rmax = dataRange.max;
          var spacing = helpers$1.niceNum((rmax - rmin) / maxNumSpaces / unit) * unit;
          var factor, niceMin, niceMax, numSpaces; // Beyond MIN_SPACING floating point numbers being to lose precision
          // such that we can't do the math necessary to generate ticks

          if (spacing < MIN_SPACING && isNullOrUndef$2(min) && isNullOrUndef$2(max)) {
            return [rmin, rmax];
          }

          numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);

          if (numSpaces > maxNumSpaces) {
            // If the calculated num of spaces exceeds maxNumSpaces, recalculate it
            spacing = helpers$1.niceNum(numSpaces * spacing / maxNumSpaces / unit) * unit;
          }

          if (stepSize || isNullOrUndef$2(precision)) {
            // If a precision is not specified, calculate factor based on spacing
            factor = Math.pow(10, helpers$1._decimalPlaces(spacing));
          } else {
            // If the user specified a precision, round to that number of decimal places
            factor = Math.pow(10, precision);
            spacing = Math.ceil(spacing * factor) / factor;
          }

          niceMin = Math.floor(rmin / spacing) * spacing;
          niceMax = Math.ceil(rmax / spacing) * spacing; // If min, max and stepSize is set and they make an evenly spaced scale use it.

          if (stepSize) {
            // If very close to our whole number, use it.
            if (!isNullOrUndef$2(min) && helpers$1.almostWhole(min / spacing, spacing / 1000)) {
              niceMin = min;
            }

            if (!isNullOrUndef$2(max) && helpers$1.almostWhole(max / spacing, spacing / 1000)) {
              niceMax = max;
            }
          }

          numSpaces = (niceMax - niceMin) / spacing; // If very close to our rounded value, use it.

          if (helpers$1.almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {
            numSpaces = Math.round(numSpaces);
          } else {
            numSpaces = Math.ceil(numSpaces);
          }

          niceMin = Math.round(niceMin * factor) / factor;
          niceMax = Math.round(niceMax * factor) / factor;
          ticks.push(isNullOrUndef$2(min) ? niceMin : min);

          for (var j = 1; j < numSpaces; ++j) {
            ticks.push(Math.round((niceMin + j * spacing) * factor) / factor);
          }

          ticks.push(isNullOrUndef$2(max) ? niceMax : max);
          return ticks;
        }

        var scale_linearbase = core_scale.extend({
          getRightValue: function getRightValue(value) {
            if (typeof value === 'string') {
              return +value;
            }

            return core_scale.prototype.getRightValue.call(this, value);
          },
          handleTickRangeOptions: function handleTickRangeOptions() {
            var me = this;
            var opts = me.options;
            var tickOpts = opts.ticks; // If we are forcing it to begin at 0, but 0 will already be rendered on the chart,
            // do nothing since that would make the chart weird. If the user really wants a weird chart
            // axis, they can manually override it

            if (tickOpts.beginAtZero) {
              var minSign = helpers$1.sign(me.min);
              var maxSign = helpers$1.sign(me.max);

              if (minSign < 0 && maxSign < 0) {
                // move the top up to 0
                me.max = 0;
              } else if (minSign > 0 && maxSign > 0) {
                // move the bottom down to 0
                me.min = 0;
              }
            }

            var setMin = tickOpts.min !== undefined || tickOpts.suggestedMin !== undefined;
            var setMax = tickOpts.max !== undefined || tickOpts.suggestedMax !== undefined;

            if (tickOpts.min !== undefined) {
              me.min = tickOpts.min;
            } else if (tickOpts.suggestedMin !== undefined) {
              if (me.min === null) {
                me.min = tickOpts.suggestedMin;
              } else {
                me.min = Math.min(me.min, tickOpts.suggestedMin);
              }
            }

            if (tickOpts.max !== undefined) {
              me.max = tickOpts.max;
            } else if (tickOpts.suggestedMax !== undefined) {
              if (me.max === null) {
                me.max = tickOpts.suggestedMax;
              } else {
                me.max = Math.max(me.max, tickOpts.suggestedMax);
              }
            }

            if (setMin !== setMax) {
              // We set the min or the max but not both.
              // So ensure that our range is good
              // Inverted or 0 length range can happen when
              // ticks.min is set, and no datasets are visible
              if (me.min >= me.max) {
                if (setMin) {
                  me.max = me.min + 1;
                } else {
                  me.min = me.max - 1;
                }
              }
            }

            if (me.min === me.max) {
              me.max++;

              if (!tickOpts.beginAtZero) {
                me.min--;
              }
            }
          },
          getTickLimit: function getTickLimit() {
            var me = this;
            var tickOpts = me.options.ticks;
            var stepSize = tickOpts.stepSize;
            var maxTicksLimit = tickOpts.maxTicksLimit;
            var maxTicks;

            if (stepSize) {
              maxTicks = Math.ceil(me.max / stepSize) - Math.floor(me.min / stepSize) + 1;
            } else {
              maxTicks = me._computeTickLimit();
              maxTicksLimit = maxTicksLimit || 11;
            }

            if (maxTicksLimit) {
              maxTicks = Math.min(maxTicksLimit, maxTicks);
            }

            return maxTicks;
          },
          _computeTickLimit: function _computeTickLimit() {
            return Number.POSITIVE_INFINITY;
          },
          handleDirectionalChanges: noop,
          buildTicks: function buildTicks() {
            var me = this;
            var opts = me.options;
            var tickOpts = opts.ticks; // Figure out what the max number of ticks we can support it is based on the size of
            // the axis area. For now, we say that the minimum tick spacing in pixels must be 40
            // We also limit the maximum number of ticks to 11 which gives a nice 10 squares on
            // the graph. Make sure we always have at least 2 ticks

            var maxTicks = me.getTickLimit();
            maxTicks = Math.max(2, maxTicks);
            var numericGeneratorOptions = {
              maxTicks: maxTicks,
              min: tickOpts.min,
              max: tickOpts.max,
              precision: tickOpts.precision,
              stepSize: helpers$1.valueOrDefault(tickOpts.fixedStepSize, tickOpts.stepSize)
            };
            var ticks = me.ticks = generateTicks(numericGeneratorOptions, me);
            me.handleDirectionalChanges(); // At this point, we need to update our max and min given the tick values since we have expanded the
            // range of the scale

            me.max = helpers$1.max(ticks);
            me.min = helpers$1.min(ticks);

            if (tickOpts.reverse) {
              ticks.reverse();
              me.start = me.max;
              me.end = me.min;
            } else {
              me.start = me.min;
              me.end = me.max;
            }
          },
          convertTicksToLabels: function convertTicksToLabels() {
            var me = this;
            me.ticksAsNumbers = me.ticks.slice();
            me.zeroLineIndex = me.ticks.indexOf(0);
            core_scale.prototype.convertTicksToLabels.call(me);
          },
          _configure: function _configure() {
            var me = this;
            var ticks = me.getTicks();
            var start = me.min;
            var end = me.max;
            var offset;

            core_scale.prototype._configure.call(me);

            if (me.options.offset && ticks.length) {
              offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;
              start -= offset;
              end += offset;
            }

            me._startValue = start;
            me._endValue = end;
            me._valueRange = end - start;
          }
        });
        var defaultConfig$1 = {
          position: 'left',
          ticks: {
            callback: core_ticks.formatters.linear
          }
        };
        var DEFAULT_MIN = 0;
        var DEFAULT_MAX = 1;

        function getOrCreateStack(stacks, stacked, meta) {
          var key = [meta.type, // we have a separate stack for stack=undefined datasets when the opts.stacked is undefined
          stacked === undefined && meta.stack === undefined ? meta.index : '', meta.stack].join('.');

          if (stacks[key] === undefined) {
            stacks[key] = {
              pos: [],
              neg: []
            };
          }

          return stacks[key];
        }

        function stackData(scale, stacks, meta, data) {
          var opts = scale.options;
          var stacked = opts.stacked;
          var stack = getOrCreateStack(stacks, stacked, meta);
          var pos = stack.pos;
          var neg = stack.neg;
          var ilen = data.length;
          var i, value;

          for (i = 0; i < ilen; ++i) {
            value = scale._parseValue(data[i]);

            if (isNaN(value.min) || isNaN(value.max) || meta.data[i].hidden) {
              continue;
            }

            pos[i] = pos[i] || 0;
            neg[i] = neg[i] || 0;

            if (opts.relativePoints) {
              pos[i] = 100;
            } else if (value.min < 0 || value.max < 0) {
              neg[i] += value.min;
            } else {
              pos[i] += value.max;
            }
          }
        }

        function updateMinMax(scale, meta, data) {
          var ilen = data.length;
          var i, value;

          for (i = 0; i < ilen; ++i) {
            value = scale._parseValue(data[i]);

            if (isNaN(value.min) || isNaN(value.max) || meta.data[i].hidden) {
              continue;
            }

            scale.min = Math.min(scale.min, value.min);
            scale.max = Math.max(scale.max, value.max);
          }
        }

        var scale_linear = scale_linearbase.extend({
          determineDataLimits: function determineDataLimits() {
            var me = this;
            var opts = me.options;
            var chart = me.chart;
            var datasets = chart.data.datasets;

            var metasets = me._getMatchingVisibleMetas();

            var hasStacks = opts.stacked;
            var stacks = {};
            var ilen = metasets.length;
            var i, meta, data, values;
            me.min = Number.POSITIVE_INFINITY;
            me.max = Number.NEGATIVE_INFINITY;

            if (hasStacks === undefined) {
              for (i = 0; !hasStacks && i < ilen; ++i) {
                meta = metasets[i];
                hasStacks = meta.stack !== undefined;
              }
            }

            for (i = 0; i < ilen; ++i) {
              meta = metasets[i];
              data = datasets[meta.index].data;

              if (hasStacks) {
                stackData(me, stacks, meta, data);
              } else {
                updateMinMax(me, meta, data);
              }
            }

            helpers$1.each(stacks, function (stackValues) {
              values = stackValues.pos.concat(stackValues.neg);
              me.min = Math.min(me.min, helpers$1.min(values));
              me.max = Math.max(me.max, helpers$1.max(values));
            });
            me.min = helpers$1.isFinite(me.min) && !isNaN(me.min) ? me.min : DEFAULT_MIN;
            me.max = helpers$1.isFinite(me.max) && !isNaN(me.max) ? me.max : DEFAULT_MAX; // Common base implementation to handle ticks.min, ticks.max, ticks.beginAtZero

            me.handleTickRangeOptions();
          },
          // Returns the maximum number of ticks based on the scale dimension
          _computeTickLimit: function _computeTickLimit() {
            var me = this;
            var tickFont;

            if (me.isHorizontal()) {
              return Math.ceil(me.width / 40);
            }

            tickFont = helpers$1.options._parseFont(me.options.ticks);
            return Math.ceil(me.height / tickFont.lineHeight);
          },
          // Called after the ticks are built. We need
          handleDirectionalChanges: function handleDirectionalChanges() {
            if (!this.isHorizontal()) {
              // We are in a vertical orientation. The top value is the highest. So reverse the array
              this.ticks.reverse();
            }
          },
          getLabelForIndex: function getLabelForIndex(index, datasetIndex) {
            return this._getScaleLabel(this.chart.data.datasets[datasetIndex].data[index]);
          },
          // Utils
          getPixelForValue: function getPixelForValue(value) {
            var me = this;
            return me.getPixelForDecimal((+me.getRightValue(value) - me._startValue) / me._valueRange);
          },
          getValueForPixel: function getValueForPixel(pixel) {
            return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;
          },
          getPixelForTick: function getPixelForTick(index) {
            var ticks = this.ticksAsNumbers;

            if (index < 0 || index > ticks.length - 1) {
              return null;
            }

            return this.getPixelForValue(ticks[index]);
          }
        }); // INTERNAL: static default options, registered in src/index.js

        var _defaults$1 = defaultConfig$1;
        scale_linear._defaults = _defaults$1;
        var valueOrDefault$b = helpers$1.valueOrDefault;
        var log10 = helpers$1.math.log10;
        /**
         * Generate a set of logarithmic ticks
         * @param generationOptions the options used to generate the ticks
         * @param dataRange the range of the data
         * @returns {number[]} array of tick values
         */

        function generateTicks$1(generationOptions, dataRange) {
          var ticks = [];
          var tickVal = valueOrDefault$b(generationOptions.min, Math.pow(10, Math.floor(log10(dataRange.min))));
          var endExp = Math.floor(log10(dataRange.max));
          var endSignificand = Math.ceil(dataRange.max / Math.pow(10, endExp));
          var exp, significand;

          if (tickVal === 0) {
            exp = Math.floor(log10(dataRange.minNotZero));
            significand = Math.floor(dataRange.minNotZero / Math.pow(10, exp));
            ticks.push(tickVal);
            tickVal = significand * Math.pow(10, exp);
          } else {
            exp = Math.floor(log10(tickVal));
            significand = Math.floor(tickVal / Math.pow(10, exp));
          }

          var precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;

          do {
            ticks.push(tickVal);
            ++significand;

            if (significand === 10) {
              significand = 1;
              ++exp;
              precision = exp >= 0 ? 1 : precision;
            }

            tickVal = Math.round(significand * Math.pow(10, exp) * precision) / precision;
          } while (exp < endExp || exp === endExp && significand < endSignificand);

          var lastTick = valueOrDefault$b(generationOptions.max, tickVal);
          ticks.push(lastTick);
          return ticks;
        }

        var defaultConfig$2 = {
          position: 'left',
          // label settings
          ticks: {
            callback: core_ticks.formatters.logarithmic
          }
        }; // TODO(v3): change this to positiveOrDefault

        function nonNegativeOrDefault(value, defaultValue) {
          return helpers$1.isFinite(value) && value >= 0 ? value : defaultValue;
        }

        var scale_logarithmic = core_scale.extend({
          determineDataLimits: function determineDataLimits() {
            var me = this;
            var opts = me.options;
            var chart = me.chart;
            var datasets = chart.data.datasets;
            var isHorizontal = me.isHorizontal();

            function IDMatches(meta) {
              return isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id;
            }

            var datasetIndex, meta, value, data, i, ilen; // Calculate Range

            me.min = Number.POSITIVE_INFINITY;
            me.max = Number.NEGATIVE_INFINITY;
            me.minNotZero = Number.POSITIVE_INFINITY;
            var hasStacks = opts.stacked;

            if (hasStacks === undefined) {
              for (datasetIndex = 0; datasetIndex < datasets.length; datasetIndex++) {
                meta = chart.getDatasetMeta(datasetIndex);

                if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta) && meta.stack !== undefined) {
                  hasStacks = true;
                  break;
                }
              }
            }

            if (opts.stacked || hasStacks) {
              var valuesPerStack = {};

              for (datasetIndex = 0; datasetIndex < datasets.length; datasetIndex++) {
                meta = chart.getDatasetMeta(datasetIndex);
                var key = [// we have a separate stack for stack=undefined datasets when the opts.stacked is undefined
                meta.type, opts.stacked === undefined && meta.stack === undefined ? datasetIndex : '', meta.stack].join('.');

                if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
                  if (valuesPerStack[key] === undefined) {
                    valuesPerStack[key] = [];
                  }

                  data = datasets[datasetIndex].data;

                  for (i = 0, ilen = data.length; i < ilen; i++) {
                    var values = valuesPerStack[key];
                    value = me._parseValue(data[i]); // invalid, hidden and negative values are ignored

                    if (isNaN(value.min) || isNaN(value.max) || meta.data[i].hidden || value.min < 0 || value.max < 0) {
                      continue;
                    }

                    values[i] = values[i] || 0;
                    values[i] += value.max;
                  }
                }
              }

              helpers$1.each(valuesPerStack, function (valuesForType) {
                if (valuesForType.length > 0) {
                  var minVal = helpers$1.min(valuesForType);
                  var maxVal = helpers$1.max(valuesForType);
                  me.min = Math.min(me.min, minVal);
                  me.max = Math.max(me.max, maxVal);
                }
              });
            } else {
              for (datasetIndex = 0; datasetIndex < datasets.length; datasetIndex++) {
                meta = chart.getDatasetMeta(datasetIndex);

                if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
                  data = datasets[datasetIndex].data;

                  for (i = 0, ilen = data.length; i < ilen; i++) {
                    value = me._parseValue(data[i]); // invalid, hidden and negative values are ignored

                    if (isNaN(value.min) || isNaN(value.max) || meta.data[i].hidden || value.min < 0 || value.max < 0) {
                      continue;
                    }

                    me.min = Math.min(value.min, me.min);
                    me.max = Math.max(value.max, me.max);

                    if (value.min !== 0) {
                      me.minNotZero = Math.min(value.min, me.minNotZero);
                    }
                  }
                }
              }
            }

            me.min = helpers$1.isFinite(me.min) ? me.min : null;
            me.max = helpers$1.isFinite(me.max) ? me.max : null;
            me.minNotZero = helpers$1.isFinite(me.minNotZero) ? me.minNotZero : null; // Common base implementation to handle ticks.min, ticks.max

            this.handleTickRangeOptions();
          },
          handleTickRangeOptions: function handleTickRangeOptions() {
            var me = this;
            var tickOpts = me.options.ticks;
            var DEFAULT_MIN = 1;
            var DEFAULT_MAX = 10;
            me.min = nonNegativeOrDefault(tickOpts.min, me.min);
            me.max = nonNegativeOrDefault(tickOpts.max, me.max);

            if (me.min === me.max) {
              if (me.min !== 0 && me.min !== null) {
                me.min = Math.pow(10, Math.floor(log10(me.min)) - 1);
                me.max = Math.pow(10, Math.floor(log10(me.max)) + 1);
              } else {
                me.min = DEFAULT_MIN;
                me.max = DEFAULT_MAX;
              }
            }

            if (me.min === null) {
              me.min = Math.pow(10, Math.floor(log10(me.max)) - 1);
            }

            if (me.max === null) {
              me.max = me.min !== 0 ? Math.pow(10, Math.floor(log10(me.min)) + 1) : DEFAULT_MAX;
            }

            if (me.minNotZero === null) {
              if (me.min > 0) {
                me.minNotZero = me.min;
              } else if (me.max < 1) {
                me.minNotZero = Math.pow(10, Math.floor(log10(me.max)));
              } else {
                me.minNotZero = DEFAULT_MIN;
              }
            }
          },
          buildTicks: function buildTicks() {
            var me = this;
            var tickOpts = me.options.ticks;
            var reverse = !me.isHorizontal();
            var generationOptions = {
              min: nonNegativeOrDefault(tickOpts.min),
              max: nonNegativeOrDefault(tickOpts.max)
            };
            var ticks = me.ticks = generateTicks$1(generationOptions, me); // At this point, we need to update our max and min given the tick values since we have expanded the
            // range of the scale

            me.max = helpers$1.max(ticks);
            me.min = helpers$1.min(ticks);

            if (tickOpts.reverse) {
              reverse = !reverse;
              me.start = me.max;
              me.end = me.min;
            } else {
              me.start = me.min;
              me.end = me.max;
            }

            if (reverse) {
              ticks.reverse();
            }
          },
          convertTicksToLabels: function convertTicksToLabels() {
            this.tickValues = this.ticks.slice();
            core_scale.prototype.convertTicksToLabels.call(this);
          },
          // Get the correct tooltip label
          getLabelForIndex: function getLabelForIndex(index, datasetIndex) {
            return this._getScaleLabel(this.chart.data.datasets[datasetIndex].data[index]);
          },
          getPixelForTick: function getPixelForTick(index) {
            var ticks = this.tickValues;

            if (index < 0 || index > ticks.length - 1) {
              return null;
            }

            return this.getPixelForValue(ticks[index]);
          },

          /**
           * Returns the value of the first tick.
           * @param {number} value - The minimum not zero value.
           * @return {number} The first tick value.
           * @private
           */
          _getFirstTickValue: function _getFirstTickValue(value) {
            var exp = Math.floor(log10(value));
            var significand = Math.floor(value / Math.pow(10, exp));
            return significand * Math.pow(10, exp);
          },
          _configure: function _configure() {
            var me = this;
            var start = me.min;
            var offset = 0;

            core_scale.prototype._configure.call(me);

            if (start === 0) {
              start = me._getFirstTickValue(me.minNotZero);
              offset = valueOrDefault$b(me.options.ticks.fontSize, core_defaults.global.defaultFontSize) / me._length;
            }

            me._startValue = log10(start);
            me._valueOffset = offset;
            me._valueRange = (log10(me.max) - log10(start)) / (1 - offset);
          },
          getPixelForValue: function getPixelForValue(value) {
            var me = this;
            var decimal = 0;
            value = +me.getRightValue(value);

            if (value > me.min && value > 0) {
              decimal = (log10(value) - me._startValue) / me._valueRange + me._valueOffset;
            }

            return me.getPixelForDecimal(decimal);
          },
          getValueForPixel: function getValueForPixel(pixel) {
            var me = this;
            var decimal = me.getDecimalForPixel(pixel);
            return decimal === 0 && me.min === 0 ? 0 : Math.pow(10, me._startValue + (decimal - me._valueOffset) * me._valueRange);
          }
        }); // INTERNAL: static default options, registered in src/index.js

        var _defaults$2 = defaultConfig$2;
        scale_logarithmic._defaults = _defaults$2;
        var valueOrDefault$c = helpers$1.valueOrDefault;
        var valueAtIndexOrDefault$1 = helpers$1.valueAtIndexOrDefault;
        var resolve$4 = helpers$1.options.resolve;
        var defaultConfig$3 = {
          display: true,
          // Boolean - Whether to animate scaling the chart from the centre
          animate: true,
          position: 'chartArea',
          angleLines: {
            display: true,
            color: 'rgba(0,0,0,0.1)',
            lineWidth: 1,
            borderDash: [],
            borderDashOffset: 0.0
          },
          gridLines: {
            circular: false
          },
          // label settings
          ticks: {
            // Boolean - Show a backdrop to the scale label
            showLabelBackdrop: true,
            // String - The colour of the label backdrop
            backdropColor: 'rgba(255,255,255,0.75)',
            // Number - The backdrop padding above & below the label in pixels
            backdropPaddingY: 2,
            // Number - The backdrop padding to the side of the label in pixels
            backdropPaddingX: 2,
            callback: core_ticks.formatters.linear
          },
          pointLabels: {
            // Boolean - if true, show point labels
            display: true,
            // Number - Point label font size in pixels
            fontSize: 10,
            // Function - Used to convert point labels
            callback: function callback(label) {
              return label;
            }
          }
        };

        function getTickBackdropHeight(opts) {
          var tickOpts = opts.ticks;

          if (tickOpts.display && opts.display) {
            return valueOrDefault$c(tickOpts.fontSize, core_defaults.global.defaultFontSize) + tickOpts.backdropPaddingY * 2;
          }

          return 0;
        }

        function measureLabelSize(ctx, lineHeight, label) {
          if (helpers$1.isArray(label)) {
            return {
              w: helpers$1.longestText(ctx, ctx.font, label),
              h: label.length * lineHeight
            };
          }

          return {
            w: ctx.measureText(label).width,
            h: lineHeight
          };
        }

        function determineLimits(angle, pos, size, min, max) {
          if (angle === min || angle === max) {
            return {
              start: pos - size / 2,
              end: pos + size / 2
            };
          } else if (angle < min || angle > max) {
            return {
              start: pos - size,
              end: pos
            };
          }

          return {
            start: pos,
            end: pos + size
          };
        }
        /**
         * Helper function to fit a radial linear scale with point labels
         */


        function fitWithPointLabels(scale) {
          // Right, this is really confusing and there is a lot of maths going on here
          // The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9
          //
          // Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif
          //
          // Solution:
          //
          // We assume the radius of the polygon is half the size of the canvas at first
          // at each index we check if the text overlaps.
          //
          // Where it does, we store that angle and that index.
          //
          // After finding the largest index and angle we calculate how much we need to remove
          // from the shape radius to move the point inwards by that x.
          //
          // We average the left and right distances to get the maximum shape radius that can fit in the box
          // along with labels.
          //
          // Once we have that, we can find the centre point for the chart, by taking the x text protrusion
          // on each side, removing that from the size, halving it and adding the left x protrusion width.
          //
          // This will mean we have a shape fitted to the canvas, as large as it can be with the labels
          // and position it in the most space efficient manner
          //
          // https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif
          var plFont = helpers$1.options._parseFont(scale.options.pointLabels); // Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.
          // Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points


          var furthestLimits = {
            l: 0,
            r: scale.width,
            t: 0,
            b: scale.height - scale.paddingTop
          };
          var furthestAngles = {};
          var i, textSize, pointPosition;
          scale.ctx.font = plFont.string;
          scale._pointLabelSizes = [];
          var valueCount = scale.chart.data.labels.length;

          for (i = 0; i < valueCount; i++) {
            pointPosition = scale.getPointPosition(i, scale.drawingArea + 5);
            textSize = measureLabelSize(scale.ctx, plFont.lineHeight, scale.pointLabels[i]);
            scale._pointLabelSizes[i] = textSize; // Add quarter circle to make degree 0 mean top of circle

            var angleRadians = scale.getIndexAngle(i);
            var angle = helpers$1.toDegrees(angleRadians) % 360;
            var hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);
            var vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);

            if (hLimits.start < furthestLimits.l) {
              furthestLimits.l = hLimits.start;
              furthestAngles.l = angleRadians;
            }

            if (hLimits.end > furthestLimits.r) {
              furthestLimits.r = hLimits.end;
              furthestAngles.r = angleRadians;
            }

            if (vLimits.start < furthestLimits.t) {
              furthestLimits.t = vLimits.start;
              furthestAngles.t = angleRadians;
            }

            if (vLimits.end > furthestLimits.b) {
              furthestLimits.b = vLimits.end;
              furthestAngles.b = angleRadians;
            }
          }

          scale.setReductions(scale.drawingArea, furthestLimits, furthestAngles);
        }

        function getTextAlignForAngle(angle) {
          if (angle === 0 || angle === 180) {
            return 'center';
          } else if (angle < 180) {
            return 'left';
          }

          return 'right';
        }

        function fillText(ctx, text, position, lineHeight) {
          var y = position.y + lineHeight / 2;
          var i, ilen;

          if (helpers$1.isArray(text)) {
            for (i = 0, ilen = text.length; i < ilen; ++i) {
              ctx.fillText(text[i], position.x, y);
              y += lineHeight;
            }
          } else {
            ctx.fillText(text, position.x, y);
          }
        }

        function adjustPointPositionForLabelHeight(angle, textSize, position) {
          if (angle === 90 || angle === 270) {
            position.y -= textSize.h / 2;
          } else if (angle > 270 || angle < 90) {
            position.y -= textSize.h;
          }
        }

        function drawPointLabels(scale) {
          var ctx = scale.ctx;
          var opts = scale.options;
          var pointLabelOpts = opts.pointLabels;
          var tickBackdropHeight = getTickBackdropHeight(opts);
          var outerDistance = scale.getDistanceFromCenterForValue(opts.ticks.reverse ? scale.min : scale.max);

          var plFont = helpers$1.options._parseFont(pointLabelOpts);

          ctx.save();
          ctx.font = plFont.string;
          ctx.textBaseline = 'middle';

          for (var i = scale.chart.data.labels.length - 1; i >= 0; i--) {
            // Extra pixels out for some label spacing
            var extra = i === 0 ? tickBackdropHeight / 2 : 0;
            var pointLabelPosition = scale.getPointPosition(i, outerDistance + extra + 5); // Keep this in loop since we may support array properties here

            var pointLabelFontColor = valueAtIndexOrDefault$1(pointLabelOpts.fontColor, i, core_defaults.global.defaultFontColor);
            ctx.fillStyle = pointLabelFontColor;
            var angleRadians = scale.getIndexAngle(i);
            var angle = helpers$1.toDegrees(angleRadians);
            ctx.textAlign = getTextAlignForAngle(angle);
            adjustPointPositionForLabelHeight(angle, scale._pointLabelSizes[i], pointLabelPosition);
            fillText(ctx, scale.pointLabels[i], pointLabelPosition, plFont.lineHeight);
          }

          ctx.restore();
        }

        function drawRadiusLine(scale, gridLineOpts, radius, index) {
          var ctx = scale.ctx;
          var circular = gridLineOpts.circular;
          var valueCount = scale.chart.data.labels.length;
          var lineColor = valueAtIndexOrDefault$1(gridLineOpts.color, index - 1);
          var lineWidth = valueAtIndexOrDefault$1(gridLineOpts.lineWidth, index - 1);
          var pointPosition;

          if (!circular && !valueCount || !lineColor || !lineWidth) {
            return;
          }

          ctx.save();
          ctx.strokeStyle = lineColor;
          ctx.lineWidth = lineWidth;

          if (ctx.setLineDash) {
            ctx.setLineDash(gridLineOpts.borderDash || []);
            ctx.lineDashOffset = gridLineOpts.borderDashOffset || 0.0;
          }

          ctx.beginPath();

          if (circular) {
            // Draw circular arcs between the points
            ctx.arc(scale.xCenter, scale.yCenter, radius, 0, Math.PI * 2);
          } else {
            // Draw straight lines connecting each index
            pointPosition = scale.getPointPosition(0, radius);
            ctx.moveTo(pointPosition.x, pointPosition.y);

            for (var i = 1; i < valueCount; i++) {
              pointPosition = scale.getPointPosition(i, radius);
              ctx.lineTo(pointPosition.x, pointPosition.y);
            }
          }

          ctx.closePath();
          ctx.stroke();
          ctx.restore();
        }

        function numberOrZero(param) {
          return helpers$1.isNumber(param) ? param : 0;
        }

        var scale_radialLinear = scale_linearbase.extend({
          setDimensions: function setDimensions() {
            var me = this; // Set the unconstrained dimension before label rotation

            me.width = me.maxWidth;
            me.height = me.maxHeight;
            me.paddingTop = getTickBackdropHeight(me.options) / 2;
            me.xCenter = Math.floor(me.width / 2);
            me.yCenter = Math.floor((me.height - me.paddingTop) / 2);
            me.drawingArea = Math.min(me.height - me.paddingTop, me.width) / 2;
          },
          determineDataLimits: function determineDataLimits() {
            var me = this;
            var chart = me.chart;
            var min = Number.POSITIVE_INFINITY;
            var max = Number.NEGATIVE_INFINITY;
            helpers$1.each(chart.data.datasets, function (dataset, datasetIndex) {
              if (chart.isDatasetVisible(datasetIndex)) {
                var meta = chart.getDatasetMeta(datasetIndex);
                helpers$1.each(dataset.data, function (rawValue, index) {
                  var value = +me.getRightValue(rawValue);

                  if (isNaN(value) || meta.data[index].hidden) {
                    return;
                  }

                  min = Math.min(value, min);
                  max = Math.max(value, max);
                });
              }
            });
            me.min = min === Number.POSITIVE_INFINITY ? 0 : min;
            me.max = max === Number.NEGATIVE_INFINITY ? 0 : max; // Common base implementation to handle ticks.min, ticks.max, ticks.beginAtZero

            me.handleTickRangeOptions();
          },
          // Returns the maximum number of ticks based on the scale dimension
          _computeTickLimit: function _computeTickLimit() {
            return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));
          },
          convertTicksToLabels: function convertTicksToLabels() {
            var me = this;
            scale_linearbase.prototype.convertTicksToLabels.call(me); // Point labels

            me.pointLabels = me.chart.data.labels.map(function () {
              var label = helpers$1.callback(me.options.pointLabels.callback, arguments, me);
              return label || label === 0 ? label : '';
            });
          },
          getLabelForIndex: function getLabelForIndex(index, datasetIndex) {
            return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);
          },
          fit: function fit() {
            var me = this;
            var opts = me.options;

            if (opts.display && opts.pointLabels.display) {
              fitWithPointLabels(me);
            } else {
              me.setCenterPoint(0, 0, 0, 0);
            }
          },

          /**
           * Set radius reductions and determine new radius and center point
           * @private
           */
          setReductions: function setReductions(largestPossibleRadius, furthestLimits, furthestAngles) {
            var me = this;
            var radiusReductionLeft = furthestLimits.l / Math.sin(furthestAngles.l);
            var radiusReductionRight = Math.max(furthestLimits.r - me.width, 0) / Math.sin(furthestAngles.r);
            var radiusReductionTop = -furthestLimits.t / Math.cos(furthestAngles.t);
            var radiusReductionBottom = -Math.max(furthestLimits.b - (me.height - me.paddingTop), 0) / Math.cos(furthestAngles.b);
            radiusReductionLeft = numberOrZero(radiusReductionLeft);
            radiusReductionRight = numberOrZero(radiusReductionRight);
            radiusReductionTop = numberOrZero(radiusReductionTop);
            radiusReductionBottom = numberOrZero(radiusReductionBottom);
            me.drawingArea = Math.min(Math.floor(largestPossibleRadius - (radiusReductionLeft + radiusReductionRight) / 2), Math.floor(largestPossibleRadius - (radiusReductionTop + radiusReductionBottom) / 2));
            me.setCenterPoint(radiusReductionLeft, radiusReductionRight, radiusReductionTop, radiusReductionBottom);
          },
          setCenterPoint: function setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {
            var me = this;
            var maxRight = me.width - rightMovement - me.drawingArea;
            var maxLeft = leftMovement + me.drawingArea;
            var maxTop = topMovement + me.drawingArea;
            var maxBottom = me.height - me.paddingTop - bottomMovement - me.drawingArea;
            me.xCenter = Math.floor((maxLeft + maxRight) / 2 + me.left);
            me.yCenter = Math.floor((maxTop + maxBottom) / 2 + me.top + me.paddingTop);
          },
          getIndexAngle: function getIndexAngle(index) {
            var chart = this.chart;
            var angleMultiplier = 360 / chart.data.labels.length;
            var options = chart.options || {};
            var startAngle = options.startAngle || 0; // Start from the top instead of right, so remove a quarter of the circle

            var angle = (index * angleMultiplier + startAngle) % 360;
            return (angle < 0 ? angle + 360 : angle) * Math.PI * 2 / 360;
          },
          getDistanceFromCenterForValue: function getDistanceFromCenterForValue(value) {
            var me = this;

            if (helpers$1.isNullOrUndef(value)) {
              return NaN;
            } // Take into account half font size + the yPadding of the top value


            var scalingFactor = me.drawingArea / (me.max - me.min);

            if (me.options.ticks.reverse) {
              return (me.max - value) * scalingFactor;
            }

            return (value - me.min) * scalingFactor;
          },
          getPointPosition: function getPointPosition(index, distanceFromCenter) {
            var me = this;
            var thisAngle = me.getIndexAngle(index) - Math.PI / 2;
            return {
              x: Math.cos(thisAngle) * distanceFromCenter + me.xCenter,
              y: Math.sin(thisAngle) * distanceFromCenter + me.yCenter
            };
          },
          getPointPositionForValue: function getPointPositionForValue(index, value) {
            return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));
          },
          getBasePosition: function getBasePosition(index) {
            var me = this;
            var min = me.min;
            var max = me.max;
            return me.getPointPositionForValue(index || 0, me.beginAtZero ? 0 : min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0);
          },

          /**
           * @private
           */
          _drawGrid: function _drawGrid() {
            var me = this;
            var ctx = me.ctx;
            var opts = me.options;
            var gridLineOpts = opts.gridLines;
            var angleLineOpts = opts.angleLines;
            var lineWidth = valueOrDefault$c(angleLineOpts.lineWidth, gridLineOpts.lineWidth);
            var lineColor = valueOrDefault$c(angleLineOpts.color, gridLineOpts.color);
            var i, offset, position;

            if (opts.pointLabels.display) {
              drawPointLabels(me);
            }

            if (gridLineOpts.display) {
              helpers$1.each(me.ticks, function (label, index) {
                if (index !== 0) {
                  offset = me.getDistanceFromCenterForValue(me.ticksAsNumbers[index]);
                  drawRadiusLine(me, gridLineOpts, offset, index);
                }
              });
            }

            if (angleLineOpts.display && lineWidth && lineColor) {
              ctx.save();
              ctx.lineWidth = lineWidth;
              ctx.strokeStyle = lineColor;

              if (ctx.setLineDash) {
                ctx.setLineDash(resolve$4([angleLineOpts.borderDash, gridLineOpts.borderDash, []]));
                ctx.lineDashOffset = resolve$4([angleLineOpts.borderDashOffset, gridLineOpts.borderDashOffset, 0.0]);
              }

              for (i = me.chart.data.labels.length - 1; i >= 0; i--) {
                offset = me.getDistanceFromCenterForValue(opts.ticks.reverse ? me.min : me.max);
                position = me.getPointPosition(i, offset);
                ctx.beginPath();
                ctx.moveTo(me.xCenter, me.yCenter);
                ctx.lineTo(position.x, position.y);
                ctx.stroke();
              }

              ctx.restore();
            }
          },

          /**
           * @private
           */
          _drawLabels: function _drawLabels() {
            var me = this;
            var ctx = me.ctx;
            var opts = me.options;
            var tickOpts = opts.ticks;

            if (!tickOpts.display) {
              return;
            }

            var startAngle = me.getIndexAngle(0);

            var tickFont = helpers$1.options._parseFont(tickOpts);

            var tickFontColor = valueOrDefault$c(tickOpts.fontColor, core_defaults.global.defaultFontColor);
            var offset, width;
            ctx.save();
            ctx.font = tickFont.string;
            ctx.translate(me.xCenter, me.yCenter);
            ctx.rotate(startAngle);
            ctx.textAlign = 'center';
            ctx.textBaseline = 'middle';
            helpers$1.each(me.ticks, function (label, index) {
              if (index === 0 && !tickOpts.reverse) {
                return;
              }

              offset = me.getDistanceFromCenterForValue(me.ticksAsNumbers[index]);

              if (tickOpts.showLabelBackdrop) {
                width = ctx.measureText(label).width;
                ctx.fillStyle = tickOpts.backdropColor;
                ctx.fillRect(-width / 2 - tickOpts.backdropPaddingX, -offset - tickFont.size / 2 - tickOpts.backdropPaddingY, width + tickOpts.backdropPaddingX * 2, tickFont.size + tickOpts.backdropPaddingY * 2);
              }

              ctx.fillStyle = tickFontColor;
              ctx.fillText(label, 0, -offset);
            });
            ctx.restore();
          },

          /**
           * @private
           */
          _drawTitle: helpers$1.noop
        }); // INTERNAL: static default options, registered in src/index.js

        var _defaults$3 = defaultConfig$3;
        scale_radialLinear._defaults = _defaults$3;
        var deprecated$1 = helpers$1._deprecated;
        var resolve$5 = helpers$1.options.resolve;
        var valueOrDefault$d = helpers$1.valueOrDefault; // Integer constants are from the ES6 spec.

        var MIN_INTEGER = Number.MIN_SAFE_INTEGER || -9007199254740991;
        var MAX_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
        var INTERVALS = {
          millisecond: {
            common: true,
            size: 1,
            steps: 1000
          },
          second: {
            common: true,
            size: 1000,
            steps: 60
          },
          minute: {
            common: true,
            size: 60000,
            steps: 60
          },
          hour: {
            common: true,
            size: 3600000,
            steps: 24
          },
          day: {
            common: true,
            size: 86400000,
            steps: 30
          },
          week: {
            common: false,
            size: 604800000,
            steps: 4
          },
          month: {
            common: true,
            size: 2.628e9,
            steps: 12
          },
          quarter: {
            common: false,
            size: 7.884e9,
            steps: 4
          },
          year: {
            common: true,
            size: 3.154e10
          }
        };
        var UNITS = Object.keys(INTERVALS);

        function sorter(a, b) {
          return a - b;
        }

        function arrayUnique(items) {
          var hash = {};
          var out = [];
          var i, ilen, item;

          for (i = 0, ilen = items.length; i < ilen; ++i) {
            item = items[i];

            if (!hash[item]) {
              hash[item] = true;
              out.push(item);
            }
          }

          return out;
        }

        function getMin(options) {
          return helpers$1.valueOrDefault(options.time.min, options.ticks.min);
        }

        function getMax(options) {
          return helpers$1.valueOrDefault(options.time.max, options.ticks.max);
        }
        /**
         * Returns an array of {time, pos} objects used to interpolate a specific `time` or position
         * (`pos`) on the scale, by searching entries before and after the requested value. `pos` is
         * a decimal between 0 and 1: 0 being the start of the scale (left or top) and 1 the other
         * extremity (left + width or top + height). Note that it would be more optimized to directly
         * store pre-computed pixels, but the scale dimensions are not guaranteed at the time we need
         * to create the lookup table. The table ALWAYS contains at least two items: min and max.
         *
         * @param {number[]} timestamps - timestamps sorted from lowest to highest.
         * @param {string} distribution - If 'linear', timestamps will be spread linearly along the min
         * and max range, so basically, the table will contains only two items: {min, 0} and {max, 1}.
         * If 'series', timestamps will be positioned at the same distance from each other. In this
         * case, only timestamps that break the time linearity are registered, meaning that in the
         * best case, all timestamps are linear, the table contains only min and max.
         */


        function buildLookupTable(timestamps, min, max, distribution) {
          if (distribution === 'linear' || !timestamps.length) {
            return [{
              time: min,
              pos: 0
            }, {
              time: max,
              pos: 1
            }];
          }

          var table = [];
          var items = [min];
          var i, ilen, prev, curr, next;

          for (i = 0, ilen = timestamps.length; i < ilen; ++i) {
            curr = timestamps[i];

            if (curr > min && curr < max) {
              items.push(curr);
            }
          }

          items.push(max);

          for (i = 0, ilen = items.length; i < ilen; ++i) {
            next = items[i + 1];
            prev = items[i - 1];
            curr = items[i]; // only add points that breaks the scale linearity

            if (prev === undefined || next === undefined || Math.round((next + prev) / 2) !== curr) {
              table.push({
                time: curr,
                pos: i / (ilen - 1)
              });
            }
          }

          return table;
        } // @see adapted from https://www.anujgakhar.com/2014/03/01/binary-search-in-javascript/


        function lookup(table, key, value) {
          var lo = 0;
          var hi = table.length - 1;
          var mid, i0, i1;

          while (lo >= 0 && lo <= hi) {
            mid = lo + hi >> 1;
            i0 = table[mid - 1] || null;
            i1 = table[mid];

            if (!i0) {
              // given value is outside table (before first item)
              return {
                lo: null,
                hi: i1
              };
            } else if (i1[key] < value) {
              lo = mid + 1;
            } else if (i0[key] > value) {
              hi = mid - 1;
            } else {
              return {
                lo: i0,
                hi: i1
              };
            }
          } // given value is outside table (after last item)


          return {
            lo: i1,
            hi: null
          };
        }
        /**
         * Linearly interpolates the given source `value` using the table items `skey` values and
         * returns the associated `tkey` value. For example, interpolate(table, 'time', 42, 'pos')
         * returns the position for a timestamp equal to 42. If value is out of bounds, values at
         * index [0, 1] or [n - 1, n] are used for the interpolation.
         */


        function interpolate$1(table, skey, sval, tkey) {
          var range = lookup(table, skey, sval); // Note: the lookup table ALWAYS contains at least 2 items (min and max)

          var prev = !range.lo ? table[0] : !range.hi ? table[table.length - 2] : range.lo;
          var next = !range.lo ? table[1] : !range.hi ? table[table.length - 1] : range.hi;
          var span = next[skey] - prev[skey];
          var ratio = span ? (sval - prev[skey]) / span : 0;
          var offset = (next[tkey] - prev[tkey]) * ratio;
          return prev[tkey] + offset;
        }

        function toTimestamp(scale, input) {
          var adapter = scale._adapter;
          var options = scale.options.time;
          var parser = options.parser;
          var format = parser || options.format;
          var value = input;

          if (typeof parser === 'function') {
            value = parser(value);
          } // Only parse if its not a timestamp already


          if (!helpers$1.isFinite(value)) {
            value = typeof format === 'string' ? adapter.parse(value, format) : adapter.parse(value);
          }

          if (value !== null) {
            return +value;
          } // Labels are in an incompatible format and no `parser` has been provided.
          // The user might still use the deprecated `format` option for parsing.


          if (!parser && typeof format === 'function') {
            value = format(input); // `format` could return something else than a timestamp, if so, parse it

            if (!helpers$1.isFinite(value)) {
              value = adapter.parse(value);
            }
          }

          return value;
        }

        function parse(scale, input) {
          if (helpers$1.isNullOrUndef(input)) {
            return null;
          }

          var options = scale.options.time;
          var value = toTimestamp(scale, scale.getRightValue(input));

          if (value === null) {
            return value;
          }

          if (options.round) {
            value = +scale._adapter.startOf(value, options.round);
          }

          return value;
        }
        /**
         * Figures out what unit results in an appropriate number of auto-generated ticks
         */


        function determineUnitForAutoTicks(minUnit, min, max, capacity) {
          var ilen = UNITS.length;
          var i, interval, factor;

          for (i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {
            interval = INTERVALS[UNITS[i]];
            factor = interval.steps ? interval.steps : MAX_INTEGER;

            if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {
              return UNITS[i];
            }
          }

          return UNITS[ilen - 1];
        }
        /**
         * Figures out what unit to format a set of ticks with
         */


        function determineUnitForFormatting(scale, numTicks, minUnit, min, max) {
          var i, unit;

          for (i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {
            unit = UNITS[i];

            if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {
              return unit;
            }
          }

          return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];
        }

        function determineMajorUnit(unit) {
          for (var i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {
            if (INTERVALS[UNITS[i]].common) {
              return UNITS[i];
            }
          }
        }
        /**
         * Generates a maximum of `capacity` timestamps between min and max, rounded to the
         * `minor` unit using the given scale time `options`.
         * Important: this method can return ticks outside the min and max range, it's the
         * responsibility of the calling code to clamp values if needed.
         */


        function generate(scale, min, max, capacity) {
          var adapter = scale._adapter;
          var options = scale.options;
          var timeOpts = options.time;
          var minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, capacity);
          var stepSize = resolve$5([timeOpts.stepSize, timeOpts.unitStepSize, 1]);
          var weekday = minor === 'week' ? timeOpts.isoWeekday : false;
          var first = min;
          var ticks = [];
          var time; // For 'week' unit, handle the first day of week option

          if (weekday) {
            first = +adapter.startOf(first, 'isoWeek', weekday);
          } // Align first ticks on unit


          first = +adapter.startOf(first, weekday ? 'day' : minor); // Prevent browser from freezing in case user options request millions of milliseconds

          if (adapter.diff(max, min, minor) > 100000 * stepSize) {
            throw min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor;
          }

          for (time = first; time < max; time = +adapter.add(time, stepSize, minor)) {
            ticks.push(time);
          }

          if (time === max || options.bounds === 'ticks') {
            ticks.push(time);
          }

          return ticks;
        }
        /**
         * Returns the start and end offsets from edges in the form of {start, end}
         * where each value is a relative width to the scale and ranges between 0 and 1.
         * They add extra margins on the both sides by scaling down the original scale.
         * Offsets are added when the `offset` option is true.
         */


        function computeOffsets(table, ticks, min, max, options) {
          var start = 0;
          var end = 0;
          var first, last;

          if (options.offset && ticks.length) {
            first = interpolate$1(table, 'time', ticks[0], 'pos');

            if (ticks.length === 1) {
              start = 1 - first;
            } else {
              start = (interpolate$1(table, 'time', ticks[1], 'pos') - first) / 2;
            }

            last = interpolate$1(table, 'time', ticks[ticks.length - 1], 'pos');

            if (ticks.length === 1) {
              end = last;
            } else {
              end = (last - interpolate$1(table, 'time', ticks[ticks.length - 2], 'pos')) / 2;
            }
          }

          return {
            start: start,
            end: end,
            factor: 1 / (start + 1 + end)
          };
        }

        function setMajorTicks(scale, ticks, map, majorUnit) {
          var adapter = scale._adapter;
          var first = +adapter.startOf(ticks[0].value, majorUnit);
          var last = ticks[ticks.length - 1].value;
          var major, index;

          for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {
            index = map[major];

            if (index >= 0) {
              ticks[index].major = true;
            }
          }

          return ticks;
        }

        function ticksFromTimestamps(scale, values, majorUnit) {
          var ticks = [];
          var map = {};
          var ilen = values.length;
          var i, value;

          for (i = 0; i < ilen; ++i) {
            value = values[i];
            map[value] = i;
            ticks.push({
              value: value,
              major: false
            });
          } // We set the major ticks separately from the above loop because calling startOf for every tick
          // is expensive when there is a large number of ticks


          return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);
        }

        var defaultConfig$4 = {
          position: 'bottom',

          /**
           * Data distribution along the scale:
           * - 'linear': data are spread according to their time (distances can vary),
           * - 'series': data are spread at the same distance from each other.
           * @see https://github.com/chartjs/Chart.js/pull/4507
           * @since 2.7.0
           */
          distribution: 'linear',

          /**
           * Scale boundary strategy (bypassed by min/max time options)
           * - `data`: make sure data are fully visible, ticks outside are removed
           * - `ticks`: make sure ticks are fully visible, data outside are truncated
           * @see https://github.com/chartjs/Chart.js/pull/4556
           * @since 2.7.0
           */
          bounds: 'data',
          adapters: {},
          time: {
            parser: false,
            // false == a pattern string from https://momentjs.com/docs/#/parsing/string-format/ or a custom callback that converts its argument to a moment
            unit: false,
            // false == automatic or override with week, month, year, etc.
            round: false,
            // none, or override with week, month, year, etc.
            displayFormat: false,
            // DEPRECATED
            isoWeekday: false,
            // override week start day - see https://momentjs.com/docs/#/get-set/iso-weekday/
            minUnit: 'millisecond',
            displayFormats: {}
          },
          ticks: {
            autoSkip: false,

            /**
             * Ticks generation input values:
             * - 'auto': generates "optimal" ticks based on scale size and time options.
             * - 'data': generates ticks from data (including labels from data {t|x|y} objects).
             * - 'labels': generates ticks from user given `data.labels` values ONLY.
             * @see https://github.com/chartjs/Chart.js/pull/4507
             * @since 2.7.0
             */
            source: 'auto',
            major: {
              enabled: false
            }
          }
        };
        var scale_time = core_scale.extend({
          initialize: function initialize() {
            this.mergeTicksOptions();
            core_scale.prototype.initialize.call(this);
          },
          update: function update() {
            var me = this;
            var options = me.options;
            var time = options.time || (options.time = {});
            var adapter = me._adapter = new core_adapters._date(options.adapters.date); // DEPRECATIONS: output a message only one time per update

            deprecated$1('time scale', time.format, 'time.format', 'time.parser');
            deprecated$1('time scale', time.min, 'time.min', 'ticks.min');
            deprecated$1('time scale', time.max, 'time.max', 'ticks.max'); // Backward compatibility: before introducing adapter, `displayFormats` was
            // supposed to contain *all* unit/string pairs but this can't be resolved
            // when loading the scale (adapters are loaded afterward), so let's populate
            // missing formats on update

            helpers$1.mergeIf(time.displayFormats, adapter.formats());
            return core_scale.prototype.update.apply(me, arguments);
          },

          /**
           * Allows data to be referenced via 't' attribute
           */
          getRightValue: function getRightValue(rawValue) {
            if (rawValue && rawValue.t !== undefined) {
              rawValue = rawValue.t;
            }

            return core_scale.prototype.getRightValue.call(this, rawValue);
          },
          determineDataLimits: function determineDataLimits() {
            var me = this;
            var chart = me.chart;
            var adapter = me._adapter;
            var options = me.options;
            var unit = options.time.unit || 'day';
            var min = MAX_INTEGER;
            var max = MIN_INTEGER;
            var timestamps = [];
            var datasets = [];
            var labels = [];
            var i, j, ilen, jlen, data, timestamp, labelsAdded;

            var dataLabels = me._getLabels();

            for (i = 0, ilen = dataLabels.length; i < ilen; ++i) {
              labels.push(parse(me, dataLabels[i]));
            }

            for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
              if (chart.isDatasetVisible(i)) {
                data = chart.data.datasets[i].data; // Let's consider that all data have the same format.

                if (helpers$1.isObject(data[0])) {
                  datasets[i] = [];

                  for (j = 0, jlen = data.length; j < jlen; ++j) {
                    timestamp = parse(me, data[j]);
                    timestamps.push(timestamp);
                    datasets[i][j] = timestamp;
                  }
                } else {
                  datasets[i] = labels.slice(0);

                  if (!labelsAdded) {
                    timestamps = timestamps.concat(labels);
                    labelsAdded = true;
                  }
                }
              } else {
                datasets[i] = [];
              }
            }

            if (labels.length) {
              min = Math.min(min, labels[0]);
              max = Math.max(max, labels[labels.length - 1]);
            }

            if (timestamps.length) {
              timestamps = ilen > 1 ? arrayUnique(timestamps).sort(sorter) : timestamps.sort(sorter);
              min = Math.min(min, timestamps[0]);
              max = Math.max(max, timestamps[timestamps.length - 1]);
            }

            min = parse(me, getMin(options)) || min;
            max = parse(me, getMax(options)) || max; // In case there is no valid min/max, set limits based on unit time option

            min = min === MAX_INTEGER ? +adapter.startOf(Date.now(), unit) : min;
            max = max === MIN_INTEGER ? +adapter.endOf(Date.now(), unit) + 1 : max; // Make sure that max is strictly higher than min (required by the lookup table)

            me.min = Math.min(min, max);
            me.max = Math.max(min + 1, max); // PRIVATE

            me._table = [];
            me._timestamps = {
              data: timestamps,
              datasets: datasets,
              labels: labels
            };
          },
          buildTicks: function buildTicks() {
            var me = this;
            var min = me.min;
            var max = me.max;
            var options = me.options;
            var tickOpts = options.ticks;
            var timeOpts = options.time;
            var timestamps = me._timestamps;
            var ticks = [];
            var capacity = me.getLabelCapacity(min);
            var source = tickOpts.source;
            var distribution = options.distribution;
            var i, ilen, timestamp;

            if (source === 'data' || source === 'auto' && distribution === 'series') {
              timestamps = timestamps.data;
            } else if (source === 'labels') {
              timestamps = timestamps.labels;
            } else {
              timestamps = generate(me, min, max, capacity);
            }

            if (options.bounds === 'ticks' && timestamps.length) {
              min = timestamps[0];
              max = timestamps[timestamps.length - 1];
            } // Enforce limits with user min/max options


            min = parse(me, getMin(options)) || min;
            max = parse(me, getMax(options)) || max; // Remove ticks outside the min/max range

            for (i = 0, ilen = timestamps.length; i < ilen; ++i) {
              timestamp = timestamps[i];

              if (timestamp >= min && timestamp <= max) {
                ticks.push(timestamp);
              }
            }

            me.min = min;
            me.max = max; // PRIVATE
            // determineUnitForFormatting relies on the number of ticks so we don't use it when
            // autoSkip is enabled because we don't yet know what the final number of ticks will be

            me._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, me.min, me.max, capacity) : determineUnitForFormatting(me, ticks.length, timeOpts.minUnit, me.min, me.max));
            me._majorUnit = !tickOpts.major.enabled || me._unit === 'year' ? undefined : determineMajorUnit(me._unit);
            me._table = buildLookupTable(me._timestamps.data, min, max, distribution);
            me._offsets = computeOffsets(me._table, ticks, min, max, options);

            if (tickOpts.reverse) {
              ticks.reverse();
            }

            return ticksFromTimestamps(me, ticks, me._majorUnit);
          },
          getLabelForIndex: function getLabelForIndex(index, datasetIndex) {
            var me = this;
            var adapter = me._adapter;
            var data = me.chart.data;
            var timeOpts = me.options.time;
            var label = data.labels && index < data.labels.length ? data.labels[index] : '';
            var value = data.datasets[datasetIndex].data[index];

            if (helpers$1.isObject(value)) {
              label = me.getRightValue(value);
            }

            if (timeOpts.tooltipFormat) {
              return adapter.format(toTimestamp(me, label), timeOpts.tooltipFormat);
            }

            if (typeof label === 'string') {
              return label;
            }

            return adapter.format(toTimestamp(me, label), timeOpts.displayFormats.datetime);
          },

          /**
           * Function to format an individual tick mark
           * @private
           */
          tickFormatFunction: function tickFormatFunction(time, index, ticks, format) {
            var me = this;
            var adapter = me._adapter;
            var options = me.options;
            var formats = options.time.displayFormats;
            var minorFormat = formats[me._unit];
            var majorUnit = me._majorUnit;
            var majorFormat = formats[majorUnit];
            var tick = ticks[index];
            var tickOpts = options.ticks;
            var major = majorUnit && majorFormat && tick && tick.major;
            var label = adapter.format(time, format ? format : major ? majorFormat : minorFormat);
            var nestedTickOpts = major ? tickOpts.major : tickOpts.minor;
            var formatter = resolve$5([nestedTickOpts.callback, nestedTickOpts.userCallback, tickOpts.callback, tickOpts.userCallback]);
            return formatter ? formatter(label, index, ticks) : label;
          },
          convertTicksToLabels: function convertTicksToLabels(ticks) {
            var labels = [];
            var i, ilen;

            for (i = 0, ilen = ticks.length; i < ilen; ++i) {
              labels.push(this.tickFormatFunction(ticks[i].value, i, ticks));
            }

            return labels;
          },

          /**
           * @private
           */
          getPixelForOffset: function getPixelForOffset(time) {
            var me = this;
            var offsets = me._offsets;
            var pos = interpolate$1(me._table, 'time', time, 'pos');
            return me.getPixelForDecimal((offsets.start + pos) * offsets.factor);
          },
          getPixelForValue: function getPixelForValue(value, index, datasetIndex) {
            var me = this;
            var time = null;

            if (index !== undefined && datasetIndex !== undefined) {
              time = me._timestamps.datasets[datasetIndex][index];
            }

            if (time === null) {
              time = parse(me, value);
            }

            if (time !== null) {
              return me.getPixelForOffset(time);
            }
          },
          getPixelForTick: function getPixelForTick(index) {
            var ticks = this.getTicks();
            return index >= 0 && index < ticks.length ? this.getPixelForOffset(ticks[index].value) : null;
          },
          getValueForPixel: function getValueForPixel(pixel) {
            var me = this;
            var offsets = me._offsets;
            var pos = me.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
            var time = interpolate$1(me._table, 'pos', pos, 'time'); // DEPRECATION, we should return time directly

            return me._adapter._create(time);
          },

          /**
           * @private
           */
          _getLabelSize: function _getLabelSize(label) {
            var me = this;
            var ticksOpts = me.options.ticks;
            var tickLabelWidth = me.ctx.measureText(label).width;
            var angle = helpers$1.toRadians(me.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);
            var cosRotation = Math.cos(angle);
            var sinRotation = Math.sin(angle);
            var tickFontSize = valueOrDefault$d(ticksOpts.fontSize, core_defaults.global.defaultFontSize);
            return {
              w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,
              h: tickLabelWidth * sinRotation + tickFontSize * cosRotation
            };
          },

          /**
           * Crude approximation of what the label width might be
           * @private
           */
          getLabelWidth: function getLabelWidth(label) {
            return this._getLabelSize(label).w;
          },

          /**
           * @private
           */
          getLabelCapacity: function getLabelCapacity(exampleTime) {
            var me = this;
            var timeOpts = me.options.time;
            var displayFormats = timeOpts.displayFormats; // pick the longest format (milliseconds) for guestimation

            var format = displayFormats[timeOpts.unit] || displayFormats.millisecond;
            var exampleLabel = me.tickFormatFunction(exampleTime, 0, ticksFromTimestamps(me, [exampleTime], me._majorUnit), format);

            var size = me._getLabelSize(exampleLabel);

            var capacity = Math.floor(me.isHorizontal() ? me.width / size.w : me.height / size.h);

            if (me.options.offset) {
              capacity--;
            }

            return capacity > 0 ? capacity : 1;
          }
        }); // INTERNAL: static default options, registered in src/index.js

        var _defaults$4 = defaultConfig$4;
        scale_time._defaults = _defaults$4;
        var scales = {
          category: scale_category,
          linear: scale_linear,
          logarithmic: scale_logarithmic,
          radialLinear: scale_radialLinear,
          time: scale_time
        };
        var FORMATS = {
          datetime: 'MMM D, YYYY, h:mm:ss a',
          millisecond: 'h:mm:ss.SSS a',
          second: 'h:mm:ss a',
          minute: 'h:mm a',
          hour: 'hA',
          day: 'MMM D',
          week: 'll',
          month: 'MMM YYYY',
          quarter: '[Q]Q - YYYY',
          year: 'YYYY'
        };

        core_adapters._date.override(typeof moment === 'function' ? {
          _id: 'moment',
          // DEBUG ONLY
          formats: function formats() {
            return FORMATS;
          },
          parse: function parse(value, format) {
            if (typeof value === 'string' && typeof format === 'string') {
              value = moment(value, format);
            } else if (!(value instanceof moment)) {
              value = moment(value);
            }

            return value.isValid() ? value.valueOf() : null;
          },
          format: function format(time, _format) {
            return moment(time).format(_format);
          },
          add: function add(time, amount, unit) {
            return moment(time).add(amount, unit).valueOf();
          },
          diff: function diff(max, min, unit) {
            return moment(max).diff(moment(min), unit);
          },
          startOf: function startOf(time, unit, weekday) {
            time = moment(time);

            if (unit === 'isoWeek') {
              return time.isoWeekday(weekday).valueOf();
            }

            return time.startOf(unit).valueOf();
          },
          endOf: function endOf(time, unit) {
            return moment(time).endOf(unit).valueOf();
          },
          // DEPRECATIONS

          /**
           * Provided for backward compatibility with scale.getValueForPixel().
           * @deprecated since version 2.8.0
           * @todo remove at version 3
           * @private
           */
          _create: function _create(time) {
            return moment(time);
          }
        } : {});

        core_defaults._set('global', {
          plugins: {
            filler: {
              propagate: true
            }
          }
        });

        var mappers = {
          dataset: function dataset(source) {
            var index = source.fill;
            var chart = source.chart;
            var meta = chart.getDatasetMeta(index);
            var visible = meta && chart.isDatasetVisible(index);
            var points = visible && meta.dataset._children || [];
            var length = points.length || 0;
            return !length ? null : function (point, i) {
              return i < length && points[i]._view || null;
            };
          },
          boundary: function boundary(source) {
            var boundary = source.boundary;
            var x = boundary ? boundary.x : null;
            var y = boundary ? boundary.y : null;

            if (helpers$1.isArray(boundary)) {
              return function (point, i) {
                return boundary[i];
              };
            }

            return function (point) {
              return {
                x: x === null ? point.x : x,
                y: y === null ? point.y : y
              };
            };
          }
        }; // @todo if (fill[0] === '#')

        function decodeFill(el, index, count) {
          var model = el._model || {};
          var fill = model.fill;
          var target;

          if (fill === undefined) {
            fill = !!model.backgroundColor;
          }

          if (fill === false || fill === null) {
            return false;
          }

          if (fill === true) {
            return 'origin';
          }

          target = parseFloat(fill, 10);

          if (isFinite(target) && Math.floor(target) === target) {
            if (fill[0] === '-' || fill[0] === '+') {
              target = index + target;
            }

            if (target === index || target < 0 || target >= count) {
              return false;
            }

            return target;
          }

          switch (fill) {
            // compatibility
            case 'bottom':
              return 'start';

            case 'top':
              return 'end';

            case 'zero':
              return 'origin';
            // supported boundaries

            case 'origin':
            case 'start':
            case 'end':
              return fill;
            // invalid fill values

            default:
              return false;
          }
        }

        function computeLinearBoundary(source) {
          var model = source.el._model || {};
          var scale = source.el._scale || {};
          var fill = source.fill;
          var target = null;
          var horizontal;

          if (isFinite(fill)) {
            return null;
          } // Backward compatibility: until v3, we still need to support boundary values set on
          // the model (scaleTop, scaleBottom and scaleZero) because some external plugins and
          // controllers might still use it (e.g. the Smith chart).


          if (fill === 'start') {
            target = model.scaleBottom === undefined ? scale.bottom : model.scaleBottom;
          } else if (fill === 'end') {
            target = model.scaleTop === undefined ? scale.top : model.scaleTop;
          } else if (model.scaleZero !== undefined) {
            target = model.scaleZero;
          } else if (scale.getBasePixel) {
            target = scale.getBasePixel();
          }

          if (target !== undefined && target !== null) {
            if (target.x !== undefined && target.y !== undefined) {
              return target;
            }

            if (helpers$1.isFinite(target)) {
              horizontal = scale.isHorizontal();
              return {
                x: horizontal ? target : null,
                y: horizontal ? null : target
              };
            }
          }

          return null;
        }

        function computeCircularBoundary(source) {
          var scale = source.el._scale;
          var options = scale.options;
          var length = scale.chart.data.labels.length;
          var fill = source.fill;
          var target = [];
          var start, end, center, i, point;

          if (!length) {
            return null;
          }

          start = options.ticks.reverse ? scale.max : scale.min;
          end = options.ticks.reverse ? scale.min : scale.max;
          center = scale.getPointPositionForValue(0, start);

          for (i = 0; i < length; ++i) {
            point = fill === 'start' || fill === 'end' ? scale.getPointPositionForValue(i, fill === 'start' ? start : end) : scale.getBasePosition(i);

            if (options.gridLines.circular) {
              point.cx = center.x;
              point.cy = center.y;
              point.angle = scale.getIndexAngle(i) - Math.PI / 2;
            }

            target.push(point);
          }

          return target;
        }

        function computeBoundary(source) {
          var scale = source.el._scale || {};

          if (scale.getPointPositionForValue) {
            return computeCircularBoundary(source);
          }

          return computeLinearBoundary(source);
        }

        function resolveTarget(sources, index, propagate) {
          var source = sources[index];
          var fill = source.fill;
          var visited = [index];
          var target;

          if (!propagate) {
            return fill;
          }

          while (fill !== false && visited.indexOf(fill) === -1) {
            if (!isFinite(fill)) {
              return fill;
            }

            target = sources[fill];

            if (!target) {
              return false;
            }

            if (target.visible) {
              return fill;
            }

            visited.push(fill);
            fill = target.fill;
          }

          return false;
        }

        function createMapper(source) {
          var fill = source.fill;
          var type = 'dataset';

          if (fill === false) {
            return null;
          }

          if (!isFinite(fill)) {
            type = 'boundary';
          }

          return mappers[type](source);
        }

        function isDrawable(point) {
          return point && !point.skip;
        }

        function drawArea(ctx, curve0, curve1, len0, len1) {
          var i, cx, cy, r;

          if (!len0 || !len1) {
            return;
          } // building first area curve (normal)


          ctx.moveTo(curve0[0].x, curve0[0].y);

          for (i = 1; i < len0; ++i) {
            helpers$1.canvas.lineTo(ctx, curve0[i - 1], curve0[i]);
          }

          if (curve1[0].angle !== undefined) {
            cx = curve1[0].cx;
            cy = curve1[0].cy;
            r = Math.sqrt(Math.pow(curve1[0].x - cx, 2) + Math.pow(curve1[0].y - cy, 2));

            for (i = len1 - 1; i > 0; --i) {
              ctx.arc(cx, cy, r, curve1[i].angle, curve1[i - 1].angle, true);
            }

            return;
          } // joining the two area curves


          ctx.lineTo(curve1[len1 - 1].x, curve1[len1 - 1].y); // building opposite area curve (reverse)

          for (i = len1 - 1; i > 0; --i) {
            helpers$1.canvas.lineTo(ctx, curve1[i], curve1[i - 1], true);
          }
        }

        function doFill(ctx, points, mapper, view, color, loop) {
          var count = points.length;
          var span = view.spanGaps;
          var curve0 = [];
          var curve1 = [];
          var len0 = 0;
          var len1 = 0;
          var i, ilen, index, p0, p1, d0, d1, loopOffset;
          ctx.beginPath();

          for (i = 0, ilen = count; i < ilen; ++i) {
            index = i % count;
            p0 = points[index]._view;
            p1 = mapper(p0, index, view);
            d0 = isDrawable(p0);
            d1 = isDrawable(p1);

            if (loop && loopOffset === undefined && d0) {
              loopOffset = i + 1;
              ilen = count + loopOffset;
            }

            if (d0 && d1) {
              len0 = curve0.push(p0);
              len1 = curve1.push(p1);
            } else if (len0 && len1) {
              if (!span) {
                drawArea(ctx, curve0, curve1, len0, len1);
                len0 = len1 = 0;
                curve0 = [];
                curve1 = [];
              } else {
                if (d0) {
                  curve0.push(p0);
                }

                if (d1) {
                  curve1.push(p1);
                }
              }
            }
          }

          drawArea(ctx, curve0, curve1, len0, len1);
          ctx.closePath();
          ctx.fillStyle = color;
          ctx.fill();
        }

        var plugin_filler = {
          id: 'filler',
          afterDatasetsUpdate: function afterDatasetsUpdate(chart, options) {
            var count = (chart.data.datasets || []).length;
            var propagate = options.propagate;
            var sources = [];
            var meta, i, el, source;

            for (i = 0; i < count; ++i) {
              meta = chart.getDatasetMeta(i);
              el = meta.dataset;
              source = null;

              if (el && el._model && el instanceof elements.Line) {
                source = {
                  visible: chart.isDatasetVisible(i),
                  fill: decodeFill(el, i, count),
                  chart: chart,
                  el: el
                };
              }

              meta.$filler = source;
              sources.push(source);
            }

            for (i = 0; i < count; ++i) {
              source = sources[i];

              if (!source) {
                continue;
              }

              source.fill = resolveTarget(sources, i, propagate);
              source.boundary = computeBoundary(source);
              source.mapper = createMapper(source);
            }
          },
          beforeDatasetsDraw: function beforeDatasetsDraw(chart) {
            var metasets = chart._getSortedVisibleDatasetMetas();

            var ctx = chart.ctx;
            var meta, i, el, view, points, mapper, color;

            for (i = metasets.length - 1; i >= 0; --i) {
              meta = metasets[i].$filler;

              if (!meta || !meta.visible) {
                continue;
              }

              el = meta.el;
              view = el._view;
              points = el._children || [];
              mapper = meta.mapper;
              color = view.backgroundColor || core_defaults.global.defaultColor;

              if (mapper && color && points.length) {
                helpers$1.canvas.clipArea(ctx, chart.chartArea);
                doFill(ctx, points, mapper, view, color, el._loop);
                helpers$1.canvas.unclipArea(ctx);
              }
            }
          }
        };
        var getRtlHelper$1 = helpers$1.rtl.getRtlAdapter;
        var noop$1 = helpers$1.noop;
        var valueOrDefault$e = helpers$1.valueOrDefault;

        core_defaults._set('global', {
          legend: {
            display: true,
            position: 'top',
            align: 'center',
            fullWidth: true,
            reverse: false,
            weight: 1000,
            // a callback that will handle
            onClick: function onClick(e, legendItem) {
              var index = legendItem.datasetIndex;
              var ci = this.chart;
              var meta = ci.getDatasetMeta(index); // See controller.isDatasetVisible comment

              meta.hidden = meta.hidden === null ? !ci.data.datasets[index].hidden : null; // We hid a dataset ... rerender the chart

              ci.update();
            },
            onHover: null,
            onLeave: null,
            labels: {
              boxWidth: 40,
              padding: 10,
              // Generates labels shown in the legend
              // Valid properties to return:
              // text : text to display
              // fillStyle : fill of coloured box
              // strokeStyle: stroke of coloured box
              // hidden : if this legend item refers to a hidden item
              // lineCap : cap style for line
              // lineDash
              // lineDashOffset :
              // lineJoin :
              // lineWidth :
              generateLabels: function generateLabels(chart) {
                var datasets = chart.data.datasets;
                var options = chart.options.legend || {};
                var usePointStyle = options.labels && options.labels.usePointStyle;
                return chart._getSortedDatasetMetas().map(function (meta) {
                  var style = meta.controller.getStyle(usePointStyle ? 0 : undefined);
                  return {
                    text: datasets[meta.index].label,
                    fillStyle: style.backgroundColor,
                    hidden: !chart.isDatasetVisible(meta.index),
                    lineCap: style.borderCapStyle,
                    lineDash: style.borderDash,
                    lineDashOffset: style.borderDashOffset,
                    lineJoin: style.borderJoinStyle,
                    lineWidth: style.borderWidth,
                    strokeStyle: style.borderColor,
                    pointStyle: style.pointStyle,
                    rotation: style.rotation,
                    // Below is extra data used for toggling the datasets
                    datasetIndex: meta.index
                  };
                }, this);
              }
            }
          },
          legendCallback: function legendCallback(chart) {
            var list = document.createElement('ul');
            var datasets = chart.data.datasets;
            var i, ilen, listItem, listItemSpan;
            list.setAttribute('class', chart.id + '-legend');

            for (i = 0, ilen = datasets.length; i < ilen; i++) {
              listItem = list.appendChild(document.createElement('li'));
              listItemSpan = listItem.appendChild(document.createElement('span'));
              listItemSpan.style.backgroundColor = datasets[i].backgroundColor;

              if (datasets[i].label) {
                listItem.appendChild(document.createTextNode(datasets[i].label));
              }
            }

            return list.outerHTML;
          }
        });
        /**
         * Helper function to get the box width based on the usePointStyle option
         * @param {object} labelopts - the label options on the legend
         * @param {number} fontSize - the label font size
         * @return {number} width of the color box area
         */


        function getBoxWidth(labelOpts, fontSize) {
          return labelOpts.usePointStyle && labelOpts.boxWidth > fontSize ? fontSize : labelOpts.boxWidth;
        }
        /**
         * IMPORTANT: this class is exposed publicly as Chart.Legend, backward compatibility required!
         */


        var Legend = core_element.extend({
          initialize: function initialize(config) {
            var me = this;
            helpers$1.extend(me, config); // Contains hit boxes for each dataset (in dataset order)

            me.legendHitBoxes = [];
            /**
            	 * @private
            	 */

            me._hoveredItem = null; // Are we in doughnut mode which has a different data type

            me.doughnutMode = false;
          },
          // These methods are ordered by lifecycle. Utilities then follow.
          // Any function defined here is inherited by all legend types.
          // Any function can be extended by the legend type
          beforeUpdate: noop$1,
          update: function update(maxWidth, maxHeight, margins) {
            var me = this; // Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)

            me.beforeUpdate(); // Absorb the master measurements

            me.maxWidth = maxWidth;
            me.maxHeight = maxHeight;
            me.margins = margins; // Dimensions

            me.beforeSetDimensions();
            me.setDimensions();
            me.afterSetDimensions(); // Labels

            me.beforeBuildLabels();
            me.buildLabels();
            me.afterBuildLabels(); // Fit

            me.beforeFit();
            me.fit();
            me.afterFit(); //

            me.afterUpdate();
            return me.minSize;
          },
          afterUpdate: noop$1,
          //
          beforeSetDimensions: noop$1,
          setDimensions: function setDimensions() {
            var me = this; // Set the unconstrained dimension before label rotation

            if (me.isHorizontal()) {
              // Reset position before calculating rotation
              me.width = me.maxWidth;
              me.left = 0;
              me.right = me.width;
            } else {
              me.height = me.maxHeight; // Reset position before calculating rotation

              me.top = 0;
              me.bottom = me.height;
            } // Reset padding


            me.paddingLeft = 0;
            me.paddingTop = 0;
            me.paddingRight = 0;
            me.paddingBottom = 0; // Reset minSize

            me.minSize = {
              width: 0,
              height: 0
            };
          },
          afterSetDimensions: noop$1,
          //
          beforeBuildLabels: noop$1,
          buildLabels: function buildLabels() {
            var me = this;
            var labelOpts = me.options.labels || {};
            var legendItems = helpers$1.callback(labelOpts.generateLabels, [me.chart], me) || [];

            if (labelOpts.filter) {
              legendItems = legendItems.filter(function (item) {
                return labelOpts.filter(item, me.chart.data);
              });
            }

            if (me.options.reverse) {
              legendItems.reverse();
            }

            me.legendItems = legendItems;
          },
          afterBuildLabels: noop$1,
          //
          beforeFit: noop$1,
          fit: function fit() {
            var me = this;
            var opts = me.options;
            var labelOpts = opts.labels;
            var display = opts.display;
            var ctx = me.ctx;

            var labelFont = helpers$1.options._parseFont(labelOpts);

            var fontSize = labelFont.size; // Reset hit boxes

            var hitboxes = me.legendHitBoxes = [];
            var minSize = me.minSize;
            var isHorizontal = me.isHorizontal();

            if (isHorizontal) {
              minSize.width = me.maxWidth; // fill all the width

              minSize.height = display ? 10 : 0;
            } else {
              minSize.width = display ? 10 : 0;
              minSize.height = me.maxHeight; // fill all the height
            } // Increase sizes here


            if (!display) {
              me.width = minSize.width = me.height = minSize.height = 0;
              return;
            }

            ctx.font = labelFont.string;

            if (isHorizontal) {
              // Labels
              // Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one
              var lineWidths = me.lineWidths = [0];
              var totalHeight = 0;
              ctx.textAlign = 'left';
              ctx.textBaseline = 'middle';
              helpers$1.each(me.legendItems, function (legendItem, i) {
                var boxWidth = getBoxWidth(labelOpts, fontSize);
                var width = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;

                if (i === 0 || lineWidths[lineWidths.length - 1] + width + 2 * labelOpts.padding > minSize.width) {
                  totalHeight += fontSize + labelOpts.padding;
                  lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;
                } // Store the hitbox width and height here. Final position will be updated in `draw`


                hitboxes[i] = {
                  left: 0,
                  top: 0,
                  width: width,
                  height: fontSize
                };
                lineWidths[lineWidths.length - 1] += width + labelOpts.padding;
              });
              minSize.height += totalHeight;
            } else {
              var vPadding = labelOpts.padding;
              var columnWidths = me.columnWidths = [];
              var columnHeights = me.columnHeights = [];
              var totalWidth = labelOpts.padding;
              var currentColWidth = 0;
              var currentColHeight = 0;
              helpers$1.each(me.legendItems, function (legendItem, i) {
                var boxWidth = getBoxWidth(labelOpts, fontSize);
                var itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width; // If too tall, go to new column

                if (i > 0 && currentColHeight + fontSize + 2 * vPadding > minSize.height) {
                  totalWidth += currentColWidth + labelOpts.padding;
                  columnWidths.push(currentColWidth); // previous column width

                  columnHeights.push(currentColHeight);
                  currentColWidth = 0;
                  currentColHeight = 0;
                } // Get max width


                currentColWidth = Math.max(currentColWidth, itemWidth);
                currentColHeight += fontSize + vPadding; // Store the hitbox width and height here. Final position will be updated in `draw`

                hitboxes[i] = {
                  left: 0,
                  top: 0,
                  width: itemWidth,
                  height: fontSize
                };
              });
              totalWidth += currentColWidth;
              columnWidths.push(currentColWidth);
              columnHeights.push(currentColHeight);
              minSize.width += totalWidth;
            }

            me.width = minSize.width;
            me.height = minSize.height;
          },
          afterFit: noop$1,
          // Shared Methods
          isHorizontal: function isHorizontal() {
            return this.options.position === 'top' || this.options.position === 'bottom';
          },
          // Actually draw the legend on the canvas
          draw: function draw() {
            var me = this;
            var opts = me.options;
            var labelOpts = opts.labels;
            var globalDefaults = core_defaults.global;
            var defaultColor = globalDefaults.defaultColor;
            var lineDefault = globalDefaults.elements.line;
            var legendHeight = me.height;
            var columnHeights = me.columnHeights;
            var legendWidth = me.width;
            var lineWidths = me.lineWidths;

            if (!opts.display) {
              return;
            }

            var rtlHelper = getRtlHelper$1(opts.rtl, me.left, me.minSize.width);
            var ctx = me.ctx;
            var fontColor = valueOrDefault$e(labelOpts.fontColor, globalDefaults.defaultFontColor);

            var labelFont = helpers$1.options._parseFont(labelOpts);

            var fontSize = labelFont.size;
            var cursor; // Canvas setup

            ctx.textAlign = rtlHelper.textAlign('left');
            ctx.textBaseline = 'middle';
            ctx.lineWidth = 0.5;
            ctx.strokeStyle = fontColor; // for strikethrough effect

            ctx.fillStyle = fontColor; // render in correct colour

            ctx.font = labelFont.string;
            var boxWidth = getBoxWidth(labelOpts, fontSize);
            var hitboxes = me.legendHitBoxes; // current position

            var drawLegendBox = function drawLegendBox(x, y, legendItem) {
              if (isNaN(boxWidth) || boxWidth <= 0) {
                return;
              } // Set the ctx for the box


              ctx.save();
              var lineWidth = valueOrDefault$e(legendItem.lineWidth, lineDefault.borderWidth);
              ctx.fillStyle = valueOrDefault$e(legendItem.fillStyle, defaultColor);
              ctx.lineCap = valueOrDefault$e(legendItem.lineCap, lineDefault.borderCapStyle);
              ctx.lineDashOffset = valueOrDefault$e(legendItem.lineDashOffset, lineDefault.borderDashOffset);
              ctx.lineJoin = valueOrDefault$e(legendItem.lineJoin, lineDefault.borderJoinStyle);
              ctx.lineWidth = lineWidth;
              ctx.strokeStyle = valueOrDefault$e(legendItem.strokeStyle, defaultColor);

              if (ctx.setLineDash) {
                // IE 9 and 10 do not support line dash
                ctx.setLineDash(valueOrDefault$e(legendItem.lineDash, lineDefault.borderDash));
              }

              if (labelOpts && labelOpts.usePointStyle) {
                // Recalculate x and y for drawPoint() because its expecting
                // x and y to be center of figure (instead of top left)
                var radius = boxWidth * Math.SQRT2 / 2;
                var centerX = rtlHelper.xPlus(x, boxWidth / 2);
                var centerY = y + fontSize / 2; // Draw pointStyle as legend symbol

                helpers$1.canvas.drawPoint(ctx, legendItem.pointStyle, radius, centerX, centerY, legendItem.rotation);
              } else {
                // Draw box as legend symbol
                ctx.fillRect(rtlHelper.leftForLtr(x, boxWidth), y, boxWidth, fontSize);

                if (lineWidth !== 0) {
                  ctx.strokeRect(rtlHelper.leftForLtr(x, boxWidth), y, boxWidth, fontSize);
                }
              }

              ctx.restore();
            };

            var fillText = function fillText(x, y, legendItem, textWidth) {
              var halfFontSize = fontSize / 2;
              var xLeft = rtlHelper.xPlus(x, boxWidth + halfFontSize);
              var yMiddle = y + halfFontSize;
              ctx.fillText(legendItem.text, xLeft, yMiddle);

              if (legendItem.hidden) {
                // Strikethrough the text if hidden
                ctx.beginPath();
                ctx.lineWidth = 2;
                ctx.moveTo(xLeft, yMiddle);
                ctx.lineTo(rtlHelper.xPlus(xLeft, textWidth), yMiddle);
                ctx.stroke();
              }
            };

            var alignmentOffset = function alignmentOffset(dimension, blockSize) {
              switch (opts.align) {
                case 'start':
                  return labelOpts.padding;

                case 'end':
                  return dimension - blockSize;

                default:
                  // center
                  return (dimension - blockSize + labelOpts.padding) / 2;
              }
            }; // Horizontal


            var isHorizontal = me.isHorizontal();

            if (isHorizontal) {
              cursor = {
                x: me.left + alignmentOffset(legendWidth, lineWidths[0]),
                y: me.top + labelOpts.padding,
                line: 0
              };
            } else {
              cursor = {
                x: me.left + labelOpts.padding,
                y: me.top + alignmentOffset(legendHeight, columnHeights[0]),
                line: 0
              };
            }

            helpers$1.rtl.overrideTextDirection(me.ctx, opts.textDirection);
            var itemHeight = fontSize + labelOpts.padding;
            helpers$1.each(me.legendItems, function (legendItem, i) {
              var textWidth = ctx.measureText(legendItem.text).width;
              var width = boxWidth + fontSize / 2 + textWidth;
              var x = cursor.x;
              var y = cursor.y;
              rtlHelper.setWidth(me.minSize.width); // Use (me.left + me.minSize.width) and (me.top + me.minSize.height)
              // instead of me.right and me.bottom because me.width and me.height
              // may have been changed since me.minSize was calculated

              if (isHorizontal) {
                if (i > 0 && x + width + labelOpts.padding > me.left + me.minSize.width) {
                  y = cursor.y += itemHeight;
                  cursor.line++;
                  x = cursor.x = me.left + alignmentOffset(legendWidth, lineWidths[cursor.line]);
                }
              } else if (i > 0 && y + itemHeight > me.top + me.minSize.height) {
                x = cursor.x = x + me.columnWidths[cursor.line] + labelOpts.padding;
                cursor.line++;
                y = cursor.y = me.top + alignmentOffset(legendHeight, columnHeights[cursor.line]);
              }

              var realX = rtlHelper.x(x);
              drawLegendBox(realX, y, legendItem);
              hitboxes[i].left = rtlHelper.leftForLtr(realX, hitboxes[i].width);
              hitboxes[i].top = y; // Fill the actual label

              fillText(realX, y, legendItem, textWidth);

              if (isHorizontal) {
                cursor.x += width + labelOpts.padding;
              } else {
                cursor.y += itemHeight;
              }
            });
            helpers$1.rtl.restoreTextDirection(me.ctx, opts.textDirection);
          },

          /**
           * @private
           */
          _getLegendItemAt: function _getLegendItemAt(x, y) {
            var me = this;
            var i, hitBox, lh;

            if (x >= me.left && x <= me.right && y >= me.top && y <= me.bottom) {
              // See if we are touching one of the dataset boxes
              lh = me.legendHitBoxes;

              for (i = 0; i < lh.length; ++i) {
                hitBox = lh[i];

                if (x >= hitBox.left && x <= hitBox.left + hitBox.width && y >= hitBox.top && y <= hitBox.top + hitBox.height) {
                  // Touching an element
                  return me.legendItems[i];
                }
              }
            }

            return null;
          },

          /**
           * Handle an event
           * @private
           * @param {IEvent} event - The event to handle
           */
          handleEvent: function handleEvent(e) {
            var me = this;
            var opts = me.options;
            var type = e.type === 'mouseup' ? 'click' : e.type;
            var hoveredItem;

            if (type === 'mousemove') {
              if (!opts.onHover && !opts.onLeave) {
                return;
              }
            } else if (type === 'click') {
              if (!opts.onClick) {
                return;
              }
            } else {
              return;
            } // Chart event already has relative position in it


            hoveredItem = me._getLegendItemAt(e.x, e.y);

            if (type === 'click') {
              if (hoveredItem && opts.onClick) {
                // use e.native for backwards compatibility
                opts.onClick.call(me, e["native"], hoveredItem);
              }
            } else {
              if (opts.onLeave && hoveredItem !== me._hoveredItem) {
                if (me._hoveredItem) {
                  opts.onLeave.call(me, e["native"], me._hoveredItem);
                }

                me._hoveredItem = hoveredItem;
              }

              if (opts.onHover && hoveredItem) {
                // use e.native for backwards compatibility
                opts.onHover.call(me, e["native"], hoveredItem);
              }
            }
          }
        });

        function createNewLegendAndAttach(chart, legendOpts) {
          var legend = new Legend({
            ctx: chart.ctx,
            options: legendOpts,
            chart: chart
          });
          core_layouts.configure(chart, legend, legendOpts);
          core_layouts.addBox(chart, legend);
          chart.legend = legend;
        }

        var plugin_legend = {
          id: 'legend',

          /**
           * Backward compatibility: since 2.1.5, the legend is registered as a plugin, making
           * Chart.Legend obsolete. To avoid a breaking change, we export the Legend as part of
           * the plugin, which one will be re-exposed in the chart.js file.
           * https://github.com/chartjs/Chart.js/pull/2640
           * @private
           */
          _element: Legend,
          beforeInit: function beforeInit(chart) {
            var legendOpts = chart.options.legend;

            if (legendOpts) {
              createNewLegendAndAttach(chart, legendOpts);
            }
          },
          beforeUpdate: function beforeUpdate(chart) {
            var legendOpts = chart.options.legend;
            var legend = chart.legend;

            if (legendOpts) {
              helpers$1.mergeIf(legendOpts, core_defaults.global.legend);

              if (legend) {
                core_layouts.configure(chart, legend, legendOpts);
                legend.options = legendOpts;
              } else {
                createNewLegendAndAttach(chart, legendOpts);
              }
            } else if (legend) {
              core_layouts.removeBox(chart, legend);
              delete chart.legend;
            }
          },
          afterEvent: function afterEvent(chart, e) {
            var legend = chart.legend;

            if (legend) {
              legend.handleEvent(e);
            }
          }
        };
        var noop$2 = helpers$1.noop;

        core_defaults._set('global', {
          title: {
            display: false,
            fontStyle: 'bold',
            fullWidth: true,
            padding: 10,
            position: 'top',
            text: '',
            weight: 2000 // by default greater than legend (1000) to be above

          }
        });
        /**
         * IMPORTANT: this class is exposed publicly as Chart.Legend, backward compatibility required!
         */


        var Title = core_element.extend({
          initialize: function initialize(config) {
            var me = this;
            helpers$1.extend(me, config); // Contains hit boxes for each dataset (in dataset order)

            me.legendHitBoxes = [];
          },
          // These methods are ordered by lifecycle. Utilities then follow.
          beforeUpdate: noop$2,
          update: function update(maxWidth, maxHeight, margins) {
            var me = this; // Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)

            me.beforeUpdate(); // Absorb the master measurements

            me.maxWidth = maxWidth;
            me.maxHeight = maxHeight;
            me.margins = margins; // Dimensions

            me.beforeSetDimensions();
            me.setDimensions();
            me.afterSetDimensions(); // Labels

            me.beforeBuildLabels();
            me.buildLabels();
            me.afterBuildLabels(); // Fit

            me.beforeFit();
            me.fit();
            me.afterFit(); //

            me.afterUpdate();
            return me.minSize;
          },
          afterUpdate: noop$2,
          //
          beforeSetDimensions: noop$2,
          setDimensions: function setDimensions() {
            var me = this; // Set the unconstrained dimension before label rotation

            if (me.isHorizontal()) {
              // Reset position before calculating rotation
              me.width = me.maxWidth;
              me.left = 0;
              me.right = me.width;
            } else {
              me.height = me.maxHeight; // Reset position before calculating rotation

              me.top = 0;
              me.bottom = me.height;
            } // Reset padding


            me.paddingLeft = 0;
            me.paddingTop = 0;
            me.paddingRight = 0;
            me.paddingBottom = 0; // Reset minSize

            me.minSize = {
              width: 0,
              height: 0
            };
          },
          afterSetDimensions: noop$2,
          //
          beforeBuildLabels: noop$2,
          buildLabels: noop$2,
          afterBuildLabels: noop$2,
          //
          beforeFit: noop$2,
          fit: function fit() {
            var me = this;
            var opts = me.options;
            var minSize = me.minSize = {};
            var isHorizontal = me.isHorizontal();
            var lineCount, textSize;

            if (!opts.display) {
              me.width = minSize.width = me.height = minSize.height = 0;
              return;
            }

            lineCount = helpers$1.isArray(opts.text) ? opts.text.length : 1;
            textSize = lineCount * helpers$1.options._parseFont(opts).lineHeight + opts.padding * 2;
            me.width = minSize.width = isHorizontal ? me.maxWidth : textSize;
            me.height = minSize.height = isHorizontal ? textSize : me.maxHeight;
          },
          afterFit: noop$2,
          // Shared Methods
          isHorizontal: function isHorizontal() {
            var pos = this.options.position;
            return pos === 'top' || pos === 'bottom';
          },
          // Actually draw the title block on the canvas
          draw: function draw() {
            var me = this;
            var ctx = me.ctx;
            var opts = me.options;

            if (!opts.display) {
              return;
            }

            var fontOpts = helpers$1.options._parseFont(opts);

            var lineHeight = fontOpts.lineHeight;
            var offset = lineHeight / 2 + opts.padding;
            var rotation = 0;
            var top = me.top;
            var left = me.left;
            var bottom = me.bottom;
            var right = me.right;
            var maxWidth, titleX, titleY;
            ctx.fillStyle = helpers$1.valueOrDefault(opts.fontColor, core_defaults.global.defaultFontColor); // render in correct colour

            ctx.font = fontOpts.string; // Horizontal

            if (me.isHorizontal()) {
              titleX = left + (right - left) / 2; // midpoint of the width

              titleY = top + offset;
              maxWidth = right - left;
            } else {
              titleX = opts.position === 'left' ? left + offset : right - offset;
              titleY = top + (bottom - top) / 2;
              maxWidth = bottom - top;
              rotation = Math.PI * (opts.position === 'left' ? -0.5 : 0.5);
            }

            ctx.save();
            ctx.translate(titleX, titleY);
            ctx.rotate(rotation);
            ctx.textAlign = 'center';
            ctx.textBaseline = 'middle';
            var text = opts.text;

            if (helpers$1.isArray(text)) {
              var y = 0;

              for (var i = 0; i < text.length; ++i) {
                ctx.fillText(text[i], 0, y, maxWidth);
                y += lineHeight;
              }
            } else {
              ctx.fillText(text, 0, 0, maxWidth);
            }

            ctx.restore();
          }
        });

        function createNewTitleBlockAndAttach(chart, titleOpts) {
          var title = new Title({
            ctx: chart.ctx,
            options: titleOpts,
            chart: chart
          });
          core_layouts.configure(chart, title, titleOpts);
          core_layouts.addBox(chart, title);
          chart.titleBlock = title;
        }

        var plugin_title = {
          id: 'title',

          /**
           * Backward compatibility: since 2.1.5, the title is registered as a plugin, making
           * Chart.Title obsolete. To avoid a breaking change, we export the Title as part of
           * the plugin, which one will be re-exposed in the chart.js file.
           * https://github.com/chartjs/Chart.js/pull/2640
           * @private
           */
          _element: Title,
          beforeInit: function beforeInit(chart) {
            var titleOpts = chart.options.title;

            if (titleOpts) {
              createNewTitleBlockAndAttach(chart, titleOpts);
            }
          },
          beforeUpdate: function beforeUpdate(chart) {
            var titleOpts = chart.options.title;
            var titleBlock = chart.titleBlock;

            if (titleOpts) {
              helpers$1.mergeIf(titleOpts, core_defaults.global.title);

              if (titleBlock) {
                core_layouts.configure(chart, titleBlock, titleOpts);
                titleBlock.options = titleOpts;
              } else {
                createNewTitleBlockAndAttach(chart, titleOpts);
              }
            } else if (titleBlock) {
              core_layouts.removeBox(chart, titleBlock);
              delete chart.titleBlock;
            }
          }
        };
        var plugins = {};
        var filler = plugin_filler;
        var legend = plugin_legend;
        var title = plugin_title;
        plugins.filler = filler;
        plugins.legend = legend;
        plugins.title = title;
        /**
         * @namespace Chart
         */

        core_controller.helpers = helpers$1; // @todo dispatch these helpers into appropriated helpers/helpers.* file and write unit tests!

        core_helpers();
        core_controller._adapters = core_adapters;
        core_controller.Animation = core_animation;
        core_controller.animationService = core_animations;
        core_controller.controllers = controllers;
        core_controller.DatasetController = core_datasetController;
        core_controller.defaults = core_defaults;
        core_controller.Element = core_element;
        core_controller.elements = elements;
        core_controller.Interaction = core_interaction;
        core_controller.layouts = core_layouts;
        core_controller.platform = platform;
        core_controller.plugins = core_plugins;
        core_controller.Scale = core_scale;
        core_controller.scaleService = core_scaleService;
        core_controller.Ticks = core_ticks;
        core_controller.Tooltip = core_tooltip; // Register built-in scales

        core_controller.helpers.each(scales, function (scale, type) {
          core_controller.scaleService.registerScaleType(type, scale, scale._defaults);
        }); // Load to register built-in adapters (as side effects)
        // Loading built-in plugins

        for (var k in plugins) {
          if (plugins.hasOwnProperty(k)) {
            core_controller.plugins.register(plugins[k]);
          }
        }

        core_controller.platform.initialize();
        var src = core_controller;

        if (typeof window !== 'undefined') {
          window.Chart = core_controller;
        } // DEPRECATIONS

        /**
         * Provided for backward compatibility, not available anymore
         * @namespace Chart.Chart
         * @deprecated since version 2.8.0
         * @todo remove at version 3
         * @private
         */


        core_controller.Chart = core_controller;
        /**
         * Provided for backward compatibility, not available anymore
         * @namespace Chart.Legend
         * @deprecated since version 2.1.5
         * @todo remove at version 3
         * @private
         */

        core_controller.Legend = plugins.legend._element;
        /**
         * Provided for backward compatibility, not available anymore
         * @namespace Chart.Title
         * @deprecated since version 2.1.5
         * @todo remove at version 3
         * @private
         */

        core_controller.Title = plugins.title._element;
        /**
         * Provided for backward compatibility, use Chart.plugins instead
         * @namespace Chart.pluginService
         * @deprecated since version 2.1.5
         * @todo remove at version 3
         * @private
         */

        core_controller.pluginService = core_controller.plugins;
        /**
         * Provided for backward compatibility, inheriting from Chart.PlugingBase has no
         * effect, instead simply create/register plugins via plain JavaScript objects.
         * @interface Chart.PluginBase
         * @deprecated since version 2.5.0
         * @todo remove at version 3
         * @private
         */

        core_controller.PluginBase = core_controller.Element.extend({});
        /**
         * Provided for backward compatibility, use Chart.helpers.canvas instead.
         * @namespace Chart.canvasHelpers
         * @deprecated since version 2.6.0
         * @todo remove at version 3
         * @private
         */

        core_controller.canvasHelpers = core_controller.helpers.canvas;
        /**
         * Provided for backward compatibility, use Chart.layouts instead.
         * @namespace Chart.layoutService
         * @deprecated since version 2.7.3
         * @todo remove at version 3
         * @private
         */

        core_controller.layoutService = core_controller.layouts;
        /**
         * Provided for backward compatibility, not available anymore.
         * @namespace Chart.LinearScaleBase
         * @deprecated since version 2.8
         * @todo remove at version 3
         * @private
         */

        core_controller.LinearScaleBase = scale_linearbase;
        /**
         * Provided for backward compatibility, instead we should create a new Chart
         * by setting the type in the config (`new Chart(id, {type: '{chart-type}'}`).
         * @deprecated since version 2.8.0
         * @todo remove at version 3
         */

        core_controller.helpers.each(['Bar', 'Bubble', 'Doughnut', 'Line', 'PolarArea', 'Radar', 'Scatter'], function (klass) {
          core_controller[klass] = function (ctx, cfg) {
            return new core_controller(ctx, core_controller.helpers.merge(cfg || {}, {
              type: klass.charAt(0).toLowerCase() + klass.slice(1)
            }));
          };
        });
        return src;
      });
      /***/

    },

    /***/
    "OIYi": function OIYi(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : English (Canada) [en-ca]
      //! author : Jonathan Abourbih : https://github.com/jonbca
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var enCa = moment.defineLocale('en-ca', {
          months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
          monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
          weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
          weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
          weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
          longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'YYYY-MM-DD',
            LL: 'MMMM D, YYYY',
            LLL: 'MMMM D, YYYY h:mm A',
            LLLL: 'dddd, MMMM D, YYYY h:mm A'
          },
          calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            ss: '%d seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years'
          },
          dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
          ordinal: function ordinal(number) {
            var b = number % 10,
                output = ~~(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
            return number + output;
          }
        });
        return enCa;
      });
      /***/

    },

    /***/
    "Oaa7": function Oaa7(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : English (United Kingdom) [en-gb]
      //! author : Chris Gedrim : https://github.com/chrisgedrim
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var enGb = moment.defineLocale('en-gb', {
          months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
          monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
          weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
          weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
          weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
          },
          calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            ss: '%d seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years'
          },
          dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
          ordinal: function ordinal(number) {
            var b = number % 10,
                output = ~~(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
            return number + output;
          },
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.

          }
        });
        return enGb;
      });
      /***/

    },

    /***/
    "Ob0Z": function Ob0Z(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Marathi [mr]
      //! author : Harshad Kale : https://github.com/kalehv
      //! author : Vivek Athalye : https://github.com/vnathalye
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var symbolMap = {
          1: '१',
          2: '२',
          3: '३',
          4: '४',
          5: '५',
          6: '६',
          7: '७',
          8: '८',
          9: '९',
          0: '०'
        },
            numberMap = {
          '१': '1',
          '२': '2',
          '३': '3',
          '४': '4',
          '५': '5',
          '६': '6',
          '७': '7',
          '८': '8',
          '९': '9',
          '०': '0'
        };

        function relativeTimeMr(number, withoutSuffix, string, isFuture) {
          var output = '';

          if (withoutSuffix) {
            switch (string) {
              case 's':
                output = 'काही सेकंद';
                break;

              case 'ss':
                output = '%d सेकंद';
                break;

              case 'm':
                output = 'एक मिनिट';
                break;

              case 'mm':
                output = '%d मिनिटे';
                break;

              case 'h':
                output = 'एक तास';
                break;

              case 'hh':
                output = '%d तास';
                break;

              case 'd':
                output = 'एक दिवस';
                break;

              case 'dd':
                output = '%d दिवस';
                break;

              case 'M':
                output = 'एक महिना';
                break;

              case 'MM':
                output = '%d महिने';
                break;

              case 'y':
                output = 'एक वर्ष';
                break;

              case 'yy':
                output = '%d वर्षे';
                break;
            }
          } else {
            switch (string) {
              case 's':
                output = 'काही सेकंदां';
                break;

              case 'ss':
                output = '%d सेकंदां';
                break;

              case 'm':
                output = 'एका मिनिटा';
                break;

              case 'mm':
                output = '%d मिनिटां';
                break;

              case 'h':
                output = 'एका तासा';
                break;

              case 'hh':
                output = '%d तासां';
                break;

              case 'd':
                output = 'एका दिवसा';
                break;

              case 'dd':
                output = '%d दिवसां';
                break;

              case 'M':
                output = 'एका महिन्या';
                break;

              case 'MM':
                output = '%d महिन्यां';
                break;

              case 'y':
                output = 'एका वर्षा';
                break;

              case 'yy':
                output = '%d वर्षां';
                break;
            }
          }

          return output.replace(/%d/i, number);
        }

        var mr = moment.defineLocale('mr', {
          months: 'जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर'.split('_'),
          monthsShort: 'जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.'.split('_'),
          monthsParseExact: true,
          weekdays: 'रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
          weekdaysShort: 'रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि'.split('_'),
          weekdaysMin: 'र_सो_मं_बु_गु_शु_श'.split('_'),
          longDateFormat: {
            LT: 'A h:mm वाजता',
            LTS: 'A h:mm:ss वाजता',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm वाजता',
            LLLL: 'dddd, D MMMM YYYY, A h:mm वाजता'
          },
          calendar: {
            sameDay: '[आज] LT',
            nextDay: '[उद्या] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[काल] LT',
            lastWeek: '[मागील] dddd, LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: '%sमध्ये',
            past: '%sपूर्वी',
            s: relativeTimeMr,
            ss: relativeTimeMr,
            m: relativeTimeMr,
            mm: relativeTimeMr,
            h: relativeTimeMr,
            hh: relativeTimeMr,
            d: relativeTimeMr,
            dd: relativeTimeMr,
            M: relativeTimeMr,
            MM: relativeTimeMr,
            y: relativeTimeMr,
            yy: relativeTimeMr
          },
          preparse: function preparse(string) {
            return string.replace(/[१२३४५६७८९०]/g, function (match) {
              return numberMap[match];
            });
          },
          postformat: function postformat(string) {
            return string.replace(/\d/g, function (match) {
              return symbolMap[match];
            });
          },
          meridiemParse: /पहाटे|सकाळी|दुपारी|सायंकाळी|रात्री/,
          meridiemHour: function meridiemHour(hour, meridiem) {
            if (hour === 12) {
              hour = 0;
            }

            if (meridiem === 'पहाटे' || meridiem === 'सकाळी') {
              return hour;
            } else if (meridiem === 'दुपारी' || meridiem === 'सायंकाळी' || meridiem === 'रात्री') {
              return hour >= 12 ? hour : hour + 12;
            }
          },
          meridiem: function meridiem(hour, minute, isLower) {
            if (hour >= 0 && hour < 6) {
              return 'पहाटे';
            } else if (hour < 12) {
              return 'सकाळी';
            } else if (hour < 17) {
              return 'दुपारी';
            } else if (hour < 20) {
              return 'सायंकाळी';
            } else {
              return 'रात्री';
            }
          },
          week: {
            dow: 0,
            // Sunday is the first day of the week.
            doy: 6 // The week that contains Jan 6th is the first week of the year.

          }
        });
        return mr;
      });
      /***/

    },

    /***/
    "OfYG": function OfYG(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NotificationsComponent", function () {
        return NotificationsComponent;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _raw_loader_notifications_component_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! raw-loader!./notifications.component.html */
      "DrJD");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var ngx_toastr__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ngx-toastr */
      "5eHb");

      var NotificationsComponent = /*#__PURE__*/function () {
        function NotificationsComponent(toastr) {
          _classCallCheck(this, NotificationsComponent);

          this.toastr = toastr;
        }

        _createClass(NotificationsComponent, [{
          key: "showNotification",
          value: function showNotification(from, align) {
            var color = Math.floor(Math.random() * 5 + 1);

            switch (color) {
              case 1:
                this.toastr.info('<span data-notify="icon" class="nc-icon nc-bell-55"></span><span data-notify="message">Welcome to <b>Paper Dashboard Angular</b> - a beautiful bootstrap Inicio for every web developer.</span>', "", {
                  timeOut: 4000,
                  closeButton: true,
                  enableHtml: true,
                  toastClass: "alert alert-info alert-with-icon",
                  positionClass: "toast-" + from + "-" + align
                });
                break;

              case 2:
                this.toastr.success('<span data-notify="icon" class="nc-icon nc-bell-55"></span><span data-notify="message">Welcome to <b>Paper Dashboard Angular</b> - a beautiful bootstrap Inicio for every web developer.</span>', "", {
                  timeOut: 4000,
                  closeButton: true,
                  enableHtml: true,
                  toastClass: "alert alert-success alert-with-icon",
                  positionClass: "toast-" + from + "-" + align
                });
                break;

              case 3:
                this.toastr.warning('<span data-notify="icon" class="nc-icon nc-bell-55"></span><span data-notify="message">Welcome to <b>Paper Dashboard Angular</b> - a beautiful bootstrap Inicio for every web developer.</span>', "", {
                  timeOut: 4000,
                  closeButton: true,
                  enableHtml: true,
                  toastClass: "alert alert-warning alert-with-icon",
                  positionClass: "toast-" + from + "-" + align
                });
                break;

              case 4:
                this.toastr.error('<span data-notify="icon" class="nc-icon nc-bell-55"></span><span data-notify="message">Welcome to <b>Paper Dashboard Angular</b> - a beautiful bootstrap Inicio for every web developer.</span>', "", {
                  timeOut: 4000,
                  enableHtml: true,
                  closeButton: true,
                  toastClass: "alert alert-danger alert-with-icon",
                  positionClass: "toast-" + from + "-" + align
                });
                break;

              case 5:
                this.toastr.show('<span data-notify="icon" class="nc-icon nc-bell-55"></span><span data-notify="message">Welcome to <b>Paper Dashboard Angular</b> - a beautiful bootstrap Inicio for every web developer.</span>', "", {
                  timeOut: 4000,
                  closeButton: true,
                  enableHtml: true,
                  toastClass: "alert alert-primary alert-with-icon",
                  positionClass: "toast-" + from + "-" + align
                });
                break;

              default:
                break;
            }
          }
        }]);

        return NotificationsComponent;
      }();

      NotificationsComponent.ctorParameters = function () {
        return [{
          type: ngx_toastr__WEBPACK_IMPORTED_MODULE_3__["ToastrService"]
        }];
      };

      NotificationsComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Component"])({
        selector: 'notifications-cmp',
        template: _raw_loader_notifications_component_html__WEBPACK_IMPORTED_MODULE_1__["default"]
      }), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [ngx_toastr__WEBPACK_IMPORTED_MODULE_3__["ToastrService"]])], NotificationsComponent);
      /***/
    },

    /***/
    "OjkT": function OjkT(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Nepalese [ne]
      //! author : suvash : https://github.com/suvash
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var symbolMap = {
          1: '१',
          2: '२',
          3: '३',
          4: '४',
          5: '५',
          6: '६',
          7: '७',
          8: '८',
          9: '९',
          0: '०'
        },
            numberMap = {
          '१': '1',
          '२': '2',
          '३': '3',
          '४': '4',
          '५': '5',
          '६': '6',
          '७': '7',
          '८': '8',
          '९': '9',
          '०': '0'
        };
        var ne = moment.defineLocale('ne', {
          months: 'जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर'.split('_'),
          monthsShort: 'जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.'.split('_'),
          monthsParseExact: true,
          weekdays: 'आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार'.split('_'),
          weekdaysShort: 'आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.'.split('_'),
          weekdaysMin: 'आ._सो._मं._बु._बि._शु._श.'.split('_'),
          weekdaysParseExact: true,
          longDateFormat: {
            LT: 'Aको h:mm बजे',
            LTS: 'Aको h:mm:ss बजे',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, Aको h:mm बजे',
            LLLL: 'dddd, D MMMM YYYY, Aको h:mm बजे'
          },
          preparse: function preparse(string) {
            return string.replace(/[१२३४५६७८९०]/g, function (match) {
              return numberMap[match];
            });
          },
          postformat: function postformat(string) {
            return string.replace(/\d/g, function (match) {
              return symbolMap[match];
            });
          },
          meridiemParse: /राति|बिहान|दिउँसो|साँझ/,
          meridiemHour: function meridiemHour(hour, meridiem) {
            if (hour === 12) {
              hour = 0;
            }

            if (meridiem === 'राति') {
              return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'बिहान') {
              return hour;
            } else if (meridiem === 'दिउँसो') {
              return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'साँझ') {
              return hour + 12;
            }
          },
          meridiem: function meridiem(hour, minute, isLower) {
            if (hour < 3) {
              return 'राति';
            } else if (hour < 12) {
              return 'बिहान';
            } else if (hour < 16) {
              return 'दिउँसो';
            } else if (hour < 20) {
              return 'साँझ';
            } else {
              return 'राति';
            }
          },
          calendar: {
            sameDay: '[आज] LT',
            nextDay: '[भोलि] LT',
            nextWeek: '[आउँदो] dddd[,] LT',
            lastDay: '[हिजो] LT',
            lastWeek: '[गएको] dddd[,] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: '%sमा',
            past: '%s अगाडि',
            s: 'केही क्षण',
            ss: '%d सेकेण्ड',
            m: 'एक मिनेट',
            mm: '%d मिनेट',
            h: 'एक घण्टा',
            hh: '%d घण्टा',
            d: 'एक दिन',
            dd: '%d दिन',
            M: 'एक महिना',
            MM: '%d महिना',
            y: 'एक बर्ष',
            yy: '%d बर्ष'
          },
          week: {
            dow: 0,
            // Sunday is the first day of the week.
            doy: 6 // The week that contains Jan 6th is the first week of the year.

          }
        });
        return ne;
      });
      /***/

    },

    /***/
    "OmwH": function OmwH(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Chinese (Macau) [zh-mo]
      //! author : Ben : https://github.com/ben-lin
      //! author : Chris Lam : https://github.com/hehachris
      //! author : Tan Yuanhong : https://github.com/le0tan
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var zhMo = moment.defineLocale('zh-mo', {
          months: '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
          monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
          weekdays: '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
          weekdaysShort: '週日_週一_週二_週三_週四_週五_週六'.split('_'),
          weekdaysMin: '日_一_二_三_四_五_六'.split('_'),
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'YYYY年M月D日',
            LLL: 'YYYY年M月D日 HH:mm',
            LLLL: 'YYYY年M月D日dddd HH:mm',
            l: 'D/M/YYYY',
            ll: 'YYYY年M月D日',
            lll: 'YYYY年M月D日 HH:mm',
            llll: 'YYYY年M月D日dddd HH:mm'
          },
          meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
          meridiemHour: function meridiemHour(hour, meridiem) {
            if (hour === 12) {
              hour = 0;
            }

            if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
              return hour;
            } else if (meridiem === '中午') {
              return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === '下午' || meridiem === '晚上') {
              return hour + 12;
            }
          },
          meridiem: function meridiem(hour, minute, isLower) {
            var hm = hour * 100 + minute;

            if (hm < 600) {
              return '凌晨';
            } else if (hm < 900) {
              return '早上';
            } else if (hm < 1130) {
              return '上午';
            } else if (hm < 1230) {
              return '中午';
            } else if (hm < 1800) {
              return '下午';
            } else {
              return '晚上';
            }
          },
          calendar: {
            sameDay: '[今天] LT',
            nextDay: '[明天] LT',
            nextWeek: '[下]dddd LT',
            lastDay: '[昨天] LT',
            lastWeek: '[上]dddd LT',
            sameElse: 'L'
          },
          dayOfMonthOrdinalParse: /\d{1,2}(日|月|週)/,
          ordinal: function ordinal(number, period) {
            switch (period) {
              case 'd':
              case 'D':
              case 'DDD':
                return number + '日';

              case 'M':
                return number + '月';

              case 'w':
              case 'W':
                return number + '週';

              default:
                return number;
            }
          },
          relativeTime: {
            future: '%s內',
            past: '%s前',
            s: '幾秒',
            ss: '%d 秒',
            m: '1 分鐘',
            mm: '%d 分鐘',
            h: '1 小時',
            hh: '%d 小時',
            d: '1 天',
            dd: '%d 天',
            M: '1 個月',
            MM: '%d 個月',
            y: '1 年',
            yy: '%d 年'
          }
        });
        return zhMo;
      });
      /***/

    },

    /***/
    "Oxv6": function Oxv6(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Tajik [tg]
      //! author : Orif N. Jr. : https://github.com/orif-jr
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var suffixes = {
          0: '-ум',
          1: '-ум',
          2: '-юм',
          3: '-юм',
          4: '-ум',
          5: '-ум',
          6: '-ум',
          7: '-ум',
          8: '-ум',
          9: '-ум',
          10: '-ум',
          12: '-ум',
          13: '-ум',
          20: '-ум',
          30: '-юм',
          40: '-ум',
          50: '-ум',
          60: '-ум',
          70: '-ум',
          80: '-ум',
          90: '-ум',
          100: '-ум'
        };
        var tg = moment.defineLocale('tg', {
          months: {
            format: 'январи_феврали_марти_апрели_майи_июни_июли_августи_сентябри_октябри_ноябри_декабри'.split('_'),
            standalone: 'январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр'.split('_')
          },
          monthsShort: 'янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек'.split('_'),
          weekdays: 'якшанбе_душанбе_сешанбе_чоршанбе_панҷшанбе_ҷумъа_шанбе'.split('_'),
          weekdaysShort: 'яшб_дшб_сшб_чшб_пшб_ҷум_шнб'.split('_'),
          weekdaysMin: 'яш_дш_сш_чш_пш_ҷм_шб'.split('_'),
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
          },
          calendar: {
            sameDay: '[Имрӯз соати] LT',
            nextDay: '[Фардо соати] LT',
            lastDay: '[Дирӯз соати] LT',
            nextWeek: 'dddd[и] [ҳафтаи оянда соати] LT',
            lastWeek: 'dddd[и] [ҳафтаи гузашта соати] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: 'баъди %s',
            past: '%s пеш',
            s: 'якчанд сония',
            m: 'як дақиқа',
            mm: '%d дақиқа',
            h: 'як соат',
            hh: '%d соат',
            d: 'як рӯз',
            dd: '%d рӯз',
            M: 'як моҳ',
            MM: '%d моҳ',
            y: 'як сол',
            yy: '%d сол'
          },
          meridiemParse: /шаб|субҳ|рӯз|бегоҳ/,
          meridiemHour: function meridiemHour(hour, meridiem) {
            if (hour === 12) {
              hour = 0;
            }

            if (meridiem === 'шаб') {
              return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'субҳ') {
              return hour;
            } else if (meridiem === 'рӯз') {
              return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'бегоҳ') {
              return hour + 12;
            }
          },
          meridiem: function meridiem(hour, minute, isLower) {
            if (hour < 4) {
              return 'шаб';
            } else if (hour < 11) {
              return 'субҳ';
            } else if (hour < 16) {
              return 'рӯз';
            } else if (hour < 19) {
              return 'бегоҳ';
            } else {
              return 'шаб';
            }
          },
          dayOfMonthOrdinalParse: /\d{1,2}-(ум|юм)/,
          ordinal: function ordinal(number) {
            var a = number % 10,
                b = number >= 100 ? 100 : null;
            return number + (suffixes[number] || suffixes[a] || suffixes[b]);
          },
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1th is the first week of the year.

          }
        });
        return tg;
      });
      /***/

    },

    /***/
    "PA2r": function PA2r(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Czech [cs]
      //! author : petrbela : https://github.com/petrbela
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var months = 'leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec'.split('_'),
            monthsShort = 'led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro'.split('_'),
            monthsParse = [/^led/i, /^úno/i, /^bře/i, /^dub/i, /^kvě/i, /^(čvn|červen$|června)/i, /^(čvc|červenec|července)/i, /^srp/i, /^zář/i, /^říj/i, /^lis/i, /^pro/i],
            // NOTE: 'červen' is substring of 'červenec'; therefore 'červenec' must precede 'červen' in the regex to be fully matched.
        // Otherwise parser matches '1. červenec' as '1. červen' + 'ec'.
        monthsRegex = /^(leden|únor|březen|duben|květen|červenec|července|červen|června|srpen|září|říjen|listopad|prosinec|led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i;

        function plural(n) {
          return n > 1 && n < 5 && ~~(n / 10) !== 1;
        }

        function translate(number, withoutSuffix, key, isFuture) {
          var result = number + ' ';

          switch (key) {
            case 's':
              // a few seconds / in a few seconds / a few seconds ago
              return withoutSuffix || isFuture ? 'pár sekund' : 'pár sekundami';

            case 'ss':
              // 9 seconds / in 9 seconds / 9 seconds ago
              if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'sekundy' : 'sekund');
              } else {
                return result + 'sekundami';
              }

            case 'm':
              // a minute / in a minute / a minute ago
              return withoutSuffix ? 'minuta' : isFuture ? 'minutu' : 'minutou';

            case 'mm':
              // 9 minutes / in 9 minutes / 9 minutes ago
              if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'minuty' : 'minut');
              } else {
                return result + 'minutami';
              }

            case 'h':
              // an hour / in an hour / an hour ago
              return withoutSuffix ? 'hodina' : isFuture ? 'hodinu' : 'hodinou';

            case 'hh':
              // 9 hours / in 9 hours / 9 hours ago
              if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'hodiny' : 'hodin');
              } else {
                return result + 'hodinami';
              }

            case 'd':
              // a day / in a day / a day ago
              return withoutSuffix || isFuture ? 'den' : 'dnem';

            case 'dd':
              // 9 days / in 9 days / 9 days ago
              if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'dny' : 'dní');
              } else {
                return result + 'dny';
              }

            case 'M':
              // a month / in a month / a month ago
              return withoutSuffix || isFuture ? 'měsíc' : 'měsícem';

            case 'MM':
              // 9 months / in 9 months / 9 months ago
              if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'měsíce' : 'měsíců');
              } else {
                return result + 'měsíci';
              }

            case 'y':
              // a year / in a year / a year ago
              return withoutSuffix || isFuture ? 'rok' : 'rokem';

            case 'yy':
              // 9 years / in 9 years / 9 years ago
              if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'roky' : 'let');
              } else {
                return result + 'lety';
              }

          }
        }

        var cs = moment.defineLocale('cs', {
          months: months,
          monthsShort: monthsShort,
          monthsRegex: monthsRegex,
          monthsShortRegex: monthsRegex,
          // NOTE: 'červen' is substring of 'červenec'; therefore 'červenec' must precede 'červen' in the regex to be fully matched.
          // Otherwise parser matches '1. červenec' as '1. červen' + 'ec'.
          monthsStrictRegex: /^(leden|ledna|února|únor|březen|března|duben|dubna|květen|května|červenec|července|červen|června|srpen|srpna|září|říjen|října|listopadu|listopad|prosinec|prosince)/i,
          monthsShortStrictRegex: /^(led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i,
          monthsParse: monthsParse,
          longMonthsParse: monthsParse,
          shortMonthsParse: monthsParse,
          weekdays: 'neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota'.split('_'),
          weekdaysShort: 'ne_po_út_st_čt_pá_so'.split('_'),
          weekdaysMin: 'ne_po_út_st_čt_pá_so'.split('_'),
          longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd D. MMMM YYYY H:mm',
            l: 'D. M. YYYY'
          },
          calendar: {
            sameDay: '[dnes v] LT',
            nextDay: '[zítra v] LT',
            nextWeek: function nextWeek() {
              switch (this.day()) {
                case 0:
                  return '[v neděli v] LT';

                case 1:
                case 2:
                  return '[v] dddd [v] LT';

                case 3:
                  return '[ve středu v] LT';

                case 4:
                  return '[ve čtvrtek v] LT';

                case 5:
                  return '[v pátek v] LT';

                case 6:
                  return '[v sobotu v] LT';
              }
            },
            lastDay: '[včera v] LT',
            lastWeek: function lastWeek() {
              switch (this.day()) {
                case 0:
                  return '[minulou neděli v] LT';

                case 1:
                case 2:
                  return '[minulé] dddd [v] LT';

                case 3:
                  return '[minulou středu v] LT';

                case 4:
                case 5:
                  return '[minulý] dddd [v] LT';

                case 6:
                  return '[minulou sobotu v] LT';
              }
            },
            sameElse: 'L'
          },
          relativeTime: {
            future: 'za %s',
            past: 'před %s',
            s: translate,
            ss: translate,
            m: translate,
            mm: translate,
            h: translate,
            hh: translate,
            d: translate,
            dd: translate,
            M: translate,
            MM: translate,
            y: translate,
            yy: translate
          },
          dayOfMonthOrdinalParse: /\d{1,2}\./,
          ordinal: '%d.',
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.

          }
        });
        return cs;
      });
      /***/

    },

    /***/
    "PeUW": function PeUW(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Tamil [ta]
      //! author : Arjunkumar Krishnamoorthy : https://github.com/tk120404
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var symbolMap = {
          1: '௧',
          2: '௨',
          3: '௩',
          4: '௪',
          5: '௫',
          6: '௬',
          7: '௭',
          8: '௮',
          9: '௯',
          0: '௦'
        },
            numberMap = {
          '௧': '1',
          '௨': '2',
          '௩': '3',
          '௪': '4',
          '௫': '5',
          '௬': '6',
          '௭': '7',
          '௮': '8',
          '௯': '9',
          '௦': '0'
        };
        var ta = moment.defineLocale('ta', {
          months: 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split('_'),
          monthsShort: 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split('_'),
          weekdays: 'ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை'.split('_'),
          weekdaysShort: 'ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி'.split('_'),
          weekdaysMin: 'ஞா_தி_செ_பு_வி_வெ_ச'.split('_'),
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, HH:mm',
            LLLL: 'dddd, D MMMM YYYY, HH:mm'
          },
          calendar: {
            sameDay: '[இன்று] LT',
            nextDay: '[நாளை] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[நேற்று] LT',
            lastWeek: '[கடந்த வாரம்] dddd, LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: '%s இல்',
            past: '%s முன்',
            s: 'ஒரு சில விநாடிகள்',
            ss: '%d விநாடிகள்',
            m: 'ஒரு நிமிடம்',
            mm: '%d நிமிடங்கள்',
            h: 'ஒரு மணி நேரம்',
            hh: '%d மணி நேரம்',
            d: 'ஒரு நாள்',
            dd: '%d நாட்கள்',
            M: 'ஒரு மாதம்',
            MM: '%d மாதங்கள்',
            y: 'ஒரு வருடம்',
            yy: '%d ஆண்டுகள்'
          },
          dayOfMonthOrdinalParse: /\d{1,2}வது/,
          ordinal: function ordinal(number) {
            return number + 'வது';
          },
          preparse: function preparse(string) {
            return string.replace(/[௧௨௩௪௫௬௭௮௯௦]/g, function (match) {
              return numberMap[match];
            });
          },
          postformat: function postformat(string) {
            return string.replace(/\d/g, function (match) {
              return symbolMap[match];
            });
          },
          // refer http://ta.wikipedia.org/s/1er1
          meridiemParse: /யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,
          meridiem: function meridiem(hour, minute, isLower) {
            if (hour < 2) {
              return ' யாமம்';
            } else if (hour < 6) {
              return ' வைகறை'; // வைகறை
            } else if (hour < 10) {
              return ' காலை'; // காலை
            } else if (hour < 14) {
              return ' நண்பகல்'; // நண்பகல்
            } else if (hour < 18) {
              return ' எற்பாடு'; // எற்பாடு
            } else if (hour < 22) {
              return ' மாலை'; // மாலை
            } else {
              return ' யாமம்';
            }
          },
          meridiemHour: function meridiemHour(hour, meridiem) {
            if (hour === 12) {
              hour = 0;
            }

            if (meridiem === 'யாமம்') {
              return hour < 2 ? hour : hour + 12;
            } else if (meridiem === 'வைகறை' || meridiem === 'காலை') {
              return hour;
            } else if (meridiem === 'நண்பகல்') {
              return hour >= 10 ? hour : hour + 12;
            } else {
              return hour + 12;
            }
          },
          week: {
            dow: 0,
            // Sunday is the first day of the week.
            doy: 6 // The week that contains Jan 6th is the first week of the year.

          }
        });
        return ta;
      });
      /***/

    },

    /***/
    "PpIw": function PpIw(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Kannada [kn]
      //! author : Rajeev Naik : https://github.com/rajeevnaikte
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var symbolMap = {
          1: '೧',
          2: '೨',
          3: '೩',
          4: '೪',
          5: '೫',
          6: '೬',
          7: '೭',
          8: '೮',
          9: '೯',
          0: '೦'
        },
            numberMap = {
          '೧': '1',
          '೨': '2',
          '೩': '3',
          '೪': '4',
          '೫': '5',
          '೬': '6',
          '೭': '7',
          '೮': '8',
          '೯': '9',
          '೦': '0'
        };
        var kn = moment.defineLocale('kn', {
          months: 'ಜನವರಿ_ಫೆಬ್ರವರಿ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬರ್_ಅಕ್ಟೋಬರ್_ನವೆಂಬರ್_ಡಿಸೆಂಬರ್'.split('_'),
          monthsShort: 'ಜನ_ಫೆಬ್ರ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂ_ಅಕ್ಟೋ_ನವೆಂ_ಡಿಸೆಂ'.split('_'),
          monthsParseExact: true,
          weekdays: 'ಭಾನುವಾರ_ಸೋಮವಾರ_ಮಂಗಳವಾರ_ಬುಧವಾರ_ಗುರುವಾರ_ಶುಕ್ರವಾರ_ಶನಿವಾರ'.split('_'),
          weekdaysShort: 'ಭಾನು_ಸೋಮ_ಮಂಗಳ_ಬುಧ_ಗುರು_ಶುಕ್ರ_ಶನಿ'.split('_'),
          weekdaysMin: 'ಭಾ_ಸೋ_ಮಂ_ಬು_ಗು_ಶು_ಶ'.split('_'),
          longDateFormat: {
            LT: 'A h:mm',
            LTS: 'A h:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm',
            LLLL: 'dddd, D MMMM YYYY, A h:mm'
          },
          calendar: {
            sameDay: '[ಇಂದು] LT',
            nextDay: '[ನಾಳೆ] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[ನಿನ್ನೆ] LT',
            lastWeek: '[ಕೊನೆಯ] dddd, LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: '%s ನಂತರ',
            past: '%s ಹಿಂದೆ',
            s: 'ಕೆಲವು ಕ್ಷಣಗಳು',
            ss: '%d ಸೆಕೆಂಡುಗಳು',
            m: 'ಒಂದು ನಿಮಿಷ',
            mm: '%d ನಿಮಿಷ',
            h: 'ಒಂದು ಗಂಟೆ',
            hh: '%d ಗಂಟೆ',
            d: 'ಒಂದು ದಿನ',
            dd: '%d ದಿನ',
            M: 'ಒಂದು ತಿಂಗಳು',
            MM: '%d ತಿಂಗಳು',
            y: 'ಒಂದು ವರ್ಷ',
            yy: '%d ವರ್ಷ'
          },
          preparse: function preparse(string) {
            return string.replace(/[೧೨೩೪೫೬೭೮೯೦]/g, function (match) {
              return numberMap[match];
            });
          },
          postformat: function postformat(string) {
            return string.replace(/\d/g, function (match) {
              return symbolMap[match];
            });
          },
          meridiemParse: /ರಾತ್ರಿ|ಬೆಳಿಗ್ಗೆ|ಮಧ್ಯಾಹ್ನ|ಸಂಜೆ/,
          meridiemHour: function meridiemHour(hour, meridiem) {
            if (hour === 12) {
              hour = 0;
            }

            if (meridiem === 'ರಾತ್ರಿ') {
              return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'ಬೆಳಿಗ್ಗೆ') {
              return hour;
            } else if (meridiem === 'ಮಧ್ಯಾಹ್ನ') {
              return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'ಸಂಜೆ') {
              return hour + 12;
            }
          },
          meridiem: function meridiem(hour, minute, isLower) {
            if (hour < 4) {
              return 'ರಾತ್ರಿ';
            } else if (hour < 10) {
              return 'ಬೆಳಿಗ್ಗೆ';
            } else if (hour < 17) {
              return 'ಮಧ್ಯಾಹ್ನ';
            } else if (hour < 20) {
              return 'ಸಂಜೆ';
            } else {
              return 'ರಾತ್ರಿ';
            }
          },
          dayOfMonthOrdinalParse: /\d{1,2}(ನೇ)/,
          ordinal: function ordinal(number) {
            return number + 'ನೇ';
          },
          week: {
            dow: 0,
            // Sunday is the first day of the week.
            doy: 6 // The week that contains Jan 6th is the first week of the year.

          }
        });
        return kn;
      });
      /***/

    },

    /***/
    "Qj4J": function Qj4J(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Arabic (Kuwait) [ar-kw]
      //! author : Nusret Parlak: https://github.com/nusretparlak
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var arKw = moment.defineLocale('ar-kw', {
          months: 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
          monthsShort: 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
          weekdays: 'الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
          weekdaysShort: 'احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
          weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
          weekdaysParseExact: true,
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
          },
          calendar: {
            sameDay: '[اليوم على الساعة] LT',
            nextDay: '[غدا على الساعة] LT',
            nextWeek: 'dddd [على الساعة] LT',
            lastDay: '[أمس على الساعة] LT',
            lastWeek: 'dddd [على الساعة] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: 'في %s',
            past: 'منذ %s',
            s: 'ثوان',
            ss: '%d ثانية',
            m: 'دقيقة',
            mm: '%d دقائق',
            h: 'ساعة',
            hh: '%d ساعات',
            d: 'يوم',
            dd: '%d أيام',
            M: 'شهر',
            MM: '%d أشهر',
            y: 'سنة',
            yy: '%d سنوات'
          },
          week: {
            dow: 0,
            // Sunday is the first day of the week.
            doy: 12 // The week that contains Jan 12th is the first week of the year.

          }
        });
        return arKw;
      });
      /***/

    },

    /***/
    "Qu3c": function Qu3c(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MAT_TOOLTIP_DEFAULT_OPTIONS", function () {
        return MAT_TOOLTIP_DEFAULT_OPTIONS;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY", function () {
        return MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MAT_TOOLTIP_SCROLL_STRATEGY", function () {
        return MAT_TOOLTIP_SCROLL_STRATEGY;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY", function () {
        return MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER", function () {
        return MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MatTooltip", function () {
        return MatTooltip;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MatTooltipModule", function () {
        return MatTooltipModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SCROLL_THROTTLE_MS", function () {
        return SCROLL_THROTTLE_MS;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TOOLTIP_PANEL_CLASS", function () {
        return TOOLTIP_PANEL_CLASS;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TooltipComponent", function () {
        return TooltipComponent;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getMatTooltipInvalidPositionError", function () {
        return getMatTooltipInvalidPositionError;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "matTooltipAnimations", function () {
        return matTooltipAnimations;
      });
      /* harmony import */


      var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/cdk/overlay */
      "rDax");
      /* harmony import */


      var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/cdk/a11y */
      "u47x");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/common */
      "ofXK");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var _angular_material_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/material/core */
      "FKr1");
      /* harmony import */


      var _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @angular/cdk/scrolling */
      "vxfF");
      /* harmony import */


      var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! @angular/cdk/bidi */
      "cH1L");
      /* harmony import */


      var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! @angular/cdk/coercion */
      "8LU1");
      /* harmony import */


      var _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! @angular/cdk/keycodes */
      "FtGj");
      /* harmony import */


      var _angular_cdk_layout__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! @angular/cdk/layout */
      "0MNC");
      /* harmony import */


      var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
      /*! @angular/cdk/platform */
      "nLfN");
      /* harmony import */


      var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
      /*! @angular/cdk/portal */
      "+rOU");
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(
      /*! rxjs */
      "qCKp");
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(
      /*! rxjs/operators */
      "kU1M");
      /* harmony import */


      var _angular_animations__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(
      /*! @angular/animations */
      "R0Ic");
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Animations used by MatTooltip.
       * @docs-private
       */


      var matTooltipAnimations = {
        /** Animation that transitions a tooltip in and out. */
        tooltipState: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["trigger"])('state', [Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["state"])('initial, void, hidden', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["style"])({
          opacity: 0,
          transform: 'scale(0)'
        })), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["state"])('visible', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["style"])({
          transform: 'scale(1)'
        })), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["transition"])('* => visible', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["animate"])('200ms cubic-bezier(0, 0, 0.2, 1)', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["keyframes"])([Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["style"])({
          opacity: 0,
          transform: 'scale(0)',
          offset: 0
        }), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["style"])({
          opacity: 0.5,
          transform: 'scale(0.99)',
          offset: 0.5
        }), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["style"])({
          opacity: 1,
          transform: 'scale(1)',
          offset: 1
        })]))), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["transition"])('* => hidden', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["animate"])('100ms cubic-bezier(0, 0, 0.2, 1)', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["style"])({
          opacity: 0
        })))])
      };
      /** Time in ms to throttle repositioning after scroll events. */

      var SCROLL_THROTTLE_MS = 20;
      /** CSS class that will be attached to the overlay panel. */

      var TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';
      /** Options used to bind passive event listeners. */

      var passiveListenerOptions = Object(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_10__["normalizePassiveListenerOptions"])({
        passive: true
      });
      /**
       * Time between the user putting the pointer on a tooltip
       * trigger and the long press event being fired.
       */

      var LONGPRESS_DELAY = 500;
      /**
       * Creates an error to be thrown if the user supplied an invalid tooltip position.
       * @docs-private
       */

      function getMatTooltipInvalidPositionError(position) {
        return Error("Tooltip position \"".concat(position, "\" is invalid."));
      }
      /** Injection token that determines the scroll handling while a tooltip is visible. */


      var MAT_TOOLTIP_SCROLL_STRATEGY = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["InjectionToken"]('mat-tooltip-scroll-strategy');
      /** @docs-private */

      function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay) {
        return function () {
          return overlay.scrollStrategies.reposition({
            scrollThrottle: SCROLL_THROTTLE_MS
          });
        };
      }
      /** @docs-private */


      var MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {
        provide: MAT_TOOLTIP_SCROLL_STRATEGY,
        deps: [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__["Overlay"]],
        useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY
      };
      /** Injection token to be used to override the default options for `matTooltip`. */

      var MAT_TOOLTIP_DEFAULT_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["InjectionToken"]('mat-tooltip-default-options', {
        providedIn: 'root',
        factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY
      });
      /** @docs-private */

      function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY() {
        return {
          showDelay: 0,
          hideDelay: 0,
          touchendHideDelay: 1500
        };
      }
      /**
       * Directive that attaches a material design tooltip to the host element. Animates the showing and
       * hiding of a tooltip provided position (defaults to below the element).
       *
       * https://material.io/design/components/tooltips.html
       */


      var MatTooltip = /*#__PURE__*/function () {
        function MatTooltip(_overlay, _elementRef, _scrollDispatcher, _viewContainerRef, _ngZone, _platform, _ariaDescriber, _focusMonitor, scrollStrategy, _dir, _defaultOptions) {
          var _this21 = this;

          _classCallCheck(this, MatTooltip);

          this._overlay = _overlay;
          this._elementRef = _elementRef;
          this._scrollDispatcher = _scrollDispatcher;
          this._viewContainerRef = _viewContainerRef;
          this._ngZone = _ngZone;
          this._platform = _platform;
          this._ariaDescriber = _ariaDescriber;
          this._focusMonitor = _focusMonitor;
          this._dir = _dir;
          this._defaultOptions = _defaultOptions;
          this._position = 'below';
          this._disabled = false;
          this._viewInitialized = false;
          this._pointerExitEventsInitialized = false;
          /** The default delay in ms before showing the tooltip after show is called */

          this.showDelay = this._defaultOptions.showDelay;
          /** The default delay in ms before hiding the tooltip after hide is called */

          this.hideDelay = this._defaultOptions.hideDelay;
          /**
           * How touch gestures should be handled by the tooltip. On touch devices the tooltip directive
           * uses a long press gesture to show and hide, however it can conflict with the native browser
           * gestures. To work around the conflict, Angular Material disables native gestures on the
           * trigger, but that might not be desirable on particular elements (e.g. inputs and draggable
           * elements). The different values for this option configure the touch event handling as follows:
           * - `auto` - Enables touch gestures for all elements, but tries to avoid conflicts with native
           *   browser gestures on particular elements. In particular, it allows text selection on inputs
           *   and textareas, and preserves the native browser dragging on elements marked as `draggable`.
           * - `on` - Enables touch gestures for all elements and disables native
           *   browser gestures with no exceptions.
           * - `off` - Disables touch gestures. Note that this will prevent the tooltip from
           *   showing on touch devices.
           */

          this.touchGestures = 'auto';
          this._message = '';
          /** Manually-bound passive event listeners. */

          this._passiveListeners = [];
          /** Emits when the component is destroyed. */

          this._destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_12__["Subject"]();
          /**
           * Handles the keydown events on the host element.
           * Needs to be an arrow function so that we can use it in addEventListener.
           */

          this._handleKeydown = function (event) {
            if (_this21._isTooltipVisible() && event.keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__["ESCAPE"] && !Object(_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__["hasModifierKey"])(event)) {
              event.preventDefault();
              event.stopPropagation();

              _this21._ngZone.run(function () {
                return _this21.hide(0);
              });
            }
          };

          this._scrollStrategy = scrollStrategy;

          if (_defaultOptions) {
            if (_defaultOptions.position) {
              this.position = _defaultOptions.position;
            }

            if (_defaultOptions.touchGestures) {
              this.touchGestures = _defaultOptions.touchGestures;
            }
          }

          _ngZone.runOutsideAngular(function () {
            _elementRef.nativeElement.addEventListener('keydown', _this21._handleKeydown);
          });
        }
        /** Allows the user to define the position of the tooltip relative to the parent element */


        _createClass(MatTooltip, [{
          key: "position",
          get: function get() {
            return this._position;
          },
          set: function set(value) {
            if (value !== this._position) {
              this._position = value;

              if (this._overlayRef) {
                this._updatePosition();

                if (this._tooltipInstance) {
                  this._tooltipInstance.show(0);
                }

                this._overlayRef.updatePosition();
              }
            }
          }
          /** Disables the display of the tooltip. */

        }, {
          key: "disabled",
          get: function get() {
            return this._disabled;
          },
          set: function set(value) {
            this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_7__["coerceBooleanProperty"])(value); // If tooltip is disabled, hide immediately.

            if (this._disabled) {
              this.hide(0);
            } else {
              this._setupPointerEnterEventsIfNeeded();
            }
          }
          /** The message to be displayed in the tooltip */

        }, {
          key: "message",
          get: function get() {
            return this._message;
          },
          set: function set(value) {
            var _this22 = this;

            this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message); // If the message is not a string (e.g. number), convert it to a string and trim it.
            // Must convert with `String(value)`, not `${value}`, otherwise Closure Compiler optimises
            // away the string-conversion: https://github.com/angular/components/issues/20684


            this._message = value != null ? String(value).trim() : '';

            if (!this._message && this._isTooltipVisible()) {
              this.hide(0);
            } else {
              this._setupPointerEnterEventsIfNeeded();

              this._updateTooltipMessage();

              this._ngZone.runOutsideAngular(function () {
                // The `AriaDescriber` has some functionality that avoids adding a description if it's the
                // same as the `aria-label` of an element, however we can't know whether the tooltip trigger
                // has a data-bound `aria-label` or when it'll be set for the first time. We can avoid the
                // issue by deferring the description by a tick so Angular has time to set the `aria-label`.
                Promise.resolve().then(function () {
                  _this22._ariaDescriber.describe(_this22._elementRef.nativeElement, _this22.message);
                });
              });
            }
          }
          /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */

        }, {
          key: "tooltipClass",
          get: function get() {
            return this._tooltipClass;
          },
          set: function set(value) {
            this._tooltipClass = value;

            if (this._tooltipInstance) {
              this._setTooltipClass(this._tooltipClass);
            }
          }
        }, {
          key: "ngAfterViewInit",
          value: function ngAfterViewInit() {
            var _this23 = this;

            // This needs to happen after view init so the initial values for all inputs have been set.
            this._viewInitialized = true;

            this._setupPointerEnterEventsIfNeeded();

            this._focusMonitor.monitor(this._elementRef).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["takeUntil"])(this._destroyed)).subscribe(function (origin) {
              // Note that the focus monitor runs outside the Angular zone.
              if (!origin) {
                _this23._ngZone.run(function () {
                  return _this23.hide(0);
                });
              } else if (origin === 'keyboard') {
                _this23._ngZone.run(function () {
                  return _this23.show();
                });
              }
            });
          }
          /**
           * Dispose the tooltip when destroyed.
           */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            var nativeElement = this._elementRef.nativeElement;
            clearTimeout(this._touchstartTimeout);

            if (this._overlayRef) {
              this._overlayRef.dispose();

              this._tooltipInstance = null;
            } // Clean up the event listeners set in the constructor


            nativeElement.removeEventListener('keydown', this._handleKeydown);

            this._passiveListeners.forEach(function (_ref9) {
              var _ref10 = _slicedToArray(_ref9, 2),
                  event = _ref10[0],
                  listener = _ref10[1];

              nativeElement.removeEventListener(event, listener, passiveListenerOptions);
            });

            this._passiveListeners.length = 0;

            this._destroyed.next();

            this._destroyed.complete();

            this._ariaDescriber.removeDescription(nativeElement, this.message);

            this._focusMonitor.stopMonitoring(nativeElement);
          }
          /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */

        }, {
          key: "show",
          value: function show() {
            var _this24 = this;

            var delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.showDelay;

            if (this.disabled || !this.message || this._isTooltipVisible() && !this._tooltipInstance._showTimeoutId && !this._tooltipInstance._hideTimeoutId) {
              return;
            }

            var overlayRef = this._createOverlay();

            this._detach();

            this._portal = this._portal || new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_11__["ComponentPortal"](TooltipComponent, this._viewContainerRef);
            this._tooltipInstance = overlayRef.attach(this._portal).instance;

            this._tooltipInstance.afterHidden().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["takeUntil"])(this._destroyed)).subscribe(function () {
              return _this24._detach();
            });

            this._setTooltipClass(this._tooltipClass);

            this._updateTooltipMessage();

            this._tooltipInstance.show(delay);
          }
          /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */

        }, {
          key: "hide",
          value: function hide() {
            var delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.hideDelay;

            if (this._tooltipInstance) {
              this._tooltipInstance.hide(delay);
            }
          }
          /** Shows/hides the tooltip */

        }, {
          key: "toggle",
          value: function toggle() {
            this._isTooltipVisible() ? this.hide() : this.show();
          }
          /** Returns true if the tooltip is currently visible to the user */

        }, {
          key: "_isTooltipVisible",
          value: function _isTooltipVisible() {
            return !!this._tooltipInstance && this._tooltipInstance.isVisible();
          }
          /** Create the overlay config and position strategy */

        }, {
          key: "_createOverlay",
          value: function _createOverlay() {
            var _this25 = this;

            if (this._overlayRef) {
              return this._overlayRef;
            }

            var scrollableAncestors = this._scrollDispatcher.getAncestorScrollContainers(this._elementRef); // Create connected position strategy that listens for scroll events to reposition.


            var strategy = this._overlay.position().flexibleConnectedTo(this._elementRef).withTransformOriginOn('.mat-tooltip').withFlexibleDimensions(false).withViewportMargin(8).withScrollableContainers(scrollableAncestors);

            strategy.positionChanges.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["takeUntil"])(this._destroyed)).subscribe(function (change) {
              if (_this25._tooltipInstance) {
                if (change.scrollableViewProperties.isOverlayClipped && _this25._tooltipInstance.isVisible()) {
                  // After position changes occur and the overlay is clipped by
                  // a parent scrollable then close the tooltip.
                  _this25._ngZone.run(function () {
                    return _this25.hide(0);
                  });
                }
              }
            });
            this._overlayRef = this._overlay.create({
              direction: this._dir,
              positionStrategy: strategy,
              panelClass: TOOLTIP_PANEL_CLASS,
              scrollStrategy: this._scrollStrategy()
            });

            this._updatePosition();

            this._overlayRef.detachments().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["takeUntil"])(this._destroyed)).subscribe(function () {
              return _this25._detach();
            });

            return this._overlayRef;
          }
          /** Detaches the currently-attached tooltip. */

        }, {
          key: "_detach",
          value: function _detach() {
            if (this._overlayRef && this._overlayRef.hasAttached()) {
              this._overlayRef.detach();
            }

            this._tooltipInstance = null;
          }
          /** Updates the position of the current tooltip. */

        }, {
          key: "_updatePosition",
          value: function _updatePosition() {
            var position = this._overlayRef.getConfig().positionStrategy;

            var origin = this._getOrigin();

            var overlay = this._getOverlayPosition();

            position.withPositions([Object.assign(Object.assign({}, origin.main), overlay.main), Object.assign(Object.assign({}, origin.fallback), overlay.fallback)]);
          }
          /**
           * Returns the origin position and a fallback position based on the user's position preference.
           * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).
           */

        }, {
          key: "_getOrigin",
          value: function _getOrigin() {
            var isLtr = !this._dir || this._dir.value == 'ltr';
            var position = this.position;
            var originPosition;

            if (position == 'above' || position == 'below') {
              originPosition = {
                originX: 'center',
                originY: position == 'above' ? 'top' : 'bottom'
              };
            } else if (position == 'before' || position == 'left' && isLtr || position == 'right' && !isLtr) {
              originPosition = {
                originX: 'start',
                originY: 'center'
              };
            } else if (position == 'after' || position == 'right' && isLtr || position == 'left' && !isLtr) {
              originPosition = {
                originX: 'end',
                originY: 'center'
              };
            } else if (typeof ngDevMode === 'undefined' || ngDevMode) {
              throw getMatTooltipInvalidPositionError(position);
            }

            var _this$_invertPosition = this._invertPosition(originPosition.originX, originPosition.originY),
                x = _this$_invertPosition.x,
                y = _this$_invertPosition.y;

            return {
              main: originPosition,
              fallback: {
                originX: x,
                originY: y
              }
            };
          }
          /** Returns the overlay position and a fallback position based on the user's preference */

        }, {
          key: "_getOverlayPosition",
          value: function _getOverlayPosition() {
            var isLtr = !this._dir || this._dir.value == 'ltr';
            var position = this.position;
            var overlayPosition;

            if (position == 'above') {
              overlayPosition = {
                overlayX: 'center',
                overlayY: 'bottom'
              };
            } else if (position == 'below') {
              overlayPosition = {
                overlayX: 'center',
                overlayY: 'top'
              };
            } else if (position == 'before' || position == 'left' && isLtr || position == 'right' && !isLtr) {
              overlayPosition = {
                overlayX: 'end',
                overlayY: 'center'
              };
            } else if (position == 'after' || position == 'right' && isLtr || position == 'left' && !isLtr) {
              overlayPosition = {
                overlayX: 'start',
                overlayY: 'center'
              };
            } else if (typeof ngDevMode === 'undefined' || ngDevMode) {
              throw getMatTooltipInvalidPositionError(position);
            }

            var _this$_invertPosition2 = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY),
                x = _this$_invertPosition2.x,
                y = _this$_invertPosition2.y;

            return {
              main: overlayPosition,
              fallback: {
                overlayX: x,
                overlayY: y
              }
            };
          }
          /** Updates the tooltip message and repositions the overlay according to the new message length */

        }, {
          key: "_updateTooltipMessage",
          value: function _updateTooltipMessage() {
            var _this26 = this;

            // Must wait for the message to be painted to the tooltip so that the overlay can properly
            // calculate the correct positioning based on the size of the text.
            if (this._tooltipInstance) {
              this._tooltipInstance.message = this.message;

              this._tooltipInstance._markForCheck();

              this._ngZone.onMicrotaskEmpty.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["take"])(1), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["takeUntil"])(this._destroyed)).subscribe(function () {
                if (_this26._tooltipInstance) {
                  _this26._overlayRef.updatePosition();
                }
              });
            }
          }
          /** Updates the tooltip class */

        }, {
          key: "_setTooltipClass",
          value: function _setTooltipClass(tooltipClass) {
            if (this._tooltipInstance) {
              this._tooltipInstance.tooltipClass = tooltipClass;

              this._tooltipInstance._markForCheck();
            }
          }
          /** Inverts an overlay position. */

        }, {
          key: "_invertPosition",
          value: function _invertPosition(x, y) {
            if (this.position === 'above' || this.position === 'below') {
              if (y === 'top') {
                y = 'bottom';
              } else if (y === 'bottom') {
                y = 'top';
              }
            } else {
              if (x === 'end') {
                x = 'start';
              } else if (x === 'start') {
                x = 'end';
              }
            }

            return {
              x: x,
              y: y
            };
          }
          /** Binds the pointer events to the tooltip trigger. */

        }, {
          key: "_setupPointerEnterEventsIfNeeded",
          value: function _setupPointerEnterEventsIfNeeded() {
            var _this27 = this;

            // Optimization: Defer hooking up events if there's no message or the tooltip is disabled.
            if (this._disabled || !this.message || !this._viewInitialized || this._passiveListeners.length) {
              return;
            } // The mouse events shouldn't be bound on mobile devices, because they can prevent the
            // first tap from firing its click event or can cause the tooltip to open for clicks.


            if (this._platformSupportsMouseEvents()) {
              this._passiveListeners.push(['mouseenter', function () {
                _this27._setupPointerExitEventsIfNeeded();

                _this27.show();
              }]);
            } else if (this.touchGestures !== 'off') {
              this._disableNativeGesturesIfNecessary();

              this._passiveListeners.push(['touchstart', function () {
                // Note that it's important that we don't `preventDefault` here,
                // because it can prevent click events from firing on the element.
                _this27._setupPointerExitEventsIfNeeded();

                clearTimeout(_this27._touchstartTimeout);
                _this27._touchstartTimeout = setTimeout(function () {
                  return _this27.show();
                }, LONGPRESS_DELAY);
              }]);
            }

            this._addListeners(this._passiveListeners);
          }
        }, {
          key: "_setupPointerExitEventsIfNeeded",
          value: function _setupPointerExitEventsIfNeeded() {
            var _this28 = this,
                _this$_passiveListene;

            if (this._pointerExitEventsInitialized) {
              return;
            }

            this._pointerExitEventsInitialized = true;
            var exitListeners = [];

            if (this._platformSupportsMouseEvents()) {
              exitListeners.push(['mouseleave', function () {
                return _this28.hide();
              }]);
            } else if (this.touchGestures !== 'off') {
              this._disableNativeGesturesIfNecessary();

              var touchendListener = function touchendListener() {
                clearTimeout(_this28._touchstartTimeout);

                _this28.hide(_this28._defaultOptions.touchendHideDelay);
              };

              exitListeners.push(['touchend', touchendListener], ['touchcancel', touchendListener]);
            }

            this._addListeners(exitListeners);

            (_this$_passiveListene = this._passiveListeners).push.apply(_this$_passiveListene, exitListeners);
          }
        }, {
          key: "_addListeners",
          value: function _addListeners(listeners) {
            var _this29 = this;

            listeners.forEach(function (_ref11) {
              var _ref12 = _slicedToArray(_ref11, 2),
                  event = _ref12[0],
                  listener = _ref12[1];

              _this29._elementRef.nativeElement.addEventListener(event, listener, passiveListenerOptions);
            });
          }
        }, {
          key: "_platformSupportsMouseEvents",
          value: function _platformSupportsMouseEvents() {
            return !this._platform.IOS && !this._platform.ANDROID;
          }
          /** Disables the native browser gestures, based on how the tooltip has been configured. */

        }, {
          key: "_disableNativeGesturesIfNecessary",
          value: function _disableNativeGesturesIfNecessary() {
            var gestures = this.touchGestures;

            if (gestures !== 'off') {
              var element = this._elementRef.nativeElement;
              var style = element.style; // If gestures are set to `auto`, we don't disable text selection on inputs and
              // textareas, because it prevents the user from typing into them on iOS Safari.

              if (gestures === 'on' || element.nodeName !== 'INPUT' && element.nodeName !== 'TEXTAREA') {
                style.userSelect = style.msUserSelect = style.webkitUserSelect = style.MozUserSelect = 'none';
              } // If we have `auto` gestures and the element uses native HTML dragging,
              // we don't set `-webkit-user-drag` because it prevents the native behavior.


              if (gestures === 'on' || !element.draggable) {
                style.webkitUserDrag = 'none';
              }

              style.touchAction = 'none';
              style.webkitTapHighlightColor = 'transparent';
            }
          }
        }]);

        return MatTooltip;
      }();

      MatTooltip.ɵfac = function MatTooltip_Factory(t) {
        return new (t || MatTooltip)(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__["Overlay"]), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_5__["ScrollDispatcher"]), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewContainerRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_3__["NgZone"]), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_10__["Platform"]), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_1__["AriaDescriber"]), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_1__["FocusMonitor"]), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](MAT_TOOLTIP_SCROLL_STRATEGY), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_6__["Directionality"], 8), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](MAT_TOOLTIP_DEFAULT_OPTIONS, 8));
      };

      MatTooltip.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineDirective"]({
        type: MatTooltip,
        selectors: [["", "matTooltip", ""]],
        hostAttrs: [1, "mat-tooltip-trigger"],
        inputs: {
          showDelay: ["matTooltipShowDelay", "showDelay"],
          hideDelay: ["matTooltipHideDelay", "hideDelay"],
          touchGestures: ["matTooltipTouchGestures", "touchGestures"],
          position: ["matTooltipPosition", "position"],
          disabled: ["matTooltipDisabled", "disabled"],
          message: ["matTooltip", "message"],
          tooltipClass: ["matTooltipClass", "tooltipClass"]
        },
        exportAs: ["matTooltip"]
      });

      MatTooltip.ctorParameters = function () {
        return [{
          type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__["Overlay"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"]
        }, {
          type: _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_5__["ScrollDispatcher"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewContainerRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgZone"]
        }, {
          type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_10__["Platform"]
        }, {
          type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_1__["AriaDescriber"]
        }, {
          type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_1__["FocusMonitor"]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"],
            args: [MAT_TOOLTIP_SCROLL_STRATEGY]
          }]
        }, {
          type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_6__["Directionality"],
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"]
          }]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"],
            args: [MAT_TOOLTIP_DEFAULT_OPTIONS]
          }]
        }];
      };

      MatTooltip.propDecorators = {
        position: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"],
          args: ['matTooltipPosition']
        }],
        disabled: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"],
          args: ['matTooltipDisabled']
        }],
        showDelay: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"],
          args: ['matTooltipShowDelay']
        }],
        hideDelay: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"],
          args: ['matTooltipHideDelay']
        }],
        touchGestures: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"],
          args: ['matTooltipTouchGestures']
        }],
        message: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"],
          args: ['matTooltip']
        }],
        tooltipClass: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"],
          args: ['matTooltipClass']
        }]
      };
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵsetClassMetadata"](MatTooltip, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"],
          args: [{
            selector: '[matTooltip]',
            exportAs: 'matTooltip',
            host: {
              'class': 'mat-tooltip-trigger'
            }
          }]
        }], function () {
          return [{
            type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__["Overlay"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"]
          }, {
            type: _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_5__["ScrollDispatcher"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewContainerRef"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgZone"]
          }, {
            type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_10__["Platform"]
          }, {
            type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_1__["AriaDescriber"]
          }, {
            type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_1__["FocusMonitor"]
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"],
              args: [MAT_TOOLTIP_SCROLL_STRATEGY]
            }]
          }, {
            type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_6__["Directionality"],
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"]
            }]
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"],
              args: [MAT_TOOLTIP_DEFAULT_OPTIONS]
            }]
          }];
        }, {
          showDelay: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"],
            args: ['matTooltipShowDelay']
          }],
          hideDelay: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"],
            args: ['matTooltipHideDelay']
          }],
          touchGestures: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"],
            args: ['matTooltipTouchGestures']
          }],
          position: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"],
            args: ['matTooltipPosition']
          }],
          disabled: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"],
            args: ['matTooltipDisabled']
          }],
          message: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"],
            args: ['matTooltip']
          }],
          tooltipClass: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"],
            args: ['matTooltipClass']
          }]
        });
      })();
      /**
       * Internal component that wraps the tooltip's content.
       * @docs-private
       */


      var TooltipComponent = /*#__PURE__*/function () {
        function TooltipComponent(_changeDetectorRef, _breakpointObserver) {
          _classCallCheck(this, TooltipComponent);

          this._changeDetectorRef = _changeDetectorRef;
          this._breakpointObserver = _breakpointObserver;
          /** Property watched by the animation framework to show or hide the tooltip */

          this._visibility = 'initial';
          /** Whether interactions on the page should close the tooltip */

          this._closeOnInteraction = false;
          /** Subject for notifying that the tooltip has been hidden from the view */

          this._onHide = new rxjs__WEBPACK_IMPORTED_MODULE_12__["Subject"]();
          /** Stream that emits whether the user has a handset-sized display.  */

          this._isHandset = this._breakpointObserver.observe(_angular_cdk_layout__WEBPACK_IMPORTED_MODULE_9__["Breakpoints"].Handset);
        }
        /**
         * Shows the tooltip with an animation originating from the provided origin
         * @param delay Amount of milliseconds to the delay showing the tooltip.
         */


        _createClass(TooltipComponent, [{
          key: "show",
          value: function show(delay) {
            var _this30 = this;

            // Cancel the delayed hide if it is scheduled
            if (this._hideTimeoutId) {
              clearTimeout(this._hideTimeoutId);
              this._hideTimeoutId = null;
            } // Body interactions should cancel the tooltip if there is a delay in showing.


            this._closeOnInteraction = true;
            this._showTimeoutId = setTimeout(function () {
              _this30._visibility = 'visible';
              _this30._showTimeoutId = null; // Mark for check so if any parent component has set the
              // ChangeDetectionStrategy to OnPush it will be checked anyways

              _this30._markForCheck();
            }, delay);
          }
          /**
           * Begins the animation to hide the tooltip after the provided delay in ms.
           * @param delay Amount of milliseconds to delay showing the tooltip.
           */

        }, {
          key: "hide",
          value: function hide(delay) {
            var _this31 = this;

            // Cancel the delayed show if it is scheduled
            if (this._showTimeoutId) {
              clearTimeout(this._showTimeoutId);
              this._showTimeoutId = null;
            }

            this._hideTimeoutId = setTimeout(function () {
              _this31._visibility = 'hidden';
              _this31._hideTimeoutId = null; // Mark for check so if any parent component has set the
              // ChangeDetectionStrategy to OnPush it will be checked anyways

              _this31._markForCheck();
            }, delay);
          }
          /** Returns an observable that notifies when the tooltip has been hidden from view. */

        }, {
          key: "afterHidden",
          value: function afterHidden() {
            return this._onHide;
          }
          /** Whether the tooltip is being displayed. */

        }, {
          key: "isVisible",
          value: function isVisible() {
            return this._visibility === 'visible';
          }
        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this._onHide.complete();
          }
        }, {
          key: "_animationStart",
          value: function _animationStart() {
            this._closeOnInteraction = false;
          }
        }, {
          key: "_animationDone",
          value: function _animationDone(event) {
            var toState = event.toState;

            if (toState === 'hidden' && !this.isVisible()) {
              this._onHide.next();
            }

            if (toState === 'visible' || toState === 'hidden') {
              this._closeOnInteraction = true;
            }
          }
          /**
           * Interactions on the HTML body should close the tooltip immediately as defined in the
           * material design spec.
           * https://material.io/design/components/tooltips.html#behavior
           */

        }, {
          key: "_handleBodyInteraction",
          value: function _handleBodyInteraction() {
            if (this._closeOnInteraction) {
              this.hide(0);
            }
          }
          /**
           * Marks that the tooltip needs to be checked in the next change detection run.
           * Mainly used for rendering the initial text before positioning a tooltip, which
           * can be problematic in components with OnPush change detection.
           */

        }, {
          key: "_markForCheck",
          value: function _markForCheck() {
            this._changeDetectorRef.markForCheck();
          }
        }]);

        return TooltipComponent;
      }();

      TooltipComponent.ɵfac = function TooltipComponent_Factory(t) {
        return new (t || TooltipComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectorRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_angular_cdk_layout__WEBPACK_IMPORTED_MODULE_9__["BreakpointObserver"]));
      };

      TooltipComponent.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineComponent"]({
        type: TooltipComponent,
        selectors: [["mat-tooltip-component"]],
        hostAttrs: ["aria-hidden", "true"],
        hostVars: 2,
        hostBindings: function TooltipComponent_HostBindings(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵlistener"]("click", function TooltipComponent_click_HostBindingHandler() {
              return ctx._handleBodyInteraction();
            }, false, _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵresolveBody"]);
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵstyleProp"]("zoom", ctx._visibility === "visible" ? 1 : null);
          }
        },
        decls: 3,
        vars: 7,
        consts: [[1, "mat-tooltip", 3, "ngClass"]],
        template: function TooltipComponent_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "div", 0);

            _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵlistener"]("@state.start", function TooltipComponent_Template_div_animation_state_start_0_listener() {
              return ctx._animationStart();
            })("@state.done", function TooltipComponent_Template_div_animation_state_done_0_listener($event) {
              return ctx._animationDone($event);
            });

            _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵpipe"](1, "async");

            _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](2);

            _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
          }

          if (rf & 2) {
            var tmp_0_0 = null;

            _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵclassProp"]("mat-tooltip-handset", (tmp_0_0 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵpipeBind1"](1, 5, ctx._isHandset)) == null ? null : tmp_0_0.matches);

            _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngClass", ctx.tooltipClass)("@state", ctx._visibility);

            _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](2);

            _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtextInterpolate"](ctx.message);
          }
        },
        directives: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["NgClass"]],
        pipes: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["AsyncPipe"]],
        styles: [".mat-tooltip-panel{pointer-events:none !important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}.cdk-high-contrast-active .mat-tooltip{outline:solid 1px}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\n"],
        encapsulation: 2,
        data: {
          animation: [matTooltipAnimations.tooltipState]
        },
        changeDetection: 0
      });

      TooltipComponent.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectorRef"]
        }, {
          type: _angular_cdk_layout__WEBPACK_IMPORTED_MODULE_9__["BreakpointObserver"]
        }];
      };
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵsetClassMetadata"](TooltipComponent, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"],
          args: [{
            selector: 'mat-tooltip-component',
            template: "<div class=\"mat-tooltip\"\n     [ngClass]=\"tooltipClass\"\n     [class.mat-tooltip-handset]=\"(_isHandset | async)?.matches\"\n     [@state]=\"_visibility\"\n     (@state.start)=\"_animationStart()\"\n     (@state.done)=\"_animationDone($event)\">{{message}}</div>\n",
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewEncapsulation"].None,
            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectionStrategy"].OnPush,
            animations: [matTooltipAnimations.tooltipState],
            host: {
              // Forces the element to have a layout in IE and Edge. This fixes issues where the element
              // won't be rendered if the animations are disabled or there is no web animations polyfill.
              '[style.zoom]': '_visibility === "visible" ? 1 : null',
              '(body:click)': 'this._handleBodyInteraction()',
              'aria-hidden': 'true'
            },
            styles: [".mat-tooltip-panel{pointer-events:none !important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}.cdk-high-contrast-active .mat-tooltip{outline:solid 1px}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\n"]
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectorRef"]
          }, {
            type: _angular_cdk_layout__WEBPACK_IMPORTED_MODULE_9__["BreakpointObserver"]
          }];
        }, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var MatTooltipModule = function MatTooltipModule() {
        _classCallCheck(this, MatTooltipModule);
      };

      MatTooltipModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineNgModule"]({
        type: MatTooltipModule
      });
      MatTooltipModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineInjector"]({
        factory: function MatTooltipModule_Factory(t) {
          return new (t || MatTooltipModule)();
        },
        providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER],
        imports: [[_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_1__["A11yModule"], _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"], _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__["OverlayModule"], _angular_material_core__WEBPACK_IMPORTED_MODULE_4__["MatCommonModule"]], _angular_material_core__WEBPACK_IMPORTED_MODULE_4__["MatCommonModule"], _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_5__["CdkScrollableModule"]]
      });

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵsetNgModuleScope"](MatTooltipModule, {
          declarations: function declarations() {
            return [MatTooltip, TooltipComponent];
          },
          imports: function imports() {
            return [_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_1__["A11yModule"], _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"], _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__["OverlayModule"], _angular_material_core__WEBPACK_IMPORTED_MODULE_4__["MatCommonModule"]];
          },
          exports: function exports() {
            return [MatTooltip, TooltipComponent, _angular_material_core__WEBPACK_IMPORTED_MODULE_4__["MatCommonModule"], _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_5__["CdkScrollableModule"]];
          }
        });
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵsetClassMetadata"](MatTooltipModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgModule"],
          args: [{
            imports: [_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_1__["A11yModule"], _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"], _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__["OverlayModule"], _angular_material_core__WEBPACK_IMPORTED_MODULE_4__["MatCommonModule"]],
            exports: [MatTooltip, TooltipComponent, _angular_material_core__WEBPACK_IMPORTED_MODULE_4__["MatCommonModule"], _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_5__["CdkScrollableModule"]],
            declarations: [MatTooltip, TooltipComponent],
            entryComponents: [TooltipComponent],
            providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]
          }]
        }], null, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Generated bundle index. Do not edit.
       */
      //# sourceMappingURL=tooltip.js.map

      /***/

    },

    /***/
    "RAwQ": function RAwQ(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Luxembourgish [lb]
      //! author : mweimerskirch : https://github.com/mweimerskirch
      //! author : David Raison : https://github.com/kwisatz
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        function processRelativeTime(number, withoutSuffix, key, isFuture) {
          var format = {
            m: ['eng Minutt', 'enger Minutt'],
            h: ['eng Stonn', 'enger Stonn'],
            d: ['een Dag', 'engem Dag'],
            M: ['ee Mount', 'engem Mount'],
            y: ['ee Joer', 'engem Joer']
          };
          return withoutSuffix ? format[key][0] : format[key][1];
        }

        function processFutureTime(string) {
          var number = string.substr(0, string.indexOf(' '));

          if (eifelerRegelAppliesToNumber(number)) {
            return 'a ' + string;
          }

          return 'an ' + string;
        }

        function processPastTime(string) {
          var number = string.substr(0, string.indexOf(' '));

          if (eifelerRegelAppliesToNumber(number)) {
            return 'viru ' + string;
          }

          return 'virun ' + string;
        }
        /**
         * Returns true if the word before the given number loses the '-n' ending.
         * e.g. 'an 10 Deeg' but 'a 5 Deeg'
         *
         * @param number {integer}
         * @returns {boolean}
         */


        function eifelerRegelAppliesToNumber(number) {
          number = parseInt(number, 10);

          if (isNaN(number)) {
            return false;
          }

          if (number < 0) {
            // Negative Number --> always true
            return true;
          } else if (number < 10) {
            // Only 1 digit
            if (4 <= number && number <= 7) {
              return true;
            }

            return false;
          } else if (number < 100) {
            // 2 digits
            var lastDigit = number % 10,
                firstDigit = number / 10;

            if (lastDigit === 0) {
              return eifelerRegelAppliesToNumber(firstDigit);
            }

            return eifelerRegelAppliesToNumber(lastDigit);
          } else if (number < 10000) {
            // 3 or 4 digits --> recursively check first digit
            while (number >= 10) {
              number = number / 10;
            }

            return eifelerRegelAppliesToNumber(number);
          } else {
            // Anything larger than 4 digits: recursively check first n-3 digits
            number = number / 1000;
            return eifelerRegelAppliesToNumber(number);
          }
        }

        var lb = moment.defineLocale('lb', {
          months: 'Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
          monthsShort: 'Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
          monthsParseExact: true,
          weekdays: 'Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg'.split('_'),
          weekdaysShort: 'So._Mé._Dë._Më._Do._Fr._Sa.'.split('_'),
          weekdaysMin: 'So_Mé_Dë_Më_Do_Fr_Sa'.split('_'),
          weekdaysParseExact: true,
          longDateFormat: {
            LT: 'H:mm [Auer]',
            LTS: 'H:mm:ss [Auer]',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm [Auer]',
            LLLL: 'dddd, D. MMMM YYYY H:mm [Auer]'
          },
          calendar: {
            sameDay: '[Haut um] LT',
            sameElse: 'L',
            nextDay: '[Muer um] LT',
            nextWeek: 'dddd [um] LT',
            lastDay: '[Gëschter um] LT',
            lastWeek: function lastWeek() {
              // Different date string for 'Dënschdeg' (Tuesday) and 'Donneschdeg' (Thursday) due to phonological rule
              switch (this.day()) {
                case 2:
                case 4:
                  return '[Leschten] dddd [um] LT';

                default:
                  return '[Leschte] dddd [um] LT';
              }
            }
          },
          relativeTime: {
            future: processFutureTime,
            past: processPastTime,
            s: 'e puer Sekonnen',
            ss: '%d Sekonnen',
            m: processRelativeTime,
            mm: '%d Minutten',
            h: processRelativeTime,
            hh: '%d Stonnen',
            d: processRelativeTime,
            dd: '%d Deeg',
            M: processRelativeTime,
            MM: '%d Méint',
            y: processRelativeTime,
            yy: '%d Joer'
          },
          dayOfMonthOrdinalParse: /\d{1,2}\./,
          ordinal: '%d.',
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.

          }
        });
        return lb;
      });
      /***/

    },

    /***/
    "ReYQ": function ReYQ(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TableComponent", function () {
        return TableComponent;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _raw_loader_table_component_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! raw-loader!./table.component.html */
      "HAU5");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");

      var TableComponent = /*#__PURE__*/function () {
        function TableComponent() {
          _classCallCheck(this, TableComponent);
        }

        _createClass(TableComponent, [{
          key: "ngOnInit",
          value: function ngOnInit() {
            this.tableData1 = {
              headerRow: ['ID', 'Name', 'Country', 'City', 'Salary'],
              dataRows: [['1', 'Dakota Rice', 'Niger', 'Oud-Turnhout', '$36,738'], ['2', 'Minerva Hooper', 'Curaçao', 'Sinaai-Waas', '$23,789'], ['3', 'Sage Rodriguez', 'Netherlands', 'Baileux', '$56,142'], ['4', 'Philip Chaney', 'Korea, South', 'Overland Park', '$38,735'], ['5', 'Doris Greene', 'Malawi', 'Feldkirchen in Kärnten', '$63,542'], ['6', 'Mason Porter', 'Chile', 'Gloucester', '$78,615']]
            };
            this.tableData2 = {
              headerRow: ['ID', 'Name', 'Salary', 'Country', 'City'],
              dataRows: [['1', 'Dakota Rice', '$36,738', 'Niger', 'Oud-Turnhout'], ['2', 'Minerva Hooper', '$23,789', 'Curaçao', 'Sinaai-Waas'], ['3', 'Sage Rodriguez', '$56,142', 'Netherlands', 'Baileux'], ['4', 'Philip Chaney', '$38,735', 'Korea, South', 'Overland Park'], ['5', 'Doris Greene', '$63,542', 'Malawi', 'Feldkirchen in Kärnten'], ['6', 'Mason Porter', '$78,615', 'Chile', 'Gloucester']]
            };
          }
        }]);

        return TableComponent;
      }();

      TableComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Component"])({
        selector: 'table-cmp',
        template: _raw_loader_table_component_html__WEBPACK_IMPORTED_MODULE_1__["default"]
      })], TableComponent);
      /***/
    },

    /***/
    "RnhZ": function RnhZ(module, exports, __webpack_require__) {
      var map = {
        "./af": "K/tc",
        "./af.js": "K/tc",
        "./ar": "jnO4",
        "./ar-dz": "o1bE",
        "./ar-dz.js": "o1bE",
        "./ar-kw": "Qj4J",
        "./ar-kw.js": "Qj4J",
        "./ar-ly": "HP3h",
        "./ar-ly.js": "HP3h",
        "./ar-ma": "CoRJ",
        "./ar-ma.js": "CoRJ",
        "./ar-sa": "gjCT",
        "./ar-sa.js": "gjCT",
        "./ar-tn": "bYM6",
        "./ar-tn.js": "bYM6",
        "./ar.js": "jnO4",
        "./az": "SFxW",
        "./az.js": "SFxW",
        "./be": "H8ED",
        "./be.js": "H8ED",
        "./bg": "hKrs",
        "./bg.js": "hKrs",
        "./bm": "p/rL",
        "./bm.js": "p/rL",
        "./bn": "kEOa",
        "./bn-bd": "loYQ",
        "./bn-bd.js": "loYQ",
        "./bn.js": "kEOa",
        "./bo": "0mo+",
        "./bo.js": "0mo+",
        "./br": "aIdf",
        "./br.js": "aIdf",
        "./bs": "JVSJ",
        "./bs.js": "JVSJ",
        "./ca": "1xZ4",
        "./ca.js": "1xZ4",
        "./cs": "PA2r",
        "./cs.js": "PA2r",
        "./cv": "A+xa",
        "./cv.js": "A+xa",
        "./cy": "l5ep",
        "./cy.js": "l5ep",
        "./da": "DxQv",
        "./da.js": "DxQv",
        "./de": "tGlX",
        "./de-at": "s+uk",
        "./de-at.js": "s+uk",
        "./de-ch": "u3GI",
        "./de-ch.js": "u3GI",
        "./de.js": "tGlX",
        "./dv": "WYrj",
        "./dv.js": "WYrj",
        "./el": "jUeY",
        "./el.js": "jUeY",
        "./en-au": "Dmvi",
        "./en-au.js": "Dmvi",
        "./en-ca": "OIYi",
        "./en-ca.js": "OIYi",
        "./en-gb": "Oaa7",
        "./en-gb.js": "Oaa7",
        "./en-ie": "4dOw",
        "./en-ie.js": "4dOw",
        "./en-il": "czMo",
        "./en-il.js": "czMo",
        "./en-in": "7C5Q",
        "./en-in.js": "7C5Q",
        "./en-nz": "b1Dy",
        "./en-nz.js": "b1Dy",
        "./en-sg": "t+mt",
        "./en-sg.js": "t+mt",
        "./eo": "Zduo",
        "./eo.js": "Zduo",
        "./es": "iYuL",
        "./es-do": "CjzT",
        "./es-do.js": "CjzT",
        "./es-mx": "tbfe",
        "./es-mx.js": "tbfe",
        "./es-us": "Vclq",
        "./es-us.js": "Vclq",
        "./es.js": "iYuL",
        "./et": "7BjC",
        "./et.js": "7BjC",
        "./eu": "D/JM",
        "./eu.js": "D/JM",
        "./fa": "jfSC",
        "./fa.js": "jfSC",
        "./fi": "gekB",
        "./fi.js": "gekB",
        "./fil": "1ppg",
        "./fil.js": "1ppg",
        "./fo": "ByF4",
        "./fo.js": "ByF4",
        "./fr": "nyYc",
        "./fr-ca": "2fjn",
        "./fr-ca.js": "2fjn",
        "./fr-ch": "Dkky",
        "./fr-ch.js": "Dkky",
        "./fr.js": "nyYc",
        "./fy": "cRix",
        "./fy.js": "cRix",
        "./ga": "USCx",
        "./ga.js": "USCx",
        "./gd": "9rRi",
        "./gd.js": "9rRi",
        "./gl": "iEDd",
        "./gl.js": "iEDd",
        "./gom-deva": "qvJo",
        "./gom-deva.js": "qvJo",
        "./gom-latn": "DKr+",
        "./gom-latn.js": "DKr+",
        "./gu": "4MV3",
        "./gu.js": "4MV3",
        "./he": "x6pH",
        "./he.js": "x6pH",
        "./hi": "3E1r",
        "./hi.js": "3E1r",
        "./hr": "S6ln",
        "./hr.js": "S6ln",
        "./hu": "WxRl",
        "./hu.js": "WxRl",
        "./hy-am": "1rYy",
        "./hy-am.js": "1rYy",
        "./id": "UDhR",
        "./id.js": "UDhR",
        "./is": "BVg3",
        "./is.js": "BVg3",
        "./it": "bpih",
        "./it-ch": "bxKX",
        "./it-ch.js": "bxKX",
        "./it.js": "bpih",
        "./ja": "B55N",
        "./ja.js": "B55N",
        "./jv": "tUCv",
        "./jv.js": "tUCv",
        "./ka": "IBtZ",
        "./ka.js": "IBtZ",
        "./kk": "bXm7",
        "./kk.js": "bXm7",
        "./km": "6B0Y",
        "./km.js": "6B0Y",
        "./kn": "PpIw",
        "./kn.js": "PpIw",
        "./ko": "Ivi+",
        "./ko.js": "Ivi+",
        "./ku": "JCF/",
        "./ku.js": "JCF/",
        "./ky": "lgnt",
        "./ky.js": "lgnt",
        "./lb": "RAwQ",
        "./lb.js": "RAwQ",
        "./lo": "sp3z",
        "./lo.js": "sp3z",
        "./lt": "JvlW",
        "./lt.js": "JvlW",
        "./lv": "uXwI",
        "./lv.js": "uXwI",
        "./me": "KTz0",
        "./me.js": "KTz0",
        "./mi": "aIsn",
        "./mi.js": "aIsn",
        "./mk": "aQkU",
        "./mk.js": "aQkU",
        "./ml": "AvvY",
        "./ml.js": "AvvY",
        "./mn": "lYtQ",
        "./mn.js": "lYtQ",
        "./mr": "Ob0Z",
        "./mr.js": "Ob0Z",
        "./ms": "6+QB",
        "./ms-my": "ZAMP",
        "./ms-my.js": "ZAMP",
        "./ms.js": "6+QB",
        "./mt": "G0Uy",
        "./mt.js": "G0Uy",
        "./my": "honF",
        "./my.js": "honF",
        "./nb": "bOMt",
        "./nb.js": "bOMt",
        "./ne": "OjkT",
        "./ne.js": "OjkT",
        "./nl": "+s0g",
        "./nl-be": "2ykv",
        "./nl-be.js": "2ykv",
        "./nl.js": "+s0g",
        "./nn": "uEye",
        "./nn.js": "uEye",
        "./oc-lnc": "Fnuy",
        "./oc-lnc.js": "Fnuy",
        "./pa-in": "8/+R",
        "./pa-in.js": "8/+R",
        "./pl": "jVdC",
        "./pl.js": "jVdC",
        "./pt": "8mBD",
        "./pt-br": "0tRk",
        "./pt-br.js": "0tRk",
        "./pt.js": "8mBD",
        "./ro": "lyxo",
        "./ro.js": "lyxo",
        "./ru": "lXzo",
        "./ru.js": "lXzo",
        "./sd": "Z4QM",
        "./sd.js": "Z4QM",
        "./se": "//9w",
        "./se.js": "//9w",
        "./si": "7aV9",
        "./si.js": "7aV9",
        "./sk": "e+ae",
        "./sk.js": "e+ae",
        "./sl": "gVVK",
        "./sl.js": "gVVK",
        "./sq": "yPMs",
        "./sq.js": "yPMs",
        "./sr": "zx6S",
        "./sr-cyrl": "E+lV",
        "./sr-cyrl.js": "E+lV",
        "./sr.js": "zx6S",
        "./ss": "Ur1D",
        "./ss.js": "Ur1D",
        "./sv": "X709",
        "./sv.js": "X709",
        "./sw": "dNwA",
        "./sw.js": "dNwA",
        "./ta": "PeUW",
        "./ta.js": "PeUW",
        "./te": "XLvN",
        "./te.js": "XLvN",
        "./tet": "V2x9",
        "./tet.js": "V2x9",
        "./tg": "Oxv6",
        "./tg.js": "Oxv6",
        "./th": "EOgW",
        "./th.js": "EOgW",
        "./tk": "Wv91",
        "./tk.js": "Wv91",
        "./tl-ph": "Dzi0",
        "./tl-ph.js": "Dzi0",
        "./tlh": "z3Vd",
        "./tlh.js": "z3Vd",
        "./tr": "DoHr",
        "./tr.js": "DoHr",
        "./tzl": "z1FC",
        "./tzl.js": "z1FC",
        "./tzm": "wQk9",
        "./tzm-latn": "tT3J",
        "./tzm-latn.js": "tT3J",
        "./tzm.js": "wQk9",
        "./ug-cn": "YRex",
        "./ug-cn.js": "YRex",
        "./uk": "raLr",
        "./uk.js": "raLr",
        "./ur": "UpQW",
        "./ur.js": "UpQW",
        "./uz": "Loxo",
        "./uz-latn": "AQ68",
        "./uz-latn.js": "AQ68",
        "./uz.js": "Loxo",
        "./vi": "KSF8",
        "./vi.js": "KSF8",
        "./x-pseudo": "/X5v",
        "./x-pseudo.js": "/X5v",
        "./yo": "fzPg",
        "./yo.js": "fzPg",
        "./zh-cn": "XDpg",
        "./zh-cn.js": "XDpg",
        "./zh-hk": "SatO",
        "./zh-hk.js": "SatO",
        "./zh-mo": "OmwH",
        "./zh-mo.js": "OmwH",
        "./zh-tw": "kOpN",
        "./zh-tw.js": "kOpN"
      };

      function webpackContext(req) {
        var id = webpackContextResolve(req);
        return __webpack_require__(id);
      }

      function webpackContextResolve(req) {
        if (!__webpack_require__.o(map, req)) {
          var e = new Error("Cannot find module '" + req + "'");
          e.code = 'MODULE_NOT_FOUND';
          throw e;
        }

        return map[req];
      }

      webpackContext.keys = function webpackContextKeys() {
        return Object.keys(map);
      };

      webpackContext.resolve = webpackContextResolve;
      module.exports = webpackContext;
      webpackContext.id = "RnhZ";
      /***/
    },

    /***/
    "S6ln": function S6ln(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Croatian [hr]
      //! author : Bojan Marković : https://github.com/bmarkovic
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        function translate(number, withoutSuffix, key) {
          var result = number + ' ';

          switch (key) {
            case 'ss':
              if (number === 1) {
                result += 'sekunda';
              } else if (number === 2 || number === 3 || number === 4) {
                result += 'sekunde';
              } else {
                result += 'sekundi';
              }

              return result;

            case 'm':
              return withoutSuffix ? 'jedna minuta' : 'jedne minute';

            case 'mm':
              if (number === 1) {
                result += 'minuta';
              } else if (number === 2 || number === 3 || number === 4) {
                result += 'minute';
              } else {
                result += 'minuta';
              }

              return result;

            case 'h':
              return withoutSuffix ? 'jedan sat' : 'jednog sata';

            case 'hh':
              if (number === 1) {
                result += 'sat';
              } else if (number === 2 || number === 3 || number === 4) {
                result += 'sata';
              } else {
                result += 'sati';
              }

              return result;

            case 'dd':
              if (number === 1) {
                result += 'dan';
              } else {
                result += 'dana';
              }

              return result;

            case 'MM':
              if (number === 1) {
                result += 'mjesec';
              } else if (number === 2 || number === 3 || number === 4) {
                result += 'mjeseca';
              } else {
                result += 'mjeseci';
              }

              return result;

            case 'yy':
              if (number === 1) {
                result += 'godina';
              } else if (number === 2 || number === 3 || number === 4) {
                result += 'godine';
              } else {
                result += 'godina';
              }

              return result;
          }
        }

        var hr = moment.defineLocale('hr', {
          months: {
            format: 'siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca'.split('_'),
            standalone: 'siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac'.split('_')
          },
          monthsShort: 'sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.'.split('_'),
          monthsParseExact: true,
          weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
          weekdaysShort: 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
          weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
          weekdaysParseExact: true,
          longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'Do MMMM YYYY',
            LLL: 'Do MMMM YYYY H:mm',
            LLLL: 'dddd, Do MMMM YYYY H:mm'
          },
          calendar: {
            sameDay: '[danas u] LT',
            nextDay: '[sutra u] LT',
            nextWeek: function nextWeek() {
              switch (this.day()) {
                case 0:
                  return '[u] [nedjelju] [u] LT';

                case 3:
                  return '[u] [srijedu] [u] LT';

                case 6:
                  return '[u] [subotu] [u] LT';

                case 1:
                case 2:
                case 4:
                case 5:
                  return '[u] dddd [u] LT';
              }
            },
            lastDay: '[jučer u] LT',
            lastWeek: function lastWeek() {
              switch (this.day()) {
                case 0:
                  return '[prošlu] [nedjelju] [u] LT';

                case 3:
                  return '[prošlu] [srijedu] [u] LT';

                case 6:
                  return '[prošle] [subote] [u] LT';

                case 1:
                case 2:
                case 4:
                case 5:
                  return '[prošli] dddd [u] LT';
              }
            },
            sameElse: 'L'
          },
          relativeTime: {
            future: 'za %s',
            past: 'prije %s',
            s: 'par sekundi',
            ss: translate,
            m: translate,
            mm: translate,
            h: translate,
            hh: translate,
            d: 'dan',
            dd: translate,
            M: 'mjesec',
            MM: translate,
            y: 'godinu',
            yy: translate
          },
          dayOfMonthOrdinalParse: /\d{1,2}\./,
          ordinal: '%d.',
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 7th is the first week of the year.

          }
        });
        return hr;
      });
      /***/

    },

    /***/
    "SByu": function SByu(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony default export */


      __webpack_exports__["default"] = "<div class=\"row\">\r\n  <div class=\"col-md-12\">\r\n    <div class=\"card demo-icons\">\r\n      <div class=\"card-header\">\r\n        <h5 class=\"card-title\">100 Awesome Nucleo Icons</h5>\r\n        <p class=\"card-category\">Handcrafted by our friends from\r\n          <a href=\"https://nucleoapp.com/?ref=1712\">NucleoApp</a>\r\n        </p>\r\n      </div>\r\n      <div class=\"card-body all-icons\">\r\n        <div id=\"icons-wrapper\">\r\n          <section>\r\n            <ul>\r\n              <li>\r\n                <i class=\"nc-icon nc-air-baloon\"></i>\r\n                <p>nc-air-baloon</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-album-2\"></i>\r\n                <p>nc-album-2</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-alert-circle-i\"></i>\r\n                <p>nc-alert-circle-i</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-align-center\"></i>\r\n                <p>nc-align-center</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-align-left-2\"></i>\r\n                <p>nc-align-left-2</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-ambulance\"></i>\r\n                <p>nc-ambulance</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-app\"></i>\r\n                <p>nc-app</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-atom\"></i>\r\n                <p>nc-atom</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-badge\"></i>\r\n                <p>nc-badge</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-bag-16\"></i>\r\n                <p>nc-bag-16</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-bank\"></i>\r\n                <p>nc-bank</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-basket\"></i>\r\n                <p>nc-basket</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-bell-55\"></i>\r\n                <p>nc-bell-55</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-bold\"></i>\r\n                <p>nc-bold</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-book-bookmark\"></i>\r\n                <p>nc-book-bookmark</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-bookmark-2\"></i>\r\n                <p>nc-bookmark-2</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-box-2\"></i>\r\n                <p>nc-box-2</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-box\"></i>\r\n                <p>nc-box</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-briefcase-24\"></i>\r\n                <p>nc-briefcase-24</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-bulb-63\"></i>\r\n                <p>nc-bulb-63</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-bullet-list-67\"></i>\r\n                <p>nc-bullet-list-67</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-bus-front-12\"></i>\r\n                <p>nc-bus-front-12</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-button-pause\"></i>\r\n                <p>nc-button-pause</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-button-play\"></i>\r\n                <p>nc-button-play</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-button-power\"></i>\r\n                <p>nc-button-power</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-calendar-60\"></i>\r\n                <p>nc-calendar-60</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-camera-compact\"></i>\r\n                <p>nc-camera-compact</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-caps-small\"></i>\r\n                <p>nc-caps-small</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-cart-simple\"></i>\r\n                <p>nc-cart-simple</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-chart-bar-32\"></i>\r\n                <p>nc-chart-bar-32</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-chart-pie-36\"></i>\r\n                <p>nc-chart-pie-36</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-chat-33\"></i>\r\n                <p>nc-chat-33</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-check-2\"></i>\r\n                <p>nc-check-2</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-circle-10\"></i>\r\n                <p>nc-circle-10</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-cloud-download-93\"></i>\r\n                <p>nc-cloud-download-93</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-cloud-upload-94\"></i>\r\n                <p>nc-cloud-upload-94</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-compass-05\"></i>\r\n                <p>nc-compass-05</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-controller-modern\"></i>\r\n                <p>nc-controller-modern</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-credit-card\"></i>\r\n                <p>nc-credit-card</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-delivery-fast\"></i>\r\n                <p>nc-delivery-fast</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-diamond\"></i>\r\n                <p>nc-diamond</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-email-85\"></i>\r\n                <p>nc-email-85</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-favourite-28\"></i>\r\n                <p>nc-favourite-28</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-glasses-2\"></i>\r\n                <p>nc-glasses-2</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-globe-2\"></i>\r\n                <p>nc-globe-2</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-globe\"></i>\r\n                <p>nc-globe</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-hat-3\"></i>\r\n                <p>nc-hat-3</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-headphones\"></i>\r\n                <p>nc-headphones</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-html5\"></i>\r\n                <p>nc-html5</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-image\"></i>\r\n                <p>nc-image</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-istanbul\"></i>\r\n                <p>nc-istanbul</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-key-25\"></i>\r\n                <p>nc-key-25</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-laptop\"></i>\r\n                <p>nc-laptop</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-layout-11\"></i>\r\n                <p>nc-layout-11</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-lock-circle-open\"></i>\r\n                <p>nc-lock-circle-open</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-map-big\"></i>\r\n                <p>nc-map-big</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-minimal-down\"></i>\r\n                <p>nc-minimal-down</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-minimal-left\"></i>\r\n                <p>nc-minimal-left</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-minimal-right\"></i>\r\n                <p>nc-minimal-right</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-minimal-up\"></i>\r\n                <p>nc-minimal-up</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-mobile\"></i>\r\n                <p>nc-mobile</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-money-coins\"></i>\r\n                <p>nc-money-coins</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-note-03\"></i>\r\n                <p>nc-note-03</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-palette\"></i>\r\n                <p>nc-palette</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-paper\"></i>\r\n                <p>nc-paper</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-pin-3\"></i>\r\n                <p>nc-pin-3</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-planet\"></i>\r\n                <p>nc-planet</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-refresh-69\"></i>\r\n                <p>nc-refresh-69</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-ruler-pencil\"></i>\r\n                <p>nc-ruler-pencil</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-satisfied\"></i>\r\n                <p>nc-satisfied</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-scissors\"></i>\r\n                <p>nc-scissors</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-send\"></i>\r\n                <p>nc-send</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-settings-gear-65\"></i>\r\n                <p>nc-settings-gear-65</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-settings\"></i>\r\n                <p>nc-settings</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-share-66\"></i>\r\n                <p>nc-share-66</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-shop\"></i>\r\n                <p>nc-shop</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-simple-add\"></i>\r\n                <p>nc-simple-add</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-simple-delete\"></i>\r\n                <p>nc-simple-delete</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-simple-remove\"></i>\r\n                <p>nc-simple-remove</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-single-02\"></i>\r\n                <p>nc-single-02</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-single-copy-04\"></i>\r\n                <p>nc-single-copy-04</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-sound-wave\"></i>\r\n                <p>nc-sound-wave</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-spaceship\"></i>\r\n                <p>nc-spaceship</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-sun-fog-29\"></i>\r\n                <p>nc-sun-fog-29</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-support-17\"></i>\r\n                <p>nc-support-17</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-tablet-2\"></i>\r\n                <p>nc-tablet-2</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-tag-content\"></i>\r\n                <p>nc-tag-content</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-tap-01\"></i>\r\n                <p>nc-tap-01</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-tie-bow\"></i>\r\n                <p>nc-tie-bow</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-tile-56\"></i>\r\n                <p>nc-tile-56</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-time-alarm\"></i>\r\n                <p>nc-time-alarm</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-touch-id\"></i>\r\n                <p>nc-touch-id</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-trophy\"></i>\r\n                <p>nc-trophy</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-tv-2\"></i>\r\n                <p>nc-tv-2</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-umbrella-13\"></i>\r\n                <p>nc-umbrella-13</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-user-run\"></i>\r\n                <p>nc-user-run</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-vector\"></i>\r\n                <p>nc-vector</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-watch-time\"></i>\r\n                <p>nc-watch-time</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-world-2\"></i>\r\n                <p>nc-world-2</p>\r\n              </li>\r\n              <li>\r\n                <i class=\"nc-icon nc-zoom-split\"></i>\r\n                <p>nc-zoom-split</p>\r\n              </li>\r\n              <!-- list of icons here with the proper class-->\r\n            </ul>\r\n          </section>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n";
      /***/
    },

    /***/
    "SFxW": function SFxW(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Azerbaijani [az]
      //! author : topchiyev : https://github.com/topchiyev
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var suffixes = {
          1: '-inci',
          5: '-inci',
          8: '-inci',
          70: '-inci',
          80: '-inci',
          2: '-nci',
          7: '-nci',
          20: '-nci',
          50: '-nci',
          3: '-üncü',
          4: '-üncü',
          100: '-üncü',
          6: '-ncı',
          9: '-uncu',
          10: '-uncu',
          30: '-uncu',
          60: '-ıncı',
          90: '-ıncı'
        };
        var az = moment.defineLocale('az', {
          months: 'yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr'.split('_'),
          monthsShort: 'yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek'.split('_'),
          weekdays: 'Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə'.split('_'),
          weekdaysShort: 'Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən'.split('_'),
          weekdaysMin: 'Bz_BE_ÇA_Çə_CA_Cü_Şə'.split('_'),
          weekdaysParseExact: true,
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
          },
          calendar: {
            sameDay: '[bugün saat] LT',
            nextDay: '[sabah saat] LT',
            nextWeek: '[gələn həftə] dddd [saat] LT',
            lastDay: '[dünən] LT',
            lastWeek: '[keçən həftə] dddd [saat] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: '%s sonra',
            past: '%s əvvəl',
            s: 'bir neçə saniyə',
            ss: '%d saniyə',
            m: 'bir dəqiqə',
            mm: '%d dəqiqə',
            h: 'bir saat',
            hh: '%d saat',
            d: 'bir gün',
            dd: '%d gün',
            M: 'bir ay',
            MM: '%d ay',
            y: 'bir il',
            yy: '%d il'
          },
          meridiemParse: /gecə|səhər|gündüz|axşam/,
          isPM: function isPM(input) {
            return /^(gündüz|axşam)$/.test(input);
          },
          meridiem: function meridiem(hour, minute, isLower) {
            if (hour < 4) {
              return 'gecə';
            } else if (hour < 12) {
              return 'səhər';
            } else if (hour < 17) {
              return 'gündüz';
            } else {
              return 'axşam';
            }
          },
          dayOfMonthOrdinalParse: /\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,
          ordinal: function ordinal(number) {
            if (number === 0) {
              // special case for zero
              return number + '-ıncı';
            }

            var a = number % 10,
                b = number % 100 - a,
                c = number >= 100 ? 100 : null;
            return number + (suffixes[a] || suffixes[b] || suffixes[c]);
          },
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 7th is the first week of the year.

          }
        });
        return az;
      });
      /***/

    },

    /***/
    "SatO": function SatO(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Chinese (Hong Kong) [zh-hk]
      //! author : Ben : https://github.com/ben-lin
      //! author : Chris Lam : https://github.com/hehachris
      //! author : Konstantin : https://github.com/skfd
      //! author : Anthony : https://github.com/anthonylau
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var zhHk = moment.defineLocale('zh-hk', {
          months: '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
          monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
          weekdays: '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
          weekdaysShort: '週日_週一_週二_週三_週四_週五_週六'.split('_'),
          weekdaysMin: '日_一_二_三_四_五_六'.split('_'),
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY/MM/DD',
            LL: 'YYYY年M月D日',
            LLL: 'YYYY年M月D日 HH:mm',
            LLLL: 'YYYY年M月D日dddd HH:mm',
            l: 'YYYY/M/D',
            ll: 'YYYY年M月D日',
            lll: 'YYYY年M月D日 HH:mm',
            llll: 'YYYY年M月D日dddd HH:mm'
          },
          meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
          meridiemHour: function meridiemHour(hour, meridiem) {
            if (hour === 12) {
              hour = 0;
            }

            if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
              return hour;
            } else if (meridiem === '中午') {
              return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === '下午' || meridiem === '晚上') {
              return hour + 12;
            }
          },
          meridiem: function meridiem(hour, minute, isLower) {
            var hm = hour * 100 + minute;

            if (hm < 600) {
              return '凌晨';
            } else if (hm < 900) {
              return '早上';
            } else if (hm < 1200) {
              return '上午';
            } else if (hm === 1200) {
              return '中午';
            } else if (hm < 1800) {
              return '下午';
            } else {
              return '晚上';
            }
          },
          calendar: {
            sameDay: '[今天]LT',
            nextDay: '[明天]LT',
            nextWeek: '[下]ddddLT',
            lastDay: '[昨天]LT',
            lastWeek: '[上]ddddLT',
            sameElse: 'L'
          },
          dayOfMonthOrdinalParse: /\d{1,2}(日|月|週)/,
          ordinal: function ordinal(number, period) {
            switch (period) {
              case 'd':
              case 'D':
              case 'DDD':
                return number + '日';

              case 'M':
                return number + '月';

              case 'w':
              case 'W':
                return number + '週';

              default:
                return number;
            }
          },
          relativeTime: {
            future: '%s後',
            past: '%s前',
            s: '幾秒',
            ss: '%d 秒',
            m: '1 分鐘',
            mm: '%d 分鐘',
            h: '1 小時',
            hh: '%d 小時',
            d: '1 天',
            dd: '%d 天',
            M: '1 個月',
            MM: '%d 個月',
            y: '1 年',
            yy: '%d 年'
          }
        });
        return zhHk;
      });
      /***/

    },

    /***/
    "UDhR": function UDhR(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Indonesian [id]
      //! author : Mohammad Satrio Utomo : https://github.com/tyok
      //! reference: http://id.wikisource.org/wiki/Pedoman_Umum_Ejaan_Bahasa_Indonesia_yang_Disempurnakan
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var id = moment.defineLocale('id', {
          months: 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember'.split('_'),
          monthsShort: 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Agt_Sep_Okt_Nov_Des'.split('_'),
          weekdays: 'Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu'.split('_'),
          weekdaysShort: 'Min_Sen_Sel_Rab_Kam_Jum_Sab'.split('_'),
          weekdaysMin: 'Mg_Sn_Sl_Rb_Km_Jm_Sb'.split('_'),
          longDateFormat: {
            LT: 'HH.mm',
            LTS: 'HH.mm.ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY [pukul] HH.mm',
            LLLL: 'dddd, D MMMM YYYY [pukul] HH.mm'
          },
          meridiemParse: /pagi|siang|sore|malam/,
          meridiemHour: function meridiemHour(hour, meridiem) {
            if (hour === 12) {
              hour = 0;
            }

            if (meridiem === 'pagi') {
              return hour;
            } else if (meridiem === 'siang') {
              return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'sore' || meridiem === 'malam') {
              return hour + 12;
            }
          },
          meridiem: function meridiem(hours, minutes, isLower) {
            if (hours < 11) {
              return 'pagi';
            } else if (hours < 15) {
              return 'siang';
            } else if (hours < 19) {
              return 'sore';
            } else {
              return 'malam';
            }
          },
          calendar: {
            sameDay: '[Hari ini pukul] LT',
            nextDay: '[Besok pukul] LT',
            nextWeek: 'dddd [pukul] LT',
            lastDay: '[Kemarin pukul] LT',
            lastWeek: 'dddd [lalu pukul] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: 'dalam %s',
            past: '%s yang lalu',
            s: 'beberapa detik',
            ss: '%d detik',
            m: 'semenit',
            mm: '%d menit',
            h: 'sejam',
            hh: '%d jam',
            d: 'sehari',
            dd: '%d hari',
            M: 'sebulan',
            MM: '%d bulan',
            y: 'setahun',
            yy: '%d tahun'
          },
          week: {
            dow: 0,
            // Sunday is the first day of the week.
            doy: 6 // The week that contains Jan 6th is the first week of the year.

          }
        });
        return id;
      });
      /***/

    },

    /***/
    "USCx": function USCx(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Irish or Irish Gaelic [ga]
      //! author : André Silva : https://github.com/askpt
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var months = ['Eanáir', 'Feabhra', 'Márta', 'Aibreán', 'Bealtaine', 'Meitheamh', 'Iúil', 'Lúnasa', 'Meán Fómhair', 'Deireadh Fómhair', 'Samhain', 'Nollaig'],
            monthsShort = ['Ean', 'Feabh', 'Márt', 'Aib', 'Beal', 'Meith', 'Iúil', 'Lún', 'M.F.', 'D.F.', 'Samh', 'Noll'],
            weekdays = ['Dé Domhnaigh', 'Dé Luain', 'Dé Máirt', 'Dé Céadaoin', 'Déardaoin', 'Dé hAoine', 'Dé Sathairn'],
            weekdaysShort = ['Domh', 'Luan', 'Máirt', 'Céad', 'Déar', 'Aoine', 'Sath'],
            weekdaysMin = ['Do', 'Lu', 'Má', 'Cé', 'Dé', 'A', 'Sa'];
        var ga = moment.defineLocale('ga', {
          months: months,
          monthsShort: monthsShort,
          monthsParseExact: true,
          weekdays: weekdays,
          weekdaysShort: weekdaysShort,
          weekdaysMin: weekdaysMin,
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
          },
          calendar: {
            sameDay: '[Inniu ag] LT',
            nextDay: '[Amárach ag] LT',
            nextWeek: 'dddd [ag] LT',
            lastDay: '[Inné ag] LT',
            lastWeek: 'dddd [seo caite] [ag] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: 'i %s',
            past: '%s ó shin',
            s: 'cúpla soicind',
            ss: '%d soicind',
            m: 'nóiméad',
            mm: '%d nóiméad',
            h: 'uair an chloig',
            hh: '%d uair an chloig',
            d: 'lá',
            dd: '%d lá',
            M: 'mí',
            MM: '%d míonna',
            y: 'bliain',
            yy: '%d bliain'
          },
          dayOfMonthOrdinalParse: /\d{1,2}(d|na|mh)/,
          ordinal: function ordinal(number) {
            var output = number === 1 ? 'd' : number % 10 === 2 ? 'na' : 'mh';
            return number + output;
          },
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.

          }
        });
        return ga;
      });
      /***/

    },

    /***/
    "UpQW": function UpQW(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Urdu [ur]
      //! author : Sawood Alam : https://github.com/ibnesayeed
      //! author : Zack : https://github.com/ZackVision
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var months = ['جنوری', 'فروری', 'مارچ', 'اپریل', 'مئی', 'جون', 'جولائی', 'اگست', 'ستمبر', 'اکتوبر', 'نومبر', 'دسمبر'],
            days = ['اتوار', 'پیر', 'منگل', 'بدھ', 'جمعرات', 'جمعہ', 'ہفتہ'];
        var ur = moment.defineLocale('ur', {
          months: months,
          monthsShort: months,
          weekdays: days,
          weekdaysShort: days,
          weekdaysMin: days,
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd، D MMMM YYYY HH:mm'
          },
          meridiemParse: /صبح|شام/,
          isPM: function isPM(input) {
            return 'شام' === input;
          },
          meridiem: function meridiem(hour, minute, isLower) {
            if (hour < 12) {
              return 'صبح';
            }

            return 'شام';
          },
          calendar: {
            sameDay: '[آج بوقت] LT',
            nextDay: '[کل بوقت] LT',
            nextWeek: 'dddd [بوقت] LT',
            lastDay: '[گذشتہ روز بوقت] LT',
            lastWeek: '[گذشتہ] dddd [بوقت] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: '%s بعد',
            past: '%s قبل',
            s: 'چند سیکنڈ',
            ss: '%d سیکنڈ',
            m: 'ایک منٹ',
            mm: '%d منٹ',
            h: 'ایک گھنٹہ',
            hh: '%d گھنٹے',
            d: 'ایک دن',
            dd: '%d دن',
            M: 'ایک ماہ',
            MM: '%d ماہ',
            y: 'ایک سال',
            yy: '%d سال'
          },
          preparse: function preparse(string) {
            return string.replace(/،/g, ',');
          },
          postformat: function postformat(string) {
            return string.replace(/,/g, '،');
          },
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.

          }
        });
        return ur;
      });
      /***/

    },

    /***/
    "Ur1D": function Ur1D(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : siSwati [ss]
      //! author : Nicolai Davies<mail@nicolai.io> : https://github.com/nicolaidavies
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var ss = moment.defineLocale('ss', {
          months: "Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split('_'),
          monthsShort: 'Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo'.split('_'),
          weekdays: 'Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo'.split('_'),
          weekdaysShort: 'Lis_Umb_Lsb_Les_Lsi_Lsh_Umg'.split('_'),
          weekdaysMin: 'Li_Us_Lb_Lt_Ls_Lh_Ug'.split('_'),
          weekdaysParseExact: true,
          longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY h:mm A',
            LLLL: 'dddd, D MMMM YYYY h:mm A'
          },
          calendar: {
            sameDay: '[Namuhla nga] LT',
            nextDay: '[Kusasa nga] LT',
            nextWeek: 'dddd [nga] LT',
            lastDay: '[Itolo nga] LT',
            lastWeek: 'dddd [leliphelile] [nga] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: 'nga %s',
            past: 'wenteka nga %s',
            s: 'emizuzwana lomcane',
            ss: '%d mzuzwana',
            m: 'umzuzu',
            mm: '%d emizuzu',
            h: 'lihora',
            hh: '%d emahora',
            d: 'lilanga',
            dd: '%d emalanga',
            M: 'inyanga',
            MM: '%d tinyanga',
            y: 'umnyaka',
            yy: '%d iminyaka'
          },
          meridiemParse: /ekuseni|emini|entsambama|ebusuku/,
          meridiem: function meridiem(hours, minutes, isLower) {
            if (hours < 11) {
              return 'ekuseni';
            } else if (hours < 15) {
              return 'emini';
            } else if (hours < 19) {
              return 'entsambama';
            } else {
              return 'ebusuku';
            }
          },
          meridiemHour: function meridiemHour(hour, meridiem) {
            if (hour === 12) {
              hour = 0;
            }

            if (meridiem === 'ekuseni') {
              return hour;
            } else if (meridiem === 'emini') {
              return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'entsambama' || meridiem === 'ebusuku') {
              if (hour === 0) {
                return 0;
              }

              return hour + 12;
            }
          },
          dayOfMonthOrdinalParse: /\d{1,2}/,
          ordinal: '%d',
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.

          }
        });
        return ss;
      });
      /***/

    },

    /***/
    "V2x9": function V2x9(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Tetun Dili (East Timor) [tet]
      //! author : Joshua Brooks : https://github.com/joshbrooks
      //! author : Onorio De J. Afonso : https://github.com/marobo
      //! author : Sonia Simoes : https://github.com/soniasimoes
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var tet = moment.defineLocale('tet', {
          months: 'Janeiru_Fevereiru_Marsu_Abril_Maiu_Juñu_Jullu_Agustu_Setembru_Outubru_Novembru_Dezembru'.split('_'),
          monthsShort: 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez'.split('_'),
          weekdays: 'Domingu_Segunda_Tersa_Kuarta_Kinta_Sesta_Sabadu'.split('_'),
          weekdaysShort: 'Dom_Seg_Ters_Kua_Kint_Sest_Sab'.split('_'),
          weekdaysMin: 'Do_Seg_Te_Ku_Ki_Ses_Sa'.split('_'),
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
          },
          calendar: {
            sameDay: '[Ohin iha] LT',
            nextDay: '[Aban iha] LT',
            nextWeek: 'dddd [iha] LT',
            lastDay: '[Horiseik iha] LT',
            lastWeek: 'dddd [semana kotuk] [iha] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: 'iha %s',
            past: '%s liuba',
            s: 'segundu balun',
            ss: 'segundu %d',
            m: 'minutu ida',
            mm: 'minutu %d',
            h: 'oras ida',
            hh: 'oras %d',
            d: 'loron ida',
            dd: 'loron %d',
            M: 'fulan ida',
            MM: 'fulan %d',
            y: 'tinan ida',
            yy: 'tinan %d'
          },
          dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
          ordinal: function ordinal(number) {
            var b = number % 10,
                output = ~~(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
            return number + output;
          },
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.

          }
        });
        return tet;
      });
      /***/

    },

    /***/
    "Vclq": function Vclq(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Spanish (United States) [es-us]
      //! author : bustta : https://github.com/bustta
      //! author : chrisrodz : https://github.com/chrisrodz
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var monthsShortDot = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_'),
            _monthsShort2 = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_'),
            monthsParse = [/^ene/i, /^feb/i, /^mar/i, /^abr/i, /^may/i, /^jun/i, /^jul/i, /^ago/i, /^sep/i, /^oct/i, /^nov/i, /^dic/i],
            monthsRegex = /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;

        var esUs = moment.defineLocale('es-us', {
          months: 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),
          monthsShort: function monthsShort(m, format) {
            if (!m) {
              return monthsShortDot;
            } else if (/-MMM-/.test(format)) {
              return _monthsShort2[m.month()];
            } else {
              return monthsShortDot[m.month()];
            }
          },
          monthsRegex: monthsRegex,
          monthsShortRegex: monthsRegex,
          monthsStrictRegex: /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
          monthsShortStrictRegex: /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
          monthsParse: monthsParse,
          longMonthsParse: monthsParse,
          shortMonthsParse: monthsParse,
          weekdays: 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
          weekdaysShort: 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
          weekdaysMin: 'do_lu_ma_mi_ju_vi_sá'.split('_'),
          weekdaysParseExact: true,
          longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'MM/DD/YYYY',
            LL: 'D [de] MMMM [de] YYYY',
            LLL: 'D [de] MMMM [de] YYYY h:mm A',
            LLLL: 'dddd, D [de] MMMM [de] YYYY h:mm A'
          },
          calendar: {
            sameDay: function sameDay() {
              return '[hoy a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            nextDay: function nextDay() {
              return '[mañana a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            nextWeek: function nextWeek() {
              return 'dddd [a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            lastDay: function lastDay() {
              return '[ayer a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            lastWeek: function lastWeek() {
              return '[el] dddd [pasado a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            sameElse: 'L'
          },
          relativeTime: {
            future: 'en %s',
            past: 'hace %s',
            s: 'unos segundos',
            ss: '%d segundos',
            m: 'un minuto',
            mm: '%d minutos',
            h: 'una hora',
            hh: '%d horas',
            d: 'un día',
            dd: '%d días',
            w: 'una semana',
            ww: '%d semanas',
            M: 'un mes',
            MM: '%d meses',
            y: 'un año',
            yy: '%d años'
          },
          dayOfMonthOrdinalParse: /\d{1,2}º/,
          ordinal: '%dº',
          week: {
            dow: 0,
            // Sunday is the first day of the week.
            doy: 6 // The week that contains Jan 6th is the first week of the year.

          }
        });
        return esUs;
      });
      /***/

    },

    /***/
    "WYrj": function WYrj(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Maldivian [dv]
      //! author : Jawish Hameed : https://github.com/jawish
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var months = ['ޖެނުއަރީ', 'ފެބްރުއަރީ', 'މާރިޗު', 'އޭޕްރީލު', 'މޭ', 'ޖޫން', 'ޖުލައި', 'އޯގަސްޓު', 'ސެޕްޓެމްބަރު', 'އޮކްޓޯބަރު', 'ނޮވެމްބަރު', 'ޑިސެމްބަރު'],
            weekdays = ['އާދިއްތަ', 'ހޯމަ', 'އަންގާރަ', 'ބުދަ', 'ބުރާސްފަތި', 'ހުކުރު', 'ހޮނިހިރު'];
        var dv = moment.defineLocale('dv', {
          months: months,
          monthsShort: months,
          weekdays: weekdays,
          weekdaysShort: weekdays,
          weekdaysMin: 'އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި'.split('_'),
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'D/M/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
          },
          meridiemParse: /މކ|މފ/,
          isPM: function isPM(input) {
            return 'މފ' === input;
          },
          meridiem: function meridiem(hour, minute, isLower) {
            if (hour < 12) {
              return 'މކ';
            } else {
              return 'މފ';
            }
          },
          calendar: {
            sameDay: '[މިއަދު] LT',
            nextDay: '[މާދަމާ] LT',
            nextWeek: 'dddd LT',
            lastDay: '[އިއްޔެ] LT',
            lastWeek: '[ފާއިތުވި] dddd LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: 'ތެރޭގައި %s',
            past: 'ކުރިން %s',
            s: 'ސިކުންތުކޮޅެއް',
            ss: 'd% ސިކުންތު',
            m: 'މިނިޓެއް',
            mm: 'މިނިޓު %d',
            h: 'ގަޑިއިރެއް',
            hh: 'ގަޑިއިރު %d',
            d: 'ދުވަހެއް',
            dd: 'ދުވަސް %d',
            M: 'މަހެއް',
            MM: 'މަސް %d',
            y: 'އަހަރެއް',
            yy: 'އަހަރު %d'
          },
          preparse: function preparse(string) {
            return string.replace(/،/g, ',');
          },
          postformat: function postformat(string) {
            return string.replace(/,/g, '،');
          },
          week: {
            dow: 7,
            // Sunday is the first day of the week.
            doy: 12 // The week that contains Jan 12th is the first week of the year.

          }
        });
        return dv;
      });
      /***/

    },

    /***/
    "Wp6s": function Wp6s(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MatCard", function () {
        return MatCard;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MatCardActions", function () {
        return MatCardActions;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MatCardAvatar", function () {
        return MatCardAvatar;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MatCardContent", function () {
        return MatCardContent;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MatCardFooter", function () {
        return MatCardFooter;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MatCardHeader", function () {
        return MatCardHeader;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MatCardImage", function () {
        return MatCardImage;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MatCardLgImage", function () {
        return MatCardLgImage;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MatCardMdImage", function () {
        return MatCardMdImage;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MatCardModule", function () {
        return MatCardModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MatCardSmImage", function () {
        return MatCardSmImage;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MatCardSubtitle", function () {
        return MatCardSubtitle;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MatCardTitle", function () {
        return MatCardTitle;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MatCardTitleGroup", function () {
        return MatCardTitleGroup;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MatCardXlImage", function () {
        return MatCardXlImage;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/platform-browser/animations */
      "R1ws");
      /* harmony import */


      var _angular_material_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/material/core */
      "FKr1");
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Content of a card, needed as it's used as a selector in the API.
       * @docs-private
       */


      var _c0 = ["*", [["mat-card-footer"]]];
      var _c1 = ["*", "mat-card-footer"];
      var _c2 = [[["", "mat-card-avatar", ""], ["", "matCardAvatar", ""]], [["mat-card-title"], ["mat-card-subtitle"], ["", "mat-card-title", ""], ["", "mat-card-subtitle", ""], ["", "matCardTitle", ""], ["", "matCardSubtitle", ""]], "*"];
      var _c3 = ["[mat-card-avatar], [matCardAvatar]", "mat-card-title, mat-card-subtitle,\n      [mat-card-title], [mat-card-subtitle],\n      [matCardTitle], [matCardSubtitle]", "*"];
      var _c4 = [[["mat-card-title"], ["mat-card-subtitle"], ["", "mat-card-title", ""], ["", "mat-card-subtitle", ""], ["", "matCardTitle", ""], ["", "matCardSubtitle", ""]], [["img"]], "*"];
      var _c5 = ["mat-card-title, mat-card-subtitle,\n      [mat-card-title], [mat-card-subtitle],\n      [matCardTitle], [matCardSubtitle]", "img", "*"];

      var MatCardContent = function MatCardContent() {
        _classCallCheck(this, MatCardContent);
      };

      MatCardContent.ɵfac = function MatCardContent_Factory(t) {
        return new (t || MatCardContent)();
      };

      MatCardContent.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: MatCardContent,
        selectors: [["mat-card-content"], ["", "mat-card-content", ""], ["", "matCardContent", ""]],
        hostAttrs: [1, "mat-card-content"]
      });
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](MatCardContent, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: 'mat-card-content, [mat-card-content], [matCardContent]',
            host: {
              'class': 'mat-card-content'
            }
          }]
        }], null, null);
      })();
      /**
       * Title of a card, needed as it's used as a selector in the API.
       * @docs-private
       */


      var MatCardTitle = function MatCardTitle() {
        _classCallCheck(this, MatCardTitle);
      };

      MatCardTitle.ɵfac = function MatCardTitle_Factory(t) {
        return new (t || MatCardTitle)();
      };

      MatCardTitle.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: MatCardTitle,
        selectors: [["mat-card-title"], ["", "mat-card-title", ""], ["", "matCardTitle", ""]],
        hostAttrs: [1, "mat-card-title"]
      });
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](MatCardTitle, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: "mat-card-title, [mat-card-title], [matCardTitle]",
            host: {
              'class': 'mat-card-title'
            }
          }]
        }], null, null);
      })();
      /**
       * Sub-title of a card, needed as it's used as a selector in the API.
       * @docs-private
       */


      var MatCardSubtitle = function MatCardSubtitle() {
        _classCallCheck(this, MatCardSubtitle);
      };

      MatCardSubtitle.ɵfac = function MatCardSubtitle_Factory(t) {
        return new (t || MatCardSubtitle)();
      };

      MatCardSubtitle.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: MatCardSubtitle,
        selectors: [["mat-card-subtitle"], ["", "mat-card-subtitle", ""], ["", "matCardSubtitle", ""]],
        hostAttrs: [1, "mat-card-subtitle"]
      });
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](MatCardSubtitle, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: "mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]",
            host: {
              'class': 'mat-card-subtitle'
            }
          }]
        }], null, null);
      })();
      /**
       * Action section of a card, needed as it's used as a selector in the API.
       * @docs-private
       */


      var MatCardActions = function MatCardActions() {
        _classCallCheck(this, MatCardActions);

        /** Position of the actions inside the card. */
        this.align = 'start';
      };

      MatCardActions.ɵfac = function MatCardActions_Factory(t) {
        return new (t || MatCardActions)();
      };

      MatCardActions.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: MatCardActions,
        selectors: [["mat-card-actions"]],
        hostAttrs: [1, "mat-card-actions"],
        hostVars: 2,
        hostBindings: function MatCardActions_HostBindings(rf, ctx) {
          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("mat-card-actions-align-end", ctx.align === "end");
          }
        },
        inputs: {
          align: "align"
        },
        exportAs: ["matCardActions"]
      });
      MatCardActions.propDecorators = {
        align: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }]
      };
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](MatCardActions, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: 'mat-card-actions',
            exportAs: 'matCardActions',
            host: {
              'class': 'mat-card-actions',
              '[class.mat-card-actions-align-end]': 'align === "end"'
            }
          }]
        }], function () {
          return [];
        }, {
          align: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }]
        });
      })();
      /**
       * Footer of a card, needed as it's used as a selector in the API.
       * @docs-private
       */


      var MatCardFooter = function MatCardFooter() {
        _classCallCheck(this, MatCardFooter);
      };

      MatCardFooter.ɵfac = function MatCardFooter_Factory(t) {
        return new (t || MatCardFooter)();
      };

      MatCardFooter.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: MatCardFooter,
        selectors: [["mat-card-footer"]],
        hostAttrs: [1, "mat-card-footer"]
      });
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](MatCardFooter, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: 'mat-card-footer',
            host: {
              'class': 'mat-card-footer'
            }
          }]
        }], null, null);
      })();
      /**
       * Image used in a card, needed to add the mat- CSS styling.
       * @docs-private
       */


      var MatCardImage = function MatCardImage() {
        _classCallCheck(this, MatCardImage);
      };

      MatCardImage.ɵfac = function MatCardImage_Factory(t) {
        return new (t || MatCardImage)();
      };

      MatCardImage.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: MatCardImage,
        selectors: [["", "mat-card-image", ""], ["", "matCardImage", ""]],
        hostAttrs: [1, "mat-card-image"]
      });
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](MatCardImage, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: '[mat-card-image], [matCardImage]',
            host: {
              'class': 'mat-card-image'
            }
          }]
        }], null, null);
      })();
      /**
       * Image used in a card, needed to add the mat- CSS styling.
       * @docs-private
       */


      var MatCardSmImage = function MatCardSmImage() {
        _classCallCheck(this, MatCardSmImage);
      };

      MatCardSmImage.ɵfac = function MatCardSmImage_Factory(t) {
        return new (t || MatCardSmImage)();
      };

      MatCardSmImage.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: MatCardSmImage,
        selectors: [["", "mat-card-sm-image", ""], ["", "matCardImageSmall", ""]],
        hostAttrs: [1, "mat-card-sm-image"]
      });
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](MatCardSmImage, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: '[mat-card-sm-image], [matCardImageSmall]',
            host: {
              'class': 'mat-card-sm-image'
            }
          }]
        }], null, null);
      })();
      /**
       * Image used in a card, needed to add the mat- CSS styling.
       * @docs-private
       */


      var MatCardMdImage = function MatCardMdImage() {
        _classCallCheck(this, MatCardMdImage);
      };

      MatCardMdImage.ɵfac = function MatCardMdImage_Factory(t) {
        return new (t || MatCardMdImage)();
      };

      MatCardMdImage.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: MatCardMdImage,
        selectors: [["", "mat-card-md-image", ""], ["", "matCardImageMedium", ""]],
        hostAttrs: [1, "mat-card-md-image"]
      });
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](MatCardMdImage, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: '[mat-card-md-image], [matCardImageMedium]',
            host: {
              'class': 'mat-card-md-image'
            }
          }]
        }], null, null);
      })();
      /**
       * Image used in a card, needed to add the mat- CSS styling.
       * @docs-private
       */


      var MatCardLgImage = function MatCardLgImage() {
        _classCallCheck(this, MatCardLgImage);
      };

      MatCardLgImage.ɵfac = function MatCardLgImage_Factory(t) {
        return new (t || MatCardLgImage)();
      };

      MatCardLgImage.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: MatCardLgImage,
        selectors: [["", "mat-card-lg-image", ""], ["", "matCardImageLarge", ""]],
        hostAttrs: [1, "mat-card-lg-image"]
      });
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](MatCardLgImage, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: '[mat-card-lg-image], [matCardImageLarge]',
            host: {
              'class': 'mat-card-lg-image'
            }
          }]
        }], null, null);
      })();
      /**
       * Large image used in a card, needed to add the mat- CSS styling.
       * @docs-private
       */


      var MatCardXlImage = function MatCardXlImage() {
        _classCallCheck(this, MatCardXlImage);
      };

      MatCardXlImage.ɵfac = function MatCardXlImage_Factory(t) {
        return new (t || MatCardXlImage)();
      };

      MatCardXlImage.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: MatCardXlImage,
        selectors: [["", "mat-card-xl-image", ""], ["", "matCardImageXLarge", ""]],
        hostAttrs: [1, "mat-card-xl-image"]
      });
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](MatCardXlImage, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: '[mat-card-xl-image], [matCardImageXLarge]',
            host: {
              'class': 'mat-card-xl-image'
            }
          }]
        }], null, null);
      })();
      /**
       * Avatar image used in a card, needed to add the mat- CSS styling.
       * @docs-private
       */


      var MatCardAvatar = function MatCardAvatar() {
        _classCallCheck(this, MatCardAvatar);
      };

      MatCardAvatar.ɵfac = function MatCardAvatar_Factory(t) {
        return new (t || MatCardAvatar)();
      };

      MatCardAvatar.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: MatCardAvatar,
        selectors: [["", "mat-card-avatar", ""], ["", "matCardAvatar", ""]],
        hostAttrs: [1, "mat-card-avatar"]
      });
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](MatCardAvatar, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: '[mat-card-avatar], [matCardAvatar]',
            host: {
              'class': 'mat-card-avatar'
            }
          }]
        }], null, null);
      })();
      /**
       * A basic content container component that adds the styles of a Material design card.
       *
       * While this component can be used alone, it also provides a number
       * of preset styles for common card sections, including:
       * - mat-card-title
       * - mat-card-subtitle
       * - mat-card-content
       * - mat-card-actions
       * - mat-card-footer
       */


      var MatCard = // @breaking-change 9.0.0 `_animationMode` parameter to be made required.
      function MatCard(_animationMode) {
        _classCallCheck(this, MatCard);

        this._animationMode = _animationMode;
      };

      MatCard.ɵfac = function MatCard_Factory(t) {
        return new (t || MatCard)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_1__["ANIMATION_MODULE_TYPE"], 8));
      };

      MatCard.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
        type: MatCard,
        selectors: [["mat-card"]],
        hostAttrs: [1, "mat-card", "mat-focus-indicator"],
        hostVars: 2,
        hostBindings: function MatCard_HostBindings(rf, ctx) {
          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("_mat-animation-noopable", ctx._animationMode === "NoopAnimations");
          }
        },
        exportAs: ["matCard"],
        ngContentSelectors: _c1,
        decls: 2,
        vars: 0,
        template: function MatCard_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojectionDef"](_c0);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](0);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](1, 1);
          }
        },
        styles: [".mat-card{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:block;position:relative;padding:16px;border-radius:4px}._mat-animation-noopable.mat-card{transition:none;animation:none}.mat-card .mat-divider-horizontal{position:absolute;left:0;width:100%}[dir=rtl] .mat-card .mat-divider-horizontal{left:auto;right:0}.mat-card .mat-divider-horizontal.mat-divider-inset{position:static;margin:0}[dir=rtl] .mat-card .mat-divider-horizontal.mat-divider-inset{margin-right:0}.cdk-high-contrast-active .mat-card{outline:solid 1px}.mat-card-actions,.mat-card-subtitle,.mat-card-content{display:block;margin-bottom:16px}.mat-card-title{display:block;margin-bottom:8px}.mat-card-actions{margin-left:-8px;margin-right:-8px;padding:8px 0}.mat-card-actions-align-end{display:flex;justify-content:flex-end}.mat-card-image{width:calc(100% + 32px);margin:0 -16px 16px -16px}.mat-card-footer{display:block;margin:0 -16px -16px -16px}.mat-card-actions .mat-button,.mat-card-actions .mat-raised-button,.mat-card-actions .mat-stroked-button{margin:0 8px}.mat-card-header{display:flex;flex-direction:row}.mat-card-header .mat-card-title{margin-bottom:12px}.mat-card-header-text{margin:0 16px}.mat-card-avatar{height:40px;width:40px;border-radius:50%;flex-shrink:0;object-fit:cover}.mat-card-title-group{display:flex;justify-content:space-between}.mat-card-sm-image{width:80px;height:80px}.mat-card-md-image{width:112px;height:112px}.mat-card-lg-image{width:152px;height:152px}.mat-card-xl-image{width:240px;height:240px;margin:-8px}.mat-card-title-group>.mat-card-xl-image{margin:-8px 0 8px}@media(max-width: 599px){.mat-card-title-group{margin:0}.mat-card-xl-image{margin-left:0;margin-right:0}}.mat-card>:first-child,.mat-card-content>:first-child{margin-top:0}.mat-card>:last-child:not(.mat-card-footer),.mat-card-content>:last-child:not(.mat-card-footer){margin-bottom:0}.mat-card-image:first-child{margin-top:-16px;border-top-left-radius:inherit;border-top-right-radius:inherit}.mat-card>.mat-card-actions:last-child{margin-bottom:-8px;padding-bottom:0}.mat-card-actions .mat-button:first-child,.mat-card-actions .mat-raised-button:first-child,.mat-card-actions .mat-stroked-button:first-child{margin-left:0;margin-right:0}.mat-card-title:not(:first-child),.mat-card-subtitle:not(:first-child){margin-top:-4px}.mat-card-header .mat-card-subtitle:not(:first-child){margin-top:-8px}.mat-card>.mat-card-xl-image:first-child{margin-top:-8px}.mat-card>.mat-card-xl-image:last-child{margin-bottom:-8px}\n"],
        encapsulation: 2,
        changeDetection: 0
      });

      MatCard.ctorParameters = function () {
        return [{
          type: String,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_1__["ANIMATION_MODULE_TYPE"]]
          }]
        }];
      };
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](MatCard, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
          args: [{
            selector: 'mat-card',
            exportAs: 'matCard',
            template: "<ng-content></ng-content>\n<ng-content select=\"mat-card-footer\"></ng-content>\n",
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
            host: {
              'class': 'mat-card mat-focus-indicator',
              '[class._mat-animation-noopable]': '_animationMode === "NoopAnimations"'
            },
            styles: [".mat-card{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:block;position:relative;padding:16px;border-radius:4px}._mat-animation-noopable.mat-card{transition:none;animation:none}.mat-card .mat-divider-horizontal{position:absolute;left:0;width:100%}[dir=rtl] .mat-card .mat-divider-horizontal{left:auto;right:0}.mat-card .mat-divider-horizontal.mat-divider-inset{position:static;margin:0}[dir=rtl] .mat-card .mat-divider-horizontal.mat-divider-inset{margin-right:0}.cdk-high-contrast-active .mat-card{outline:solid 1px}.mat-card-actions,.mat-card-subtitle,.mat-card-content{display:block;margin-bottom:16px}.mat-card-title{display:block;margin-bottom:8px}.mat-card-actions{margin-left:-8px;margin-right:-8px;padding:8px 0}.mat-card-actions-align-end{display:flex;justify-content:flex-end}.mat-card-image{width:calc(100% + 32px);margin:0 -16px 16px -16px}.mat-card-footer{display:block;margin:0 -16px -16px -16px}.mat-card-actions .mat-button,.mat-card-actions .mat-raised-button,.mat-card-actions .mat-stroked-button{margin:0 8px}.mat-card-header{display:flex;flex-direction:row}.mat-card-header .mat-card-title{margin-bottom:12px}.mat-card-header-text{margin:0 16px}.mat-card-avatar{height:40px;width:40px;border-radius:50%;flex-shrink:0;object-fit:cover}.mat-card-title-group{display:flex;justify-content:space-between}.mat-card-sm-image{width:80px;height:80px}.mat-card-md-image{width:112px;height:112px}.mat-card-lg-image{width:152px;height:152px}.mat-card-xl-image{width:240px;height:240px;margin:-8px}.mat-card-title-group>.mat-card-xl-image{margin:-8px 0 8px}@media(max-width: 599px){.mat-card-title-group{margin:0}.mat-card-xl-image{margin-left:0;margin-right:0}}.mat-card>:first-child,.mat-card-content>:first-child{margin-top:0}.mat-card>:last-child:not(.mat-card-footer),.mat-card-content>:last-child:not(.mat-card-footer){margin-bottom:0}.mat-card-image:first-child{margin-top:-16px;border-top-left-radius:inherit;border-top-right-radius:inherit}.mat-card>.mat-card-actions:last-child{margin-bottom:-8px;padding-bottom:0}.mat-card-actions .mat-button:first-child,.mat-card-actions .mat-raised-button:first-child,.mat-card-actions .mat-stroked-button:first-child{margin-left:0;margin-right:0}.mat-card-title:not(:first-child),.mat-card-subtitle:not(:first-child){margin-top:-4px}.mat-card-header .mat-card-subtitle:not(:first-child){margin-top:-8px}.mat-card>.mat-card-xl-image:first-child{margin-top:-8px}.mat-card>.mat-card-xl-image:last-child{margin-bottom:-8px}\n"]
          }]
        }], function () {
          return [{
            type: String,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_1__["ANIMATION_MODULE_TYPE"]]
            }]
          }];
        }, null);
      })();
      /**
       * Component intended to be used within the `<mat-card>` component. It adds styles for a
       * preset header section (i.e. a title, subtitle, and avatar layout).
       * @docs-private
       */


      var MatCardHeader = function MatCardHeader() {
        _classCallCheck(this, MatCardHeader);
      };

      MatCardHeader.ɵfac = function MatCardHeader_Factory(t) {
        return new (t || MatCardHeader)();
      };

      MatCardHeader.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
        type: MatCardHeader,
        selectors: [["mat-card-header"]],
        hostAttrs: [1, "mat-card-header"],
        ngContentSelectors: _c3,
        decls: 4,
        vars: 0,
        consts: [[1, "mat-card-header-text"]],
        template: function MatCardHeader_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojectionDef"](_c2);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](0);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "div", 0);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](2, 1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](3, 2);
          }
        },
        encapsulation: 2,
        changeDetection: 0
      });
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](MatCardHeader, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
          args: [{
            selector: 'mat-card-header',
            template: "<ng-content select=\"[mat-card-avatar], [matCardAvatar]\"></ng-content>\n<div class=\"mat-card-header-text\">\n  <ng-content\n      select=\"mat-card-title, mat-card-subtitle,\n      [mat-card-title], [mat-card-subtitle],\n      [matCardTitle], [matCardSubtitle]\"></ng-content>\n</div>\n<ng-content></ng-content>\n",
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
            host: {
              'class': 'mat-card-header'
            }
          }]
        }], null, null);
      })();
      /**
       * Component intended to be used within the `<mat-card>` component. It adds styles for a preset
       * layout that groups an image with a title section.
       * @docs-private
       */


      var MatCardTitleGroup = function MatCardTitleGroup() {
        _classCallCheck(this, MatCardTitleGroup);
      };

      MatCardTitleGroup.ɵfac = function MatCardTitleGroup_Factory(t) {
        return new (t || MatCardTitleGroup)();
      };

      MatCardTitleGroup.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
        type: MatCardTitleGroup,
        selectors: [["mat-card-title-group"]],
        hostAttrs: [1, "mat-card-title-group"],
        ngContentSelectors: _c5,
        decls: 4,
        vars: 0,
        template: function MatCardTitleGroup_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojectionDef"](_c4);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](2, 1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](3, 2);
          }
        },
        encapsulation: 2,
        changeDetection: 0
      });
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](MatCardTitleGroup, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
          args: [{
            selector: 'mat-card-title-group',
            template: "<div>\n  <ng-content\n      select=\"mat-card-title, mat-card-subtitle,\n      [mat-card-title], [mat-card-subtitle],\n      [matCardTitle], [matCardSubtitle]\"></ng-content>\n</div>\n<ng-content select=\"img\"></ng-content>\n<ng-content></ng-content>\n",
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
            host: {
              'class': 'mat-card-title-group'
            }
          }]
        }], null, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var MatCardModule = function MatCardModule() {
        _classCallCheck(this, MatCardModule);
      };

      MatCardModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
        type: MatCardModule
      });
      MatCardModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
        factory: function MatCardModule_Factory(t) {
          return new (t || MatCardModule)();
        },
        imports: [[_angular_material_core__WEBPACK_IMPORTED_MODULE_2__["MatCommonModule"]], _angular_material_core__WEBPACK_IMPORTED_MODULE_2__["MatCommonModule"]]
      });

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](MatCardModule, {
          declarations: function declarations() {
            return [MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle, MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage, MatCardXlImage, MatCardAvatar];
          },
          imports: function imports() {
            return [_angular_material_core__WEBPACK_IMPORTED_MODULE_2__["MatCommonModule"]];
          },
          exports: function exports() {
            return [MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle, MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage, MatCardXlImage, MatCardAvatar, _angular_material_core__WEBPACK_IMPORTED_MODULE_2__["MatCommonModule"]];
          }
        });
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](MatCardModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
          args: [{
            imports: [_angular_material_core__WEBPACK_IMPORTED_MODULE_2__["MatCommonModule"]],
            exports: [MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle, MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage, MatCardXlImage, MatCardAvatar, _angular_material_core__WEBPACK_IMPORTED_MODULE_2__["MatCommonModule"]],
            declarations: [MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle, MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage, MatCardXlImage, MatCardAvatar]
          }]
        }], null, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Generated bundle index. Do not edit.
       */
      //# sourceMappingURL=card.js.map

      /***/

    },

    /***/
    "Wv91": function Wv91(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Turkmen [tk]
      //! author : Atamyrat Abdyrahmanov : https://github.com/atamyratabdy
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var suffixes = {
          1: "'inji",
          5: "'inji",
          8: "'inji",
          70: "'inji",
          80: "'inji",
          2: "'nji",
          7: "'nji",
          20: "'nji",
          50: "'nji",
          3: "'ünji",
          4: "'ünji",
          100: "'ünji",
          6: "'njy",
          9: "'unjy",
          10: "'unjy",
          30: "'unjy",
          60: "'ynjy",
          90: "'ynjy"
        };
        var tk = moment.defineLocale('tk', {
          months: 'Ýanwar_Fewral_Mart_Aprel_Maý_Iýun_Iýul_Awgust_Sentýabr_Oktýabr_Noýabr_Dekabr'.split('_'),
          monthsShort: 'Ýan_Few_Mar_Apr_Maý_Iýn_Iýl_Awg_Sen_Okt_Noý_Dek'.split('_'),
          weekdays: 'Ýekşenbe_Duşenbe_Sişenbe_Çarşenbe_Penşenbe_Anna_Şenbe'.split('_'),
          weekdaysShort: 'Ýek_Duş_Siş_Çar_Pen_Ann_Şen'.split('_'),
          weekdaysMin: 'Ýk_Dş_Sş_Çr_Pn_An_Şn'.split('_'),
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
          },
          calendar: {
            sameDay: '[bugün sagat] LT',
            nextDay: '[ertir sagat] LT',
            nextWeek: '[indiki] dddd [sagat] LT',
            lastDay: '[düýn] LT',
            lastWeek: '[geçen] dddd [sagat] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: '%s soň',
            past: '%s öň',
            s: 'birnäçe sekunt',
            m: 'bir minut',
            mm: '%d minut',
            h: 'bir sagat',
            hh: '%d sagat',
            d: 'bir gün',
            dd: '%d gün',
            M: 'bir aý',
            MM: '%d aý',
            y: 'bir ýyl',
            yy: '%d ýyl'
          },
          ordinal: function ordinal(number, period) {
            switch (period) {
              case 'd':
              case 'D':
              case 'Do':
              case 'DD':
                return number;

              default:
                if (number === 0) {
                  // special case for zero
                  return number + "'unjy";
                }

                var a = number % 10,
                    b = number % 100 - a,
                    c = number >= 100 ? 100 : null;
                return number + (suffixes[a] || suffixes[b] || suffixes[c]);
            }
          },
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 7th is the first week of the year.

          }
        });
        return tk;
      });
      /***/

    },

    /***/
    "WxRl": function WxRl(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Hungarian [hu]
      //! author : Adam Brunner : https://github.com/adambrunner
      //! author : Peter Viszt  : https://github.com/passatgt
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var weekEndings = 'vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton'.split(' ');

        function translate(number, withoutSuffix, key, isFuture) {
          var num = number;

          switch (key) {
            case 's':
              return isFuture || withoutSuffix ? 'néhány másodperc' : 'néhány másodperce';

            case 'ss':
              return num + (isFuture || withoutSuffix) ? ' másodperc' : ' másodperce';

            case 'm':
              return 'egy' + (isFuture || withoutSuffix ? ' perc' : ' perce');

            case 'mm':
              return num + (isFuture || withoutSuffix ? ' perc' : ' perce');

            case 'h':
              return 'egy' + (isFuture || withoutSuffix ? ' óra' : ' órája');

            case 'hh':
              return num + (isFuture || withoutSuffix ? ' óra' : ' órája');

            case 'd':
              return 'egy' + (isFuture || withoutSuffix ? ' nap' : ' napja');

            case 'dd':
              return num + (isFuture || withoutSuffix ? ' nap' : ' napja');

            case 'M':
              return 'egy' + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');

            case 'MM':
              return num + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');

            case 'y':
              return 'egy' + (isFuture || withoutSuffix ? ' év' : ' éve');

            case 'yy':
              return num + (isFuture || withoutSuffix ? ' év' : ' éve');
          }

          return '';
        }

        function week(isFuture) {
          return (isFuture ? '' : '[múlt] ') + '[' + weekEndings[this.day()] + '] LT[-kor]';
        }

        var hu = moment.defineLocale('hu', {
          months: 'január_február_március_április_május_június_július_augusztus_szeptember_október_november_december'.split('_'),
          monthsShort: 'jan._feb._márc._ápr._máj._jún._júl._aug._szept._okt._nov._dec.'.split('_'),
          monthsParseExact: true,
          weekdays: 'vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat'.split('_'),
          weekdaysShort: 'vas_hét_kedd_sze_csüt_pén_szo'.split('_'),
          weekdaysMin: 'v_h_k_sze_cs_p_szo'.split('_'),
          longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'YYYY.MM.DD.',
            LL: 'YYYY. MMMM D.',
            LLL: 'YYYY. MMMM D. H:mm',
            LLLL: 'YYYY. MMMM D., dddd H:mm'
          },
          meridiemParse: /de|du/i,
          isPM: function isPM(input) {
            return input.charAt(1).toLowerCase() === 'u';
          },
          meridiem: function meridiem(hours, minutes, isLower) {
            if (hours < 12) {
              return isLower === true ? 'de' : 'DE';
            } else {
              return isLower === true ? 'du' : 'DU';
            }
          },
          calendar: {
            sameDay: '[ma] LT[-kor]',
            nextDay: '[holnap] LT[-kor]',
            nextWeek: function nextWeek() {
              return week.call(this, true);
            },
            lastDay: '[tegnap] LT[-kor]',
            lastWeek: function lastWeek() {
              return week.call(this, false);
            },
            sameElse: 'L'
          },
          relativeTime: {
            future: '%s múlva',
            past: '%s',
            s: translate,
            ss: translate,
            m: translate,
            mm: translate,
            h: translate,
            hh: translate,
            d: translate,
            dd: translate,
            M: translate,
            MM: translate,
            y: translate,
            yy: translate
          },
          dayOfMonthOrdinalParse: /\d{1,2}\./,
          ordinal: '%d.',
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.

          }
        });
        return hu;
      });
      /***/

    },

    /***/
    "X709": function X709(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Swedish [sv]
      //! author : Jens Alm : https://github.com/ulmus
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var sv = moment.defineLocale('sv', {
          months: 'januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december'.split('_'),
          monthsShort: 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
          weekdays: 'söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag'.split('_'),
          weekdaysShort: 'sön_mån_tis_ons_tor_fre_lör'.split('_'),
          weekdaysMin: 'sö_må_ti_on_to_fr_lö'.split('_'),
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY-MM-DD',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY [kl.] HH:mm',
            LLLL: 'dddd D MMMM YYYY [kl.] HH:mm',
            lll: 'D MMM YYYY HH:mm',
            llll: 'ddd D MMM YYYY HH:mm'
          },
          calendar: {
            sameDay: '[Idag] LT',
            nextDay: '[Imorgon] LT',
            lastDay: '[Igår] LT',
            nextWeek: '[På] dddd LT',
            lastWeek: '[I] dddd[s] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: 'om %s',
            past: 'för %s sedan',
            s: 'några sekunder',
            ss: '%d sekunder',
            m: 'en minut',
            mm: '%d minuter',
            h: 'en timme',
            hh: '%d timmar',
            d: 'en dag',
            dd: '%d dagar',
            M: 'en månad',
            MM: '%d månader',
            y: 'ett år',
            yy: '%d år'
          },
          dayOfMonthOrdinalParse: /\d{1,2}(\:e|\:a)/,
          ordinal: function ordinal(number) {
            var b = number % 10,
                output = ~~(number % 100 / 10) === 1 ? ':e' : b === 1 ? ':a' : b === 2 ? ':a' : b === 3 ? ':e' : ':e';
            return number + output;
          },
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.

          }
        });
        return sv;
      });
      /***/

    },

    /***/
    "XDpg": function XDpg(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Chinese (China) [zh-cn]
      //! author : suupic : https://github.com/suupic
      //! author : Zeno Zeng : https://github.com/zenozeng
      //! author : uu109 : https://github.com/uu109
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var zhCn = moment.defineLocale('zh-cn', {
          months: '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
          monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
          weekdays: '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
          weekdaysShort: '周日_周一_周二_周三_周四_周五_周六'.split('_'),
          weekdaysMin: '日_一_二_三_四_五_六'.split('_'),
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY/MM/DD',
            LL: 'YYYY年M月D日',
            LLL: 'YYYY年M月D日Ah点mm分',
            LLLL: 'YYYY年M月D日ddddAh点mm分',
            l: 'YYYY/M/D',
            ll: 'YYYY年M月D日',
            lll: 'YYYY年M月D日 HH:mm',
            llll: 'YYYY年M月D日dddd HH:mm'
          },
          meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
          meridiemHour: function meridiemHour(hour, meridiem) {
            if (hour === 12) {
              hour = 0;
            }

            if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
              return hour;
            } else if (meridiem === '下午' || meridiem === '晚上') {
              return hour + 12;
            } else {
              // '中午'
              return hour >= 11 ? hour : hour + 12;
            }
          },
          meridiem: function meridiem(hour, minute, isLower) {
            var hm = hour * 100 + minute;

            if (hm < 600) {
              return '凌晨';
            } else if (hm < 900) {
              return '早上';
            } else if (hm < 1130) {
              return '上午';
            } else if (hm < 1230) {
              return '中午';
            } else if (hm < 1800) {
              return '下午';
            } else {
              return '晚上';
            }
          },
          calendar: {
            sameDay: '[今天]LT',
            nextDay: '[明天]LT',
            nextWeek: function nextWeek(now) {
              if (now.week() !== this.week()) {
                return '[下]dddLT';
              } else {
                return '[本]dddLT';
              }
            },
            lastDay: '[昨天]LT',
            lastWeek: function lastWeek(now) {
              if (this.week() !== now.week()) {
                return '[上]dddLT';
              } else {
                return '[本]dddLT';
              }
            },
            sameElse: 'L'
          },
          dayOfMonthOrdinalParse: /\d{1,2}(日|月|周)/,
          ordinal: function ordinal(number, period) {
            switch (period) {
              case 'd':
              case 'D':
              case 'DDD':
                return number + '日';

              case 'M':
                return number + '月';

              case 'w':
              case 'W':
                return number + '周';

              default:
                return number;
            }
          },
          relativeTime: {
            future: '%s后',
            past: '%s前',
            s: '几秒',
            ss: '%d 秒',
            m: '1 分钟',
            mm: '%d 分钟',
            h: '1 小时',
            hh: '%d 小时',
            d: '1 天',
            dd: '%d 天',
            w: '1 周',
            ww: '%d 周',
            M: '1 个月',
            MM: '%d 个月',
            y: '1 年',
            yy: '%d 年'
          },
          week: {
            // GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效
            dow: 1,
            // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.

          }
        });
        return zhCn;
      });
      /***/

    },

    /***/
    "XLvN": function XLvN(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Telugu [te]
      //! author : Krishna Chaitanya Thota : https://github.com/kcthota
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var te = moment.defineLocale('te', {
          months: 'జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జులై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్'.split('_'),
          monthsShort: 'జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జులై_ఆగ._సెప్._అక్టో._నవ._డిసె.'.split('_'),
          monthsParseExact: true,
          weekdays: 'ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం'.split('_'),
          weekdaysShort: 'ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని'.split('_'),
          weekdaysMin: 'ఆ_సో_మం_బు_గు_శు_శ'.split('_'),
          longDateFormat: {
            LT: 'A h:mm',
            LTS: 'A h:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm',
            LLLL: 'dddd, D MMMM YYYY, A h:mm'
          },
          calendar: {
            sameDay: '[నేడు] LT',
            nextDay: '[రేపు] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[నిన్న] LT',
            lastWeek: '[గత] dddd, LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: '%s లో',
            past: '%s క్రితం',
            s: 'కొన్ని క్షణాలు',
            ss: '%d సెకన్లు',
            m: 'ఒక నిమిషం',
            mm: '%d నిమిషాలు',
            h: 'ఒక గంట',
            hh: '%d గంటలు',
            d: 'ఒక రోజు',
            dd: '%d రోజులు',
            M: 'ఒక నెల',
            MM: '%d నెలలు',
            y: 'ఒక సంవత్సరం',
            yy: '%d సంవత్సరాలు'
          },
          dayOfMonthOrdinalParse: /\d{1,2}వ/,
          ordinal: '%dవ',
          meridiemParse: /రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,
          meridiemHour: function meridiemHour(hour, meridiem) {
            if (hour === 12) {
              hour = 0;
            }

            if (meridiem === 'రాత్రి') {
              return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'ఉదయం') {
              return hour;
            } else if (meridiem === 'మధ్యాహ్నం') {
              return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'సాయంత్రం') {
              return hour + 12;
            }
          },
          meridiem: function meridiem(hour, minute, isLower) {
            if (hour < 4) {
              return 'రాత్రి';
            } else if (hour < 10) {
              return 'ఉదయం';
            } else if (hour < 17) {
              return 'మధ్యాహ్నం';
            } else if (hour < 20) {
              return 'సాయంత్రం';
            } else {
              return 'రాత్రి';
            }
          },
          week: {
            dow: 0,
            // Sunday is the first day of the week.
            doy: 6 // The week that contains Jan 6th is the first week of the year.

          }
        });
        return te;
      });
      /***/

    },

    /***/
    "Xmc7": function Xmc7(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TypographyComponent", function () {
        return TypographyComponent;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _raw_loader_typography_component_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! raw-loader!./typography.component.html */
      "cH3D");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");

      var TypographyComponent = function TypographyComponent() {
        _classCallCheck(this, TypographyComponent);
      };

      TypographyComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Component"])({
        selector: 'typography-cmp',
        template: _raw_loader_typography_component_html__WEBPACK_IMPORTED_MODULE_1__["default"]
      })], TypographyComponent);
      /***/
    },

    /***/
    "YRex": function YRex(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Uyghur (China) [ug-cn]
      //! author: boyaq : https://github.com/boyaq
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var ugCn = moment.defineLocale('ug-cn', {
          months: 'يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر'.split('_'),
          monthsShort: 'يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر'.split('_'),
          weekdays: 'يەكشەنبە_دۈشەنبە_سەيشەنبە_چارشەنبە_پەيشەنبە_جۈمە_شەنبە'.split('_'),
          weekdaysShort: 'يە_دۈ_سە_چا_پە_جۈ_شە'.split('_'),
          weekdaysMin: 'يە_دۈ_سە_چا_پە_جۈ_شە'.split('_'),
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY-MM-DD',
            LL: 'YYYY-يىلىM-ئاينىڭD-كۈنى',
            LLL: 'YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm',
            LLLL: 'dddd، YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm'
          },
          meridiemParse: /يېرىم كېچە|سەھەر|چۈشتىن بۇرۇن|چۈش|چۈشتىن كېيىن|كەچ/,
          meridiemHour: function meridiemHour(hour, meridiem) {
            if (hour === 12) {
              hour = 0;
            }

            if (meridiem === 'يېرىم كېچە' || meridiem === 'سەھەر' || meridiem === 'چۈشتىن بۇرۇن') {
              return hour;
            } else if (meridiem === 'چۈشتىن كېيىن' || meridiem === 'كەچ') {
              return hour + 12;
            } else {
              return hour >= 11 ? hour : hour + 12;
            }
          },
          meridiem: function meridiem(hour, minute, isLower) {
            var hm = hour * 100 + minute;

            if (hm < 600) {
              return 'يېرىم كېچە';
            } else if (hm < 900) {
              return 'سەھەر';
            } else if (hm < 1130) {
              return 'چۈشتىن بۇرۇن';
            } else if (hm < 1230) {
              return 'چۈش';
            } else if (hm < 1800) {
              return 'چۈشتىن كېيىن';
            } else {
              return 'كەچ';
            }
          },
          calendar: {
            sameDay: '[بۈگۈن سائەت] LT',
            nextDay: '[ئەتە سائەت] LT',
            nextWeek: '[كېلەركى] dddd [سائەت] LT',
            lastDay: '[تۆنۈگۈن] LT',
            lastWeek: '[ئالدىنقى] dddd [سائەت] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: '%s كېيىن',
            past: '%s بۇرۇن',
            s: 'نەچچە سېكونت',
            ss: '%d سېكونت',
            m: 'بىر مىنۇت',
            mm: '%d مىنۇت',
            h: 'بىر سائەت',
            hh: '%d سائەت',
            d: 'بىر كۈن',
            dd: '%d كۈن',
            M: 'بىر ئاي',
            MM: '%d ئاي',
            y: 'بىر يىل',
            yy: '%d يىل'
          },
          dayOfMonthOrdinalParse: /\d{1,2}(-كۈنى|-ئاي|-ھەپتە)/,
          ordinal: function ordinal(number, period) {
            switch (period) {
              case 'd':
              case 'D':
              case 'DDD':
                return number + '-كۈنى';

              case 'w':
              case 'W':
                return number + '-ھەپتە';

              default:
                return number;
            }
          },
          preparse: function preparse(string) {
            return string.replace(/،/g, ',');
          },
          postformat: function postformat(string) {
            return string.replace(/,/g, '،');
          },
          week: {
            // GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效
            dow: 1,
            // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.

          }
        });
        return ugCn;
      });
      /***/

    },

    /***/
    "YuTi": function YuTi(module, exports) {
      module.exports = function (module) {
        if (!module.webpackPolyfill) {
          module.deprecate = function () {};

          module.paths = []; // module.parent = undefined by default

          if (!module.children) module.children = [];
          Object.defineProperty(module, "loaded", {
            enumerable: true,
            get: function get() {
              return module.l;
            }
          });
          Object.defineProperty(module, "id", {
            enumerable: true,
            get: function get() {
              return module.i;
            }
          });
          module.webpackPolyfill = 1;
        }

        return module;
      };
      /***/

    },

    /***/
    "Z4QM": function Z4QM(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Sindhi [sd]
      //! author : Narain Sagar : https://github.com/narainsagar
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var months = ['جنوري', 'فيبروري', 'مارچ', 'اپريل', 'مئي', 'جون', 'جولاءِ', 'آگسٽ', 'سيپٽمبر', 'آڪٽوبر', 'نومبر', 'ڊسمبر'],
            days = ['آچر', 'سومر', 'اڱارو', 'اربع', 'خميس', 'جمع', 'ڇنڇر'];
        var sd = moment.defineLocale('sd', {
          months: months,
          monthsShort: months,
          weekdays: days,
          weekdaysShort: days,
          weekdaysMin: days,
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd، D MMMM YYYY HH:mm'
          },
          meridiemParse: /صبح|شام/,
          isPM: function isPM(input) {
            return 'شام' === input;
          },
          meridiem: function meridiem(hour, minute, isLower) {
            if (hour < 12) {
              return 'صبح';
            }

            return 'شام';
          },
          calendar: {
            sameDay: '[اڄ] LT',
            nextDay: '[سڀاڻي] LT',
            nextWeek: 'dddd [اڳين هفتي تي] LT',
            lastDay: '[ڪالهه] LT',
            lastWeek: '[گزريل هفتي] dddd [تي] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: '%s پوء',
            past: '%s اڳ',
            s: 'چند سيڪنڊ',
            ss: '%d سيڪنڊ',
            m: 'هڪ منٽ',
            mm: '%d منٽ',
            h: 'هڪ ڪلاڪ',
            hh: '%d ڪلاڪ',
            d: 'هڪ ڏينهن',
            dd: '%d ڏينهن',
            M: 'هڪ مهينو',
            MM: '%d مهينا',
            y: 'هڪ سال',
            yy: '%d سال'
          },
          preparse: function preparse(string) {
            return string.replace(/،/g, ',');
          },
          postformat: function postformat(string) {
            return string.replace(/,/g, '،');
          },
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.

          }
        });
        return sd;
      });
      /***/

    },

    /***/
    "ZAMP": function ZAMP(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Malay [ms-my]
      //! note : DEPRECATED, the correct one is [ms]
      //! author : Weldan Jamili : https://github.com/weldan
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var msMy = moment.defineLocale('ms-my', {
          months: 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split('_'),
          monthsShort: 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
          weekdays: 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
          weekdaysShort: 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
          weekdaysMin: 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
          longDateFormat: {
            LT: 'HH.mm',
            LTS: 'HH.mm.ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY [pukul] HH.mm',
            LLLL: 'dddd, D MMMM YYYY [pukul] HH.mm'
          },
          meridiemParse: /pagi|tengahari|petang|malam/,
          meridiemHour: function meridiemHour(hour, meridiem) {
            if (hour === 12) {
              hour = 0;
            }

            if (meridiem === 'pagi') {
              return hour;
            } else if (meridiem === 'tengahari') {
              return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'petang' || meridiem === 'malam') {
              return hour + 12;
            }
          },
          meridiem: function meridiem(hours, minutes, isLower) {
            if (hours < 11) {
              return 'pagi';
            } else if (hours < 15) {
              return 'tengahari';
            } else if (hours < 19) {
              return 'petang';
            } else {
              return 'malam';
            }
          },
          calendar: {
            sameDay: '[Hari ini pukul] LT',
            nextDay: '[Esok pukul] LT',
            nextWeek: 'dddd [pukul] LT',
            lastDay: '[Kelmarin pukul] LT',
            lastWeek: 'dddd [lepas pukul] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: 'dalam %s',
            past: '%s yang lepas',
            s: 'beberapa saat',
            ss: '%d saat',
            m: 'seminit',
            mm: '%d minit',
            h: 'sejam',
            hh: '%d jam',
            d: 'sehari',
            dd: '%d hari',
            M: 'sebulan',
            MM: '%d bulan',
            y: 'setahun',
            yy: '%d tahun'
          },
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 7th is the first week of the year.

          }
        });
        return msMy;
      });
      /***/

    },

    /***/
    "Zduo": function Zduo(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Esperanto [eo]
      //! author : Colin Dean : https://github.com/colindean
      //! author : Mia Nordentoft Imperatori : https://github.com/miestasmia
      //! comment : miestasmia corrected the translation by colindean
      //! comment : Vivakvo corrected the translation by colindean and miestasmia
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var eo = moment.defineLocale('eo', {
          months: 'januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro'.split('_'),
          monthsShort: 'jan_feb_mart_apr_maj_jun_jul_aŭg_sept_okt_nov_dec'.split('_'),
          weekdays: 'dimanĉo_lundo_mardo_merkredo_ĵaŭdo_vendredo_sabato'.split('_'),
          weekdaysShort: 'dim_lun_mard_merk_ĵaŭ_ven_sab'.split('_'),
          weekdaysMin: 'di_lu_ma_me_ĵa_ve_sa'.split('_'),
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY-MM-DD',
            LL: '[la] D[-an de] MMMM, YYYY',
            LLL: '[la] D[-an de] MMMM, YYYY HH:mm',
            LLLL: 'dddd[n], [la] D[-an de] MMMM, YYYY HH:mm',
            llll: 'ddd, [la] D[-an de] MMM, YYYY HH:mm'
          },
          meridiemParse: /[ap]\.t\.m/i,
          isPM: function isPM(input) {
            return input.charAt(0).toLowerCase() === 'p';
          },
          meridiem: function meridiem(hours, minutes, isLower) {
            if (hours > 11) {
              return isLower ? 'p.t.m.' : 'P.T.M.';
            } else {
              return isLower ? 'a.t.m.' : 'A.T.M.';
            }
          },
          calendar: {
            sameDay: '[Hodiaŭ je] LT',
            nextDay: '[Morgaŭ je] LT',
            nextWeek: 'dddd[n je] LT',
            lastDay: '[Hieraŭ je] LT',
            lastWeek: '[pasintan] dddd[n je] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: 'post %s',
            past: 'antaŭ %s',
            s: 'kelkaj sekundoj',
            ss: '%d sekundoj',
            m: 'unu minuto',
            mm: '%d minutoj',
            h: 'unu horo',
            hh: '%d horoj',
            d: 'unu tago',
            //ne 'diurno', ĉar estas uzita por proksimumo
            dd: '%d tagoj',
            M: 'unu monato',
            MM: '%d monatoj',
            y: 'unu jaro',
            yy: '%d jaroj'
          },
          dayOfMonthOrdinalParse: /\d{1,2}a/,
          ordinal: '%da',
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 7th is the first week of the year.

          }
        });
        return eo;
      });
      /***/

    },

    /***/
    "Zk1H": function Zk1H(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "GlobalServices", function () {
        return GlobalServices;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var _environments_environment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../../../environments/environment */
      "AytR");
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! rxjs */
      "qCKp");
      /* harmony import */


      var _angular_common_http__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/common/http */
      "tk/3");

      var GlobalServices = /*#__PURE__*/function () {
        function GlobalServices(http) {
          _classCallCheck(this, GlobalServices);

          this.http = http;
          this.Url = _environments_environment__WEBPACK_IMPORTED_MODULE_2__["environment"].Url;
          this.spinnerActive = new rxjs__WEBPACK_IMPORTED_MODULE_3__["Subject"]();
          this.spinnerActiveObs = this.spinnerActive.asObservable();
        }

        _createClass(GlobalServices, [{
          key: "httpServicesResponse",
          value: function httpServicesResponse(data, service) {
            var url = service;
            var headers;
            headers = new _angular_common_http__WEBPACK_IMPORTED_MODULE_4__["HttpHeaders"]({
              'Content-Type': 'text/json',
              'Accept': 'application/json'
            });
            return this.http.post(url, JSON.stringify(data), {
              headers: headers
            });
          }
        }]);

        return GlobalServices;
      }();

      GlobalServices.ctorParameters = function () {
        return [{
          type: _angular_common_http__WEBPACK_IMPORTED_MODULE_4__["HttpClient"]
        }];
      };

      GlobalServices = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
      }), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [_angular_common_http__WEBPACK_IMPORTED_MODULE_4__["HttpClient"]])], GlobalServices);
      /***/
    },

    /***/
    "aIdf": function aIdf(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Breton [br]
      //! author : Jean-Baptiste Le Duigou : https://github.com/jbleduigou
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        function relativeTimeWithMutation(number, withoutSuffix, key) {
          var format = {
            mm: 'munutenn',
            MM: 'miz',
            dd: 'devezh'
          };
          return number + ' ' + mutation(format[key], number);
        }

        function specialMutationForYears(number) {
          switch (lastNumber(number)) {
            case 1:
            case 3:
            case 4:
            case 5:
            case 9:
              return number + ' bloaz';

            default:
              return number + ' vloaz';
          }
        }

        function lastNumber(number) {
          if (number > 9) {
            return lastNumber(number % 10);
          }

          return number;
        }

        function mutation(text, number) {
          if (number === 2) {
            return softMutation(text);
          }

          return text;
        }

        function softMutation(text) {
          var mutationTable = {
            m: 'v',
            b: 'v',
            d: 'z'
          };

          if (mutationTable[text.charAt(0)] === undefined) {
            return text;
          }

          return mutationTable[text.charAt(0)] + text.substring(1);
        }

        var monthsParse = [/^gen/i, /^c[ʼ\']hwe/i, /^meu/i, /^ebr/i, /^mae/i, /^(mez|eve)/i, /^gou/i, /^eos/i, /^gwe/i, /^her/i, /^du/i, /^ker/i],
            monthsRegex = /^(genver|c[ʼ\']hwevrer|meurzh|ebrel|mae|mezheven|gouere|eost|gwengolo|here|du|kerzu|gen|c[ʼ\']hwe|meu|ebr|mae|eve|gou|eos|gwe|her|du|ker)/i,
            monthsStrictRegex = /^(genver|c[ʼ\']hwevrer|meurzh|ebrel|mae|mezheven|gouere|eost|gwengolo|here|du|kerzu)/i,
            monthsShortStrictRegex = /^(gen|c[ʼ\']hwe|meu|ebr|mae|eve|gou|eos|gwe|her|du|ker)/i,
            fullWeekdaysParse = [/^sul/i, /^lun/i, /^meurzh/i, /^merc[ʼ\']her/i, /^yaou/i, /^gwener/i, /^sadorn/i],
            shortWeekdaysParse = [/^Sul/i, /^Lun/i, /^Meu/i, /^Mer/i, /^Yao/i, /^Gwe/i, /^Sad/i],
            minWeekdaysParse = [/^Su/i, /^Lu/i, /^Me([^r]|$)/i, /^Mer/i, /^Ya/i, /^Gw/i, /^Sa/i];
        var br = moment.defineLocale('br', {
          months: 'Genver_Cʼhwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu'.split('_'),
          monthsShort: 'Gen_Cʼhwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker'.split('_'),
          weekdays: 'Sul_Lun_Meurzh_Mercʼher_Yaou_Gwener_Sadorn'.split('_'),
          weekdaysShort: 'Sul_Lun_Meu_Mer_Yao_Gwe_Sad'.split('_'),
          weekdaysMin: 'Su_Lu_Me_Mer_Ya_Gw_Sa'.split('_'),
          weekdaysParse: minWeekdaysParse,
          fullWeekdaysParse: fullWeekdaysParse,
          shortWeekdaysParse: shortWeekdaysParse,
          minWeekdaysParse: minWeekdaysParse,
          monthsRegex: monthsRegex,
          monthsShortRegex: monthsRegex,
          monthsStrictRegex: monthsStrictRegex,
          monthsShortStrictRegex: monthsShortStrictRegex,
          monthsParse: monthsParse,
          longMonthsParse: monthsParse,
          shortMonthsParse: monthsParse,
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D [a viz] MMMM YYYY',
            LLL: 'D [a viz] MMMM YYYY HH:mm',
            LLLL: 'dddd, D [a viz] MMMM YYYY HH:mm'
          },
          calendar: {
            sameDay: '[Hiziv da] LT',
            nextDay: '[Warcʼhoazh da] LT',
            nextWeek: 'dddd [da] LT',
            lastDay: '[Decʼh da] LT',
            lastWeek: 'dddd [paset da] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: 'a-benn %s',
            past: '%s ʼzo',
            s: 'un nebeud segondennoù',
            ss: '%d eilenn',
            m: 'ur vunutenn',
            mm: relativeTimeWithMutation,
            h: 'un eur',
            hh: '%d eur',
            d: 'un devezh',
            dd: relativeTimeWithMutation,
            M: 'ur miz',
            MM: relativeTimeWithMutation,
            y: 'ur bloaz',
            yy: specialMutationForYears
          },
          dayOfMonthOrdinalParse: /\d{1,2}(añ|vet)/,
          ordinal: function ordinal(number) {
            var output = number === 1 ? 'añ' : 'vet';
            return number + output;
          },
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.

          },
          meridiemParse: /a.m.|g.m./,
          // goude merenn | a-raok merenn
          isPM: function isPM(token) {
            return token === 'g.m.';
          },
          meridiem: function meridiem(hour, minute, isLower) {
            return hour < 12 ? 'a.m.' : 'g.m.';
          }
        });
        return br;
      });
      /***/

    },

    /***/
    "aIsn": function aIsn(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Maori [mi]
      //! author : John Corrigan <robbiecloset@gmail.com> : https://github.com/johnideal
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var mi = moment.defineLocale('mi', {
          months: 'Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea'.split('_'),
          monthsShort: 'Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki'.split('_'),
          monthsRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
          monthsStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
          monthsShortRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
          monthsShortStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,
          weekdays: 'Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei'.split('_'),
          weekdaysShort: 'Ta_Ma_Tū_We_Tāi_Pa_Hā'.split('_'),
          weekdaysMin: 'Ta_Ma_Tū_We_Tāi_Pa_Hā'.split('_'),
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY [i] HH:mm',
            LLLL: 'dddd, D MMMM YYYY [i] HH:mm'
          },
          calendar: {
            sameDay: '[i teie mahana, i] LT',
            nextDay: '[apopo i] LT',
            nextWeek: 'dddd [i] LT',
            lastDay: '[inanahi i] LT',
            lastWeek: 'dddd [whakamutunga i] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: 'i roto i %s',
            past: '%s i mua',
            s: 'te hēkona ruarua',
            ss: '%d hēkona',
            m: 'he meneti',
            mm: '%d meneti',
            h: 'te haora',
            hh: '%d haora',
            d: 'he ra',
            dd: '%d ra',
            M: 'he marama',
            MM: '%d marama',
            y: 'he tau',
            yy: '%d tau'
          },
          dayOfMonthOrdinalParse: /\d{1,2}º/,
          ordinal: '%dº',
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.

          }
        });
        return mi;
      });
      /***/

    },

    /***/
    "aQkU": function aQkU(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Macedonian [mk]
      //! author : Borislav Mickov : https://github.com/B0k0
      //! author : Sashko Todorov : https://github.com/bkyceh
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var mk = moment.defineLocale('mk', {
          months: 'јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември'.split('_'),
          monthsShort: 'јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек'.split('_'),
          weekdays: 'недела_понеделник_вторник_среда_четврток_петок_сабота'.split('_'),
          weekdaysShort: 'нед_пон_вто_сре_чет_пет_саб'.split('_'),
          weekdaysMin: 'нe_пo_вт_ср_че_пе_сa'.split('_'),
          longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'D.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY H:mm',
            LLLL: 'dddd, D MMMM YYYY H:mm'
          },
          calendar: {
            sameDay: '[Денес во] LT',
            nextDay: '[Утре во] LT',
            nextWeek: '[Во] dddd [во] LT',
            lastDay: '[Вчера во] LT',
            lastWeek: function lastWeek() {
              switch (this.day()) {
                case 0:
                case 3:
                case 6:
                  return '[Изминатата] dddd [во] LT';

                case 1:
                case 2:
                case 4:
                case 5:
                  return '[Изминатиот] dddd [во] LT';
              }
            },
            sameElse: 'L'
          },
          relativeTime: {
            future: 'за %s',
            past: 'пред %s',
            s: 'неколку секунди',
            ss: '%d секунди',
            m: 'една минута',
            mm: '%d минути',
            h: 'еден час',
            hh: '%d часа',
            d: 'еден ден',
            dd: '%d дена',
            M: 'еден месец',
            MM: '%d месеци',
            y: 'една година',
            yy: '%d години'
          },
          dayOfMonthOrdinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
          ordinal: function ordinal(number) {
            var lastDigit = number % 10,
                last2Digits = number % 100;

            if (number === 0) {
              return number + '-ев';
            } else if (last2Digits === 0) {
              return number + '-ен';
            } else if (last2Digits > 10 && last2Digits < 20) {
              return number + '-ти';
            } else if (lastDigit === 1) {
              return number + '-ви';
            } else if (lastDigit === 2) {
              return number + '-ри';
            } else if (lastDigit === 7 || lastDigit === 8) {
              return number + '-ми';
            } else {
              return number + '-ти';
            }
          },
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 7th is the first week of the year.

          }
        });
        return mk;
      });
      /***/

    },

    /***/
    "b1Dy": function b1Dy(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : English (New Zealand) [en-nz]
      //! author : Luke McGregor : https://github.com/lukemcgregor
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var enNz = moment.defineLocale('en-nz', {
          months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
          monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
          weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
          weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
          weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
          longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY h:mm A',
            LLLL: 'dddd, D MMMM YYYY h:mm A'
          },
          calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            ss: '%d seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years'
          },
          dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
          ordinal: function ordinal(number) {
            var b = number % 10,
                output = ~~(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
            return number + output;
          },
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.

          }
        });
        return enNz;
      });
      /***/

    },

    /***/
    "bOMt": function bOMt(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Norwegian Bokmål [nb]
      //! authors : Espen Hovlandsdal : https://github.com/rexxars
      //!           Sigurd Gartmann : https://github.com/sigurdga
      //!           Stephen Ramthun : https://github.com/stephenramthun
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var nb = moment.defineLocale('nb', {
          months: 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
          monthsShort: 'jan._feb._mars_apr._mai_juni_juli_aug._sep._okt._nov._des.'.split('_'),
          monthsParseExact: true,
          weekdays: 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
          weekdaysShort: 'sø._ma._ti._on._to._fr._lø.'.split('_'),
          weekdaysMin: 'sø_ma_ti_on_to_fr_lø'.split('_'),
          weekdaysParseExact: true,
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY [kl.] HH:mm',
            LLLL: 'dddd D. MMMM YYYY [kl.] HH:mm'
          },
          calendar: {
            sameDay: '[i dag kl.] LT',
            nextDay: '[i morgen kl.] LT',
            nextWeek: 'dddd [kl.] LT',
            lastDay: '[i går kl.] LT',
            lastWeek: '[forrige] dddd [kl.] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: 'om %s',
            past: '%s siden',
            s: 'noen sekunder',
            ss: '%d sekunder',
            m: 'ett minutt',
            mm: '%d minutter',
            h: 'en time',
            hh: '%d timer',
            d: 'en dag',
            dd: '%d dager',
            w: 'en uke',
            ww: '%d uker',
            M: 'en måned',
            MM: '%d måneder',
            y: 'ett år',
            yy: '%d år'
          },
          dayOfMonthOrdinalParse: /\d{1,2}\./,
          ordinal: '%d.',
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.

          }
        });
        return nb;
      });
      /***/

    },

    /***/
    "bXm7": function bXm7(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Kazakh [kk]
      //! authors : Nurlan Rakhimzhanov : https://github.com/nurlan
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var suffixes = {
          0: '-ші',
          1: '-ші',
          2: '-ші',
          3: '-ші',
          4: '-ші',
          5: '-ші',
          6: '-шы',
          7: '-ші',
          8: '-ші',
          9: '-шы',
          10: '-шы',
          20: '-шы',
          30: '-шы',
          40: '-шы',
          50: '-ші',
          60: '-шы',
          70: '-ші',
          80: '-ші',
          90: '-шы',
          100: '-ші'
        };
        var kk = moment.defineLocale('kk', {
          months: 'қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан'.split('_'),
          monthsShort: 'қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел'.split('_'),
          weekdays: 'жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі'.split('_'),
          weekdaysShort: 'жек_дүй_сей_сәр_бей_жұм_сен'.split('_'),
          weekdaysMin: 'жк_дй_сй_ср_бй_жм_сн'.split('_'),
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
          },
          calendar: {
            sameDay: '[Бүгін сағат] LT',
            nextDay: '[Ертең сағат] LT',
            nextWeek: 'dddd [сағат] LT',
            lastDay: '[Кеше сағат] LT',
            lastWeek: '[Өткен аптаның] dddd [сағат] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: '%s ішінде',
            past: '%s бұрын',
            s: 'бірнеше секунд',
            ss: '%d секунд',
            m: 'бір минут',
            mm: '%d минут',
            h: 'бір сағат',
            hh: '%d сағат',
            d: 'бір күн',
            dd: '%d күн',
            M: 'бір ай',
            MM: '%d ай',
            y: 'бір жыл',
            yy: '%d жыл'
          },
          dayOfMonthOrdinalParse: /\d{1,2}-(ші|шы)/,
          ordinal: function ordinal(number) {
            var a = number % 10,
                b = number >= 100 ? 100 : null;
            return number + (suffixes[number] || suffixes[a] || suffixes[b]);
          },
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 7th is the first week of the year.

          }
        });
        return kk;
      });
      /***/

    },

    /***/
    "bYM6": function bYM6(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale  :  Arabic (Tunisia) [ar-tn]
      //! author : Nader Toukabri : https://github.com/naderio
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var arTn = moment.defineLocale('ar-tn', {
          months: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
          monthsShort: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
          weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
          weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
          weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
          weekdaysParseExact: true,
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
          },
          calendar: {
            sameDay: '[اليوم على الساعة] LT',
            nextDay: '[غدا على الساعة] LT',
            nextWeek: 'dddd [على الساعة] LT',
            lastDay: '[أمس على الساعة] LT',
            lastWeek: 'dddd [على الساعة] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: 'في %s',
            past: 'منذ %s',
            s: 'ثوان',
            ss: '%d ثانية',
            m: 'دقيقة',
            mm: '%d دقائق',
            h: 'ساعة',
            hh: '%d ساعات',
            d: 'يوم',
            dd: '%d أيام',
            M: 'شهر',
            MM: '%d أشهر',
            y: 'سنة',
            yy: '%d سنوات'
          },
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.

          }
        });
        return arTn;
      });
      /***/

    },

    /***/
    "bpih": function bpih(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Italian [it]
      //! author : Lorenzo : https://github.com/aliem
      //! author: Mattia Larentis: https://github.com/nostalgiaz
      //! author: Marco : https://github.com/Manfre98
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var it = moment.defineLocale('it', {
          months: 'gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre'.split('_'),
          monthsShort: 'gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic'.split('_'),
          weekdays: 'domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato'.split('_'),
          weekdaysShort: 'dom_lun_mar_mer_gio_ven_sab'.split('_'),
          weekdaysMin: 'do_lu_ma_me_gi_ve_sa'.split('_'),
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
          },
          calendar: {
            sameDay: function sameDay() {
              return '[Oggi a' + (this.hours() > 1 ? 'lle ' : this.hours() === 0 ? ' ' : "ll'") + ']LT';
            },
            nextDay: function nextDay() {
              return '[Domani a' + (this.hours() > 1 ? 'lle ' : this.hours() === 0 ? ' ' : "ll'") + ']LT';
            },
            nextWeek: function nextWeek() {
              return 'dddd [a' + (this.hours() > 1 ? 'lle ' : this.hours() === 0 ? ' ' : "ll'") + ']LT';
            },
            lastDay: function lastDay() {
              return '[Ieri a' + (this.hours() > 1 ? 'lle ' : this.hours() === 0 ? ' ' : "ll'") + ']LT';
            },
            lastWeek: function lastWeek() {
              switch (this.day()) {
                case 0:
                  return '[La scorsa] dddd [a' + (this.hours() > 1 ? 'lle ' : this.hours() === 0 ? ' ' : "ll'") + ']LT';

                default:
                  return '[Lo scorso] dddd [a' + (this.hours() > 1 ? 'lle ' : this.hours() === 0 ? ' ' : "ll'") + ']LT';
              }
            },
            sameElse: 'L'
          },
          relativeTime: {
            future: 'tra %s',
            past: '%s fa',
            s: 'alcuni secondi',
            ss: '%d secondi',
            m: 'un minuto',
            mm: '%d minuti',
            h: "un'ora",
            hh: '%d ore',
            d: 'un giorno',
            dd: '%d giorni',
            w: 'una settimana',
            ww: '%d settimane',
            M: 'un mese',
            MM: '%d mesi',
            y: 'un anno',
            yy: '%d anni'
          },
          dayOfMonthOrdinalParse: /\d{1,2}º/,
          ordinal: '%dº',
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.

          }
        });
        return it;
      });
      /***/

    },

    /***/
    "bxKX": function bxKX(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Italian (Switzerland) [it-ch]
      //! author : xfh : https://github.com/xfh
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var itCh = moment.defineLocale('it-ch', {
          months: 'gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre'.split('_'),
          monthsShort: 'gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic'.split('_'),
          weekdays: 'domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato'.split('_'),
          weekdaysShort: 'dom_lun_mar_mer_gio_ven_sab'.split('_'),
          weekdaysMin: 'do_lu_ma_me_gi_ve_sa'.split('_'),
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
          },
          calendar: {
            sameDay: '[Oggi alle] LT',
            nextDay: '[Domani alle] LT',
            nextWeek: 'dddd [alle] LT',
            lastDay: '[Ieri alle] LT',
            lastWeek: function lastWeek() {
              switch (this.day()) {
                case 0:
                  return '[la scorsa] dddd [alle] LT';

                default:
                  return '[lo scorso] dddd [alle] LT';
              }
            },
            sameElse: 'L'
          },
          relativeTime: {
            future: function future(s) {
              return (/^[0-9].+$/.test(s) ? 'tra' : 'in') + ' ' + s;
            },
            past: '%s fa',
            s: 'alcuni secondi',
            ss: '%d secondi',
            m: 'un minuto',
            mm: '%d minuti',
            h: "un'ora",
            hh: '%d ore',
            d: 'un giorno',
            dd: '%d giorni',
            M: 'un mese',
            MM: '%d mesi',
            y: 'un anno',
            yy: '%d anni'
          },
          dayOfMonthOrdinalParse: /\d{1,2}º/,
          ordinal: '%dº',
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.

          }
        });
        return itCh;
      });
      /***/

    },

    /***/
    "cH3D": function cH3D(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony default export */


      __webpack_exports__["default"] = "<div class=\"row\">\r\n  <div class=\"col-md-12\">\r\n    <div class=\"card\">\r\n      <div class=\"card-header\">\r\n        <h5 class=\"title\">Paper Table Heading</h5>\r\n        <p class=\"category\">Created using Montserrat Font Family</p>\r\n      </div>\r\n      <div class=\"card-body\">\r\n        <div class=\"typography-line\">\r\n          <h1>\r\n            <span>Header 1</span>The Life of Paper Dashboard </h1>\r\n        </div>\r\n        <div class=\"typography-line\">\r\n          <h2>\r\n            <span>Header 2</span>The Life of Paper Dashboard </h2>\r\n        </div>\r\n        <div class=\"typography-line\">\r\n          <h3>\r\n            <span>Header 3</span>The Life of Paper Dashboard </h3>\r\n        </div>\r\n        <div class=\"typography-line\">\r\n          <h4>\r\n            <span>Header 4</span>The Life of Paper Dashboard </h4>\r\n        </div>\r\n        <div class=\"typography-line\">\r\n          <h5>\r\n            <span>Header 5</span>The Life of Paper Dashboard </h5>\r\n        </div>\r\n        <div class=\"typography-line\">\r\n          <h6>\r\n            <span>Header 6</span>The Life of Paper Dashboard </h6>\r\n        </div>\r\n        <div class=\"typography-line\">\r\n          <p>\r\n            <span>Paragraph</span>\r\n            I will be the leader of a company that ends up being worth billions of dollars, because I got the answers. I understand culture. I am the nucleus. I think that’s a responsibility that I have, to push possibilities, to show people, this is the level that things could be at.\r\n          </p>\r\n        </div>\r\n        <div class=\"typography-line\">\r\n          <span>Quote</span>\r\n          <blockquote>\r\n            <p class=\"blockquote blockquote-primary\">\r\n              \"I will be the leader of a company that ends up being worth billions of dollars, because I got the answers. I understand culture. I am the nucleus. I think that’s a responsibility that I have, to push possibilities, to show people, this is the level that things could be at.\"\r\n              <br>\r\n              <br>\r\n              <small>\r\n                - Noaa\r\n              </small>\r\n            </p>\r\n          </blockquote>\r\n        </div>\r\n        <div class=\"typography-line\">\r\n          <span>Muted Text</span>\r\n          <p class=\"text-muted\">\r\n            I will be the leader of a company that ends up being worth billions of dollars, because I got the answers...\r\n          </p>\r\n        </div>\r\n        <div class=\"typography-line\">\r\n          <span>Primary Text</span>\r\n          <p class=\"text-primary\">\r\n            I will be the leader of a company that ends up being worth billions of dollars, because I got the answers...</p>\r\n        </div>\r\n        <div class=\"typography-line\">\r\n          <span>Info Text</span>\r\n          <p class=\"text-info\">\r\n            I will be the leader of a company that ends up being worth billions of dollars, because I got the answers... </p>\r\n        </div>\r\n        <div class=\"typography-line\">\r\n          <span>Success Text</span>\r\n          <p class=\"text-success\">\r\n            I will be the leader of a company that ends up being worth billions of dollars, because I got the answers... </p>\r\n        </div>\r\n        <div class=\"typography-line\">\r\n          <span>Warning Text</span>\r\n          <p class=\"text-warning\">\r\n            I will be the leader of a company that ends up being worth billions of dollars, because I got the answers...\r\n          </p>\r\n        </div>\r\n        <div class=\"typography-line\">\r\n          <span>Danger Text</span>\r\n          <p class=\"text-danger\">\r\n            I will be the leader of a company that ends up being worth billions of dollars, because I got the answers... </p>\r\n        </div>\r\n        <div class=\"typography-line\">\r\n          <h2>\r\n            <span>Small Tag</span>\r\n            Header with small subtitle\r\n            <br>\r\n            <small>Use \"small\" tag for the headers</small>\r\n          </h2>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n";
      /***/
    },

    /***/
    "cRix": function cRix(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Frisian [fy]
      //! author : Robin van der Vliet : https://github.com/robin0van0der0v
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var monthsShortWithDots = 'jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.'.split('_'),
            monthsShortWithoutDots = 'jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_');
        var fy = moment.defineLocale('fy', {
          months: 'jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber'.split('_'),
          monthsShort: function monthsShort(m, format) {
            if (!m) {
              return monthsShortWithDots;
            } else if (/-MMM-/.test(format)) {
              return monthsShortWithoutDots[m.month()];
            } else {
              return monthsShortWithDots[m.month()];
            }
          },
          monthsParseExact: true,
          weekdays: 'snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon'.split('_'),
          weekdaysShort: 'si._mo._ti._wo._to._fr._so.'.split('_'),
          weekdaysMin: 'Si_Mo_Ti_Wo_To_Fr_So'.split('_'),
          weekdaysParseExact: true,
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD-MM-YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
          },
          calendar: {
            sameDay: '[hjoed om] LT',
            nextDay: '[moarn om] LT',
            nextWeek: 'dddd [om] LT',
            lastDay: '[juster om] LT',
            lastWeek: '[ôfrûne] dddd [om] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: 'oer %s',
            past: '%s lyn',
            s: 'in pear sekonden',
            ss: '%d sekonden',
            m: 'ien minút',
            mm: '%d minuten',
            h: 'ien oere',
            hh: '%d oeren',
            d: 'ien dei',
            dd: '%d dagen',
            M: 'ien moanne',
            MM: '%d moannen',
            y: 'ien jier',
            yy: '%d jierren'
          },
          dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
          ordinal: function ordinal(number) {
            return number + (number === 1 || number === 8 || number >= 20 ? 'ste' : 'de');
          },
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.

          }
        });
        return fy;
      });
      /***/

    },

    /***/
    "czMo": function czMo(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : English (Israel) [en-il]
      //! author : Chris Gedrim : https://github.com/chrisgedrim
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var enIl = moment.defineLocale('en-il', {
          months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
          monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
          weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
          weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
          weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
          },
          calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            ss: '%d seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years'
          },
          dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
          ordinal: function ordinal(number) {
            var b = number % 10,
                output = ~~(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
            return number + output;
          }
        });
        return enIl;
      });
      /***/

    },

    /***/
    "d3UM": function d3UM(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MAT_SELECT_CONFIG", function () {
        return MAT_SELECT_CONFIG;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MAT_SELECT_SCROLL_STRATEGY", function () {
        return MAT_SELECT_SCROLL_STRATEGY;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MAT_SELECT_SCROLL_STRATEGY_PROVIDER", function () {
        return MAT_SELECT_SCROLL_STRATEGY_PROVIDER;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY", function () {
        return MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MAT_SELECT_TRIGGER", function () {
        return MAT_SELECT_TRIGGER;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MatSelect", function () {
        return MatSelect;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MatSelectChange", function () {
        return MatSelectChange;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MatSelectModule", function () {
        return MatSelectModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MatSelectTrigger", function () {
        return MatSelectTrigger;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SELECT_ITEM_HEIGHT_EM", function () {
        return SELECT_ITEM_HEIGHT_EM;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SELECT_MULTIPLE_PANEL_PADDING_X", function () {
        return SELECT_MULTIPLE_PANEL_PADDING_X;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SELECT_PANEL_INDENT_PADDING_X", function () {
        return SELECT_PANEL_INDENT_PADDING_X;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SELECT_PANEL_MAX_HEIGHT", function () {
        return SELECT_PANEL_MAX_HEIGHT;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SELECT_PANEL_PADDING_X", function () {
        return SELECT_PANEL_PADDING_X;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SELECT_PANEL_VIEWPORT_PADDING", function () {
        return SELECT_PANEL_VIEWPORT_PADDING;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "matSelectAnimations", function () {
        return matSelectAnimations;
      });
      /* harmony import */


      var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/cdk/overlay */
      "rDax");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/common */
      "ofXK");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var _angular_material_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/material/core */
      "FKr1");
      /* harmony import */


      var _angular_material_form_field__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/material/form-field */
      "kmnG");
      /* harmony import */


      var _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @angular/cdk/scrolling */
      "vxfF");
      /* harmony import */


      var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! @angular/cdk/a11y */
      "u47x");
      /* harmony import */


      var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! @angular/cdk/bidi */
      "cH1L");
      /* harmony import */


      var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! @angular/cdk/coercion */
      "8LU1");
      /* harmony import */


      var _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! @angular/cdk/collections */
      "0EQZ");
      /* harmony import */


      var _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
      /*! @angular/cdk/keycodes */
      "FtGj");
      /* harmony import */


      var _angular_forms__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
      /*! @angular/forms */
      "3Pt+");
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(
      /*! rxjs */
      "qCKp");
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(
      /*! rxjs/operators */
      "kU1M");
      /* harmony import */


      var _angular_animations__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(
      /*! @angular/animations */
      "R0Ic");
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * The following are all the animations for the mat-select component, with each
       * const containing the metadata for one animation.
       *
       * The values below match the implementation of the AngularJS Material mat-select animation.
       * @docs-private
       */


      var _c0 = ["trigger"];
      var _c1 = ["panel"];

      function MatSelect_span_4_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](0, "span", 8);

          _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtext"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtextInterpolate"](ctx_r2.placeholder || "\xA0");
        }
      }

      function MatSelect_span_5_span_1_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](0, "span");

          _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtext"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var ctx_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵnextContext"](2);

          _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtextInterpolate"](ctx_r5.triggerValue || "\xA0");
        }
      }

      function MatSelect_span_5_ng_content_2_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵprojection"](0, 0, ["*ngSwitchCase", "true"]);
        }
      }

      function MatSelect_span_5_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](0, "span", 9);

          _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtemplate"](1, MatSelect_span_5_span_1_Template, 2, 1, "span", 10);

          _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtemplate"](2, MatSelect_span_5_ng_content_2_Template, 1, 0, "ng-content", 11);

          _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵproperty"]("ngSwitch", !!ctx_r3.customTrigger);

          _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](2);

          _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵproperty"]("ngSwitchCase", true);
        }
      }

      function MatSelect_ng_template_8_Template(rf, ctx) {
        if (rf & 1) {
          var _r9 = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵgetCurrentView"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](0, "div", 12);

          _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](1, "div", 13, 14);

          _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵlistener"]("@transformPanel.done", function MatSelect_ng_template_8_Template_div_animation_transformPanel_done_1_listener($event) {
            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵrestoreView"](_r9);

            var ctx_r8 = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵnextContext"]();

            return ctx_r8._panelDoneAnimatingStream.next($event.toState);
          })("keydown", function MatSelect_ng_template_8_Template_div_keydown_1_listener($event) {
            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵrestoreView"](_r9);

            var ctx_r10 = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵnextContext"]();

            return ctx_r10._handleKeydown($event);
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵprojection"](3, 1);

          _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var ctx_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵproperty"]("@transformPanelWrap", undefined);

          _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵclassMapInterpolate1"]("mat-select-panel ", ctx_r4._getPanelTheme(), "");

          _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵstyleProp"]("transform-origin", ctx_r4._transformOrigin)("font-size", ctx_r4._triggerFontSize, "px");

          _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵproperty"]("ngClass", ctx_r4.panelClass)("@transformPanel", ctx_r4.multiple ? "showing-multiple" : "showing");

          _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵattribute"]("id", ctx_r4.id + "-panel")("aria-multiselectable", ctx_r4.multiple)("aria-label", ctx_r4.ariaLabel || null)("aria-labelledby", ctx_r4._getPanelAriaLabelledby());
        }
      }

      var _c2 = [[["mat-select-trigger"]], "*"];
      var _c3 = ["mat-select-trigger", "*"];
      var matSelectAnimations = {
        /**
         * This animation ensures the select's overlay panel animation (transformPanel) is called when
         * closing the select.
         * This is needed due to https://github.com/angular/angular/issues/23302
         */
        transformPanelWrap: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["trigger"])('transformPanelWrap', [Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["transition"])('* => void', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["query"])('@transformPanel', [Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["animateChild"])()], {
          optional: true
        }))]),

        /**
         * This animation transforms the select's overlay panel on and off the page.
         *
         * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it
         * up to 100% on the Y axis, fades in its border, and translates slightly up and to the
         * side to ensure the option text correctly overlaps the trigger text.
         *
         * When the panel is removed from the DOM, it simply fades out linearly.
         */
        transformPanel: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["trigger"])('transformPanel', [Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["state"])('void', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["style"])({
          transform: 'scaleY(0.8)',
          minWidth: '100%',
          opacity: 0
        })), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["state"])('showing', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["style"])({
          opacity: 1,
          minWidth: 'calc(100% + 32px)',
          transform: 'scaleY(1)'
        })), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["state"])('showing-multiple', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["style"])({
          opacity: 1,
          minWidth: 'calc(100% + 64px)',
          transform: 'scaleY(1)'
        })), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["transition"])('void => *', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["animate"])('120ms cubic-bezier(0, 0, 0.2, 1)')), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["transition"])('* => void', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["animate"])('100ms 25ms linear', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["style"])({
          opacity: 0
        })))])
      };
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Returns an exception to be thrown when attempting to change a select's `multiple` option
       * after initialization.
       * @docs-private
       */

      function getMatSelectDynamicMultipleError() {
        return Error('Cannot change `multiple` mode of select after initialization.');
      }
      /**
       * Returns an exception to be thrown when attempting to assign a non-array value to a select
       * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for
       * resetting the value.
       * @docs-private
       */


      function getMatSelectNonArrayValueError() {
        return Error('Value must be an array in multiple-selection mode.');
      }
      /**
       * Returns an exception to be thrown when assigning a non-function value to the comparator
       * used to determine if a value corresponds to an option. Note that whether the function
       * actually takes two values and returns a boolean is not checked.
       */


      function getMatSelectNonFunctionValueError() {
        return Error('`compareWith` must be a function.');
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var nextUniqueId = 0;
      /**
       * The following style constants are necessary to save here in order
       * to properly calculate the alignment of the selected option over
       * the trigger element.
       */

      /** The max height of the select's overlay panel */

      var SELECT_PANEL_MAX_HEIGHT = 256;
      /** The panel's padding on the x-axis */

      var SELECT_PANEL_PADDING_X = 16;
      /** The panel's x axis padding if it is indented (e.g. there is an option group). */

      var SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;
      /** The height of the select items in `em` units. */

      var SELECT_ITEM_HEIGHT_EM = 3; // TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.

      /**
       * Distance between the panel edge and the option text in
       * multi-selection mode.
       *
       * Calculated as:
       * (SELECT_PANEL_PADDING_X * 1.5) + 16 = 40
       * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.
       * The checkbox width is 16px.
       */

      var SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 16;
      /**
       * The select panel will only "fit" inside the viewport if it is positioned at
       * this value or more away from the viewport boundary.
       */

      var SELECT_PANEL_VIEWPORT_PADDING = 8;
      /** Injection token that determines the scroll handling while a select is open. */

      var MAT_SELECT_SCROLL_STRATEGY = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["InjectionToken"]('mat-select-scroll-strategy');
      /** @docs-private */

      function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {
        return function () {
          return overlay.scrollStrategies.reposition();
        };
      }
      /** Injection token that can be used to provide the default options the select module. */


      var MAT_SELECT_CONFIG = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["InjectionToken"]('MAT_SELECT_CONFIG');
      /** @docs-private */

      var MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {
        provide: MAT_SELECT_SCROLL_STRATEGY,
        deps: [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__["Overlay"]],
        useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY
      };
      /** Change event object that is emitted when the select value has changed. */

      var MatSelectChange = function MatSelectChange(
      /** Reference to the select that emitted the change event. */
      source,
      /** Current value of the select that emitted the event. */
      value) {
        _classCallCheck(this, MatSelectChange);

        this.source = source;
        this.value = value;
      }; // Boilerplate for applying mixins to MatSelect.

      /** @docs-private */


      var MatSelectBase = function MatSelectBase(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {
        _classCallCheck(this, MatSelectBase);

        this._elementRef = _elementRef;
        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;
        this._parentForm = _parentForm;
        this._parentFormGroup = _parentFormGroup;
        this.ngControl = ngControl;
      };

      var _MatSelectMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_3__["mixinDisableRipple"])(Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_3__["mixinTabIndex"])(Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_3__["mixinDisabled"])(Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_3__["mixinErrorState"])(MatSelectBase))));
      /**
       * Injection token that can be used to reference instances of `MatSelectTrigger`. It serves as
       * alternative token to the actual `MatSelectTrigger` class which could cause unnecessary
       * retention of the class and its directive metadata.
       */


      var MAT_SELECT_TRIGGER = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["InjectionToken"]('MatSelectTrigger');
      /**
       * Allows the user to customize the trigger that is displayed when the select has a value.
       */

      var MatSelectTrigger = function MatSelectTrigger() {
        _classCallCheck(this, MatSelectTrigger);
      };

      MatSelectTrigger.ɵfac = function MatSelectTrigger_Factory(t) {
        return new (t || MatSelectTrigger)();
      };

      MatSelectTrigger.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineDirective"]({
        type: MatSelectTrigger,
        selectors: [["mat-select-trigger"]],
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵProvidersFeature"]([{
          provide: MAT_SELECT_TRIGGER,
          useExisting: MatSelectTrigger
        }])]
      });
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵsetClassMetadata"](MatSelectTrigger, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Directive"],
          args: [{
            selector: 'mat-select-trigger',
            providers: [{
              provide: MAT_SELECT_TRIGGER,
              useExisting: MatSelectTrigger
            }]
          }]
        }], null, null);
      })();

      var MatSelect = /*#__PURE__*/function (_MatSelectMixinBase2) {
        _inherits(MatSelect, _MatSelectMixinBase2);

        var _super21 = _createSuper(MatSelect);

        function MatSelect(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer, defaults) {
          var _this32;

          _classCallCheck(this, MatSelect);

          _this32 = _super21.call(this, elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);
          _this32._viewportRuler = _viewportRuler;
          _this32._changeDetectorRef = _changeDetectorRef;
          _this32._ngZone = _ngZone;
          _this32._dir = _dir;
          _this32._parentFormField = _parentFormField;
          _this32.ngControl = ngControl;
          _this32._liveAnnouncer = _liveAnnouncer;
          /** Whether or not the overlay panel is open. */

          _this32._panelOpen = false;
          /** Whether filling out the select is required in the form. */

          _this32._required = false;
          /** The scroll position of the overlay panel, calculated to center the selected option. */

          _this32._scrollTop = 0;
          /** Whether the component is in multiple selection mode. */

          _this32._multiple = false;
          /** Comparison function to specify which option is displayed. Defaults to object equality. */

          _this32._compareWith = function (o1, o2) {
            return o1 === o2;
          };
          /** Unique id for this input. */


          _this32._uid = "mat-select-".concat(nextUniqueId++);
          /** Current `ariar-labelledby` value for the select trigger. */

          _this32._triggerAriaLabelledBy = null;
          /** Emits whenever the component is destroyed. */

          _this32._destroy = new rxjs__WEBPACK_IMPORTED_MODULE_12__["Subject"]();
          /** The cached font-size of the trigger element. */

          _this32._triggerFontSize = 0;
          /** `View -> model callback called when value changes` */

          _this32._onChange = function () {};
          /** `View -> model callback called when select has been touched` */


          _this32._onTouched = function () {};

          _this32._valueId = "mat-select-value-".concat(nextUniqueId++);
          /** The value of the select panel's transform-origin property. */

          _this32._transformOrigin = 'top';
          /** Emits when the panel element is finished transforming in. */

          _this32._panelDoneAnimatingStream = new rxjs__WEBPACK_IMPORTED_MODULE_12__["Subject"]();
          /**
           * The y-offset of the overlay panel in relation to the trigger's top start corner.
           * This must be adjusted to align the selected option text over the trigger text.
           * when the panel opens. Will change based on the y-position of the selected option.
           */

          _this32._offsetY = 0;
          /**
           * This position config ensures that the top "start" corner of the overlay
           * is aligned with with the top "start" of the origin by default (overlapping
           * the trigger completely). If the panel cannot fit below the trigger, it
           * will fall back to a position above the trigger.
           */

          _this32._positions = [{
            originX: 'start',
            originY: 'top',
            overlayX: 'start',
            overlayY: 'top'
          }, {
            originX: 'start',
            originY: 'bottom',
            overlayX: 'start',
            overlayY: 'bottom'
          }];
          /** Whether the component is disabling centering of the active option over the trigger. */

          _this32._disableOptionCentering = false;
          _this32._focused = false;
          /** A name for this control that can be used by `mat-form-field`. */

          _this32.controlType = 'mat-select';
          /** Aria label of the select. If not specified, the placeholder will be used as label. */

          _this32.ariaLabel = '';
          /** Combined stream of all of the child options' change events. */

          _this32.optionSelectionChanges = Object(rxjs__WEBPACK_IMPORTED_MODULE_12__["defer"])(function () {
            var options = _this32.options;

            if (options) {
              return options.changes.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["startWith"])(options), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["switchMap"])(function () {
                return Object(rxjs__WEBPACK_IMPORTED_MODULE_12__["merge"]).apply(void 0, _toConsumableArray(options.map(function (option) {
                  return option.onSelectionChange;
                })));
              }));
            }

            return _this32._ngZone.onStable.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["take"])(1), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["switchMap"])(function () {
              return _this32.optionSelectionChanges;
            }));
          });
          /** Event emitted when the select panel has been toggled. */

          _this32.openedChange = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
          /** Event emitted when the select has been opened. */

          _this32._openedStream = _this32.openedChange.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["filter"])(function (o) {
            return o;
          }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["map"])(function () {}));
          /** Event emitted when the select has been closed. */

          _this32._closedStream = _this32.openedChange.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["filter"])(function (o) {
            return !o;
          }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["map"])(function () {}));
          /** Event emitted when the selected value has been changed by the user. */

          _this32.selectionChange = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
          /**
           * Event that emits whenever the raw value of the select changes. This is here primarily
           * to facilitate the two-way binding for the `value` input.
           * @docs-private
           */

          _this32.valueChange = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();

          if (_this32.ngControl) {
            // Note: we provide the value accessor through here, instead of
            // the `providers` to avoid running into a circular import.
            _this32.ngControl.valueAccessor = _assertThisInitialized(_this32);
          }

          _this32._scrollStrategyFactory = scrollStrategyFactory;
          _this32._scrollStrategy = _this32._scrollStrategyFactory();
          _this32.tabIndex = parseInt(tabIndex) || 0; // Force setter to be called in case id was not specified.

          _this32.id = _this32.id;

          if (defaults) {
            if (defaults.disableOptionCentering != null) {
              _this32.disableOptionCentering = defaults.disableOptionCentering;
            }

            if (defaults.typeaheadDebounceInterval != null) {
              _this32.typeaheadDebounceInterval = defaults.typeaheadDebounceInterval;
            }
          }

          return _this32;
        }
        /** Whether the select is focused. */


        _createClass(MatSelect, [{
          key: "focused",
          get: function get() {
            return this._focused || this._panelOpen;
          }
          /** Placeholder to be shown if no value has been selected. */

        }, {
          key: "placeholder",
          get: function get() {
            return this._placeholder;
          },
          set: function set(value) {
            this._placeholder = value;
            this.stateChanges.next();
          }
          /** Whether the component is required. */

        }, {
          key: "required",
          get: function get() {
            return this._required;
          },
          set: function set(value) {
            this._required = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_8__["coerceBooleanProperty"])(value);
            this.stateChanges.next();
          }
          /** Whether the user should be allowed to select multiple options. */

        }, {
          key: "multiple",
          get: function get() {
            return this._multiple;
          },
          set: function set(value) {
            if (this._selectionModel && (typeof ngDevMode === 'undefined' || ngDevMode)) {
              throw getMatSelectDynamicMultipleError();
            }

            this._multiple = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_8__["coerceBooleanProperty"])(value);
          }
          /** Whether to center the active option over the trigger. */

        }, {
          key: "disableOptionCentering",
          get: function get() {
            return this._disableOptionCentering;
          },
          set: function set(value) {
            this._disableOptionCentering = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_8__["coerceBooleanProperty"])(value);
          }
          /**
           * Function to compare the option values with the selected values. The first argument
           * is a value from an option. The second is a value from the selection. A boolean
           * should be returned.
           */

        }, {
          key: "compareWith",
          get: function get() {
            return this._compareWith;
          },
          set: function set(fn) {
            if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {
              throw getMatSelectNonFunctionValueError();
            }

            this._compareWith = fn;

            if (this._selectionModel) {
              // A different comparator means the selection could change.
              this._initializeSelection();
            }
          }
          /** Value of the select control. */

        }, {
          key: "value",
          get: function get() {
            return this._value;
          },
          set: function set(newValue) {
            if (newValue !== this._value) {
              if (this.options) {
                this._setSelectionByValue(newValue);
              }

              this._value = newValue;
            }
          }
          /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */

        }, {
          key: "typeaheadDebounceInterval",
          get: function get() {
            return this._typeaheadDebounceInterval;
          },
          set: function set(value) {
            this._typeaheadDebounceInterval = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_8__["coerceNumberProperty"])(value);
          }
          /** Unique id of the element. */

        }, {
          key: "id",
          get: function get() {
            return this._id;
          },
          set: function set(value) {
            this._id = value || this._uid;
            this.stateChanges.next();
          }
        }, {
          key: "ngOnInit",
          value: function ngOnInit() {
            var _this33 = this;

            this._selectionModel = new _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_9__["SelectionModel"](this.multiple);
            this.stateChanges.next(); // We need `distinctUntilChanged` here, because some browsers will
            // fire the animation end event twice for the same animation. See:
            // https://github.com/angular/angular/issues/24084

            this._panelDoneAnimatingStream.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["distinctUntilChanged"])(), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["takeUntil"])(this._destroy)).subscribe(function () {
              if (_this33.panelOpen) {
                _this33._scrollTop = 0;

                _this33.openedChange.emit(true);
              } else {
                _this33.openedChange.emit(false);

                _this33.overlayDir.offsetX = 0;

                _this33._changeDetectorRef.markForCheck();
              }
            });

            this._viewportRuler.change().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["takeUntil"])(this._destroy)).subscribe(function () {
              if (_this33._panelOpen) {
                _this33._triggerRect = _this33.trigger.nativeElement.getBoundingClientRect();

                _this33._changeDetectorRef.markForCheck();
              }
            });
          }
        }, {
          key: "ngAfterContentInit",
          value: function ngAfterContentInit() {
            var _this34 = this;

            this._initKeyManager();

            this._selectionModel.changed.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["takeUntil"])(this._destroy)).subscribe(function (event) {
              event.added.forEach(function (option) {
                return option.select();
              });
              event.removed.forEach(function (option) {
                return option.deselect();
              });
            });

            this.options.changes.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["startWith"])(null), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["takeUntil"])(this._destroy)).subscribe(function () {
              _this34._resetOptions();

              _this34._initializeSelection();
            });
          }
        }, {
          key: "ngDoCheck",
          value: function ngDoCheck() {
            var newAriaLabelledby = this._getTriggerAriaLabelledby(); // We have to manage setting the `aria-labelledby` ourselves, because part of its value
            // is computed as a result of a content query which can cause this binding to trigger a
            // "changed after checked" error.


            if (newAriaLabelledby !== this._triggerAriaLabelledBy) {
              var element = this._elementRef.nativeElement;
              this._triggerAriaLabelledBy = newAriaLabelledby;

              if (newAriaLabelledby) {
                element.setAttribute('aria-labelledby', newAriaLabelledby);
              } else {
                element.removeAttribute('aria-labelledby');
              }
            }

            if (this.ngControl) {
              this.updateErrorState();
            }
          }
        }, {
          key: "ngOnChanges",
          value: function ngOnChanges(changes) {
            // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let
            // the parent form field know to run change detection when the disabled state changes.
            if (changes['disabled']) {
              this.stateChanges.next();
            }

            if (changes['typeaheadDebounceInterval'] && this._keyManager) {
              this._keyManager.withTypeAhead(this._typeaheadDebounceInterval);
            }
          }
        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this._destroy.next();

            this._destroy.complete();

            this.stateChanges.complete();
          }
          /** Toggles the overlay panel open or closed. */

        }, {
          key: "toggle",
          value: function toggle() {
            this.panelOpen ? this.close() : this.open();
          }
          /** Opens the overlay panel. */

        }, {
          key: "open",
          value: function open() {
            var _this35 = this;

            if (this.disabled || !this.options || !this.options.length || this._panelOpen) {
              return;
            }

            this._triggerRect = this.trigger.nativeElement.getBoundingClientRect(); // Note: The computed font-size will be a string pixel value (e.g. "16px").
            // `parseInt` ignores the trailing 'px' and converts this to a number.

            this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');
            this._panelOpen = true;

            this._keyManager.withHorizontalOrientation(null);

            this._calculateOverlayPosition();

            this._highlightCorrectOption();

            this._changeDetectorRef.markForCheck(); // Set the font size on the panel element once it exists.


            this._ngZone.onStable.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["take"])(1)).subscribe(function () {
              if (_this35._triggerFontSize && _this35.overlayDir.overlayRef && _this35.overlayDir.overlayRef.overlayElement) {
                _this35.overlayDir.overlayRef.overlayElement.style.fontSize = "".concat(_this35._triggerFontSize, "px");
              }
            });
          }
          /** Closes the overlay panel and focuses the host element. */

        }, {
          key: "close",
          value: function close() {
            if (this._panelOpen) {
              this._panelOpen = false;

              this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');

              this._changeDetectorRef.markForCheck();

              this._onTouched();
            }
          }
          /**
           * Sets the select's value. Part of the ControlValueAccessor interface
           * required to integrate with Angular's core forms API.
           *
           * @param value New value to be written to the model.
           */

        }, {
          key: "writeValue",
          value: function writeValue(value) {
            this.value = value;
          }
          /**
           * Saves a callback function to be invoked when the select's value
           * changes from user input. Part of the ControlValueAccessor interface
           * required to integrate with Angular's core forms API.
           *
           * @param fn Callback to be triggered when the value changes.
           */

        }, {
          key: "registerOnChange",
          value: function registerOnChange(fn) {
            this._onChange = fn;
          }
          /**
           * Saves a callback function to be invoked when the select is blurred
           * by the user. Part of the ControlValueAccessor interface required
           * to integrate with Angular's core forms API.
           *
           * @param fn Callback to be triggered when the component has been touched.
           */

        }, {
          key: "registerOnTouched",
          value: function registerOnTouched(fn) {
            this._onTouched = fn;
          }
          /**
           * Disables the select. Part of the ControlValueAccessor interface required
           * to integrate with Angular's core forms API.
           *
           * @param isDisabled Sets whether the component is disabled.
           */

        }, {
          key: "setDisabledState",
          value: function setDisabledState(isDisabled) {
            this.disabled = isDisabled;

            this._changeDetectorRef.markForCheck();

            this.stateChanges.next();
          }
          /** Whether or not the overlay panel is open. */

        }, {
          key: "panelOpen",
          get: function get() {
            return this._panelOpen;
          }
          /** The currently selected option. */

        }, {
          key: "selected",
          get: function get() {
            return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];
          }
          /** The value displayed in the trigger. */

        }, {
          key: "triggerValue",
          get: function get() {
            if (this.empty) {
              return '';
            }

            if (this._multiple) {
              var selectedOptions = this._selectionModel.selected.map(function (option) {
                return option.viewValue;
              });

              if (this._isRtl()) {
                selectedOptions.reverse();
              } // TODO(crisbeto): delimiter should be configurable for proper localization.


              return selectedOptions.join(', ');
            }

            return this._selectionModel.selected[0].viewValue;
          }
          /** Whether the element is in RTL mode. */

        }, {
          key: "_isRtl",
          value: function _isRtl() {
            return this._dir ? this._dir.value === 'rtl' : false;
          }
          /** Handles all keydown events on the select. */

        }, {
          key: "_handleKeydown",
          value: function _handleKeydown(event) {
            if (!this.disabled) {
              this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);
            }
          }
          /** Handles keyboard events while the select is closed. */

        }, {
          key: "_handleClosedKeydown",
          value: function _handleClosedKeydown(event) {
            var keyCode = event.keyCode;
            var isArrowKey = keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["DOWN_ARROW"] || keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["UP_ARROW"] || keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["LEFT_ARROW"] || keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["RIGHT_ARROW"];
            var isOpenKey = keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["ENTER"] || keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["SPACE"];
            var manager = this._keyManager; // Open the select on ALT + arrow key to match the native <select>

            if (!manager.isTyping() && isOpenKey && !Object(_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["hasModifierKey"])(event) || (this.multiple || event.altKey) && isArrowKey) {
              event.preventDefault(); // prevents the page from scrolling down when pressing space

              this.open();
            } else if (!this.multiple) {
              var previouslySelectedOption = this.selected;
              manager.onKeydown(event);
              var selectedOption = this.selected; // Since the value has changed, we need to announce it ourselves.

              if (selectedOption && previouslySelectedOption !== selectedOption) {
                // We set a duration on the live announcement, because we want the live element to be
                // cleared after a while so that users can't navigate to it using the arrow keys.
                this._liveAnnouncer.announce(selectedOption.viewValue, 10000);
              }
            }
          }
          /** Handles keyboard events when the selected is open. */

        }, {
          key: "_handleOpenKeydown",
          value: function _handleOpenKeydown(event) {
            var manager = this._keyManager;
            var keyCode = event.keyCode;
            var isArrowKey = keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["DOWN_ARROW"] || keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["UP_ARROW"];
            var isTyping = manager.isTyping();

            if (isArrowKey && event.altKey) {
              // Close the select on ALT + arrow key to match the native <select>
              event.preventDefault();
              this.close(); // Don't do anything in this case if the user is typing,
              // because the typing sequence can include the space key.
            } else if (!isTyping && (keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["ENTER"] || keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["SPACE"]) && manager.activeItem && !Object(_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["hasModifierKey"])(event)) {
              event.preventDefault();

              manager.activeItem._selectViaInteraction();
            } else if (!isTyping && this._multiple && keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["A"] && event.ctrlKey) {
              event.preventDefault();
              var hasDeselectedOptions = this.options.some(function (opt) {
                return !opt.disabled && !opt.selected;
              });
              this.options.forEach(function (option) {
                if (!option.disabled) {
                  hasDeselectedOptions ? option.select() : option.deselect();
                }
              });
            } else {
              var previouslyFocusedIndex = manager.activeItemIndex;
              manager.onKeydown(event);

              if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem && manager.activeItemIndex !== previouslyFocusedIndex) {
                manager.activeItem._selectViaInteraction();
              }
            }
          }
        }, {
          key: "_onFocus",
          value: function _onFocus() {
            if (!this.disabled) {
              this._focused = true;
              this.stateChanges.next();
            }
          }
          /**
           * Calls the touched callback only if the panel is closed. Otherwise, the trigger will
           * "blur" to the panel when it opens, causing a false positive.
           */

        }, {
          key: "_onBlur",
          value: function _onBlur() {
            this._focused = false;

            if (!this.disabled && !this.panelOpen) {
              this._onTouched();

              this._changeDetectorRef.markForCheck();

              this.stateChanges.next();
            }
          }
          /**
           * Callback that is invoked when the overlay panel has been attached.
           */

        }, {
          key: "_onAttached",
          value: function _onAttached() {
            var _this36 = this;

            this.overlayDir.positionChange.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["take"])(1)).subscribe(function () {
              _this36._changeDetectorRef.detectChanges();

              _this36._calculateOverlayOffsetX();

              _this36.panel.nativeElement.scrollTop = _this36._scrollTop;
            });
          }
          /** Returns the theme to be used on the panel. */

        }, {
          key: "_getPanelTheme",
          value: function _getPanelTheme() {
            return this._parentFormField ? "mat-".concat(this._parentFormField.color) : '';
          }
          /** Whether the select has a value. */

        }, {
          key: "empty",
          get: function get() {
            return !this._selectionModel || this._selectionModel.isEmpty();
          }
        }, {
          key: "_initializeSelection",
          value: function _initializeSelection() {
            var _this37 = this;

            // Defer setting the value in order to avoid the "Expression
            // has changed after it was checked" errors from Angular.
            Promise.resolve().then(function () {
              _this37._setSelectionByValue(_this37.ngControl ? _this37.ngControl.value : _this37._value);

              _this37.stateChanges.next();
            });
          }
          /**
           * Sets the selected option based on a value. If no option can be
           * found with the designated value, the select trigger is cleared.
           */

        }, {
          key: "_setSelectionByValue",
          value: function _setSelectionByValue(value) {
            var _this38 = this;

            if (this.multiple && value) {
              if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {
                throw getMatSelectNonArrayValueError();
              }

              this._selectionModel.clear();

              value.forEach(function (currentValue) {
                return _this38._selectValue(currentValue);
              });

              this._sortValues();
            } else {
              this._selectionModel.clear();

              var correspondingOption = this._selectValue(value); // Shift focus to the active item. Note that we shouldn't do this in multiple
              // mode, because we don't know what option the user interacted with last.


              if (correspondingOption) {
                this._keyManager.updateActiveItem(correspondingOption);
              } else if (!this.panelOpen) {
                // Otherwise reset the highlighted option. Note that we only want to do this while
                // closed, because doing it while open can shift the user's focus unnecessarily.
                this._keyManager.updateActiveItem(-1);
              }
            }

            this._changeDetectorRef.markForCheck();
          }
          /**
           * Finds and selects and option based on its value.
           * @returns Option that has the corresponding value.
           */

        }, {
          key: "_selectValue",
          value: function _selectValue(value) {
            var _this39 = this;

            var correspondingOption = this.options.find(function (option) {
              try {
                // Treat null as a special reset value.
                return option.value != null && _this39._compareWith(option.value, value);
              } catch (error) {
                if (typeof ngDevMode === 'undefined' || ngDevMode) {
                  // Notify developers of errors in their comparator.
                  console.warn(error);
                }

                return false;
              }
            });

            if (correspondingOption) {
              this._selectionModel.select(correspondingOption);
            }

            return correspondingOption;
          }
          /** Sets up a key manager to listen to keyboard events on the overlay panel. */

        }, {
          key: "_initKeyManager",
          value: function _initKeyManager() {
            var _this40 = this;

            this._keyManager = new _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_6__["ActiveDescendantKeyManager"](this.options).withTypeAhead(this._typeaheadDebounceInterval).withVerticalOrientation().withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr').withHomeAndEnd().withAllowedModifierKeys(['shiftKey']);

            this._keyManager.tabOut.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["takeUntil"])(this._destroy)).subscribe(function () {
              if (_this40.panelOpen) {
                // Select the active item when tabbing away. This is consistent with how the native
                // select behaves. Note that we only want to do this in single selection mode.
                if (!_this40.multiple && _this40._keyManager.activeItem) {
                  _this40._keyManager.activeItem._selectViaInteraction();
                } // Restore focus to the trigger before closing. Ensures that the focus
                // position won't be lost if the user got focus into the overlay.


                _this40.focus();

                _this40.close();
              }
            });

            this._keyManager.change.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["takeUntil"])(this._destroy)).subscribe(function () {
              if (_this40._panelOpen && _this40.panel) {
                _this40._scrollActiveOptionIntoView();
              } else if (!_this40._panelOpen && !_this40.multiple && _this40._keyManager.activeItem) {
                _this40._keyManager.activeItem._selectViaInteraction();
              }
            });
          }
          /** Drops current option subscriptions and IDs and resets from scratch. */

        }, {
          key: "_resetOptions",
          value: function _resetOptions() {
            var _this41 = this;

            var changedOrDestroyed = Object(rxjs__WEBPACK_IMPORTED_MODULE_12__["merge"])(this.options.changes, this._destroy);
            this.optionSelectionChanges.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["takeUntil"])(changedOrDestroyed)).subscribe(function (event) {
              _this41._onSelect(event.source, event.isUserInput);

              if (event.isUserInput && !_this41.multiple && _this41._panelOpen) {
                _this41.close();

                _this41.focus();
              }
            }); // Listen to changes in the internal state of the options and react accordingly.
            // Handles cases like the labels of the selected options changing.

            Object(rxjs__WEBPACK_IMPORTED_MODULE_12__["merge"]).apply(void 0, _toConsumableArray(this.options.map(function (option) {
              return option._stateChanges;
            }))).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["takeUntil"])(changedOrDestroyed)).subscribe(function () {
              _this41._changeDetectorRef.markForCheck();

              _this41.stateChanges.next();
            });
          }
          /** Invoked when an option is clicked. */

        }, {
          key: "_onSelect",
          value: function _onSelect(option, isUserInput) {
            var wasSelected = this._selectionModel.isSelected(option);

            if (option.value == null && !this._multiple) {
              option.deselect();

              this._selectionModel.clear();

              if (this.value != null) {
                this._propagateChanges(option.value);
              }
            } else {
              if (wasSelected !== option.selected) {
                option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);
              }

              if (isUserInput) {
                this._keyManager.setActiveItem(option);
              }

              if (this.multiple) {
                this._sortValues();

                if (isUserInput) {
                  // In case the user selected the option with their mouse, we
                  // want to restore focus back to the trigger, in order to
                  // prevent the select keyboard controls from clashing with
                  // the ones from `mat-option`.
                  this.focus();
                }
              }
            }

            if (wasSelected !== this._selectionModel.isSelected(option)) {
              this._propagateChanges();
            }

            this.stateChanges.next();
          }
          /** Sorts the selected values in the selected based on their order in the panel. */

        }, {
          key: "_sortValues",
          value: function _sortValues() {
            var _this42 = this;

            if (this.multiple) {
              var options = this.options.toArray();

              this._selectionModel.sort(function (a, b) {
                return _this42.sortComparator ? _this42.sortComparator(a, b, options) : options.indexOf(a) - options.indexOf(b);
              });

              this.stateChanges.next();
            }
          }
          /** Emits change event to set the model value. */

        }, {
          key: "_propagateChanges",
          value: function _propagateChanges(fallbackValue) {
            var valueToEmit = null;

            if (this.multiple) {
              valueToEmit = this.selected.map(function (option) {
                return option.value;
              });
            } else {
              valueToEmit = this.selected ? this.selected.value : fallbackValue;
            }

            this._value = valueToEmit;
            this.valueChange.emit(valueToEmit);

            this._onChange(valueToEmit);

            this.selectionChange.emit(new MatSelectChange(this, valueToEmit));

            this._changeDetectorRef.markForCheck();
          }
          /**
           * Highlights the selected item. If no option is selected, it will highlight
           * the first item instead.
           */

        }, {
          key: "_highlightCorrectOption",
          value: function _highlightCorrectOption() {
            if (this._keyManager) {
              if (this.empty) {
                this._keyManager.setFirstItemActive();
              } else {
                this._keyManager.setActiveItem(this._selectionModel.selected[0]);
              }
            }
          }
          /** Scrolls the active option into view. */

        }, {
          key: "_scrollActiveOptionIntoView",
          value: function _scrollActiveOptionIntoView() {
            var activeOptionIndex = this._keyManager.activeItemIndex || 0;
            var labelCount = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_3__["_countGroupLabelsBeforeOption"])(activeOptionIndex, this.options, this.optionGroups);

            var itemHeight = this._getItemHeight();

            this.panel.nativeElement.scrollTop = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_3__["_getOptionScrollPosition"])((activeOptionIndex + labelCount) * itemHeight, itemHeight, this.panel.nativeElement.scrollTop, SELECT_PANEL_MAX_HEIGHT);
          }
          /** Focuses the select element. */

        }, {
          key: "focus",
          value: function focus(options) {
            this._elementRef.nativeElement.focus(options);
          }
          /** Gets the index of the provided option in the option list. */

        }, {
          key: "_getOptionIndex",
          value: function _getOptionIndex(option) {
            return this.options.reduce(function (result, current, index) {
              if (result !== undefined) {
                return result;
              }

              return option === current ? index : undefined;
            }, undefined);
          }
          /** Calculates the scroll position and x- and y-offsets of the overlay panel. */

        }, {
          key: "_calculateOverlayPosition",
          value: function _calculateOverlayPosition() {
            var itemHeight = this._getItemHeight();

            var items = this._getItemCount();

            var panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);
            var scrollContainerHeight = items * itemHeight; // The farthest the panel can be scrolled before it hits the bottom

            var maxScroll = scrollContainerHeight - panelHeight; // If no value is selected we open the popup to the first item.

            var selectedOptionOffset = this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0]);
            selectedOptionOffset += Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_3__["_countGroupLabelsBeforeOption"])(selectedOptionOffset, this.options, this.optionGroups); // We must maintain a scroll buffer so the selected option will be scrolled to the
            // center of the overlay panel rather than the top.

            var scrollBuffer = panelHeight / 2;
            this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);
            this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);

            this._checkOverlayWithinViewport(maxScroll);
          }
          /**
           * Calculates the scroll position of the select's overlay panel.
           *
           * Attempts to center the selected option in the panel. If the option is
           * too high or too low in the panel to be scrolled to the center, it clamps the
           * scroll position to the min or max scroll positions respectively.
           */

        }, {
          key: "_calculateOverlayScroll",
          value: function _calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll) {
            var itemHeight = this._getItemHeight();

            var optionOffsetFromScrollTop = itemHeight * selectedIndex;
            var halfOptionHeight = itemHeight / 2; // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the
            // scroll container, then subtracts the scroll buffer to scroll the option down to
            // the center of the overlay panel. Half the option height must be re-added to the
            // scrollTop so the option is centered based on its middle, not its top edge.

            var optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;
            return Math.min(Math.max(0, optimalScrollPosition), maxScroll);
          }
          /** Gets the aria-labelledby for the select panel. */

        }, {
          key: "_getPanelAriaLabelledby",
          value: function _getPanelAriaLabelledby() {
            if (this.ariaLabel) {
              return null;
            }

            var labelId = this._getLabelId();

            return this.ariaLabelledby ? labelId + ' ' + this.ariaLabelledby : labelId;
          }
          /** Determines the `aria-activedescendant` to be set on the host. */

        }, {
          key: "_getAriaActiveDescendant",
          value: function _getAriaActiveDescendant() {
            if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {
              return this._keyManager.activeItem.id;
            }

            return null;
          }
          /** Gets the ID of the element that is labelling the select. */

        }, {
          key: "_getLabelId",
          value: function _getLabelId() {
            var _a;

            return ((_a = this._parentFormField) === null || _a === void 0 ? void 0 : _a.getLabelId()) || '';
          }
          /**
           * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.
           * This must be adjusted to align the selected option text over the trigger text when
           * the panel opens. Will change based on LTR or RTL text direction. Note that the offset
           * can't be calculated until the panel has been attached, because we need to know the
           * content width in order to constrain the panel within the viewport.
           */

        }, {
          key: "_calculateOverlayOffsetX",
          value: function _calculateOverlayOffsetX() {
            var overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();

            var viewportSize = this._viewportRuler.getViewportSize();

            var isRtl = this._isRtl();

            var paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X : SELECT_PANEL_PADDING_X * 2;
            var offsetX; // Adjust the offset, depending on the option padding.

            if (this.multiple) {
              offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;
            } else {
              var selected = this._selectionModel.selected[0] || this.options.first;
              offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;
            } // Invert the offset in LTR.


            if (!isRtl) {
              offsetX *= -1;
            } // Determine how much the select overflows on each side.


            var leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));
            var rightOverflow = overlayRect.right + offsetX - viewportSize.width + (isRtl ? 0 : paddingWidth); // If the element overflows on either side, reduce the offset to allow it to fit.

            if (leftOverflow > 0) {
              offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;
            } else if (rightOverflow > 0) {
              offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;
            } // Set the offset directly in order to avoid having to go through change detection and
            // potentially triggering "changed after it was checked" errors. Round the value to avoid
            // blurry content in some browsers.


            this.overlayDir.offsetX = Math.round(offsetX);
            this.overlayDir.overlayRef.updatePosition();
          }
          /**
           * Calculates the y-offset of the select's overlay panel in relation to the
           * top start corner of the trigger. It has to be adjusted in order for the
           * selected option to be aligned over the trigger when the panel opens.
           */

        }, {
          key: "_calculateOverlayOffsetY",
          value: function _calculateOverlayOffsetY(selectedIndex, scrollBuffer, maxScroll) {
            var itemHeight = this._getItemHeight();

            var optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;
            var maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);
            var optionOffsetFromPanelTop; // Disable offset if requested by user by returning 0 as value to offset

            if (this._disableOptionCentering) {
              return 0;
            }

            if (this._scrollTop === 0) {
              optionOffsetFromPanelTop = selectedIndex * itemHeight;
            } else if (this._scrollTop === maxScroll) {
              var firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;
              var selectedDisplayIndex = selectedIndex - firstDisplayedIndex; // The first item is partially out of the viewport. Therefore we need to calculate what
              // portion of it is shown in the viewport and account for it in our offset.

              var partialItemHeight = itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight; // Because the panel height is longer than the height of the options alone,
              // there is always extra padding at the top or bottom of the panel. When
              // scrolled to the very bottom, this padding is at the top of the panel and
              // must be added to the offset.

              optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;
            } else {
              // If the option was scrolled to the middle of the panel using a scroll buffer,
              // its offset will be the scroll buffer minus the half height that was added to
              // center it.
              optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;
            } // The final offset is the option's offset from the top, adjusted for the height difference,
            // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.
            // The value is rounded to prevent some browsers from blurring the content.


            return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);
          }
          /**
           * Checks that the attempted overlay position will fit within the viewport.
           * If it will not fit, tries to adjust the scroll position and the associated
           * y-offset so the panel can open fully on-screen. If it still won't fit,
           * sets the offset back to 0 to allow the fallback position to take over.
           */

        }, {
          key: "_checkOverlayWithinViewport",
          value: function _checkOverlayWithinViewport(maxScroll) {
            var itemHeight = this._getItemHeight();

            var viewportSize = this._viewportRuler.getViewportSize();

            var topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;
            var bottomSpaceAvailable = viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;
            var panelHeightTop = Math.abs(this._offsetY);
            var totalPanelHeight = Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);
            var panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;

            if (panelHeightBottom > bottomSpaceAvailable) {
              this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);
            } else if (panelHeightTop > topSpaceAvailable) {
              this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);
            } else {
              this._transformOrigin = this._getOriginBasedOnOption();
            }
          }
          /** Adjusts the overlay panel up to fit in the viewport. */

        }, {
          key: "_adjustPanelUp",
          value: function _adjustPanelUp(panelHeightBottom, bottomSpaceAvailable) {
            // Browsers ignore fractional scroll offsets, so we need to round.
            var distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable); // Scrolls the panel up by the distance it was extending past the boundary, then
            // adjusts the offset by that amount to move the panel up into the viewport.

            this._scrollTop -= distanceBelowViewport;
            this._offsetY -= distanceBelowViewport;
            this._transformOrigin = this._getOriginBasedOnOption(); // If the panel is scrolled to the very top, it won't be able to fit the panel
            // by scrolling, so set the offset to 0 to allow the fallback position to take
            // effect.

            if (this._scrollTop <= 0) {
              this._scrollTop = 0;
              this._offsetY = 0;
              this._transformOrigin = "50% bottom 0px";
            }
          }
          /** Adjusts the overlay panel down to fit in the viewport. */

        }, {
          key: "_adjustPanelDown",
          value: function _adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll) {
            // Browsers ignore fractional scroll offsets, so we need to round.
            var distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable); // Scrolls the panel down by the distance it was extending past the boundary, then
            // adjusts the offset by that amount to move the panel down into the viewport.

            this._scrollTop += distanceAboveViewport;
            this._offsetY += distanceAboveViewport;
            this._transformOrigin = this._getOriginBasedOnOption(); // If the panel is scrolled to the very bottom, it won't be able to fit the
            // panel by scrolling, so set the offset to 0 to allow the fallback position
            // to take effect.

            if (this._scrollTop >= maxScroll) {
              this._scrollTop = maxScroll;
              this._offsetY = 0;
              this._transformOrigin = "50% top 0px";
              return;
            }
          }
          /** Sets the transform origin point based on the selected option. */

        }, {
          key: "_getOriginBasedOnOption",
          value: function _getOriginBasedOnOption() {
            var itemHeight = this._getItemHeight();

            var optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;
            var originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;
            return "50% ".concat(originY, "px 0px");
          }
          /** Calculates the amount of items in the select. This includes options and group labels. */

        }, {
          key: "_getItemCount",
          value: function _getItemCount() {
            return this.options.length + this.optionGroups.length;
          }
          /** Calculates the height of the select's options. */

        }, {
          key: "_getItemHeight",
          value: function _getItemHeight() {
            return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;
          }
          /** Gets the aria-labelledby of the select component trigger. */

        }, {
          key: "_getTriggerAriaLabelledby",
          value: function _getTriggerAriaLabelledby() {
            if (this.ariaLabel) {
              return null;
            }

            var value = this._getLabelId() + ' ' + this._valueId;

            if (this.ariaLabelledby) {
              value += ' ' + this.ariaLabelledby;
            }

            return value;
          }
          /**
           * Implemented as part of MatFormFieldControl.
           * @docs-private
           */

        }, {
          key: "setDescribedByIds",
          value: function setDescribedByIds(ids) {
            this._ariaDescribedby = ids.join(' ');
          }
          /**
           * Implemented as part of MatFormFieldControl.
           * @docs-private
           */

        }, {
          key: "onContainerClick",
          value: function onContainerClick() {
            this.focus();
            this.open();
          }
          /**
           * Implemented as part of MatFormFieldControl.
           * @docs-private
           */

        }, {
          key: "shouldLabelFloat",
          get: function get() {
            return this._panelOpen || !this.empty;
          }
        }]);

        return MatSelect;
      }(_MatSelectMixinBase);

      MatSelect.ɵfac = function MatSelect_Factory(t) {
        return new (t || MatSelect)(_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdirectiveInject"](_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_5__["ViewportRuler"]), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectorRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_2__["NgZone"]), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdirectiveInject"](_angular_material_core__WEBPACK_IMPORTED_MODULE_3__["ErrorStateMatcher"]), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdirectiveInject"](_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_7__["Directionality"], 8), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdirectiveInject"](_angular_forms__WEBPACK_IMPORTED_MODULE_11__["NgForm"], 8), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdirectiveInject"](_angular_forms__WEBPACK_IMPORTED_MODULE_11__["FormGroupDirective"], 8), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdirectiveInject"](_angular_material_form_field__WEBPACK_IMPORTED_MODULE_4__["MAT_FORM_FIELD"], 8), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdirectiveInject"](_angular_forms__WEBPACK_IMPORTED_MODULE_11__["NgControl"], 10), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵinjectAttribute"]('tabindex'), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdirectiveInject"](MAT_SELECT_SCROLL_STRATEGY), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdirectiveInject"](_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_6__["LiveAnnouncer"]), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdirectiveInject"](MAT_SELECT_CONFIG, 8));
      };

      MatSelect.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineComponent"]({
        type: MatSelect,
        selectors: [["mat-select"]],
        contentQueries: function MatSelect_ContentQueries(rf, ctx, dirIndex) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵcontentQuery"](dirIndex, MAT_SELECT_TRIGGER, true);

            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵcontentQuery"](dirIndex, _angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MatOption"], true);

            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵcontentQuery"](dirIndex, _angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MAT_OPTGROUP"], true);
          }

          if (rf & 2) {
            var _t;

            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵloadQuery"]()) && (ctx.customTrigger = _t.first);
            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵloadQuery"]()) && (ctx.options = _t);
            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵloadQuery"]()) && (ctx.optionGroups = _t);
          }
        },
        viewQuery: function MatSelect_Query(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵviewQuery"](_c0, true);

            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵviewQuery"](_c1, true);

            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵviewQuery"](_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__["CdkConnectedOverlay"], true);
          }

          if (rf & 2) {
            var _t;

            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵloadQuery"]()) && (ctx.trigger = _t.first);
            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵloadQuery"]()) && (ctx.panel = _t.first);
            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵloadQuery"]()) && (ctx.overlayDir = _t.first);
          }
        },
        hostAttrs: ["role", "combobox", "aria-autocomplete", "none", "aria-haspopup", "true", 1, "mat-select"],
        hostVars: 20,
        hostBindings: function MatSelect_HostBindings(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵlistener"]("keydown", function MatSelect_keydown_HostBindingHandler($event) {
              return ctx._handleKeydown($event);
            })("focus", function MatSelect_focus_HostBindingHandler() {
              return ctx._onFocus();
            })("blur", function MatSelect_blur_HostBindingHandler() {
              return ctx._onBlur();
            });
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵattribute"]("id", ctx.id)("tabindex", ctx.tabIndex)("aria-controls", ctx.panelOpen ? ctx.id + "-panel" : null)("aria-expanded", ctx.panelOpen)("aria-label", ctx.ariaLabel || null)("aria-required", ctx.required.toString())("aria-disabled", ctx.disabled.toString())("aria-invalid", ctx.errorState)("aria-describedby", ctx._ariaDescribedby || null)("aria-activedescendant", ctx._getAriaActiveDescendant());

            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵclassProp"]("mat-select-disabled", ctx.disabled)("mat-select-invalid", ctx.errorState)("mat-select-required", ctx.required)("mat-select-empty", ctx.empty)("mat-select-multiple", ctx.multiple);
          }
        },
        inputs: {
          disabled: "disabled",
          disableRipple: "disableRipple",
          tabIndex: "tabIndex",
          ariaLabel: ["aria-label", "ariaLabel"],
          id: "id",
          disableOptionCentering: "disableOptionCentering",
          typeaheadDebounceInterval: "typeaheadDebounceInterval",
          placeholder: "placeholder",
          required: "required",
          multiple: "multiple",
          compareWith: "compareWith",
          value: "value",
          panelClass: "panelClass",
          ariaLabelledby: ["aria-labelledby", "ariaLabelledby"],
          errorStateMatcher: "errorStateMatcher",
          sortComparator: "sortComparator"
        },
        outputs: {
          openedChange: "openedChange",
          _openedStream: "opened",
          _closedStream: "closed",
          selectionChange: "selectionChange",
          valueChange: "valueChange"
        },
        exportAs: ["matSelect"],
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵProvidersFeature"]([{
          provide: _angular_material_form_field__WEBPACK_IMPORTED_MODULE_4__["MatFormFieldControl"],
          useExisting: MatSelect
        }, {
          provide: _angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MAT_OPTION_PARENT_COMPONENT"],
          useExisting: MatSelect
        }]), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵInheritDefinitionFeature"], _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵNgOnChangesFeature"]],
        ngContentSelectors: _c3,
        decls: 9,
        vars: 10,
        consts: [["cdk-overlay-origin", "", 1, "mat-select-trigger", 3, "click"], ["origin", "cdkOverlayOrigin", "trigger", ""], [1, "mat-select-value", 3, "ngSwitch"], ["class", "mat-select-placeholder", 4, "ngSwitchCase"], ["class", "mat-select-value-text", 3, "ngSwitch", 4, "ngSwitchCase"], [1, "mat-select-arrow-wrapper"], [1, "mat-select-arrow"], ["cdk-connected-overlay", "", "cdkConnectedOverlayLockPosition", "", "cdkConnectedOverlayHasBackdrop", "", "cdkConnectedOverlayBackdropClass", "cdk-overlay-transparent-backdrop", 3, "cdkConnectedOverlayScrollStrategy", "cdkConnectedOverlayOrigin", "cdkConnectedOverlayOpen", "cdkConnectedOverlayPositions", "cdkConnectedOverlayMinWidth", "cdkConnectedOverlayOffsetY", "backdropClick", "attach", "detach"], [1, "mat-select-placeholder"], [1, "mat-select-value-text", 3, "ngSwitch"], [4, "ngSwitchDefault"], [4, "ngSwitchCase"], [1, "mat-select-panel-wrap"], ["role", "listbox", "tabindex", "-1", 3, "ngClass", "keydown"], ["panel", ""]],
        template: function MatSelect_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵprojectionDef"](_c2);

            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](0, "div", 0, 1);

            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵlistener"]("click", function MatSelect_Template_div_click_0_listener() {
              return ctx.toggle();
            });

            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](3, "div", 2);

            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtemplate"](4, MatSelect_span_4_Template, 2, 1, "span", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtemplate"](5, MatSelect_span_5_Template, 3, 2, "span", 4);

            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](6, "div", 5);

            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelement"](7, "div", 6);

            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtemplate"](8, MatSelect_ng_template_8_Template, 4, 14, "ng-template", 7);

            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵlistener"]("backdropClick", function MatSelect_Template_ng_template_backdropClick_8_listener() {
              return ctx.close();
            })("attach", function MatSelect_Template_ng_template_attach_8_listener() {
              return ctx._onAttached();
            })("detach", function MatSelect_Template_ng_template_detach_8_listener() {
              return ctx.close();
            });
          }

          if (rf & 2) {
            var _r0 = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵreference"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](3);

            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵproperty"]("ngSwitch", ctx.empty);

            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵattribute"]("id", ctx._valueId);

            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵproperty"]("ngSwitchCase", true);

            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵproperty"]("ngSwitchCase", false);

            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](3);

            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵproperty"]("cdkConnectedOverlayScrollStrategy", ctx._scrollStrategy)("cdkConnectedOverlayOrigin", _r0)("cdkConnectedOverlayOpen", ctx.panelOpen)("cdkConnectedOverlayPositions", ctx._positions)("cdkConnectedOverlayMinWidth", ctx._triggerRect == null ? null : ctx._triggerRect.width)("cdkConnectedOverlayOffsetY", ctx._offsetY);
          }
        },
        directives: [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__["CdkOverlayOrigin"], _angular_common__WEBPACK_IMPORTED_MODULE_1__["NgSwitch"], _angular_common__WEBPACK_IMPORTED_MODULE_1__["NgSwitchCase"], _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__["CdkConnectedOverlay"], _angular_common__WEBPACK_IMPORTED_MODULE_1__["NgSwitchDefault"], _angular_common__WEBPACK_IMPORTED_MODULE_1__["NgClass"]],
        styles: [".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}\n"],
        encapsulation: 2,
        data: {
          animation: [matSelectAnimations.transformPanelWrap, matSelectAnimations.transformPanel]
        },
        changeDetection: 0
      });

      MatSelect.ctorParameters = function () {
        return [{
          type: _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_5__["ViewportRuler"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectorRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["NgZone"]
        }, {
          type: _angular_material_core__WEBPACK_IMPORTED_MODULE_3__["ErrorStateMatcher"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"]
        }, {
          type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_7__["Directionality"],
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"]
          }]
        }, {
          type: _angular_forms__WEBPACK_IMPORTED_MODULE_11__["NgForm"],
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"]
          }]
        }, {
          type: _angular_forms__WEBPACK_IMPORTED_MODULE_11__["FormGroupDirective"],
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"]
          }]
        }, {
          type: _angular_material_form_field__WEBPACK_IMPORTED_MODULE_4__["MatFormField"],
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Inject"],
            args: [_angular_material_form_field__WEBPACK_IMPORTED_MODULE_4__["MAT_FORM_FIELD"]]
          }]
        }, {
          type: _angular_forms__WEBPACK_IMPORTED_MODULE_11__["NgControl"],
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Self"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"]
          }]
        }, {
          type: String,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Attribute"],
            args: ['tabindex']
          }]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Inject"],
            args: [MAT_SELECT_SCROLL_STRATEGY]
          }]
        }, {
          type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_6__["LiveAnnouncer"]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Inject"],
            args: [MAT_SELECT_CONFIG]
          }]
        }];
      };

      MatSelect.propDecorators = {
        trigger: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewChild"],
          args: ['trigger']
        }],
        panel: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewChild"],
          args: ['panel']
        }],
        overlayDir: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewChild"],
          args: [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__["CdkConnectedOverlay"]]
        }],
        options: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ContentChildren"],
          args: [_angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MatOption"], {
            descendants: true
          }]
        }],
        optionGroups: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ContentChildren"],
          args: [_angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MAT_OPTGROUP"], {
            descendants: true
          }]
        }],
        panelClass: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        customTrigger: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ContentChild"],
          args: [MAT_SELECT_TRIGGER]
        }],
        placeholder: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        required: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        multiple: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        disableOptionCentering: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        compareWith: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        value: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        ariaLabel: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"],
          args: ['aria-label']
        }],
        ariaLabelledby: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"],
          args: ['aria-labelledby']
        }],
        errorStateMatcher: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        typeaheadDebounceInterval: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        sortComparator: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        id: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        openedChange: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"]
        }],
        _openedStream: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"],
          args: ['opened']
        }],
        _closedStream: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"],
          args: ['closed']
        }],
        selectionChange: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"]
        }],
        valueChange: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"]
        }]
      };
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵsetClassMetadata"](MatSelect, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Component"],
          args: [{
            selector: 'mat-select',
            exportAs: 'matSelect',
            template: "<div cdk-overlay-origin\n     class=\"mat-select-trigger\"\n     (click)=\"toggle()\"\n     #origin=\"cdkOverlayOrigin\"\n     #trigger>\n  <div class=\"mat-select-value\" [ngSwitch]=\"empty\" [attr.id]=\"_valueId\">\n    <span class=\"mat-select-placeholder\" *ngSwitchCase=\"true\">{{placeholder || '\\u00A0'}}</span>\n    <span class=\"mat-select-value-text\" *ngSwitchCase=\"false\" [ngSwitch]=\"!!customTrigger\">\n      <span *ngSwitchDefault>{{triggerValue || '\\u00A0'}}</span>\n      <ng-content select=\"mat-select-trigger\" *ngSwitchCase=\"true\"></ng-content>\n    </span>\n  </div>\n\n  <div class=\"mat-select-arrow-wrapper\"><div class=\"mat-select-arrow\"></div></div>\n</div>\n\n<ng-template\n  cdk-connected-overlay\n  cdkConnectedOverlayLockPosition\n  cdkConnectedOverlayHasBackdrop\n  cdkConnectedOverlayBackdropClass=\"cdk-overlay-transparent-backdrop\"\n  [cdkConnectedOverlayScrollStrategy]=\"_scrollStrategy\"\n  [cdkConnectedOverlayOrigin]=\"origin\"\n  [cdkConnectedOverlayOpen]=\"panelOpen\"\n  [cdkConnectedOverlayPositions]=\"_positions\"\n  [cdkConnectedOverlayMinWidth]=\"_triggerRect?.width!\"\n  [cdkConnectedOverlayOffsetY]=\"_offsetY\"\n  (backdropClick)=\"close()\"\n  (attach)=\"_onAttached()\"\n  (detach)=\"close()\">\n  <div class=\"mat-select-panel-wrap\" [@transformPanelWrap]>\n    <div\n      #panel\n      role=\"listbox\"\n      tabindex=\"-1\"\n      class=\"mat-select-panel {{ _getPanelTheme() }}\"\n      [attr.id]=\"id + '-panel'\"\n      [attr.aria-multiselectable]=\"multiple\"\n      [attr.aria-label]=\"ariaLabel || null\"\n      [attr.aria-labelledby]=\"_getPanelAriaLabelledby()\"\n      [ngClass]=\"panelClass\"\n      [@transformPanel]=\"multiple ? 'showing-multiple' : 'showing'\"\n      (@transformPanel.done)=\"_panelDoneAnimatingStream.next($event.toState)\"\n      [style.transformOrigin]=\"_transformOrigin\"\n      [style.font-size.px]=\"_triggerFontSize\"\n      (keydown)=\"_handleKeydown($event)\">\n      <ng-content></ng-content>\n    </div>\n  </div>\n</ng-template>\n",
            inputs: ['disabled', 'disableRipple', 'tabIndex'],
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewEncapsulation"].None,
            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectionStrategy"].OnPush,
            host: {
              'role': 'combobox',
              'aria-autocomplete': 'none',
              // TODO(crisbeto): the value for aria-haspopup should be `listbox`, but currently it's difficult
              // to sync into g3, because of an outdated automated a11y check which flags it as an invalid
              // value. At some point we should try to switch it back to being `listbox`. When doing the
              // MDC-based `mat-select`, we can get away with starting it off as `listbox`.
              'aria-haspopup': 'true',
              'class': 'mat-select',
              '[attr.id]': 'id',
              '[attr.tabindex]': 'tabIndex',
              '[attr.aria-controls]': 'panelOpen ? id + "-panel" : null',
              '[attr.aria-expanded]': 'panelOpen',
              '[attr.aria-label]': 'ariaLabel || null',
              '[attr.aria-required]': 'required.toString()',
              '[attr.aria-disabled]': 'disabled.toString()',
              '[attr.aria-invalid]': 'errorState',
              '[attr.aria-describedby]': '_ariaDescribedby || null',
              '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',
              '[class.mat-select-disabled]': 'disabled',
              '[class.mat-select-invalid]': 'errorState',
              '[class.mat-select-required]': 'required',
              '[class.mat-select-empty]': 'empty',
              '[class.mat-select-multiple]': 'multiple',
              '(keydown)': '_handleKeydown($event)',
              '(focus)': '_onFocus()',
              '(blur)': '_onBlur()'
            },
            animations: [matSelectAnimations.transformPanelWrap, matSelectAnimations.transformPanel],
            providers: [{
              provide: _angular_material_form_field__WEBPACK_IMPORTED_MODULE_4__["MatFormFieldControl"],
              useExisting: MatSelect
            }, {
              provide: _angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MAT_OPTION_PARENT_COMPONENT"],
              useExisting: MatSelect
            }],
            styles: [".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}\n"]
          }]
        }], function () {
          return [{
            type: _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_5__["ViewportRuler"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectorRef"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["NgZone"]
          }, {
            type: _angular_material_core__WEBPACK_IMPORTED_MODULE_3__["ErrorStateMatcher"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"]
          }, {
            type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_7__["Directionality"],
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"]
            }]
          }, {
            type: _angular_forms__WEBPACK_IMPORTED_MODULE_11__["NgForm"],
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"]
            }]
          }, {
            type: _angular_forms__WEBPACK_IMPORTED_MODULE_11__["FormGroupDirective"],
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"]
            }]
          }, {
            type: _angular_material_form_field__WEBPACK_IMPORTED_MODULE_4__["MatFormField"],
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Inject"],
              args: [_angular_material_form_field__WEBPACK_IMPORTED_MODULE_4__["MAT_FORM_FIELD"]]
            }]
          }, {
            type: _angular_forms__WEBPACK_IMPORTED_MODULE_11__["NgControl"],
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Self"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"]
            }]
          }, {
            type: String,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Attribute"],
              args: ['tabindex']
            }]
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Inject"],
              args: [MAT_SELECT_SCROLL_STRATEGY]
            }]
          }, {
            type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_6__["LiveAnnouncer"]
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Inject"],
              args: [MAT_SELECT_CONFIG]
            }]
          }];
        }, {
          ariaLabel: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"],
            args: ['aria-label']
          }],
          openedChange: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"]
          }],
          _openedStream: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"],
            args: ['opened']
          }],
          _closedStream: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"],
            args: ['closed']
          }],
          selectionChange: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"]
          }],
          valueChange: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"]
          }],
          id: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          disableOptionCentering: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          typeaheadDebounceInterval: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          placeholder: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          required: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          multiple: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          compareWith: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          value: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          trigger: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewChild"],
            args: ['trigger']
          }],
          panel: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewChild"],
            args: ['panel']
          }],
          overlayDir: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewChild"],
            args: [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__["CdkConnectedOverlay"]]
          }],
          options: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ContentChildren"],
            args: [_angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MatOption"], {
              descendants: true
            }]
          }],
          optionGroups: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ContentChildren"],
            args: [_angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MAT_OPTGROUP"], {
              descendants: true
            }]
          }],
          panelClass: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          customTrigger: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ContentChild"],
            args: [MAT_SELECT_TRIGGER]
          }],
          ariaLabelledby: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"],
            args: ['aria-labelledby']
          }],
          errorStateMatcher: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          sortComparator: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }]
        });
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var MatSelectModule = function MatSelectModule() {
        _classCallCheck(this, MatSelectModule);
      };

      MatSelectModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineNgModule"]({
        type: MatSelectModule
      });
      MatSelectModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineInjector"]({
        factory: function MatSelectModule_Factory(t) {
          return new (t || MatSelectModule)();
        },
        providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER],
        imports: [[_angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"], _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__["OverlayModule"], _angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MatOptionModule"], _angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MatCommonModule"]], _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_5__["CdkScrollableModule"], _angular_material_form_field__WEBPACK_IMPORTED_MODULE_4__["MatFormFieldModule"], _angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MatOptionModule"], _angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MatCommonModule"]]
      });

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵsetNgModuleScope"](MatSelectModule, {
          declarations: function declarations() {
            return [MatSelect, MatSelectTrigger];
          },
          imports: function imports() {
            return [_angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"], _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__["OverlayModule"], _angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MatOptionModule"], _angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MatCommonModule"]];
          },
          exports: function exports() {
            return [_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_5__["CdkScrollableModule"], _angular_material_form_field__WEBPACK_IMPORTED_MODULE_4__["MatFormFieldModule"], MatSelect, MatSelectTrigger, _angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MatOptionModule"], _angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MatCommonModule"]];
          }
        });
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵsetClassMetadata"](MatSelectModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"],
          args: [{
            imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"], _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__["OverlayModule"], _angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MatOptionModule"], _angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MatCommonModule"]],
            exports: [_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_5__["CdkScrollableModule"], _angular_material_form_field__WEBPACK_IMPORTED_MODULE_4__["MatFormFieldModule"], MatSelect, MatSelectTrigger, _angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MatOptionModule"], _angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MatCommonModule"]],
            declarations: [MatSelect, MatSelectTrigger],
            providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]
          }]
        }], null, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Generated bundle index. Do not edit.
       */
      //# sourceMappingURL=select.js.map

      /***/

    },

    /***/
    "dNwA": function dNwA(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Swahili [sw]
      //! author : Fahad Kassim : https://github.com/fadsel
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var sw = moment.defineLocale('sw', {
          months: 'Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba'.split('_'),
          monthsShort: 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des'.split('_'),
          weekdays: 'Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi'.split('_'),
          weekdaysShort: 'Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos'.split('_'),
          weekdaysMin: 'J2_J3_J4_J5_Al_Ij_J1'.split('_'),
          weekdaysParseExact: true,
          longDateFormat: {
            LT: 'hh:mm A',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
          },
          calendar: {
            sameDay: '[leo saa] LT',
            nextDay: '[kesho saa] LT',
            nextWeek: '[wiki ijayo] dddd [saat] LT',
            lastDay: '[jana] LT',
            lastWeek: '[wiki iliyopita] dddd [saat] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: '%s baadaye',
            past: 'tokea %s',
            s: 'hivi punde',
            ss: 'sekunde %d',
            m: 'dakika moja',
            mm: 'dakika %d',
            h: 'saa limoja',
            hh: 'masaa %d',
            d: 'siku moja',
            dd: 'siku %d',
            M: 'mwezi mmoja',
            MM: 'miezi %d',
            y: 'mwaka mmoja',
            yy: 'miaka %d'
          },
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 7th is the first week of the year.

          }
        });
        return sw;
      });
      /***/

    },

    /***/
    "dlQQ": function dlQQ(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony default export */


      __webpack_exports__["default"] = ".mat-form-field {\n  font-size: 14px;\n  width: 100%;\n}\n\n.mat-cell {\n  width: auto;\n}\n\n.mat-cell-id {\n  width: 100px;\n}\n\n.margin-btn-filter {\n  margin-bottom: 5px;\n}\n\n.container-tab {\n  height: auto;\n  width: 100%;\n  max-width: 100%;\n  overflow: auto;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGFnZXMvaGlzdG9yaWFsL2RvY3RvcmFIaXN0b3JpYWwvaGlzdG9yaWFsRG9jLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsZUFBQTtFQUNBLFdBQUE7QUFDRjs7QUFDQTtFQUNFLFdBQUE7QUFFRjs7QUFBQTtFQUNFLFlBQUE7QUFHRjs7QUFEQTtFQUNFLGtCQUFBO0FBSUY7O0FBRkE7RUFDRSxZQUFBO0VBQ0EsV0FBQTtFQUNBLGVBQUE7RUFDQSxjQUFBO0FBS0YiLCJmaWxlIjoic3JjL2FwcC9wYWdlcy9oaXN0b3JpYWwvZG9jdG9yYUhpc3RvcmlhbC9oaXN0b3JpYWxEb2MuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIubWF0LWZvcm0tZmllbGQge1xyXG4gIGZvbnQtc2l6ZTogMTRweDtcclxuICB3aWR0aDogMTAwJTtcclxufVxyXG4ubWF0LWNlbGx7XHJcbiAgd2lkdGg6IGF1dG87XHJcbn1cclxuLm1hdC1jZWxsLWlke1xyXG4gIHdpZHRoOiAxMDBweDtcclxufVxyXG4ubWFyZ2luLWJ0bi1maWx0ZXIge1xyXG4gIG1hcmdpbi1ib3R0b206IDVweDtcclxufVxyXG4uY29udGFpbmVyLXRhYntcclxuICBoZWlnaHQ6IGF1dG87XHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgbWF4LXdpZHRoOiAxMDAlO1xyXG4gIG92ZXJmbG93OiBhdXRvO1xyXG59XHJcbiJdfQ== */";
      /***/
    },

    /***/
    "e+ae": function eAe(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Slovak [sk]
      //! author : Martin Minka : https://github.com/k2s
      //! based on work of petrbela : https://github.com/petrbela
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var months = 'január_február_marec_apríl_máj_jún_júl_august_september_október_november_december'.split('_'),
            monthsShort = 'jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec'.split('_');

        function plural(n) {
          return n > 1 && n < 5;
        }

        function translate(number, withoutSuffix, key, isFuture) {
          var result = number + ' ';

          switch (key) {
            case 's':
              // a few seconds / in a few seconds / a few seconds ago
              return withoutSuffix || isFuture ? 'pár sekúnd' : 'pár sekundami';

            case 'ss':
              // 9 seconds / in 9 seconds / 9 seconds ago
              if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'sekundy' : 'sekúnd');
              } else {
                return result + 'sekundami';
              }

            case 'm':
              // a minute / in a minute / a minute ago
              return withoutSuffix ? 'minúta' : isFuture ? 'minútu' : 'minútou';

            case 'mm':
              // 9 minutes / in 9 minutes / 9 minutes ago
              if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'minúty' : 'minút');
              } else {
                return result + 'minútami';
              }

            case 'h':
              // an hour / in an hour / an hour ago
              return withoutSuffix ? 'hodina' : isFuture ? 'hodinu' : 'hodinou';

            case 'hh':
              // 9 hours / in 9 hours / 9 hours ago
              if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'hodiny' : 'hodín');
              } else {
                return result + 'hodinami';
              }

            case 'd':
              // a day / in a day / a day ago
              return withoutSuffix || isFuture ? 'deň' : 'dňom';

            case 'dd':
              // 9 days / in 9 days / 9 days ago
              if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'dni' : 'dní');
              } else {
                return result + 'dňami';
              }

            case 'M':
              // a month / in a month / a month ago
              return withoutSuffix || isFuture ? 'mesiac' : 'mesiacom';

            case 'MM':
              // 9 months / in 9 months / 9 months ago
              if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'mesiace' : 'mesiacov');
              } else {
                return result + 'mesiacmi';
              }

            case 'y':
              // a year / in a year / a year ago
              return withoutSuffix || isFuture ? 'rok' : 'rokom';

            case 'yy':
              // 9 years / in 9 years / 9 years ago
              if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'roky' : 'rokov');
              } else {
                return result + 'rokmi';
              }

          }
        }

        var sk = moment.defineLocale('sk', {
          months: months,
          monthsShort: monthsShort,
          weekdays: 'nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota'.split('_'),
          weekdaysShort: 'ne_po_ut_st_št_pi_so'.split('_'),
          weekdaysMin: 'ne_po_ut_st_št_pi_so'.split('_'),
          longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd D. MMMM YYYY H:mm'
          },
          calendar: {
            sameDay: '[dnes o] LT',
            nextDay: '[zajtra o] LT',
            nextWeek: function nextWeek() {
              switch (this.day()) {
                case 0:
                  return '[v nedeľu o] LT';

                case 1:
                case 2:
                  return '[v] dddd [o] LT';

                case 3:
                  return '[v stredu o] LT';

                case 4:
                  return '[vo štvrtok o] LT';

                case 5:
                  return '[v piatok o] LT';

                case 6:
                  return '[v sobotu o] LT';
              }
            },
            lastDay: '[včera o] LT',
            lastWeek: function lastWeek() {
              switch (this.day()) {
                case 0:
                  return '[minulú nedeľu o] LT';

                case 1:
                case 2:
                  return '[minulý] dddd [o] LT';

                case 3:
                  return '[minulú stredu o] LT';

                case 4:
                case 5:
                  return '[minulý] dddd [o] LT';

                case 6:
                  return '[minulú sobotu o] LT';
              }
            },
            sameElse: 'L'
          },
          relativeTime: {
            future: 'za %s',
            past: 'pred %s',
            s: translate,
            ss: translate,
            m: translate,
            mm: translate,
            h: translate,
            hh: translate,
            d: translate,
            dd: translate,
            M: translate,
            MM: translate,
            y: translate,
            yy: translate
          },
          dayOfMonthOrdinalParse: /\d{1,2}\./,
          ordinal: '%d.',
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.

          }
        });
        return sk;
      });
      /***/

    },

    /***/
    "eTr1": function eTr1(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony default export */


      __webpack_exports__["default"] = ".mat-form-field {\n  font-size: 14px;\n  width: 100%;\n}\n\n.mat-cell {\n  width: auto;\n}\n\n.mat-cell-id {\n  width: 100px;\n}\n\n.margin-btn-filter {\n  margin-bottom: 5px;\n}\n\n.container-tab {\n  height: auto;\n  width: 100%;\n  max-width: 100%;\n  overflow: auto;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGFnZXMvcHJvZHVjdG9zL2ludmVudGFyaW8vaW52ZW50YXJpby5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGVBQUE7RUFDQSxXQUFBO0FBQ0Y7O0FBQ0E7RUFDRSxXQUFBO0FBRUY7O0FBQUE7RUFDRSxZQUFBO0FBR0Y7O0FBREE7RUFDRSxrQkFBQTtBQUlGOztBQUZBO0VBQ0UsWUFBQTtFQUNBLFdBQUE7RUFDQSxlQUFBO0VBQ0EsY0FBQTtBQUtGIiwiZmlsZSI6InNyYy9hcHAvcGFnZXMvcHJvZHVjdG9zL2ludmVudGFyaW8vaW52ZW50YXJpby5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5tYXQtZm9ybS1maWVsZCB7XHJcbiAgZm9udC1zaXplOiAxNHB4O1xyXG4gIHdpZHRoOiAxMDAlO1xyXG59XHJcbi5tYXQtY2VsbHtcclxuICB3aWR0aDogYXV0bztcclxufVxyXG4ubWF0LWNlbGwtaWR7XHJcbiAgd2lkdGg6IDEwMHB4O1xyXG59XHJcbi5tYXJnaW4tYnRuLWZpbHRlciB7XHJcbiAgbWFyZ2luLWJvdHRvbTogNXB4O1xyXG59XHJcbi5jb250YWluZXItdGFie1xyXG4gIGhlaWdodDogYXV0bztcclxuICB3aWR0aDogMTAwJTtcclxuICBtYXgtd2lkdGg6IDEwMCU7XHJcbiAgb3ZlcmZsb3c6IGF1dG87XHJcbn1cclxuIl19 */";
      /***/
    },

    /***/
    "f6nW": function f6nW(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "BaseCdkCell", function () {
        return BaseCdkCell;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "BaseRowDef", function () {
        return BaseRowDef;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CDK_ROW_TEMPLATE", function () {
        return CDK_ROW_TEMPLATE;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CDK_TABLE", function () {
        return CDK_TABLE;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CDK_TABLE_TEMPLATE", function () {
        return CDK_TABLE_TEMPLATE;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CdkCell", function () {
        return CdkCell;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CdkCellDef", function () {
        return CdkCellDef;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CdkCellOutlet", function () {
        return CdkCellOutlet;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CdkColumnDef", function () {
        return CdkColumnDef;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CdkFooterCell", function () {
        return CdkFooterCell;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CdkFooterCellDef", function () {
        return CdkFooterCellDef;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CdkFooterRow", function () {
        return CdkFooterRow;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CdkFooterRowDef", function () {
        return CdkFooterRowDef;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CdkHeaderCell", function () {
        return CdkHeaderCell;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CdkHeaderCellDef", function () {
        return CdkHeaderCellDef;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CdkHeaderRow", function () {
        return CdkHeaderRow;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CdkHeaderRowDef", function () {
        return CdkHeaderRowDef;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CdkNoDataRow", function () {
        return CdkNoDataRow;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CdkRow", function () {
        return CdkRow;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CdkRowDef", function () {
        return CdkRowDef;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CdkTable", function () {
        return CdkTable;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CdkTableModule", function () {
        return CdkTableModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CdkTextColumn", function () {
        return CdkTextColumn;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DataRowOutlet", function () {
        return DataRowOutlet;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FooterRowOutlet", function () {
        return FooterRowOutlet;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "HeaderRowOutlet", function () {
        return HeaderRowOutlet;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NoDataRowOutlet", function () {
        return NoDataRowOutlet;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "STICKY_DIRECTIONS", function () {
        return STICKY_DIRECTIONS;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "StickyStyler", function () {
        return StickyStyler;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TEXT_COLUMN_OPTIONS", function () {
        return TEXT_COLUMN_OPTIONS;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "_COALESCED_STYLE_SCHEDULER", function () {
        return _COALESCED_STYLE_SCHEDULER;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "_CoalescedStyleScheduler", function () {
        return _CoalescedStyleScheduler;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "_Schedule", function () {
        return _Schedule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "mixinHasStickyInput", function () {
        return mixinHasStickyInput;
      });
      /* harmony import */


      var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/cdk/bidi */
      "cH1L");
      /* harmony import */


      var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/cdk/coercion */
      "8LU1");
      /* harmony import */


      var _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/cdk/collections */
      "0EQZ");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/cdk/platform */
      "nLfN");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "DataSource", function () {
        return _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_2__["DataSource"];
      });
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @angular/common */
      "ofXK");
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! rxjs */
      "qCKp");
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! rxjs/operators */
      "kU1M");
      /* harmony import */


      var _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! @angular/cdk/scrolling */
      "vxfF");

      var _c0 = [[["caption"]], [["colgroup"], ["col"]]];
      var _c1 = ["caption", "colgroup, col"];

      function CdkTextColumn_th_1_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "th", 3);

          _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵstyleProp"]("text-align", ctx_r0.justify);

          _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtextInterpolate1"](" ", ctx_r0.headerText, " ");
        }
      }

      function CdkTextColumn_td_2_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "td", 4);

          _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var data_r2 = ctx.$implicit;

          var ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵstyleProp"]("text-align", ctx_r1.justify);

          _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtextInterpolate1"](" ", ctx_r1.dataAccessor(data_r2, ctx_r1.name), " ");
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Mixin to provide a directive with a function that checks if the sticky input has been
       * changed since the last time the function was called. Essentially adds a dirty-check to the
       * sticky value.
       * @docs-private
       */


      function mixinHasStickyInput(base) {
        return /*#__PURE__*/function (_base) {
          _inherits(_class, _base);

          var _super22 = _createSuper(_class);

          function _class() {
            var _this43;

            _classCallCheck(this, _class);

            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }

            _this43 = _super22.call.apply(_super22, [this].concat(args));
            _this43._sticky = false;
            /** Whether the sticky input has changed since it was last checked. */

            _this43._hasStickyChanged = false;
            return _this43;
          }
          /** Whether sticky positioning should be applied. */


          _createClass(_class, [{
            key: "sticky",
            get: function get() {
              return this._sticky;
            },
            set: function set(v) {
              var prevValue = this._sticky;
              this._sticky = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceBooleanProperty"])(v);
              this._hasStickyChanged = prevValue !== this._sticky;
            }
            /** Whether the sticky value has changed since this was last called. */

          }, {
            key: "hasStickyChanged",
            value: function hasStickyChanged() {
              var hasStickyChanged = this._hasStickyChanged;
              this._hasStickyChanged = false;
              return hasStickyChanged;
            }
            /** Resets the dirty check for cases where the sticky state has been used without checking. */

          }, {
            key: "resetStickyChanged",
            value: function resetStickyChanged() {
              this._hasStickyChanged = false;
            }
          }]);

          return _class;
        }(base);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Used to provide a table to some of the sub-components without causing a circular dependency.
       * @docs-private
       */


      var CDK_TABLE = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["InjectionToken"]('CDK_TABLE');
      /** Injection token that can be used to specify the text column options. */

      var TEXT_COLUMN_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["InjectionToken"]('text-column-options');
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Cell definition for a CDK table.
       * Captures the template of a column's data row cell as well as cell-specific properties.
       */

      var CdkCellDef = function CdkCellDef(
      /** @docs-private */
      template) {
        _classCallCheck(this, CdkCellDef);

        this.template = template;
      };

      CdkCellDef.ɵfac = function CdkCellDef_Factory(t) {
        return new (t || CdkCellDef)(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_3__["TemplateRef"]));
      };

      CdkCellDef.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineDirective"]({
        type: CdkCellDef,
        selectors: [["", "cdkCellDef", ""]]
      });

      CdkCellDef.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["TemplateRef"]
        }];
      };
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵsetClassMetadata"](CdkCellDef, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"],
          args: [{
            selector: '[cdkCellDef]'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["TemplateRef"]
          }];
        }, null);
      })();
      /**
       * Header cell definition for a CDK table.
       * Captures the template of a column's header cell and as well as cell-specific properties.
       */


      var CdkHeaderCellDef = function CdkHeaderCellDef(
      /** @docs-private */
      template) {
        _classCallCheck(this, CdkHeaderCellDef);

        this.template = template;
      };

      CdkHeaderCellDef.ɵfac = function CdkHeaderCellDef_Factory(t) {
        return new (t || CdkHeaderCellDef)(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_3__["TemplateRef"]));
      };

      CdkHeaderCellDef.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineDirective"]({
        type: CdkHeaderCellDef,
        selectors: [["", "cdkHeaderCellDef", ""]]
      });

      CdkHeaderCellDef.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["TemplateRef"]
        }];
      };
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵsetClassMetadata"](CdkHeaderCellDef, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"],
          args: [{
            selector: '[cdkHeaderCellDef]'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["TemplateRef"]
          }];
        }, null);
      })();
      /**
       * Footer cell definition for a CDK table.
       * Captures the template of a column's footer cell and as well as cell-specific properties.
       */


      var CdkFooterCellDef = function CdkFooterCellDef(
      /** @docs-private */
      template) {
        _classCallCheck(this, CdkFooterCellDef);

        this.template = template;
      };

      CdkFooterCellDef.ɵfac = function CdkFooterCellDef_Factory(t) {
        return new (t || CdkFooterCellDef)(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_3__["TemplateRef"]));
      };

      CdkFooterCellDef.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineDirective"]({
        type: CdkFooterCellDef,
        selectors: [["", "cdkFooterCellDef", ""]]
      });

      CdkFooterCellDef.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["TemplateRef"]
        }];
      };
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵsetClassMetadata"](CdkFooterCellDef, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"],
          args: [{
            selector: '[cdkFooterCellDef]'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["TemplateRef"]
          }];
        }, null);
      })(); // Boilerplate for applying mixins to CdkColumnDef.

      /** @docs-private */


      var CdkColumnDefBase = function CdkColumnDefBase() {
        _classCallCheck(this, CdkColumnDefBase);
      };

      var _CdkColumnDefBase = mixinHasStickyInput(CdkColumnDefBase);
      /**
       * Column definition for the CDK table.
       * Defines a set of cells available for a table column.
       */


      var CdkColumnDef = /*#__PURE__*/function (_CdkColumnDefBase2) {
        _inherits(CdkColumnDef, _CdkColumnDefBase2);

        var _super23 = _createSuper(CdkColumnDef);

        function CdkColumnDef(_table) {
          var _this44;

          _classCallCheck(this, CdkColumnDef);

          _this44 = _super23.call(this);
          _this44._table = _table;
          _this44._stickyEnd = false;
          return _this44;
        }
        /** Unique name for this column. */


        _createClass(CdkColumnDef, [{
          key: "name",
          get: function get() {
            return this._name;
          },
          set: function set(name) {
            this._setNameInput(name);
          }
          /**
           * Whether this column should be sticky positioned on the end of the row. Should make sure
           * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value
           * has been changed.
           */

        }, {
          key: "stickyEnd",
          get: function get() {
            return this._stickyEnd;
          },
          set: function set(v) {
            var prevValue = this._stickyEnd;
            this._stickyEnd = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceBooleanProperty"])(v);
            this._hasStickyChanged = prevValue !== this._stickyEnd;
          }
          /**
           * Overridable method that sets the css classes that will be added to every cell in this
           * column.
           * In the future, columnCssClassName will change from type string[] to string and this
           * will set a single string value.
           * @docs-private
           */

        }, {
          key: "_updateColumnCssClassName",
          value: function _updateColumnCssClassName() {
            this._columnCssClassName = ["cdk-column-".concat(this.cssClassFriendlyName)];
          }
          /**
           * This has been extracted to a util because of TS 4 and VE.
           * View Engine doesn't support property rename inheritance.
           * TS 4.0 doesn't allow properties to override accessors or vice-versa.
           * @docs-private
           */

        }, {
          key: "_setNameInput",
          value: function _setNameInput(value) {
            // If the directive is set without a name (updated programatically), then this setter will
            // trigger with an empty string and should not overwrite the programatically set value.
            if (value) {
              this._name = value;
              this.cssClassFriendlyName = value.replace(/[^a-z0-9_-]/ig, '-');

              this._updateColumnCssClassName();
            }
          }
        }]);

        return CdkColumnDef;
      }(_CdkColumnDefBase);

      CdkColumnDef.ɵfac = function CdkColumnDef_Factory(t) {
        return new (t || CdkColumnDef)(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](CDK_TABLE, 8));
      };

      CdkColumnDef.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineDirective"]({
        type: CdkColumnDef,
        selectors: [["", "cdkColumnDef", ""]],
        contentQueries: function CdkColumnDef_ContentQueries(rf, ctx, dirIndex) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵcontentQuery"](dirIndex, CdkCellDef, true);

            _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵcontentQuery"](dirIndex, CdkHeaderCellDef, true);

            _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵcontentQuery"](dirIndex, CdkFooterCellDef, true);
          }

          if (rf & 2) {
            var _t;

            _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵloadQuery"]()) && (ctx.cell = _t.first);
            _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵloadQuery"]()) && (ctx.headerCell = _t.first);
            _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵloadQuery"]()) && (ctx.footerCell = _t.first);
          }
        },
        inputs: {
          sticky: "sticky",
          name: ["cdkColumnDef", "name"],
          stickyEnd: "stickyEnd"
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵProvidersFeature"]([{
          provide: 'MAT_SORT_HEADER_COLUMN_DEF',
          useExisting: CdkColumnDef
        }]), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵInheritDefinitionFeature"]]
      });

      CdkColumnDef.ctorParameters = function () {
        return [{
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"],
            args: [CDK_TABLE]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"]
          }]
        }];
      };

      CdkColumnDef.propDecorators = {
        name: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"],
          args: ['cdkColumnDef']
        }],
        stickyEnd: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"],
          args: ['stickyEnd']
        }],
        cell: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ContentChild"],
          args: [CdkCellDef]
        }],
        headerCell: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ContentChild"],
          args: [CdkHeaderCellDef]
        }],
        footerCell: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ContentChild"],
          args: [CdkFooterCellDef]
        }]
      };
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵsetClassMetadata"](CdkColumnDef, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"],
          args: [{
            selector: '[cdkColumnDef]',
            inputs: ['sticky'],
            providers: [{
              provide: 'MAT_SORT_HEADER_COLUMN_DEF',
              useExisting: CdkColumnDef
            }]
          }]
        }], function () {
          return [{
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"],
              args: [CDK_TABLE]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"]
            }]
          }];
        }, {
          name: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"],
            args: ['cdkColumnDef']
          }],
          stickyEnd: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"],
            args: ['stickyEnd']
          }],
          cell: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ContentChild"],
            args: [CdkCellDef]
          }],
          headerCell: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ContentChild"],
            args: [CdkHeaderCellDef]
          }],
          footerCell: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ContentChild"],
            args: [CdkFooterCellDef]
          }]
        });
      })();
      /** Base class for the cells. Adds a CSS classname that identifies the column it renders in. */


      var BaseCdkCell = function BaseCdkCell(columnDef, elementRef) {
        _classCallCheck(this, BaseCdkCell);

        // If IE 11 is dropped before we switch to setting a single class name, change to multi param
        // with destructuring.
        var classList = elementRef.nativeElement.classList;

        var _iterator = _createForOfIteratorHelper(columnDef._columnCssClassName),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var className = _step.value;
            classList.add(className);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      };
      /** Header cell template container that adds the right classes and role. */


      var CdkHeaderCell = /*#__PURE__*/function (_BaseCdkCell) {
        _inherits(CdkHeaderCell, _BaseCdkCell);

        var _super24 = _createSuper(CdkHeaderCell);

        function CdkHeaderCell(columnDef, elementRef) {
          _classCallCheck(this, CdkHeaderCell);

          return _super24.call(this, columnDef, elementRef);
        }

        return CdkHeaderCell;
      }(BaseCdkCell);

      CdkHeaderCell.ɵfac = function CdkHeaderCell_Factory(t) {
        return new (t || CdkHeaderCell)(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](CdkColumnDef), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"]));
      };

      CdkHeaderCell.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineDirective"]({
        type: CdkHeaderCell,
        selectors: [["cdk-header-cell"], ["th", "cdk-header-cell", ""]],
        hostAttrs: ["role", "columnheader", 1, "cdk-header-cell"],
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵInheritDefinitionFeature"]]
      });

      CdkHeaderCell.ctorParameters = function () {
        return [{
          type: CdkColumnDef
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"]
        }];
      };
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵsetClassMetadata"](CdkHeaderCell, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"],
          args: [{
            selector: 'cdk-header-cell, th[cdk-header-cell]',
            host: {
              'class': 'cdk-header-cell',
              'role': 'columnheader'
            }
          }]
        }], function () {
          return [{
            type: CdkColumnDef
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"]
          }];
        }, null);
      })();
      /** Footer cell template container that adds the right classes and role. */


      var CdkFooterCell = /*#__PURE__*/function (_BaseCdkCell2) {
        _inherits(CdkFooterCell, _BaseCdkCell2);

        var _super25 = _createSuper(CdkFooterCell);

        function CdkFooterCell(columnDef, elementRef) {
          _classCallCheck(this, CdkFooterCell);

          return _super25.call(this, columnDef, elementRef);
        }

        return CdkFooterCell;
      }(BaseCdkCell);

      CdkFooterCell.ɵfac = function CdkFooterCell_Factory(t) {
        return new (t || CdkFooterCell)(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](CdkColumnDef), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"]));
      };

      CdkFooterCell.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineDirective"]({
        type: CdkFooterCell,
        selectors: [["cdk-footer-cell"], ["td", "cdk-footer-cell", ""]],
        hostAttrs: ["role", "gridcell", 1, "cdk-footer-cell"],
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵInheritDefinitionFeature"]]
      });

      CdkFooterCell.ctorParameters = function () {
        return [{
          type: CdkColumnDef
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"]
        }];
      };
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵsetClassMetadata"](CdkFooterCell, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"],
          args: [{
            selector: 'cdk-footer-cell, td[cdk-footer-cell]',
            host: {
              'class': 'cdk-footer-cell',
              'role': 'gridcell'
            }
          }]
        }], function () {
          return [{
            type: CdkColumnDef
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"]
          }];
        }, null);
      })();
      /** Cell template container that adds the right classes and role. */


      var CdkCell = /*#__PURE__*/function (_BaseCdkCell3) {
        _inherits(CdkCell, _BaseCdkCell3);

        var _super26 = _createSuper(CdkCell);

        function CdkCell(columnDef, elementRef) {
          _classCallCheck(this, CdkCell);

          return _super26.call(this, columnDef, elementRef);
        }

        return CdkCell;
      }(BaseCdkCell);

      CdkCell.ɵfac = function CdkCell_Factory(t) {
        return new (t || CdkCell)(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](CdkColumnDef), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"]));
      };

      CdkCell.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineDirective"]({
        type: CdkCell,
        selectors: [["cdk-cell"], ["td", "cdk-cell", ""]],
        hostAttrs: ["role", "gridcell", 1, "cdk-cell"],
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵInheritDefinitionFeature"]]
      });

      CdkCell.ctorParameters = function () {
        return [{
          type: CdkColumnDef
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"]
        }];
      };
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵsetClassMetadata"](CdkCell, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"],
          args: [{
            selector: 'cdk-cell, td[cdk-cell]',
            host: {
              'class': 'cdk-cell',
              'role': 'gridcell'
            }
          }]
        }], function () {
          return [{
            type: CdkColumnDef
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"]
          }];
        }, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @docs-private
       */


      var _Schedule = function _Schedule() {
        _classCallCheck(this, _Schedule);

        this.tasks = [];
        this.endTasks = [];
      };
      /** Injection token used to provide a coalesced style scheduler. */


      var _COALESCED_STYLE_SCHEDULER = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["InjectionToken"]('_COALESCED_STYLE_SCHEDULER');
      /**
       * Allows grouping up CSSDom mutations after the current execution context.
       * This can significantly improve performance when separate consecutive functions are
       * reading from the CSSDom and then mutating it.
       *
       * @docs-private
       */


      var _CoalescedStyleScheduler = /*#__PURE__*/function () {
        function _CoalescedStyleScheduler(_ngZone) {
          _classCallCheck(this, _CoalescedStyleScheduler);

          this._ngZone = _ngZone;
          this._currentSchedule = null;
          this._destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_6__["Subject"]();
        }
        /**
         * Schedules the specified task to run at the end of the current VM turn.
         */


        _createClass(_CoalescedStyleScheduler, [{
          key: "schedule",
          value: function schedule(task) {
            this._createScheduleIfNeeded();

            this._currentSchedule.tasks.push(task);
          }
          /**
           * Schedules the specified task to run after other scheduled tasks at the end of the current
           * VM turn.
           */

        }, {
          key: "scheduleEnd",
          value: function scheduleEnd(task) {
            this._createScheduleIfNeeded();

            this._currentSchedule.endTasks.push(task);
          }
          /** Prevent any further tasks from running. */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this._destroyed.next();

            this._destroyed.complete();
          }
        }, {
          key: "_createScheduleIfNeeded",
          value: function _createScheduleIfNeeded() {
            var _this45 = this;

            if (this._currentSchedule) {
              return;
            }

            this._currentSchedule = new _Schedule();

            this._getScheduleObservable().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["takeUntil"])(this._destroyed)).subscribe(function () {
              while (_this45._currentSchedule.tasks.length || _this45._currentSchedule.endTasks.length) {
                var schedule = _this45._currentSchedule; // Capture new tasks scheduled by the current set of tasks.

                _this45._currentSchedule = new _Schedule();

                var _iterator2 = _createForOfIteratorHelper(schedule.tasks),
                    _step2;

                try {
                  for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                    var task = _step2.value;
                    task();
                  }
                } catch (err) {
                  _iterator2.e(err);
                } finally {
                  _iterator2.f();
                }

                var _iterator3 = _createForOfIteratorHelper(schedule.endTasks),
                    _step3;

                try {
                  for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                    var _task = _step3.value;

                    _task();
                  }
                } catch (err) {
                  _iterator3.e(err);
                } finally {
                  _iterator3.f();
                }
              }

              _this45._currentSchedule = null;
            });
          }
        }, {
          key: "_getScheduleObservable",
          value: function _getScheduleObservable() {
            // Use onStable when in the context of an ongoing change detection cycle so that we
            // do not accidentally trigger additional cycles.
            return this._ngZone.isStable ? Object(rxjs__WEBPACK_IMPORTED_MODULE_6__["from"])(Promise.resolve(undefined)) : this._ngZone.onStable.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["take"])(1));
          }
        }]);

        return _CoalescedStyleScheduler;
      }();

      _CoalescedStyleScheduler.ɵfac = function _CoalescedStyleScheduler_Factory(t) {
        return new (t || _CoalescedStyleScheduler)(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_3__["NgZone"]));
      };

      _CoalescedStyleScheduler.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineInjectable"]({
        token: _CoalescedStyleScheduler,
        factory: _CoalescedStyleScheduler.ɵfac
      });

      _CoalescedStyleScheduler.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgZone"]
        }];
      };
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵsetClassMetadata"](_CoalescedStyleScheduler, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Injectable"]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgZone"]
          }];
        }, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * The row template that can be used by the mat-table. Should not be used outside of the
       * material library.
       */


      var CDK_ROW_TEMPLATE = "<ng-container cdkCellOutlet></ng-container>";
      /**
       * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs
       * for changes and notifying the table.
       */

      var BaseRowDef = /*#__PURE__*/function () {
        function BaseRowDef(
        /** @docs-private */
        template, _differs) {
          _classCallCheck(this, BaseRowDef);

          this.template = template;
          this._differs = _differs;
        }

        _createClass(BaseRowDef, [{
          key: "ngOnChanges",
          value: function ngOnChanges(changes) {
            // Create a new columns differ if one does not yet exist. Initialize it based on initial value
            // of the columns property or an empty array if none is provided.
            if (!this._columnsDiffer) {
              var columns = changes['columns'] && changes['columns'].currentValue || [];
              this._columnsDiffer = this._differs.find(columns).create();

              this._columnsDiffer.diff(columns);
            }
          }
          /**
           * Returns the difference between the current columns and the columns from the last diff, or null
           * if there is no difference.
           */

        }, {
          key: "getColumnsDiff",
          value: function getColumnsDiff() {
            return this._columnsDiffer.diff(this.columns);
          }
          /** Gets this row def's relevant cell template from the provided column def. */

        }, {
          key: "extractCellTemplate",
          value: function extractCellTemplate(column) {
            if (this instanceof CdkHeaderRowDef) {
              return column.headerCell.template;
            }

            if (this instanceof CdkFooterRowDef) {
              return column.footerCell.template;
            } else {
              return column.cell.template;
            }
          }
        }]);

        return BaseRowDef;
      }();

      BaseRowDef.ɵfac = function BaseRowDef_Factory(t) {
        return new (t || BaseRowDef)(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_3__["TemplateRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_3__["IterableDiffers"]));
      };

      BaseRowDef.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineDirective"]({
        type: BaseRowDef,
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵNgOnChangesFeature"]]
      });

      BaseRowDef.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["TemplateRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["IterableDiffers"]
        }];
      };
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵsetClassMetadata"](BaseRowDef, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["TemplateRef"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["IterableDiffers"]
          }];
        }, null);
      })(); // Boilerplate for applying mixins to CdkHeaderRowDef.

      /** @docs-private */


      var CdkHeaderRowDefBase = /*#__PURE__*/function (_BaseRowDef) {
        _inherits(CdkHeaderRowDefBase, _BaseRowDef);

        var _super27 = _createSuper(CdkHeaderRowDefBase);

        function CdkHeaderRowDefBase() {
          _classCallCheck(this, CdkHeaderRowDefBase);

          return _super27.apply(this, arguments);
        }

        return CdkHeaderRowDefBase;
      }(BaseRowDef);

      var _CdkHeaderRowDefBase = mixinHasStickyInput(CdkHeaderRowDefBase);
      /**
       * Header row definition for the CDK table.
       * Captures the header row's template and other header properties such as the columns to display.
       */


      var CdkHeaderRowDef = /*#__PURE__*/function (_CdkHeaderRowDefBase2) {
        _inherits(CdkHeaderRowDef, _CdkHeaderRowDefBase2);

        var _super28 = _createSuper(CdkHeaderRowDef);

        function CdkHeaderRowDef(template, _differs, _table) {
          var _this46;

          _classCallCheck(this, CdkHeaderRowDef);

          _this46 = _super28.call(this, template, _differs);
          _this46._table = _table;
          return _this46;
        } // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.
        // Explicitly define it so that the method is called as part of the Angular lifecycle.


        _createClass(CdkHeaderRowDef, [{
          key: "ngOnChanges",
          value: function ngOnChanges(changes) {
            _get(_getPrototypeOf(CdkHeaderRowDef.prototype), "ngOnChanges", this).call(this, changes);
          }
        }]);

        return CdkHeaderRowDef;
      }(_CdkHeaderRowDefBase);

      CdkHeaderRowDef.ɵfac = function CdkHeaderRowDef_Factory(t) {
        return new (t || CdkHeaderRowDef)(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_3__["TemplateRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_3__["IterableDiffers"]), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](CDK_TABLE, 8));
      };

      CdkHeaderRowDef.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineDirective"]({
        type: CdkHeaderRowDef,
        selectors: [["", "cdkHeaderRowDef", ""]],
        inputs: {
          columns: ["cdkHeaderRowDef", "columns"],
          sticky: ["cdkHeaderRowDefSticky", "sticky"]
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵInheritDefinitionFeature"], _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵNgOnChangesFeature"]]
      });

      CdkHeaderRowDef.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["TemplateRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["IterableDiffers"]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"],
            args: [CDK_TABLE]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"]
          }]
        }];
      };
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵsetClassMetadata"](CdkHeaderRowDef, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"],
          args: [{
            selector: '[cdkHeaderRowDef]',
            inputs: ['columns: cdkHeaderRowDef', 'sticky: cdkHeaderRowDefSticky']
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["TemplateRef"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["IterableDiffers"]
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"],
              args: [CDK_TABLE]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"]
            }]
          }];
        }, null);
      })(); // Boilerplate for applying mixins to CdkFooterRowDef.

      /** @docs-private */


      var CdkFooterRowDefBase = /*#__PURE__*/function (_BaseRowDef2) {
        _inherits(CdkFooterRowDefBase, _BaseRowDef2);

        var _super29 = _createSuper(CdkFooterRowDefBase);

        function CdkFooterRowDefBase() {
          _classCallCheck(this, CdkFooterRowDefBase);

          return _super29.apply(this, arguments);
        }

        return CdkFooterRowDefBase;
      }(BaseRowDef);

      var _CdkFooterRowDefBase = mixinHasStickyInput(CdkFooterRowDefBase);
      /**
       * Footer row definition for the CDK table.
       * Captures the footer row's template and other footer properties such as the columns to display.
       */


      var CdkFooterRowDef = /*#__PURE__*/function (_CdkFooterRowDefBase2) {
        _inherits(CdkFooterRowDef, _CdkFooterRowDefBase2);

        var _super30 = _createSuper(CdkFooterRowDef);

        function CdkFooterRowDef(template, _differs, _table) {
          var _this47;

          _classCallCheck(this, CdkFooterRowDef);

          _this47 = _super30.call(this, template, _differs);
          _this47._table = _table;
          return _this47;
        } // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.
        // Explicitly define it so that the method is called as part of the Angular lifecycle.


        _createClass(CdkFooterRowDef, [{
          key: "ngOnChanges",
          value: function ngOnChanges(changes) {
            _get(_getPrototypeOf(CdkFooterRowDef.prototype), "ngOnChanges", this).call(this, changes);
          }
        }]);

        return CdkFooterRowDef;
      }(_CdkFooterRowDefBase);

      CdkFooterRowDef.ɵfac = function CdkFooterRowDef_Factory(t) {
        return new (t || CdkFooterRowDef)(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_3__["TemplateRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_3__["IterableDiffers"]), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](CDK_TABLE, 8));
      };

      CdkFooterRowDef.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineDirective"]({
        type: CdkFooterRowDef,
        selectors: [["", "cdkFooterRowDef", ""]],
        inputs: {
          columns: ["cdkFooterRowDef", "columns"],
          sticky: ["cdkFooterRowDefSticky", "sticky"]
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵInheritDefinitionFeature"], _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵNgOnChangesFeature"]]
      });

      CdkFooterRowDef.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["TemplateRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["IterableDiffers"]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"],
            args: [CDK_TABLE]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"]
          }]
        }];
      };
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵsetClassMetadata"](CdkFooterRowDef, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"],
          args: [{
            selector: '[cdkFooterRowDef]',
            inputs: ['columns: cdkFooterRowDef', 'sticky: cdkFooterRowDefSticky']
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["TemplateRef"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["IterableDiffers"]
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"],
              args: [CDK_TABLE]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"]
            }]
          }];
        }, null);
      })();
      /**
       * Data row definition for the CDK table.
       * Captures the header row's template and other row properties such as the columns to display and
       * a when predicate that describes when this row should be used.
       */


      var CdkRowDef = /*#__PURE__*/function (_BaseRowDef3) {
        _inherits(CdkRowDef, _BaseRowDef3);

        var _super31 = _createSuper(CdkRowDef);

        // TODO(andrewseguin): Add an input for providing a switch function to determine
        //   if this template should be used.
        function CdkRowDef(template, _differs, _table) {
          var _this48;

          _classCallCheck(this, CdkRowDef);

          _this48 = _super31.call(this, template, _differs);
          _this48._table = _table;
          return _this48;
        }

        return CdkRowDef;
      }(BaseRowDef);

      CdkRowDef.ɵfac = function CdkRowDef_Factory(t) {
        return new (t || CdkRowDef)(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_3__["TemplateRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_3__["IterableDiffers"]), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](CDK_TABLE, 8));
      };

      CdkRowDef.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineDirective"]({
        type: CdkRowDef,
        selectors: [["", "cdkRowDef", ""]],
        inputs: {
          columns: ["cdkRowDefColumns", "columns"],
          when: ["cdkRowDefWhen", "when"]
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵInheritDefinitionFeature"]]
      });

      CdkRowDef.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["TemplateRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["IterableDiffers"]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"],
            args: [CDK_TABLE]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"]
          }]
        }];
      };
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵsetClassMetadata"](CdkRowDef, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"],
          args: [{
            selector: '[cdkRowDef]',
            inputs: ['columns: cdkRowDefColumns', 'when: cdkRowDefWhen']
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["TemplateRef"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["IterableDiffers"]
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"],
              args: [CDK_TABLE]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"]
            }]
          }];
        }, null);
      })();
      /**
       * Outlet for rendering cells inside of a row or header row.
       * @docs-private
       */


      var CdkCellOutlet = /*#__PURE__*/function () {
        function CdkCellOutlet(_viewContainer) {
          _classCallCheck(this, CdkCellOutlet);

          this._viewContainer = _viewContainer;
          CdkCellOutlet.mostRecentCellOutlet = this;
        }

        _createClass(CdkCellOutlet, [{
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            // If this was the last outlet being rendered in the view, remove the reference
            // from the static property after it has been destroyed to avoid leaking memory.
            if (CdkCellOutlet.mostRecentCellOutlet === this) {
              CdkCellOutlet.mostRecentCellOutlet = null;
            }
          }
        }]);

        return CdkCellOutlet;
      }();

      CdkCellOutlet.ɵfac = function CdkCellOutlet_Factory(t) {
        return new (t || CdkCellOutlet)(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewContainerRef"]));
      };

      CdkCellOutlet.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineDirective"]({
        type: CdkCellOutlet,
        selectors: [["", "cdkCellOutlet", ""]]
      });
      /**
       * Static property containing the latest constructed instance of this class.
       * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using
       * createEmbeddedView. After one of these components are created, this property will provide
       * a handle to provide that component's cells and context. After init, the CdkCellOutlet will
       * construct the cells with the provided context.
       */

      CdkCellOutlet.mostRecentCellOutlet = null;

      CdkCellOutlet.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewContainerRef"]
        }];
      };
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵsetClassMetadata"](CdkCellOutlet, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"],
          args: [{
            selector: '[cdkCellOutlet]'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewContainerRef"]
          }];
        }, null);
      })();
      /** Header template container that contains the cell outlet. Adds the right class and role. */


      var CdkHeaderRow = function CdkHeaderRow() {
        _classCallCheck(this, CdkHeaderRow);
      };

      CdkHeaderRow.ɵfac = function CdkHeaderRow_Factory(t) {
        return new (t || CdkHeaderRow)();
      };

      CdkHeaderRow.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineComponent"]({
        type: CdkHeaderRow,
        selectors: [["cdk-header-row"], ["tr", "cdk-header-row", ""]],
        hostAttrs: ["role", "row", 1, "cdk-header-row"],
        decls: 1,
        vars: 0,
        consts: [["cdkCellOutlet", ""]],
        template: function CdkHeaderRow_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementContainer"](0, 0);
          }
        },
        directives: [CdkCellOutlet],
        encapsulation: 2
      });
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵsetClassMetadata"](CdkHeaderRow, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"],
          args: [{
            selector: 'cdk-header-row, tr[cdk-header-row]',
            template: CDK_ROW_TEMPLATE,
            host: {
              'class': 'cdk-header-row',
              'role': 'row'
            },
            // See note on CdkTable for explanation on why this uses the default change detection strategy.
            // tslint:disable-next-line:validate-decorators
            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectionStrategy"].Default,
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewEncapsulation"].None
          }]
        }], null, null);
      })();
      /** Footer template container that contains the cell outlet. Adds the right class and role. */


      var CdkFooterRow = function CdkFooterRow() {
        _classCallCheck(this, CdkFooterRow);
      };

      CdkFooterRow.ɵfac = function CdkFooterRow_Factory(t) {
        return new (t || CdkFooterRow)();
      };

      CdkFooterRow.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineComponent"]({
        type: CdkFooterRow,
        selectors: [["cdk-footer-row"], ["tr", "cdk-footer-row", ""]],
        hostAttrs: ["role", "row", 1, "cdk-footer-row"],
        decls: 1,
        vars: 0,
        consts: [["cdkCellOutlet", ""]],
        template: function CdkFooterRow_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementContainer"](0, 0);
          }
        },
        directives: [CdkCellOutlet],
        encapsulation: 2
      });
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵsetClassMetadata"](CdkFooterRow, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"],
          args: [{
            selector: 'cdk-footer-row, tr[cdk-footer-row]',
            template: CDK_ROW_TEMPLATE,
            host: {
              'class': 'cdk-footer-row',
              'role': 'row'
            },
            // See note on CdkTable for explanation on why this uses the default change detection strategy.
            // tslint:disable-next-line:validate-decorators
            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectionStrategy"].Default,
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewEncapsulation"].None
          }]
        }], null, null);
      })();
      /** Data row template container that contains the cell outlet. Adds the right class and role. */


      var CdkRow = function CdkRow() {
        _classCallCheck(this, CdkRow);
      };

      CdkRow.ɵfac = function CdkRow_Factory(t) {
        return new (t || CdkRow)();
      };

      CdkRow.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineComponent"]({
        type: CdkRow,
        selectors: [["cdk-row"], ["tr", "cdk-row", ""]],
        hostAttrs: ["role", "row", 1, "cdk-row"],
        decls: 1,
        vars: 0,
        consts: [["cdkCellOutlet", ""]],
        template: function CdkRow_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementContainer"](0, 0);
          }
        },
        directives: [CdkCellOutlet],
        encapsulation: 2
      });
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵsetClassMetadata"](CdkRow, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"],
          args: [{
            selector: 'cdk-row, tr[cdk-row]',
            template: CDK_ROW_TEMPLATE,
            host: {
              'class': 'cdk-row',
              'role': 'row'
            },
            // See note on CdkTable for explanation on why this uses the default change detection strategy.
            // tslint:disable-next-line:validate-decorators
            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectionStrategy"].Default,
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewEncapsulation"].None
          }]
        }], null, null);
      })();
      /** Row that can be used to display a message when no data is shown in the table. */


      var CdkNoDataRow = function CdkNoDataRow(templateRef) {
        _classCallCheck(this, CdkNoDataRow);

        this.templateRef = templateRef;
      };

      CdkNoDataRow.ɵfac = function CdkNoDataRow_Factory(t) {
        return new (t || CdkNoDataRow)(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_3__["TemplateRef"]));
      };

      CdkNoDataRow.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineDirective"]({
        type: CdkNoDataRow,
        selectors: [["ng-template", "cdkNoDataRow", ""]]
      });

      CdkNoDataRow.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["TemplateRef"]
        }];
      };
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵsetClassMetadata"](CdkNoDataRow, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"],
          args: [{
            selector: 'ng-template[cdkNoDataRow]'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["TemplateRef"]
          }];
        }, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * List of all possible directions that can be used for sticky positioning.
       * @docs-private
       */


      var STICKY_DIRECTIONS = ['top', 'bottom', 'left', 'right'];
      /**
       * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.
       * @docs-private
       */

      var StickyStyler = /*#__PURE__*/function () {
        /**
         * @param _isNativeHtmlTable Whether the sticky logic should be based on a table
         *     that uses the native `<table>` element.
         * @param _stickCellCss The CSS class that will be applied to every row/cell that has
         *     sticky positioning applied.
         * @param direction The directionality context of the table (ltr/rtl); affects column positioning
         *     by reversing left/right positions.
         * @param _isBrowser Whether the table is currently being rendered on the server or the client.
         * @param _needsPositionStickyOnElement Whether we need to specify position: sticky on cells
         *     using inline styles. If false, it is assumed that position: sticky is included in
         *     the component stylesheet for _stickCellCss.
         */
        function StickyStyler(_isNativeHtmlTable, _stickCellCss, direction,
        /**
         * @deprecated `_coalescedStyleScheduler` parameter to become required.
         * @breaking-change 11.0.0
         */
        _coalescedStyleScheduler) {
          var _isBrowser = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;

          var _needsPositionStickyOnElement = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;

          _classCallCheck(this, StickyStyler);

          this._isNativeHtmlTable = _isNativeHtmlTable;
          this._stickCellCss = _stickCellCss;
          this.direction = direction;
          this._coalescedStyleScheduler = _coalescedStyleScheduler;
          this._isBrowser = _isBrowser;
          this._needsPositionStickyOnElement = _needsPositionStickyOnElement;
        }
        /**
         * Clears the sticky positioning styles from the row and its cells by resetting the `position`
         * style, setting the zIndex to 0, and unsetting each provided sticky direction.
         * @param rows The list of rows that should be cleared from sticking in the provided directions
         * @param stickyDirections The directions that should no longer be set as sticky on the rows.
         */


        _createClass(StickyStyler, [{
          key: "clearStickyPositioning",
          value: function clearStickyPositioning(rows, stickyDirections) {
            var _this49 = this;

            var elementsToClear = [];

            var _iterator4 = _createForOfIteratorHelper(rows),
                _step4;

            try {
              for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
                var row = _step4.value;

                // If the row isn't an element (e.g. if it's an `ng-container`),
                // it won't have inline styles or `children` so we skip it.
                if (row.nodeType !== row.ELEMENT_NODE) {
                  continue;
                }

                elementsToClear.push(row);

                for (var i = 0; i < row.children.length; i++) {
                  elementsToClear.push(row.children[i]);
                }
              } // Coalesce with sticky row/column updates (and potentially other changes like column resize).

            } catch (err) {
              _iterator4.e(err);
            } finally {
              _iterator4.f();
            }

            this._scheduleStyleChanges(function () {
              var _iterator5 = _createForOfIteratorHelper(elementsToClear),
                  _step5;

              try {
                for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
                  var element = _step5.value;

                  _this49._removeStickyStyle(element, stickyDirections);
                }
              } catch (err) {
                _iterator5.e(err);
              } finally {
                _iterator5.f();
              }
            });
          }
          /**
           * Applies sticky left and right positions to the cells of each row according to the sticky
           * states of the rendered column definitions.
           * @param rows The rows that should have its set of cells stuck according to the sticky states.
           * @param stickyStartStates A list of boolean states where each state represents whether the cell
           *     in this index position should be stuck to the start of the row.
           * @param stickyEndStates A list of boolean states where each state represents whether the cell
           *     in this index position should be stuck to the end of the row.
           */

        }, {
          key: "updateStickyColumns",
          value: function updateStickyColumns(rows, stickyStartStates, stickyEndStates) {
            var _this50 = this;

            if (!rows.length || !this._isBrowser || !(stickyStartStates.some(function (state) {
              return state;
            }) || stickyEndStates.some(function (state) {
              return state;
            }))) {
              return;
            }

            var firstRow = rows[0];
            var numCells = firstRow.children.length;

            var cellWidths = this._getCellWidths(firstRow);

            var startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);

            var endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates); // Coalesce with sticky row updates (and potentially other changes like column resize).


            this._scheduleStyleChanges(function () {
              var isRtl = _this50.direction === 'rtl';
              var start = isRtl ? 'right' : 'left';
              var end = isRtl ? 'left' : 'right';

              var _iterator6 = _createForOfIteratorHelper(rows),
                  _step6;

              try {
                for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
                  var row = _step6.value;

                  for (var i = 0; i < numCells; i++) {
                    var cell = row.children[i];

                    if (stickyStartStates[i]) {
                      _this50._addStickyStyle(cell, start, startPositions[i]);
                    }

                    if (stickyEndStates[i]) {
                      _this50._addStickyStyle(cell, end, endPositions[i]);
                    }
                  }
                }
              } catch (err) {
                _iterator6.e(err);
              } finally {
                _iterator6.f();
              }
            });
          }
          /**
           * Applies sticky positioning to the row's cells if using the native table layout, and to the
           * row itself otherwise.
           * @param rowsToStick The list of rows that should be stuck according to their corresponding
           *     sticky state and to the provided top or bottom position.
           * @param stickyStates A list of boolean states where each state represents whether the row
           *     should be stuck in the particular top or bottom position.
           * @param position The position direction in which the row should be stuck if that row should be
           *     sticky.
           *
           */

        }, {
          key: "stickRows",
          value: function stickRows(rowsToStick, stickyStates, position) {
            var _this51 = this;

            // Since we can't measure the rows on the server, we can't stick the rows properly.
            if (!this._isBrowser) {
              return;
            } // If positioning the rows to the bottom, reverse their order when evaluating the sticky
            // position such that the last row stuck will be "bottom: 0px" and so on. Note that the
            // sticky states need to be reversed as well.


            var rows = position === 'bottom' ? rowsToStick.slice().reverse() : rowsToStick;
            var states = position === 'bottom' ? stickyStates.slice().reverse() : stickyStates; // Measure row heights all at once before adding sticky styles to reduce layout thrashing.

            var stickyHeights = [];
            var elementsToStick = [];

            for (var rowIndex = 0, stickyHeight = 0; rowIndex < rows.length; rowIndex++) {
              stickyHeights[rowIndex] = stickyHeight;

              if (!states[rowIndex]) {
                continue;
              }

              var row = rows[rowIndex];
              elementsToStick[rowIndex] = this._isNativeHtmlTable ? Array.from(row.children) : [row];

              if (rowIndex !== rows.length - 1) {
                stickyHeight += row.getBoundingClientRect().height;
              }
            } // Coalesce with other sticky row updates (top/bottom), sticky columns updates
            // (and potentially other changes like column resize).


            this._scheduleStyleChanges(function () {
              for (var _rowIndex = 0; _rowIndex < rows.length; _rowIndex++) {
                if (!states[_rowIndex]) {
                  continue;
                }

                var height = stickyHeights[_rowIndex];

                var _iterator7 = _createForOfIteratorHelper(elementsToStick[_rowIndex]),
                    _step7;

                try {
                  for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
                    var element = _step7.value;

                    _this51._addStickyStyle(element, position, height);
                  }
                } catch (err) {
                  _iterator7.e(err);
                } finally {
                  _iterator7.f();
                }
              }
            });
          }
          /**
           * When using the native table in Safari, sticky footer cells do not stick. The only way to stick
           * footer rows is to apply sticky styling to the tfoot container. This should only be done if
           * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from
           * the tfoot element.
           */

        }, {
          key: "updateStickyFooterContainer",
          value: function updateStickyFooterContainer(tableElement, stickyStates) {
            var _this52 = this;

            if (!this._isNativeHtmlTable) {
              return;
            }

            var tfoot = tableElement.querySelector('tfoot'); // Coalesce with other sticky updates (and potentially other changes like column resize).

            this._scheduleStyleChanges(function () {
              if (stickyStates.some(function (state) {
                return !state;
              })) {
                _this52._removeStickyStyle(tfoot, ['bottom']);
              } else {
                _this52._addStickyStyle(tfoot, 'bottom', 0);
              }
            });
          }
          /**
           * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating
           * the zIndex, removing each of the provided sticky directions, and removing the
           * sticky position if there are no more directions.
           */

        }, {
          key: "_removeStickyStyle",
          value: function _removeStickyStyle(element, stickyDirections) {
            var _iterator8 = _createForOfIteratorHelper(stickyDirections),
                _step8;

            try {
              for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
                var dir = _step8.value;
                element.style[dir] = '';
              } // If the element no longer has any more sticky directions, remove sticky positioning and
              // the sticky CSS class.
              // Short-circuit checking element.style[dir] for stickyDirections as they
              // were already removed above.

            } catch (err) {
              _iterator8.e(err);
            } finally {
              _iterator8.f();
            }

            var hasDirection = STICKY_DIRECTIONS.some(function (dir) {
              return stickyDirections.indexOf(dir) === -1 && element.style[dir];
            });

            if (hasDirection) {
              element.style.zIndex = this._getCalculatedZIndex(element);
            } else {
              // When not hasDirection, _getCalculatedZIndex will always return ''.
              element.style.zIndex = '';

              if (this._needsPositionStickyOnElement) {
                element.style.position = '';
              }

              element.classList.remove(this._stickCellCss);
            }
          }
          /**
           * Adds the sticky styling to the element by adding the sticky style class, changing position
           * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky
           * direction and value.
           */

        }, {
          key: "_addStickyStyle",
          value: function _addStickyStyle(element, dir, dirValue) {
            element.classList.add(this._stickCellCss);
            element.style[dir] = "".concat(dirValue, "px");
            element.style.zIndex = this._getCalculatedZIndex(element);

            if (this._needsPositionStickyOnElement) {
              element.style.cssText += 'position: -webkit-sticky; position: sticky; ';
            }
          }
          /**
           * Calculate what the z-index should be for the element, depending on what directions (top,
           * bottom, left, right) have been set. It should be true that elements with a top direction
           * should have the highest index since these are elements like a table header. If any of those
           * elements are also sticky in another direction, then they should appear above other elements
           * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements
           * (e.g. footer rows) should then be next in the ordering such that they are below the header
           * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)
           * should minimally increment so that they are above non-sticky elements but below top and bottom
           * elements.
           */

        }, {
          key: "_getCalculatedZIndex",
          value: function _getCalculatedZIndex(element) {
            var zIndexIncrements = {
              top: 100,
              bottom: 10,
              left: 1,
              right: 1
            };
            var zIndex = 0; // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,
            // loses the array generic type in the `for of`. But we *also* have to use `Array` because
            // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`

            var _iterator9 = _createForOfIteratorHelper(STICKY_DIRECTIONS),
                _step9;

            try {
              for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
                var dir = _step9.value;

                if (element.style[dir]) {
                  zIndex += zIndexIncrements[dir];
                }
              }
            } catch (err) {
              _iterator9.e(err);
            } finally {
              _iterator9.f();
            }

            return zIndex ? "".concat(zIndex) : '';
          }
          /** Gets the widths for each cell in the provided row. */

        }, {
          key: "_getCellWidths",
          value: function _getCellWidths(row) {
            var cellWidths = [];
            var firstRowCells = row.children;

            for (var i = 0; i < firstRowCells.length; i++) {
              var cell = firstRowCells[i];
              cellWidths.push(cell.getBoundingClientRect().width);
            }

            return cellWidths;
          }
          /**
           * Determines the left and right positions of each sticky column cell, which will be the
           * accumulation of all sticky column cell widths to the left and right, respectively.
           * Non-sticky cells do not need to have a value set since their positions will not be applied.
           */

        }, {
          key: "_getStickyStartColumnPositions",
          value: function _getStickyStartColumnPositions(widths, stickyStates) {
            var positions = [];
            var nextPosition = 0;

            for (var i = 0; i < widths.length; i++) {
              if (stickyStates[i]) {
                positions[i] = nextPosition;
                nextPosition += widths[i];
              }
            }

            return positions;
          }
          /**
           * Determines the left and right positions of each sticky column cell, which will be the
           * accumulation of all sticky column cell widths to the left and right, respectively.
           * Non-sticky cells do not need to have a value set since their positions will not be applied.
           */

        }, {
          key: "_getStickyEndColumnPositions",
          value: function _getStickyEndColumnPositions(widths, stickyStates) {
            var positions = [];
            var nextPosition = 0;

            for (var i = widths.length; i > 0; i--) {
              if (stickyStates[i]) {
                positions[i] = nextPosition;
                nextPosition += widths[i];
              }
            }

            return positions;
          }
          /**
           * Schedules styles to be applied when the style scheduler deems appropriate.
           * @breaking-change 11.0.0 This method can be removed in favor of calling
           * `CoalescedStyleScheduler.schedule` directly once the scheduler is a required parameter.
           */

        }, {
          key: "_scheduleStyleChanges",
          value: function _scheduleStyleChanges(changes) {
            if (this._coalescedStyleScheduler) {
              this._coalescedStyleScheduler.schedule(changes);
            } else {
              changes();
            }
          }
        }]);

        return StickyStyler;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Returns an error to be thrown when attempting to find an unexisting column.
       * @param id Id whose lookup failed.
       * @docs-private
       */


      function getTableUnknownColumnError(id) {
        return Error("Could not find column with id \"".concat(id, "\"."));
      }
      /**
       * Returns an error to be thrown when two column definitions have the same name.
       * @docs-private
       */


      function getTableDuplicateColumnNameError(name) {
        return Error("Duplicate column definition name provided: \"".concat(name, "\"."));
      }
      /**
       * Returns an error to be thrown when there are multiple rows that are missing a when function.
       * @docs-private
       */


      function getTableMultipleDefaultRowDefsError() {
        return Error("There can only be one default row without a when predicate function.");
      }
      /**
       * Returns an error to be thrown when there are no matching row defs for a particular set of data.
       * @docs-private
       */


      function getTableMissingMatchingRowDefError(data) {
        return Error("Could not find a matching row definition for the" + "provided row data: ".concat(JSON.stringify(data)));
      }
      /**
       * Returns an error to be thrown when there is no row definitions present in the content.
       * @docs-private
       */


      function getTableMissingRowDefsError() {
        return Error('Missing definitions for header, footer, and row; ' + 'cannot determine which columns should be rendered.');
      }
      /**
       * Returns an error to be thrown when the data source does not match the compatible types.
       * @docs-private
       */


      function getTableUnknownDataSourceError() {
        return Error("Provided data source did not match an array, Observable, or DataSource");
      }
      /**
       * Returns an error to be thrown when the text column cannot find a parent table to inject.
       * @docs-private
       */


      function getTableTextColumnMissingParentTableError() {
        return Error("Text column could not find a parent table for registration.");
      }
      /**
       * Returns an error to be thrown when a table text column doesn't have a name.
       * @docs-private
       */


      function getTableTextColumnMissingNameError() {
        return Error("Table text column must have a name.");
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Provides a handle for the table to grab the view container's ng-container to insert data rows.
       * @docs-private
       */


      var DataRowOutlet = function DataRowOutlet(viewContainer, elementRef) {
        _classCallCheck(this, DataRowOutlet);

        this.viewContainer = viewContainer;
        this.elementRef = elementRef;
      };

      DataRowOutlet.ɵfac = function DataRowOutlet_Factory(t) {
        return new (t || DataRowOutlet)(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewContainerRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"]));
      };

      DataRowOutlet.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineDirective"]({
        type: DataRowOutlet,
        selectors: [["", "rowOutlet", ""]]
      });

      DataRowOutlet.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewContainerRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"]
        }];
      };
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵsetClassMetadata"](DataRowOutlet, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"],
          args: [{
            selector: '[rowOutlet]'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewContainerRef"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"]
          }];
        }, null);
      })();
      /**
       * Provides a handle for the table to grab the view container's ng-container to insert the header.
       * @docs-private
       */


      var HeaderRowOutlet = function HeaderRowOutlet(viewContainer, elementRef) {
        _classCallCheck(this, HeaderRowOutlet);

        this.viewContainer = viewContainer;
        this.elementRef = elementRef;
      };

      HeaderRowOutlet.ɵfac = function HeaderRowOutlet_Factory(t) {
        return new (t || HeaderRowOutlet)(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewContainerRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"]));
      };

      HeaderRowOutlet.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineDirective"]({
        type: HeaderRowOutlet,
        selectors: [["", "headerRowOutlet", ""]]
      });

      HeaderRowOutlet.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewContainerRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"]
        }];
      };
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵsetClassMetadata"](HeaderRowOutlet, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"],
          args: [{
            selector: '[headerRowOutlet]'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewContainerRef"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"]
          }];
        }, null);
      })();
      /**
       * Provides a handle for the table to grab the view container's ng-container to insert the footer.
       * @docs-private
       */


      var FooterRowOutlet = function FooterRowOutlet(viewContainer, elementRef) {
        _classCallCheck(this, FooterRowOutlet);

        this.viewContainer = viewContainer;
        this.elementRef = elementRef;
      };

      FooterRowOutlet.ɵfac = function FooterRowOutlet_Factory(t) {
        return new (t || FooterRowOutlet)(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewContainerRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"]));
      };

      FooterRowOutlet.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineDirective"]({
        type: FooterRowOutlet,
        selectors: [["", "footerRowOutlet", ""]]
      });

      FooterRowOutlet.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewContainerRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"]
        }];
      };
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵsetClassMetadata"](FooterRowOutlet, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"],
          args: [{
            selector: '[footerRowOutlet]'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewContainerRef"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"]
          }];
        }, null);
      })();
      /**
       * Provides a handle for the table to grab the view
       * container's ng-container to insert the no data row.
       * @docs-private
       */


      var NoDataRowOutlet = function NoDataRowOutlet(viewContainer, elementRef) {
        _classCallCheck(this, NoDataRowOutlet);

        this.viewContainer = viewContainer;
        this.elementRef = elementRef;
      };

      NoDataRowOutlet.ɵfac = function NoDataRowOutlet_Factory(t) {
        return new (t || NoDataRowOutlet)(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewContainerRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"]));
      };

      NoDataRowOutlet.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineDirective"]({
        type: NoDataRowOutlet,
        selectors: [["", "noDataRowOutlet", ""]]
      });

      NoDataRowOutlet.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewContainerRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"]
        }];
      };
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵsetClassMetadata"](NoDataRowOutlet, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"],
          args: [{
            selector: '[noDataRowOutlet]'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewContainerRef"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"]
          }];
        }, null);
      })();
      /**
       * The table template that can be used by the mat-table. Should not be used outside of the
       * material library.
       * @docs-private
       */


      var CDK_TABLE_TEMPLATE = // Note that according to MDN, the `caption` element has to be projected as the **first**
      // element in the table. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption
      "\n  <ng-content select=\"caption\"></ng-content>\n  <ng-content select=\"colgroup, col\"></ng-content>\n  <ng-container headerRowOutlet></ng-container>\n  <ng-container rowOutlet></ng-container>\n  <ng-container noDataRowOutlet></ng-container>\n  <ng-container footerRowOutlet></ng-container>\n";
      /**
       * Class used to conveniently type the embedded view ref for rows with a context.
       * @docs-private
       */

      var RowViewRef = /*#__PURE__*/function (_angular_core__WEBPAC) {
        _inherits(RowViewRef, _angular_core__WEBPAC);

        var _super32 = _createSuper(RowViewRef);

        function RowViewRef() {
          _classCallCheck(this, RowViewRef);

          return _super32.apply(this, arguments);
        }

        return RowViewRef;
      }(_angular_core__WEBPACK_IMPORTED_MODULE_3__["EmbeddedViewRef"]);
      /**
       * A data table that can render a header row, data rows, and a footer row.
       * Uses the dataSource input to determine the data to be rendered. The data can be provided either
       * as a data array, an Observable stream that emits the data array to render, or a DataSource with a
       * connect function that will return an Observable stream that emits the data array to render.
       */


      var CdkTable = /*#__PURE__*/function () {
        function CdkTable(_differs, _changeDetectorRef, _elementRef, role, _dir, _document, _platform,
        /**
         * @deprecated `_coalescedStyleScheduler`, `_viewRepeater` and `_viewportRuler`
         *    parameters to become required.
         * @breaking-change 11.0.0
         */
        _viewRepeater, _coalescedStyleScheduler) {
          _classCallCheck(this, CdkTable);

          this._differs = _differs;
          this._changeDetectorRef = _changeDetectorRef;
          this._elementRef = _elementRef;
          this._dir = _dir;
          this._platform = _platform;
          this._viewRepeater = _viewRepeater;
          this._coalescedStyleScheduler = _coalescedStyleScheduler;
          /** Subject that emits when the component has been destroyed. */

          this._onDestroy = new rxjs__WEBPACK_IMPORTED_MODULE_6__["Subject"]();
          /**
           * Map of all the user's defined columns (header, data, and footer cell template) identified by
           * name. Collection populated by the column definitions gathered by `ContentChildren` as well as
           * any custom column definitions added to `_customColumnDefs`.
           */

          this._columnDefsByName = new Map();
          /**
           * Column definitions that were defined outside of the direct content children of the table.
           * These will be defined when, e.g., creating a wrapper around the cdkTable that has
           * column definitions as *its* content child.
           */

          this._customColumnDefs = new Set();
          /**
           * Data row definitions that were defined outside of the direct content children of the table.
           * These will be defined when, e.g., creating a wrapper around the cdkTable that has
           * built-in data rows as *its* content child.
           */

          this._customRowDefs = new Set();
          /**
           * Header row definitions that were defined outside of the direct content children of the table.
           * These will be defined when, e.g., creating a wrapper around the cdkTable that has
           * built-in header rows as *its* content child.
           */

          this._customHeaderRowDefs = new Set();
          /**
           * Footer row definitions that were defined outside of the direct content children of the table.
           * These will be defined when, e.g., creating a wrapper around the cdkTable that has a
           * built-in footer row as *its* content child.
           */

          this._customFooterRowDefs = new Set();
          /**
           * Whether the header row definition has been changed. Triggers an update to the header row after
           * content is checked. Initialized as true so that the table renders the initial set of rows.
           */

          this._headerRowDefChanged = true;
          /**
           * Whether the footer row definition has been changed. Triggers an update to the footer row after
           * content is checked. Initialized as true so that the table renders the initial set of rows.
           */

          this._footerRowDefChanged = true;
          /**
           * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing
           * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with
           * the cached `RenderRow` objects when possible, the row identity is preserved when the data
           * and row template matches, which allows the `IterableDiffer` to check rows by reference
           * and understand which rows are added/moved/removed.
           *
           * Implemented as a map of maps where the first key is the `data: T` object and the second is the
           * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that
           * contains an array of created pairs. The array is necessary to handle cases where the data
           * array contains multiple duplicate data objects and each instantiated `RenderRow` must be
           * stored.
           */

          this._cachedRenderRowsMap = new Map();
          /**
           * CSS class added to any row or cell that has sticky positioning applied. May be overriden by
           * table subclasses.
           */

          this.stickyCssClass = 'cdk-table-sticky';
          /**
           * Whether to manually add positon: sticky to all sticky cell elements. Not needed if
           * the position is set in a selector associated with the value of stickyCssClass. May be
           * overridden by table subclasses
           */

          this.needsPositionStickyOnElement = true;
          /** Whether the no data row is currently showing anything. */

          this._isShowingNoDataRow = false;
          this._multiTemplateDataRows = false; // TODO(andrewseguin): Remove max value as the end index
          //   and instead calculate the view on init and scroll.

          /**
           * Stream containing the latest information on what rows are being displayed on screen.
           * Can be used by the data source to as a heuristic of what data should be provided.
           *
           * @docs-private
           */

          this.viewChange = new rxjs__WEBPACK_IMPORTED_MODULE_6__["BehaviorSubject"]({
            start: 0,
            end: Number.MAX_VALUE
          });

          if (!role) {
            this._elementRef.nativeElement.setAttribute('role', 'grid');
          }

          this._document = _document;
          this._isNativeHtmlTable = this._elementRef.nativeElement.nodeName === 'TABLE';
        }
        /**
         * Tracking function that will be used to check the differences in data changes. Used similarly
         * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data
         * relative to the function to know if a row should be added/removed/moved.
         * Accepts a function that takes two parameters, `index` and `item`.
         */


        _createClass(CdkTable, [{
          key: "trackBy",
          get: function get() {
            return this._trackByFn;
          },
          set: function set(fn) {
            if ((typeof ngDevMode === 'undefined' || ngDevMode) && fn != null && typeof fn !== 'function') {
              console.warn("trackBy must be a function, but received ".concat(JSON.stringify(fn), "."));
            }

            this._trackByFn = fn;
          }
          /**
           * The table's source of data, which can be provided in three ways (in order of complexity):
           *   - Simple data array (each object represents one table row)
           *   - Stream that emits a data array each time the array changes
           *   - `DataSource` object that implements the connect/disconnect interface.
           *
           * If a data array is provided, the table must be notified when the array's objects are
           * added, removed, or moved. This can be done by calling the `renderRows()` function which will
           * render the diff since the last table render. If the data array reference is changed, the table
           * will automatically trigger an update to the rows.
           *
           * When providing an Observable stream, the table will trigger an update automatically when the
           * stream emits a new array of data.
           *
           * Finally, when providing a `DataSource` object, the table will use the Observable stream
           * provided by the connect function and trigger updates when that stream emits new data array
           * values. During the table's ngOnDestroy or when the data source is removed from the table, the
           * table will call the DataSource's `disconnect` function (may be useful for cleaning up any
           * subscriptions registered during the connect process).
           */

        }, {
          key: "dataSource",
          get: function get() {
            return this._dataSource;
          },
          set: function set(dataSource) {
            if (this._dataSource !== dataSource) {
              this._switchDataSource(dataSource);
            }
          }
          /**
           * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'
           * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each
           * dataobject will render the first row that evaluates its when predicate to true, in the order
           * defined in the table, or otherwise the default row which does not have a when predicate.
           */

        }, {
          key: "multiTemplateDataRows",
          get: function get() {
            return this._multiTemplateDataRows;
          },
          set: function set(v) {
            this._multiTemplateDataRows = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceBooleanProperty"])(v); // In Ivy if this value is set via a static attribute (e.g. <table multiTemplateDataRows>),
            // this setter will be invoked before the row outlet has been defined hence the null check.

            if (this._rowOutlet && this._rowOutlet.viewContainer.length) {
              this._forceRenderDataRows();

              this.updateStickyColumnStyles();
            }
          }
        }, {
          key: "ngOnInit",
          value: function ngOnInit() {
            var _this53 = this;

            this._setupStickyStyler();

            if (this._isNativeHtmlTable) {
              this._applyNativeTableSections();
            } // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If
            // the user has provided a custom trackBy, return the result of that function as evaluated
            // with the values of the `RenderRow`'s data and index.


            this._dataDiffer = this._differs.find([]).create(function (_i, dataRow) {
              return _this53.trackBy ? _this53.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;
            });
          }
        }, {
          key: "ngAfterContentChecked",
          value: function ngAfterContentChecked() {
            // Cache the row and column definitions gathered by ContentChildren and programmatic injection.
            this._cacheRowDefs();

            this._cacheColumnDefs(); // Make sure that the user has at least added header, footer, or data row def.


            if (!this._headerRowDefs.length && !this._footerRowDefs.length && !this._rowDefs.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {
              throw getTableMissingRowDefsError();
            } // Render updates if the list of columns have been changed for the header, row, or footer defs.


            var columnsChanged = this._renderUpdatedColumns();

            var stickyColumnStyleUpdateNeeded = columnsChanged || this._headerRowDefChanged || this._footerRowDefChanged; // If the header row definition has been changed, trigger a render to the header row.

            if (this._headerRowDefChanged) {
              this._forceRenderHeaderRows();

              this._headerRowDefChanged = false;
            } // If the footer row definition has been changed, trigger a render to the footer row.


            if (this._footerRowDefChanged) {
              this._forceRenderFooterRows();

              this._footerRowDefChanged = false;
            } // If there is a data source and row definitions, connect to the data source unless a
            // connection has already been made.


            if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {
              this._observeRenderChanges();
            } else if (stickyColumnStyleUpdateNeeded) {
              // In the above case, _observeRenderChanges will result in updateStickyColumnStyles being
              // called when it row data arrives. Otherwise, we need to call it proactively.
              this.updateStickyColumnStyles();
            }

            this._checkStickyStates();
          }
        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this._rowOutlet.viewContainer.clear();

            this._noDataRowOutlet.viewContainer.clear();

            this._headerRowOutlet.viewContainer.clear();

            this._footerRowOutlet.viewContainer.clear();

            this._cachedRenderRowsMap.clear();

            this._onDestroy.next();

            this._onDestroy.complete();

            if (Object(_angular_cdk_collections__WEBPACK_IMPORTED_MODULE_2__["isDataSource"])(this.dataSource)) {
              this.dataSource.disconnect(this);
            }
          }
          /**
           * Renders rows based on the table's latest set of data, which was either provided directly as an
           * input or retrieved through an Observable stream (directly or from a DataSource).
           * Checks for differences in the data since the last diff to perform only the necessary
           * changes (add/remove/move rows).
           *
           * If the table's data source is a DataSource or Observable, this will be invoked automatically
           * each time the provided Observable stream emits a new data array. Otherwise if your data is
           * an array, this function will need to be called to render any changes.
           */

        }, {
          key: "renderRows",
          value: function renderRows() {
            var _this54 = this;

            this._renderRows = this._getAllRenderRows();

            var changes = this._dataDiffer.diff(this._renderRows);

            if (!changes) {
              this._updateNoDataRow();

              return;
            }

            var viewContainer = this._rowOutlet.viewContainer; // @breaking-change 11.0.0 Remove null check for `_viewRepeater` and the
            // `else` clause once `_viewRepeater` is turned into a required parameter.

            if (this._viewRepeater) {
              this._viewRepeater.applyChanges(changes, viewContainer, function (record, _adjustedPreviousIndex, currentIndex) {
                return _this54._getEmbeddedViewArgs(record.item, currentIndex);
              }, function (record) {
                return record.item.data;
              }, function (change) {
                if (change.operation === 1
                /* INSERTED */
                && change.context) {
                  _this54._renderCellTemplateForItem(change.record.item.rowDef, change.context);
                }
              });
            } else {
              changes.forEachOperation(function (record, prevIndex, currentIndex) {
                if (record.previousIndex == null) {
                  var renderRow = record.item;
                  var rowDef = renderRow.rowDef;
                  var context = {
                    $implicit: renderRow.data
                  };

                  _this54._renderRow(_this54._rowOutlet, rowDef, currentIndex, context);
                } else if (currentIndex == null) {
                  viewContainer.remove(prevIndex);
                } else {
                  var view = viewContainer.get(prevIndex);
                  viewContainer.move(view, currentIndex);
                }
              });
            } // Update the meta context of a row's context data (index, count, first, last, ...)


            this._updateRowIndexContext(); // Update rows that did not get added/removed/moved but may have had their identity changed,
            // e.g. if trackBy matched data on some property but the actual data reference changed.


            changes.forEachIdentityChange(function (record) {
              var rowView = viewContainer.get(record.currentIndex);
              rowView.context.$implicit = record.item.data;
            });

            this._updateNoDataRow();

            this.updateStickyColumnStyles();
          }
          /** Adds a column definition that was not included as part of the content children. */

        }, {
          key: "addColumnDef",
          value: function addColumnDef(columnDef) {
            this._customColumnDefs.add(columnDef);
          }
          /** Removes a column definition that was not included as part of the content children. */

        }, {
          key: "removeColumnDef",
          value: function removeColumnDef(columnDef) {
            this._customColumnDefs["delete"](columnDef);
          }
          /** Adds a row definition that was not included as part of the content children. */

        }, {
          key: "addRowDef",
          value: function addRowDef(rowDef) {
            this._customRowDefs.add(rowDef);
          }
          /** Removes a row definition that was not included as part of the content children. */

        }, {
          key: "removeRowDef",
          value: function removeRowDef(rowDef) {
            this._customRowDefs["delete"](rowDef);
          }
          /** Adds a header row definition that was not included as part of the content children. */

        }, {
          key: "addHeaderRowDef",
          value: function addHeaderRowDef(headerRowDef) {
            this._customHeaderRowDefs.add(headerRowDef);

            this._headerRowDefChanged = true;
          }
          /** Removes a header row definition that was not included as part of the content children. */

        }, {
          key: "removeHeaderRowDef",
          value: function removeHeaderRowDef(headerRowDef) {
            this._customHeaderRowDefs["delete"](headerRowDef);

            this._headerRowDefChanged = true;
          }
          /** Adds a footer row definition that was not included as part of the content children. */

        }, {
          key: "addFooterRowDef",
          value: function addFooterRowDef(footerRowDef) {
            this._customFooterRowDefs.add(footerRowDef);

            this._footerRowDefChanged = true;
          }
          /** Removes a footer row definition that was not included as part of the content children. */

        }, {
          key: "removeFooterRowDef",
          value: function removeFooterRowDef(footerRowDef) {
            this._customFooterRowDefs["delete"](footerRowDef);

            this._footerRowDefChanged = true;
          }
          /**
           * Updates the header sticky styles. First resets all applied styles with respect to the cells
           * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is
           * automatically called when the header row changes its displayed set of columns, or if its
           * sticky input changes. May be called manually for cases where the cell content changes outside
           * of these events.
           */

        }, {
          key: "updateStickyHeaderRowStyles",
          value: function updateStickyHeaderRowStyles() {
            var headerRows = this._getRenderedRows(this._headerRowOutlet);

            var tableElement = this._elementRef.nativeElement; // Hide the thead element if there are no header rows. This is necessary to satisfy
            // overzealous a11y checkers that fail because the `rowgroup` element does not contain
            // required child `row`.

            var thead = tableElement.querySelector('thead');

            if (thead) {
              thead.style.display = headerRows.length ? '' : 'none';
            }

            var stickyStates = this._headerRowDefs.map(function (def) {
              return def.sticky;
            });

            this._stickyStyler.clearStickyPositioning(headerRows, ['top']);

            this._stickyStyler.stickRows(headerRows, stickyStates, 'top'); // Reset the dirty state of the sticky input change since it has been used.


            this._headerRowDefs.forEach(function (def) {
              return def.resetStickyChanged();
            });
          }
          /**
           * Updates the footer sticky styles. First resets all applied styles with respect to the cells
           * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is
           * automatically called when the footer row changes its displayed set of columns, or if its
           * sticky input changes. May be called manually for cases where the cell content changes outside
           * of these events.
           */

        }, {
          key: "updateStickyFooterRowStyles",
          value: function updateStickyFooterRowStyles() {
            var footerRows = this._getRenderedRows(this._footerRowOutlet);

            var tableElement = this._elementRef.nativeElement; // Hide the tfoot element if there are no footer rows. This is necessary to satisfy
            // overzealous a11y checkers that fail because the `rowgroup` element does not contain
            // required child `row`.

            var tfoot = tableElement.querySelector('tfoot');

            if (tfoot) {
              tfoot.style.display = footerRows.length ? '' : 'none';
            }

            var stickyStates = this._footerRowDefs.map(function (def) {
              return def.sticky;
            });

            this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);

            this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');

            this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates); // Reset the dirty state of the sticky input change since it has been used.


            this._footerRowDefs.forEach(function (def) {
              return def.resetStickyChanged();
            });
          }
          /**
           * Updates the column sticky styles. First resets all applied styles with respect to the cells
           * sticking to the left and right. Then sticky styles are added for the left and right according
           * to the column definitions for each cell in each row. This is automatically called when
           * the data source provides a new set of data or when a column definition changes its sticky
           * input. May be called manually for cases where the cell content changes outside of these events.
           */

        }, {
          key: "updateStickyColumnStyles",
          value: function updateStickyColumnStyles() {
            var _this55 = this;

            var headerRows = this._getRenderedRows(this._headerRowOutlet);

            var dataRows = this._getRenderedRows(this._rowOutlet);

            var footerRows = this._getRenderedRows(this._footerRowOutlet); // Clear the left and right positioning from all columns in the table across all rows since
            // sticky columns span across all table sections (header, data, footer)


            this._stickyStyler.clearStickyPositioning([].concat(_toConsumableArray(headerRows), _toConsumableArray(dataRows), _toConsumableArray(footerRows)), ['left', 'right']); // Update the sticky styles for each header row depending on the def's sticky state


            headerRows.forEach(function (headerRow, i) {
              _this55._addStickyColumnStyles([headerRow], _this55._headerRowDefs[i]);
            }); // Update the sticky styles for each data row depending on its def's sticky state

            this._rowDefs.forEach(function (rowDef) {
              // Collect all the rows rendered with this row definition.
              var rows = [];

              for (var i = 0; i < dataRows.length; i++) {
                if (_this55._renderRows[i].rowDef === rowDef) {
                  rows.push(dataRows[i]);
                }
              }

              _this55._addStickyColumnStyles(rows, rowDef);
            }); // Update the sticky styles for each footer row depending on the def's sticky state


            footerRows.forEach(function (footerRow, i) {
              _this55._addStickyColumnStyles([footerRow], _this55._footerRowDefs[i]);
            }); // Reset the dirty state of the sticky input change since it has been used.

            Array.from(this._columnDefsByName.values()).forEach(function (def) {
              return def.resetStickyChanged();
            });
          }
          /**
           * Get the list of RenderRow objects to render according to the current list of data and defined
           * row definitions. If the previous list already contained a particular pair, it should be reused
           * so that the differ equates their references.
           */

        }, {
          key: "_getAllRenderRows",
          value: function _getAllRenderRows() {
            var renderRows = []; // Store the cache and create a new one. Any re-used RenderRow objects will be moved into the
            // new cache while unused ones can be picked up by garbage collection.

            var prevCachedRenderRows = this._cachedRenderRowsMap;
            this._cachedRenderRowsMap = new Map(); // For each data object, get the list of rows that should be rendered, represented by the
            // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.

            for (var i = 0; i < this._data.length; i++) {
              var data = this._data[i];

              var renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));

              if (!this._cachedRenderRowsMap.has(data)) {
                this._cachedRenderRowsMap.set(data, new WeakMap());
              }

              for (var j = 0; j < renderRowsForData.length; j++) {
                var renderRow = renderRowsForData[j];

                var cache = this._cachedRenderRowsMap.get(renderRow.data);

                if (cache.has(renderRow.rowDef)) {
                  cache.get(renderRow.rowDef).push(renderRow);
                } else {
                  cache.set(renderRow.rowDef, [renderRow]);
                }

                renderRows.push(renderRow);
              }
            }

            return renderRows;
          }
          /**
           * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that
           * should be rendered for this data. Reuses the cached RenderRow objects if they match the same
           * `(T, CdkRowDef)` pair.
           */

        }, {
          key: "_getRenderRowsForData",
          value: function _getRenderRowsForData(data, dataIndex, cache) {
            var rowDefs = this._getRowDefs(data, dataIndex);

            return rowDefs.map(function (rowDef) {
              var cachedRenderRows = cache && cache.has(rowDef) ? cache.get(rowDef) : [];

              if (cachedRenderRows.length) {
                var dataRow = cachedRenderRows.shift();
                dataRow.dataIndex = dataIndex;
                return dataRow;
              } else {
                return {
                  data: data,
                  rowDef: rowDef,
                  dataIndex: dataIndex
                };
              }
            });
          }
          /** Update the map containing the content's column definitions. */

        }, {
          key: "_cacheColumnDefs",
          value: function _cacheColumnDefs() {
            var _this56 = this;

            this._columnDefsByName.clear();

            var columnDefs = mergeArrayAndSet(this._getOwnDefs(this._contentColumnDefs), this._customColumnDefs);
            columnDefs.forEach(function (columnDef) {
              if (_this56._columnDefsByName.has(columnDef.name) && (typeof ngDevMode === 'undefined' || ngDevMode)) {
                throw getTableDuplicateColumnNameError(columnDef.name);
              }

              _this56._columnDefsByName.set(columnDef.name, columnDef);
            });
          }
          /** Update the list of all available row definitions that can be used. */

        }, {
          key: "_cacheRowDefs",
          value: function _cacheRowDefs() {
            this._headerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentHeaderRowDefs), this._customHeaderRowDefs);
            this._footerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentFooterRowDefs), this._customFooterRowDefs);
            this._rowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentRowDefs), this._customRowDefs); // After all row definitions are determined, find the row definition to be considered default.

            var defaultRowDefs = this._rowDefs.filter(function (def) {
              return !def.when;
            });

            if (!this.multiTemplateDataRows && defaultRowDefs.length > 1 && (typeof ngDevMode === 'undefined' || ngDevMode)) {
              throw getTableMultipleDefaultRowDefsError();
            }

            this._defaultRowDef = defaultRowDefs[0];
          }
          /**
           * Check if the header, data, or footer rows have changed what columns they want to display or
           * whether the sticky states have changed for the header or footer. If there is a diff, then
           * re-render that section.
           */

        }, {
          key: "_renderUpdatedColumns",
          value: function _renderUpdatedColumns() {
            var columnsDiffReducer = function columnsDiffReducer(acc, def) {
              return acc || !!def.getColumnsDiff();
            }; // Force re-render data rows if the list of column definitions have changed.


            var dataColumnsChanged = this._rowDefs.reduce(columnsDiffReducer, false);

            if (dataColumnsChanged) {
              this._forceRenderDataRows();
            } // Force re-render header/footer rows if the list of column definitions have changed.


            var headerColumnsChanged = this._headerRowDefs.reduce(columnsDiffReducer, false);

            if (headerColumnsChanged) {
              this._forceRenderHeaderRows();
            }

            var footerColumnsChanged = this._footerRowDefs.reduce(columnsDiffReducer, false);

            if (footerColumnsChanged) {
              this._forceRenderFooterRows();
            }

            return dataColumnsChanged || headerColumnsChanged || footerColumnsChanged;
          }
          /**
           * Switch to the provided data source by resetting the data and unsubscribing from the current
           * render change subscription if one exists. If the data source is null, interpret this by
           * clearing the row outlet. Otherwise start listening for new data.
           */

        }, {
          key: "_switchDataSource",
          value: function _switchDataSource(dataSource) {
            this._data = [];

            if (Object(_angular_cdk_collections__WEBPACK_IMPORTED_MODULE_2__["isDataSource"])(this.dataSource)) {
              this.dataSource.disconnect(this);
            } // Stop listening for data from the previous data source.


            if (this._renderChangeSubscription) {
              this._renderChangeSubscription.unsubscribe();

              this._renderChangeSubscription = null;
            }

            if (!dataSource) {
              if (this._dataDiffer) {
                this._dataDiffer.diff([]);
              }

              this._rowOutlet.viewContainer.clear();
            }

            this._dataSource = dataSource;
          }
          /** Set up a subscription for the data provided by the data source. */

        }, {
          key: "_observeRenderChanges",
          value: function _observeRenderChanges() {
            var _this57 = this;

            // If no data source has been set, there is nothing to observe for changes.
            if (!this.dataSource) {
              return;
            }

            var dataStream;

            if (Object(_angular_cdk_collections__WEBPACK_IMPORTED_MODULE_2__["isDataSource"])(this.dataSource)) {
              dataStream = this.dataSource.connect(this);
            } else if (Object(rxjs__WEBPACK_IMPORTED_MODULE_6__["isObservable"])(this.dataSource)) {
              dataStream = this.dataSource;
            } else if (Array.isArray(this.dataSource)) {
              dataStream = Object(rxjs__WEBPACK_IMPORTED_MODULE_6__["of"])(this.dataSource);
            }

            if (dataStream === undefined && (typeof ngDevMode === 'undefined' || ngDevMode)) {
              throw getTableUnknownDataSourceError();
            }

            this._renderChangeSubscription = dataStream.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["takeUntil"])(this._onDestroy)).subscribe(function (data) {
              _this57._data = data || [];

              _this57.renderRows();
            });
          }
          /**
           * Clears any existing content in the header row outlet and creates a new embedded view
           * in the outlet using the header row definition.
           */

        }, {
          key: "_forceRenderHeaderRows",
          value: function _forceRenderHeaderRows() {
            var _this58 = this;

            // Clear the header row outlet if any content exists.
            if (this._headerRowOutlet.viewContainer.length > 0) {
              this._headerRowOutlet.viewContainer.clear();
            }

            this._headerRowDefs.forEach(function (def, i) {
              return _this58._renderRow(_this58._headerRowOutlet, def, i);
            });

            this.updateStickyHeaderRowStyles();
          }
          /**
           * Clears any existing content in the footer row outlet and creates a new embedded view
           * in the outlet using the footer row definition.
           */

        }, {
          key: "_forceRenderFooterRows",
          value: function _forceRenderFooterRows() {
            var _this59 = this;

            // Clear the footer row outlet if any content exists.
            if (this._footerRowOutlet.viewContainer.length > 0) {
              this._footerRowOutlet.viewContainer.clear();
            }

            this._footerRowDefs.forEach(function (def, i) {
              return _this59._renderRow(_this59._footerRowOutlet, def, i);
            });

            this.updateStickyFooterRowStyles();
          }
          /** Adds the sticky column styles for the rows according to the columns' stick states. */

        }, {
          key: "_addStickyColumnStyles",
          value: function _addStickyColumnStyles(rows, rowDef) {
            var _this60 = this;

            var columnDefs = Array.from(rowDef.columns || []).map(function (columnName) {
              var columnDef = _this60._columnDefsByName.get(columnName);

              if (!columnDef && (typeof ngDevMode === 'undefined' || ngDevMode)) {
                throw getTableUnknownColumnError(columnName);
              }

              return columnDef;
            });
            var stickyStartStates = columnDefs.map(function (columnDef) {
              return columnDef.sticky;
            });
            var stickyEndStates = columnDefs.map(function (columnDef) {
              return columnDef.stickyEnd;
            });

            this._stickyStyler.updateStickyColumns(rows, stickyStartStates, stickyEndStates);
          }
          /** Gets the list of rows that have been rendered in the row outlet. */

        }, {
          key: "_getRenderedRows",
          value: function _getRenderedRows(rowOutlet) {
            var renderedRows = [];

            for (var i = 0; i < rowOutlet.viewContainer.length; i++) {
              var viewRef = rowOutlet.viewContainer.get(i);
              renderedRows.push(viewRef.rootNodes[0]);
            }

            return renderedRows;
          }
          /**
           * Get the matching row definitions that should be used for this row data. If there is only
           * one row definition, it is returned. Otherwise, find the row definitions that has a when
           * predicate that returns true with the data. If none return true, return the default row
           * definition.
           */

        }, {
          key: "_getRowDefs",
          value: function _getRowDefs(data, dataIndex) {
            if (this._rowDefs.length == 1) {
              return [this._rowDefs[0]];
            }

            var rowDefs = [];

            if (this.multiTemplateDataRows) {
              rowDefs = this._rowDefs.filter(function (def) {
                return !def.when || def.when(dataIndex, data);
              });
            } else {
              var rowDef = this._rowDefs.find(function (def) {
                return def.when && def.when(dataIndex, data);
              }) || this._defaultRowDef;

              if (rowDef) {
                rowDefs.push(rowDef);
              }
            }

            if (!rowDefs.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {
              throw getTableMissingMatchingRowDefError(data);
            }

            return rowDefs;
          }
        }, {
          key: "_getEmbeddedViewArgs",
          value: function _getEmbeddedViewArgs(renderRow, index) {
            var rowDef = renderRow.rowDef;
            var context = {
              $implicit: renderRow.data
            };
            return {
              templateRef: rowDef.template,
              context: context,
              index: index
            };
          }
          /**
           * Creates a new row template in the outlet and fills it with the set of cell templates.
           * Optionally takes a context to provide to the row and cells, as well as an optional index
           * of where to place the new row template in the outlet.
           */

        }, {
          key: "_renderRow",
          value: function _renderRow(outlet, rowDef, index) {
            var context = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView
            var view = outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);

            this._renderCellTemplateForItem(rowDef, context);

            return view;
          }
        }, {
          key: "_renderCellTemplateForItem",
          value: function _renderCellTemplateForItem(rowDef, context) {
            var _iterator10 = _createForOfIteratorHelper(this._getCellTemplates(rowDef)),
                _step10;

            try {
              for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
                var cellTemplate = _step10.value;

                if (CdkCellOutlet.mostRecentCellOutlet) {
                  CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);
                }
              }
            } catch (err) {
              _iterator10.e(err);
            } finally {
              _iterator10.f();
            }

            this._changeDetectorRef.markForCheck();
          }
          /**
           * Updates the index-related context for each row to reflect any changes in the index of the rows,
           * e.g. first/last/even/odd.
           */

        }, {
          key: "_updateRowIndexContext",
          value: function _updateRowIndexContext() {
            var viewContainer = this._rowOutlet.viewContainer;

            for (var renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {
              var viewRef = viewContainer.get(renderIndex);
              var context = viewRef.context;
              context.count = count;
              context.first = renderIndex === 0;
              context.last = renderIndex === count - 1;
              context.even = renderIndex % 2 === 0;
              context.odd = !context.even;

              if (this.multiTemplateDataRows) {
                context.dataIndex = this._renderRows[renderIndex].dataIndex;
                context.renderIndex = renderIndex;
              } else {
                context.index = this._renderRows[renderIndex].dataIndex;
              }
            }
          }
          /** Gets the column definitions for the provided row def. */

        }, {
          key: "_getCellTemplates",
          value: function _getCellTemplates(rowDef) {
            var _this61 = this;

            if (!rowDef || !rowDef.columns) {
              return [];
            }

            return Array.from(rowDef.columns, function (columnId) {
              var column = _this61._columnDefsByName.get(columnId);

              if (!column && (typeof ngDevMode === 'undefined' || ngDevMode)) {
                throw getTableUnknownColumnError(columnId);
              }

              return rowDef.extractCellTemplate(column);
            });
          }
          /** Adds native table sections (e.g. tbody) and moves the row outlets into them. */

        }, {
          key: "_applyNativeTableSections",
          value: function _applyNativeTableSections() {
            var documentFragment = this._document.createDocumentFragment();

            var sections = [{
              tag: 'thead',
              outlets: [this._headerRowOutlet]
            }, {
              tag: 'tbody',
              outlets: [this._rowOutlet, this._noDataRowOutlet]
            }, {
              tag: 'tfoot',
              outlets: [this._footerRowOutlet]
            }];

            for (var _i2 = 0, _sections = sections; _i2 < _sections.length; _i2++) {
              var section = _sections[_i2];

              var element = this._document.createElement(section.tag);

              element.setAttribute('role', 'rowgroup');

              var _iterator11 = _createForOfIteratorHelper(section.outlets),
                  _step11;

              try {
                for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
                  var outlet = _step11.value;
                  element.appendChild(outlet.elementRef.nativeElement);
                }
              } catch (err) {
                _iterator11.e(err);
              } finally {
                _iterator11.f();
              }

              documentFragment.appendChild(element);
            } // Use a DocumentFragment so we don't hit the DOM on each iteration.


            this._elementRef.nativeElement.appendChild(documentFragment);
          }
          /**
           * Forces a re-render of the data rows. Should be called in cases where there has been an input
           * change that affects the evaluation of which rows should be rendered, e.g. toggling
           * `multiTemplateDataRows` or adding/removing row definitions.
           */

        }, {
          key: "_forceRenderDataRows",
          value: function _forceRenderDataRows() {
            this._dataDiffer.diff([]);

            this._rowOutlet.viewContainer.clear();

            this.renderRows();
          }
          /**
           * Checks if there has been a change in sticky states since last check and applies the correct
           * sticky styles. Since checking resets the "dirty" state, this should only be performed once
           * during a change detection and after the inputs are settled (after content check).
           */

        }, {
          key: "_checkStickyStates",
          value: function _checkStickyStates() {
            var stickyCheckReducer = function stickyCheckReducer(acc, d) {
              return acc || d.hasStickyChanged();
            }; // Note that the check needs to occur for every definition since it notifies the definition
            // that it can reset its dirty state. Using another operator like `some` may short-circuit
            // remaining definitions and leave them in an unchecked state.


            if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {
              this.updateStickyHeaderRowStyles();
            }

            if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {
              this.updateStickyFooterRowStyles();
            }

            if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {
              this.updateStickyColumnStyles();
            }
          }
          /**
           * Creates the sticky styler that will be used for sticky rows and columns. Listens
           * for directionality changes and provides the latest direction to the styler. Re-applies column
           * stickiness when directionality changes.
           */

        }, {
          key: "_setupStickyStyler",
          value: function _setupStickyStyler() {
            var _this62 = this;

            var direction = this._dir ? this._dir.value : 'ltr';
            this._stickyStyler = new StickyStyler(this._isNativeHtmlTable, this.stickyCssClass, direction, this._coalescedStyleScheduler, this._platform.isBrowser, this.needsPositionStickyOnElement);
            (this._dir ? this._dir.change : Object(rxjs__WEBPACK_IMPORTED_MODULE_6__["of"])()).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["takeUntil"])(this._onDestroy)).subscribe(function (value) {
              _this62._stickyStyler.direction = value;

              _this62.updateStickyColumnStyles();
            });
          }
          /** Filters definitions that belong to this table from a QueryList. */

        }, {
          key: "_getOwnDefs",
          value: function _getOwnDefs(items) {
            var _this63 = this;

            return items.filter(function (item) {
              return !item._table || item._table === _this63;
            });
          }
          /** Creates or removes the no data row, depending on whether any data is being shown. */

        }, {
          key: "_updateNoDataRow",
          value: function _updateNoDataRow() {
            if (this._noDataRow) {
              var shouldShow = this._rowOutlet.viewContainer.length === 0;

              if (shouldShow !== this._isShowingNoDataRow) {
                var container = this._noDataRowOutlet.viewContainer;
                shouldShow ? container.createEmbeddedView(this._noDataRow.templateRef) : container.clear();
                this._isShowingNoDataRow = shouldShow;
              }
            }
          }
        }]);

        return CdkTable;
      }();

      CdkTable.ɵfac = function CdkTable_Factory(t) {
        return new (t || CdkTable)(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_3__["IterableDiffers"]), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectorRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinjectAttribute"]('role'), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_0__["Directionality"], 8), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_angular_common__WEBPACK_IMPORTED_MODULE_5__["DOCUMENT"]), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["Platform"]), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_angular_cdk_collections__WEBPACK_IMPORTED_MODULE_2__["_VIEW_REPEATER_STRATEGY"], 8), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_COALESCED_STYLE_SCHEDULER, 8));
      };

      CdkTable.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineComponent"]({
        type: CdkTable,
        selectors: [["cdk-table"], ["table", "cdk-table", ""]],
        contentQueries: function CdkTable_ContentQueries(rf, ctx, dirIndex) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵcontentQuery"](dirIndex, CdkNoDataRow, true);

            _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵcontentQuery"](dirIndex, CdkColumnDef, true);

            _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵcontentQuery"](dirIndex, CdkRowDef, true);

            _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵcontentQuery"](dirIndex, CdkHeaderRowDef, true);

            _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵcontentQuery"](dirIndex, CdkFooterRowDef, true);
          }

          if (rf & 2) {
            var _t;

            _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵloadQuery"]()) && (ctx._noDataRow = _t.first);
            _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵloadQuery"]()) && (ctx._contentColumnDefs = _t);
            _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵloadQuery"]()) && (ctx._contentRowDefs = _t);
            _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵloadQuery"]()) && (ctx._contentHeaderRowDefs = _t);
            _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵloadQuery"]()) && (ctx._contentFooterRowDefs = _t);
          }
        },
        viewQuery: function CdkTable_Query(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵstaticViewQuery"](DataRowOutlet, true);

            _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵstaticViewQuery"](HeaderRowOutlet, true);

            _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵstaticViewQuery"](FooterRowOutlet, true);

            _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵstaticViewQuery"](NoDataRowOutlet, true);
          }

          if (rf & 2) {
            var _t;

            _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵloadQuery"]()) && (ctx._rowOutlet = _t.first);
            _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵloadQuery"]()) && (ctx._headerRowOutlet = _t.first);
            _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵloadQuery"]()) && (ctx._footerRowOutlet = _t.first);
            _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵloadQuery"]()) && (ctx._noDataRowOutlet = _t.first);
          }
        },
        hostAttrs: [1, "cdk-table"],
        inputs: {
          trackBy: "trackBy",
          dataSource: "dataSource",
          multiTemplateDataRows: "multiTemplateDataRows"
        },
        exportAs: ["cdkTable"],
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵProvidersFeature"]([{
          provide: CDK_TABLE,
          useExisting: CdkTable
        }, {
          provide: _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_2__["_VIEW_REPEATER_STRATEGY"],
          useClass: _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_2__["_DisposeViewRepeaterStrategy"]
        }, {
          provide: _COALESCED_STYLE_SCHEDULER,
          useClass: _CoalescedStyleScheduler
        }])],
        ngContentSelectors: _c1,
        decls: 6,
        vars: 0,
        consts: [["headerRowOutlet", ""], ["rowOutlet", ""], ["noDataRowOutlet", ""], ["footerRowOutlet", ""]],
        template: function CdkTable_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵprojectionDef"](_c0);

            _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵprojection"](0);

            _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵprojection"](1, 1);

            _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementContainer"](2, 0);

            _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementContainer"](3, 1);

            _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementContainer"](4, 2);

            _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementContainer"](5, 3);
          }
        },
        directives: [HeaderRowOutlet, DataRowOutlet, NoDataRowOutlet, FooterRowOutlet],
        encapsulation: 2
      });

      CdkTable.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["IterableDiffers"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectorRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"]
        }, {
          type: String,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Attribute"],
            args: ['role']
          }]
        }, {
          type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_0__["Directionality"],
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"]
          }]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"],
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_5__["DOCUMENT"]]
          }]
        }, {
          type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["Platform"]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"],
            args: [_angular_cdk_collections__WEBPACK_IMPORTED_MODULE_2__["_VIEW_REPEATER_STRATEGY"]]
          }]
        }, {
          type: _CoalescedStyleScheduler,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"],
            args: [_COALESCED_STYLE_SCHEDULER]
          }]
        }];
      };

      CdkTable.propDecorators = {
        trackBy: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"]
        }],
        dataSource: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"]
        }],
        multiTemplateDataRows: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"]
        }],
        _rowOutlet: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewChild"],
          args: [DataRowOutlet, {
            "static": true
          }]
        }],
        _headerRowOutlet: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewChild"],
          args: [HeaderRowOutlet, {
            "static": true
          }]
        }],
        _footerRowOutlet: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewChild"],
          args: [FooterRowOutlet, {
            "static": true
          }]
        }],
        _noDataRowOutlet: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewChild"],
          args: [NoDataRowOutlet, {
            "static": true
          }]
        }],
        _contentColumnDefs: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ContentChildren"],
          args: [CdkColumnDef, {
            descendants: true
          }]
        }],
        _contentRowDefs: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ContentChildren"],
          args: [CdkRowDef, {
            descendants: true
          }]
        }],
        _contentHeaderRowDefs: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ContentChildren"],
          args: [CdkHeaderRowDef, {
            descendants: true
          }]
        }],
        _contentFooterRowDefs: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ContentChildren"],
          args: [CdkFooterRowDef, {
            descendants: true
          }]
        }],
        _noDataRow: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ContentChild"],
          args: [CdkNoDataRow]
        }]
      };
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵsetClassMetadata"](CdkTable, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"],
          args: [{
            selector: 'cdk-table, table[cdk-table]',
            exportAs: 'cdkTable',
            template: CDK_TABLE_TEMPLATE,
            host: {
              'class': 'cdk-table'
            },
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewEncapsulation"].None,
            // The "OnPush" status for the `MatTable` component is effectively a noop, so we are removing it.
            // The view for `MatTable` consists entirely of templates declared in other views. As they are
            // declared elsewhere, they are checked when their declaration points are checked.
            // tslint:disable-next-line:validate-decorators
            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectionStrategy"].Default,
            providers: [{
              provide: CDK_TABLE,
              useExisting: CdkTable
            }, {
              provide: _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_2__["_VIEW_REPEATER_STRATEGY"],
              useClass: _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_2__["_DisposeViewRepeaterStrategy"]
            }, {
              provide: _COALESCED_STYLE_SCHEDULER,
              useClass: _CoalescedStyleScheduler
            }]
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["IterableDiffers"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectorRef"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"]
          }, {
            type: String,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Attribute"],
              args: ['role']
            }]
          }, {
            type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_0__["Directionality"],
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"]
            }]
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"],
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_5__["DOCUMENT"]]
            }]
          }, {
            type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["Platform"]
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"],
              args: [_angular_cdk_collections__WEBPACK_IMPORTED_MODULE_2__["_VIEW_REPEATER_STRATEGY"]]
            }]
          }, {
            type: _CoalescedStyleScheduler,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"],
              args: [_COALESCED_STYLE_SCHEDULER]
            }]
          }];
        }, {
          trackBy: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"]
          }],
          dataSource: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"]
          }],
          multiTemplateDataRows: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"]
          }],
          _rowOutlet: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewChild"],
            args: [DataRowOutlet, {
              "static": true
            }]
          }],
          _headerRowOutlet: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewChild"],
            args: [HeaderRowOutlet, {
              "static": true
            }]
          }],
          _footerRowOutlet: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewChild"],
            args: [FooterRowOutlet, {
              "static": true
            }]
          }],
          _noDataRowOutlet: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewChild"],
            args: [NoDataRowOutlet, {
              "static": true
            }]
          }],
          _contentColumnDefs: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ContentChildren"],
            args: [CdkColumnDef, {
              descendants: true
            }]
          }],
          _contentRowDefs: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ContentChildren"],
            args: [CdkRowDef, {
              descendants: true
            }]
          }],
          _contentHeaderRowDefs: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ContentChildren"],
            args: [CdkHeaderRowDef, {
              descendants: true
            }]
          }],
          _contentFooterRowDefs: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ContentChildren"],
            args: [CdkFooterRowDef, {
              descendants: true
            }]
          }],
          _noDataRow: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ContentChild"],
            args: [CdkNoDataRow]
          }]
        });
      })();
      /** Utility function that gets a merged list of the entries in an array and values of a Set. */


      function mergeArrayAndSet(array, set) {
        return array.concat(Array.from(set));
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Column that simply shows text content for the header and row cells. Assumes that the table
       * is using the native table implementation (`<table>`).
       *
       * By default, the name of this column will be the header text and data property accessor.
       * The header text can be overridden with the `headerText` input. Cell values can be overridden with
       * the `dataAccessor` input. Change the text justification to the start or end using the `justify`
       * input.
       */


      var CdkTextColumn = /*#__PURE__*/function () {
        function CdkTextColumn( // `CdkTextColumn` is always requiring a table, but we just assert it manually
        // for better error reporting.
        // tslint:disable-next-line: lightweight-tokens
        _table, _options) {
          _classCallCheck(this, CdkTextColumn);

          this._table = _table;
          this._options = _options;
          /** Alignment of the cell values. */

          this.justify = 'start';
          this._options = _options || {};
        }
        /** Column name that should be used to reference this column. */


        _createClass(CdkTextColumn, [{
          key: "name",
          get: function get() {
            return this._name;
          },
          set: function set(name) {
            this._name = name; // With Ivy, inputs can be initialized before static query results are
            // available. In that case, we defer the synchronization until "ngOnInit" fires.

            this._syncColumnDefName();
          }
        }, {
          key: "ngOnInit",
          value: function ngOnInit() {
            this._syncColumnDefName();

            if (this.headerText === undefined) {
              this.headerText = this._createDefaultHeaderText();
            }

            if (!this.dataAccessor) {
              this.dataAccessor = this._options.defaultDataAccessor || function (data, name) {
                return data[name];
              };
            }

            if (this._table) {
              // Provide the cell and headerCell directly to the table with the static `ViewChild` query,
              // since the columnDef will not pick up its content by the time the table finishes checking
              // its content and initializing the rows.
              this.columnDef.cell = this.cell;
              this.columnDef.headerCell = this.headerCell;

              this._table.addColumnDef(this.columnDef);
            } else if (typeof ngDevMode === 'undefined' || ngDevMode) {
              throw getTableTextColumnMissingParentTableError();
            }
          }
        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            if (this._table) {
              this._table.removeColumnDef(this.columnDef);
            }
          }
          /**
           * Creates a default header text. Use the options' header text transformation function if one
           * has been provided. Otherwise simply capitalize the column name.
           */

        }, {
          key: "_createDefaultHeaderText",
          value: function _createDefaultHeaderText() {
            var name = this.name;

            if (!name && (typeof ngDevMode === 'undefined' || ngDevMode)) {
              throw getTableTextColumnMissingNameError();
            }

            if (this._options && this._options.defaultHeaderTextTransform) {
              return this._options.defaultHeaderTextTransform(name);
            }

            return name[0].toUpperCase() + name.slice(1);
          }
          /** Synchronizes the column definition name with the text column name. */

        }, {
          key: "_syncColumnDefName",
          value: function _syncColumnDefName() {
            if (this.columnDef) {
              this.columnDef.name = this.name;
            }
          }
        }]);

        return CdkTextColumn;
      }();

      CdkTextColumn.ɵfac = function CdkTextColumn_Factory(t) {
        return new (t || CdkTextColumn)(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](CdkTable, 8), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](TEXT_COLUMN_OPTIONS, 8));
      };

      CdkTextColumn.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineComponent"]({
        type: CdkTextColumn,
        selectors: [["cdk-text-column"]],
        viewQuery: function CdkTextColumn_Query(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵstaticViewQuery"](CdkColumnDef, true);

            _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵstaticViewQuery"](CdkCellDef, true);

            _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵstaticViewQuery"](CdkHeaderCellDef, true);
          }

          if (rf & 2) {
            var _t;

            _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵloadQuery"]()) && (ctx.columnDef = _t.first);
            _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵloadQuery"]()) && (ctx.cell = _t.first);
            _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵloadQuery"]()) && (ctx.headerCell = _t.first);
          }
        },
        inputs: {
          justify: "justify",
          name: "name",
          headerText: "headerText",
          dataAccessor: "dataAccessor"
        },
        decls: 3,
        vars: 0,
        consts: [["cdkColumnDef", ""], ["cdk-header-cell", "", 3, "text-align", 4, "cdkHeaderCellDef"], ["cdk-cell", "", 3, "text-align", 4, "cdkCellDef"], ["cdk-header-cell", ""], ["cdk-cell", ""]],
        template: function CdkTextColumn_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementContainerStart"](0, 0);

            _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](1, CdkTextColumn_th_1_Template, 2, 3, "th", 1);

            _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](2, CdkTextColumn_td_2_Template, 2, 3, "td", 2);

            _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementContainerEnd"]();
          }
        },
        directives: [CdkColumnDef, CdkHeaderCellDef, CdkCellDef, CdkHeaderCell, CdkCell],
        encapsulation: 2
      });

      CdkTextColumn.ctorParameters = function () {
        return [{
          type: CdkTable,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"]
          }]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"],
            args: [TEXT_COLUMN_OPTIONS]
          }]
        }];
      };

      CdkTextColumn.propDecorators = {
        name: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"]
        }],
        headerText: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"]
        }],
        dataAccessor: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"]
        }],
        justify: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"]
        }],
        columnDef: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewChild"],
          args: [CdkColumnDef, {
            "static": true
          }]
        }],
        cell: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewChild"],
          args: [CdkCellDef, {
            "static": true
          }]
        }],
        headerCell: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewChild"],
          args: [CdkHeaderCellDef, {
            "static": true
          }]
        }]
      };
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵsetClassMetadata"](CdkTextColumn, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"],
          args: [{
            selector: 'cdk-text-column',
            template: "\n    <ng-container cdkColumnDef>\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td cdk-cell *cdkCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  ",
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewEncapsulation"].None,
            // Change detection is intentionally not set to OnPush. This component's template will be provided
            // to the table to be inserted into its view. This is problematic when change detection runs since
            // the bindings in this template will be evaluated _after_ the table's view is evaluated, which
            // mean's the template in the table's view will not have the updated value (and in fact will cause
            // an ExpressionChangedAfterItHasBeenCheckedError).
            // tslint:disable-next-line:validate-decorators
            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectionStrategy"].Default
          }]
        }], function () {
          return [{
            type: CdkTable,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"]
            }]
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"],
              args: [TEXT_COLUMN_OPTIONS]
            }]
          }];
        }, {
          justify: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"]
          }],
          name: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"]
          }],
          headerText: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"]
          }],
          dataAccessor: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"]
          }],
          columnDef: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewChild"],
            args: [CdkColumnDef, {
              "static": true
            }]
          }],
          cell: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewChild"],
            args: [CdkCellDef, {
              "static": true
            }]
          }],
          headerCell: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewChild"],
            args: [CdkHeaderCellDef, {
              "static": true
            }]
          }]
        });
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var EXPORTED_DECLARATIONS = [CdkTable, CdkRowDef, CdkCellDef, CdkCellOutlet, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkCell, CdkRow, CdkHeaderCell, CdkFooterCell, CdkHeaderRow, CdkHeaderRowDef, CdkFooterRow, CdkFooterRowDef, DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CdkTextColumn, CdkNoDataRow, NoDataRowOutlet];

      var CdkTableModule = function CdkTableModule() {
        _classCallCheck(this, CdkTableModule);
      };

      CdkTableModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineNgModule"]({
        type: CdkTableModule
      });
      CdkTableModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineInjector"]({
        factory: function CdkTableModule_Factory(t) {
          return new (t || CdkTableModule)();
        },
        imports: [[_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_8__["ScrollingModule"]]]
      });

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵsetNgModuleScope"](CdkTableModule, {
          declarations: function declarations() {
            return [CdkTable, CdkRowDef, CdkCellDef, CdkCellOutlet, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkCell, CdkRow, CdkHeaderCell, CdkFooterCell, CdkHeaderRow, CdkHeaderRowDef, CdkFooterRow, CdkFooterRowDef, DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CdkTextColumn, CdkNoDataRow, NoDataRowOutlet];
          },
          imports: function imports() {
            return [_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_8__["ScrollingModule"]];
          },
          exports: function exports() {
            return [CdkTable, CdkRowDef, CdkCellDef, CdkCellOutlet, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkCell, CdkRow, CdkHeaderCell, CdkFooterCell, CdkHeaderRow, CdkHeaderRowDef, CdkFooterRow, CdkFooterRowDef, DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CdkTextColumn, CdkNoDataRow, NoDataRowOutlet];
          }
        });
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵsetClassMetadata"](CdkTableModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgModule"],
          args: [{
            exports: EXPORTED_DECLARATIONS,
            declarations: EXPORTED_DECLARATIONS,
            imports: [_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_8__["ScrollingModule"]]
          }]
        }], null, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Generated bundle index. Do not edit.
       */
      //# sourceMappingURL=table.js.map

      /***/

    },

    /***/
    "fzPg": function fzPg(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Yoruba Nigeria [yo]
      //! author : Atolagbe Abisoye : https://github.com/andela-batolagbe
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var yo = moment.defineLocale('yo', {
          months: 'Sẹ́rẹ́_Èrèlè_Ẹrẹ̀nà_Ìgbé_Èbibi_Òkùdu_Agẹmo_Ògún_Owewe_Ọ̀wàrà_Bélú_Ọ̀pẹ̀̀'.split('_'),
          monthsShort: 'Sẹ́r_Èrl_Ẹrn_Ìgb_Èbi_Òkù_Agẹ_Ògú_Owe_Ọ̀wà_Bél_Ọ̀pẹ̀̀'.split('_'),
          weekdays: 'Àìkú_Ajé_Ìsẹ́gun_Ọjọ́rú_Ọjọ́bọ_Ẹtì_Àbámẹ́ta'.split('_'),
          weekdaysShort: 'Àìk_Ajé_Ìsẹ́_Ọjr_Ọjb_Ẹtì_Àbá'.split('_'),
          weekdaysMin: 'Àì_Aj_Ìs_Ọr_Ọb_Ẹt_Àb'.split('_'),
          longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY h:mm A',
            LLLL: 'dddd, D MMMM YYYY h:mm A'
          },
          calendar: {
            sameDay: '[Ònì ni] LT',
            nextDay: '[Ọ̀la ni] LT',
            nextWeek: "dddd [Ọsẹ̀ tón'bọ] [ni] LT",
            lastDay: '[Àna ni] LT',
            lastWeek: 'dddd [Ọsẹ̀ tólọ́] [ni] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: 'ní %s',
            past: '%s kọjá',
            s: 'ìsẹjú aayá die',
            ss: 'aayá %d',
            m: 'ìsẹjú kan',
            mm: 'ìsẹjú %d',
            h: 'wákati kan',
            hh: 'wákati %d',
            d: 'ọjọ́ kan',
            dd: 'ọjọ́ %d',
            M: 'osù kan',
            MM: 'osù %d',
            y: 'ọdún kan',
            yy: 'ọdún %d'
          },
          dayOfMonthOrdinalParse: /ọjọ́\s\d{1,2}/,
          ordinal: 'ọjọ́ %d',
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.

          }
        });
        return yo;
      });
      /***/

    },

    /***/
    "gOJ3": function gOJ3(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "HistorialDocComponent", function () {
        return HistorialDocComponent;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _raw_loader_historialDoc_component_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! raw-loader!./historialDoc.component.html */
      "xqvh");
      /* harmony import */


      var _historialDoc_component_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./historialDoc.component.scss */
      "dlQQ");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var _angular_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/forms */
      "3Pt+");
      /* harmony import */


      var _angular_material_table__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @angular/material/table */
      "+0xr");
      /* harmony import */


      var _angular_material_paginator__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! @angular/material/paginator */
      "M9IT");
      /* harmony import */


      var _angular_router__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! @angular/router */
      "tyNb");
      /* harmony import */


      var _angular_material_sort__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! @angular/material/sort */
      "Dh3D");
      /* harmony import */


      var _shared_services_global_services__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! ../../../shared/services/global.services */
      "Zk1H");
      /* harmony import */


      var _environments_environment__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
      /*! ../../../../environments/environment */
      "AytR");
      /* harmony import */


      var file_saver__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
      /*! file-saver */
      "Iab2");
      /* harmony import */


      var file_saver__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(file_saver__WEBPACK_IMPORTED_MODULE_11__);

      var HistorialDocComponent = /*#__PURE__*/function () {
        function HistorialDocComponent(fb, router, route, globalServices) {
          _classCallCheck(this, HistorialDocComponent);

          this.fb = fb;
          this.router = router;
          this.route = route;
          this.globalServices = globalServices;
          this.fileName = '';
          this.chargerList = [];
          this.usuarioList = [{
            value: 1,
            desc: 'Doctora'
          }, {
            value: 2,
            desc: 'Operadora'
          }];
          this.displayedColumns = ['dateA', 'name', 'lastName', 'identification', 'birthday', 'age', 'phone', 'treatment', 'treatmentType', 'shotsBefore', 'shotsAfter', 'shotsDifferential', 'userAttemption', 'countSession', 'assistent', 'product', 'payForm', 'subscriber', 'comission', 'price', 'actions'];
          this.filters = fb.group({
            name: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"](),
            lastName: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"](),
            identification: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"](),
            initialDate: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"](),
            finalDate: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"](),
            user: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"](),
            userName: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"]()
          });
        }

        _createClass(HistorialDocComponent, [{
          key: "ngOnInit",
          value: function ngOnInit() {}
        }, {
          key: "search",
          value: function search() {
            var _this64 = this;

            var data = Object.assign({}, this.filters.value);
            this.globalServices.httpServicesResponse(data, _environments_environment__WEBPACK_IMPORTED_MODULE_10__["environment"].Url + '/depilarte/searchRegister').subscribe(function (res) {
              console.log(res.resultList);
              _this64.dataSource = new _angular_material_table__WEBPACK_IMPORTED_MODULE_5__["MatTableDataSource"](res.resultList);
              _this64.dataSource.paginator = _this64.paginator;
              _this64.dataSource.sort = _this64.sort;
            });
          }
        }, {
          key: "goEdit",
          value: function goEdit(id) {
            this.router.navigate(['/registrar-paciente'], {
              relativeTo: this.route,
              queryParams: {
                id: id
              }
            });
          }
        }, {
          key: "changeCharger",
          value: function changeCharger() {
            var _this65 = this;

            if (this.filters.get('user').value != null) {
              this.globalServices.httpServicesResponse({
                charger: this.filters.get('user').value
              }, _environments_environment__WEBPACK_IMPORTED_MODULE_10__["environment"].Url + '/global/chargers').subscribe(function (response) {
                _this65.chargerList = response.chargers.filter(function (ch) {
                  return ch.id !== -1;
                });
              }, console.log);
            } else {
              return false;
            }
          }
        }, {
          key: "download",
          value: function download() {
            var _this66 = this;

            var data = Object.assign({}, this.filters.value);
            this.globalServices.httpServicesResponse(data, _environments_environment__WEBPACK_IMPORTED_MODULE_10__["environment"].Url + 'depilarte/generateRegister').subscribe(function (data) {
              var result = data;

              if (result.type == 'error') {
                console.log('error');
              } else {
                var file = result.resultEncodedString;
                var sliceSize = 512;
                var byteCharacters = atob(file);
                var byteArrays = [];

                for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {
                  var slice = byteCharacters.slice(offset, offset + sliceSize);
                  var byteNumbers = new Array(slice.length);

                  for (var i = 0; i < slice.length; i++) {
                    byteNumbers[i] = slice.charCodeAt(i);
                  }

                  var byteArray = new Uint8Array(byteNumbers);
                  byteArrays.push(byteArray);
                }

                var blob = new Blob(byteArrays, {
                  type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
                });
                Object(file_saver__WEBPACK_IMPORTED_MODULE_11__["saveAs"])(blob, _this66.fileName);
              }
            }, function (error) {//error
            });
          }
        }]);

        return HistorialDocComponent;
      }();

      HistorialDocComponent.ctorParameters = function () {
        return [{
          type: _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormBuilder"]
        }, {
          type: _angular_router__WEBPACK_IMPORTED_MODULE_7__["Router"]
        }, {
          type: _angular_router__WEBPACK_IMPORTED_MODULE_7__["ActivatedRoute"]
        }, {
          type: _shared_services_global_services__WEBPACK_IMPORTED_MODULE_9__["GlobalServices"]
        }];
      };

      HistorialDocComponent.propDecorators = {
        paginator: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewChild"],
          args: [_angular_material_paginator__WEBPACK_IMPORTED_MODULE_6__["MatPaginator"]]
        }],
        sort: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewChild"],
          args: [_angular_material_sort__WEBPACK_IMPORTED_MODULE_8__["MatSort"]]
        }]
      };
      HistorialDocComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"])({
        selector: 'historialDoc',
        template: _raw_loader_historialDoc_component_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        styles: [_historialDoc_component_scss__WEBPACK_IMPORTED_MODULE_2__["default"]]
      }), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormBuilder"], _angular_router__WEBPACK_IMPORTED_MODULE_7__["Router"], _angular_router__WEBPACK_IMPORTED_MODULE_7__["ActivatedRoute"], _shared_services_global_services__WEBPACK_IMPORTED_MODULE_9__["GlobalServices"]])], HistorialDocComponent);
      /***/
    },

    /***/
    "gVVK": function gVVK(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Slovenian [sl]
      //! author : Robert Sedovšek : https://github.com/sedovsek
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        function processRelativeTime(number, withoutSuffix, key, isFuture) {
          var result = number + ' ';

          switch (key) {
            case 's':
              return withoutSuffix || isFuture ? 'nekaj sekund' : 'nekaj sekundami';

            case 'ss':
              if (number === 1) {
                result += withoutSuffix ? 'sekundo' : 'sekundi';
              } else if (number === 2) {
                result += withoutSuffix || isFuture ? 'sekundi' : 'sekundah';
              } else if (number < 5) {
                result += withoutSuffix || isFuture ? 'sekunde' : 'sekundah';
              } else {
                result += 'sekund';
              }

              return result;

            case 'm':
              return withoutSuffix ? 'ena minuta' : 'eno minuto';

            case 'mm':
              if (number === 1) {
                result += withoutSuffix ? 'minuta' : 'minuto';
              } else if (number === 2) {
                result += withoutSuffix || isFuture ? 'minuti' : 'minutama';
              } else if (number < 5) {
                result += withoutSuffix || isFuture ? 'minute' : 'minutami';
              } else {
                result += withoutSuffix || isFuture ? 'minut' : 'minutami';
              }

              return result;

            case 'h':
              return withoutSuffix ? 'ena ura' : 'eno uro';

            case 'hh':
              if (number === 1) {
                result += withoutSuffix ? 'ura' : 'uro';
              } else if (number === 2) {
                result += withoutSuffix || isFuture ? 'uri' : 'urama';
              } else if (number < 5) {
                result += withoutSuffix || isFuture ? 'ure' : 'urami';
              } else {
                result += withoutSuffix || isFuture ? 'ur' : 'urami';
              }

              return result;

            case 'd':
              return withoutSuffix || isFuture ? 'en dan' : 'enim dnem';

            case 'dd':
              if (number === 1) {
                result += withoutSuffix || isFuture ? 'dan' : 'dnem';
              } else if (number === 2) {
                result += withoutSuffix || isFuture ? 'dni' : 'dnevoma';
              } else {
                result += withoutSuffix || isFuture ? 'dni' : 'dnevi';
              }

              return result;

            case 'M':
              return withoutSuffix || isFuture ? 'en mesec' : 'enim mesecem';

            case 'MM':
              if (number === 1) {
                result += withoutSuffix || isFuture ? 'mesec' : 'mesecem';
              } else if (number === 2) {
                result += withoutSuffix || isFuture ? 'meseca' : 'mesecema';
              } else if (number < 5) {
                result += withoutSuffix || isFuture ? 'mesece' : 'meseci';
              } else {
                result += withoutSuffix || isFuture ? 'mesecev' : 'meseci';
              }

              return result;

            case 'y':
              return withoutSuffix || isFuture ? 'eno leto' : 'enim letom';

            case 'yy':
              if (number === 1) {
                result += withoutSuffix || isFuture ? 'leto' : 'letom';
              } else if (number === 2) {
                result += withoutSuffix || isFuture ? 'leti' : 'letoma';
              } else if (number < 5) {
                result += withoutSuffix || isFuture ? 'leta' : 'leti';
              } else {
                result += withoutSuffix || isFuture ? 'let' : 'leti';
              }

              return result;
          }
        }

        var sl = moment.defineLocale('sl', {
          months: 'januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december'.split('_'),
          monthsShort: 'jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.'.split('_'),
          monthsParseExact: true,
          weekdays: 'nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota'.split('_'),
          weekdaysShort: 'ned._pon._tor._sre._čet._pet._sob.'.split('_'),
          weekdaysMin: 'ne_po_to_sr_če_pe_so'.split('_'),
          weekdaysParseExact: true,
          longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD. MM. YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd, D. MMMM YYYY H:mm'
          },
          calendar: {
            sameDay: '[danes ob] LT',
            nextDay: '[jutri ob] LT',
            nextWeek: function nextWeek() {
              switch (this.day()) {
                case 0:
                  return '[v] [nedeljo] [ob] LT';

                case 3:
                  return '[v] [sredo] [ob] LT';

                case 6:
                  return '[v] [soboto] [ob] LT';

                case 1:
                case 2:
                case 4:
                case 5:
                  return '[v] dddd [ob] LT';
              }
            },
            lastDay: '[včeraj ob] LT',
            lastWeek: function lastWeek() {
              switch (this.day()) {
                case 0:
                  return '[prejšnjo] [nedeljo] [ob] LT';

                case 3:
                  return '[prejšnjo] [sredo] [ob] LT';

                case 6:
                  return '[prejšnjo] [soboto] [ob] LT';

                case 1:
                case 2:
                case 4:
                case 5:
                  return '[prejšnji] dddd [ob] LT';
              }
            },
            sameElse: 'L'
          },
          relativeTime: {
            future: 'čez %s',
            past: 'pred %s',
            s: processRelativeTime,
            ss: processRelativeTime,
            m: processRelativeTime,
            mm: processRelativeTime,
            h: processRelativeTime,
            hh: processRelativeTime,
            d: processRelativeTime,
            dd: processRelativeTime,
            M: processRelativeTime,
            MM: processRelativeTime,
            y: processRelativeTime,
            yy: processRelativeTime
          },
          dayOfMonthOrdinalParse: /\d{1,2}\./,
          ordinal: '%d.',
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 7th is the first week of the year.

          }
        });
        return sl;
      });
      /***/

    },

    /***/
    "gekB": function gekB(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Finnish [fi]
      //! author : Tarmo Aidantausta : https://github.com/bleadof
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var numbersPast = 'nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän'.split(' '),
            numbersFuture = ['nolla', 'yhden', 'kahden', 'kolmen', 'neljän', 'viiden', 'kuuden', numbersPast[7], numbersPast[8], numbersPast[9]];

        function translate(number, withoutSuffix, key, isFuture) {
          var result = '';

          switch (key) {
            case 's':
              return isFuture ? 'muutaman sekunnin' : 'muutama sekunti';

            case 'ss':
              result = isFuture ? 'sekunnin' : 'sekuntia';
              break;

            case 'm':
              return isFuture ? 'minuutin' : 'minuutti';

            case 'mm':
              result = isFuture ? 'minuutin' : 'minuuttia';
              break;

            case 'h':
              return isFuture ? 'tunnin' : 'tunti';

            case 'hh':
              result = isFuture ? 'tunnin' : 'tuntia';
              break;

            case 'd':
              return isFuture ? 'päivän' : 'päivä';

            case 'dd':
              result = isFuture ? 'päivän' : 'päivää';
              break;

            case 'M':
              return isFuture ? 'kuukauden' : 'kuukausi';

            case 'MM':
              result = isFuture ? 'kuukauden' : 'kuukautta';
              break;

            case 'y':
              return isFuture ? 'vuoden' : 'vuosi';

            case 'yy':
              result = isFuture ? 'vuoden' : 'vuotta';
              break;
          }

          result = verbalNumber(number, isFuture) + ' ' + result;
          return result;
        }

        function verbalNumber(number, isFuture) {
          return number < 10 ? isFuture ? numbersFuture[number] : numbersPast[number] : number;
        }

        var fi = moment.defineLocale('fi', {
          months: 'tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu'.split('_'),
          monthsShort: 'tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu'.split('_'),
          weekdays: 'sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai'.split('_'),
          weekdaysShort: 'su_ma_ti_ke_to_pe_la'.split('_'),
          weekdaysMin: 'su_ma_ti_ke_to_pe_la'.split('_'),
          longDateFormat: {
            LT: 'HH.mm',
            LTS: 'HH.mm.ss',
            L: 'DD.MM.YYYY',
            LL: 'Do MMMM[ta] YYYY',
            LLL: 'Do MMMM[ta] YYYY, [klo] HH.mm',
            LLLL: 'dddd, Do MMMM[ta] YYYY, [klo] HH.mm',
            l: 'D.M.YYYY',
            ll: 'Do MMM YYYY',
            lll: 'Do MMM YYYY, [klo] HH.mm',
            llll: 'ddd, Do MMM YYYY, [klo] HH.mm'
          },
          calendar: {
            sameDay: '[tänään] [klo] LT',
            nextDay: '[huomenna] [klo] LT',
            nextWeek: 'dddd [klo] LT',
            lastDay: '[eilen] [klo] LT',
            lastWeek: '[viime] dddd[na] [klo] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: '%s päästä',
            past: '%s sitten',
            s: translate,
            ss: translate,
            m: translate,
            mm: translate,
            h: translate,
            hh: translate,
            d: translate,
            dd: translate,
            M: translate,
            MM: translate,
            y: translate,
            yy: translate
          },
          dayOfMonthOrdinalParse: /\d{1,2}\./,
          ordinal: '%d.',
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.

          }
        });
        return fi;
      });
      /***/

    },

    /***/
    "gjCT": function gjCT(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Arabic (Saudi Arabia) [ar-sa]
      //! author : Suhail Alkowaileet : https://github.com/xsoh
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var symbolMap = {
          1: '١',
          2: '٢',
          3: '٣',
          4: '٤',
          5: '٥',
          6: '٦',
          7: '٧',
          8: '٨',
          9: '٩',
          0: '٠'
        },
            numberMap = {
          '١': '1',
          '٢': '2',
          '٣': '3',
          '٤': '4',
          '٥': '5',
          '٦': '6',
          '٧': '7',
          '٨': '8',
          '٩': '9',
          '٠': '0'
        };
        var arSa = moment.defineLocale('ar-sa', {
          months: 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
          monthsShort: 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
          weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
          weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
          weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
          weekdaysParseExact: true,
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
          },
          meridiemParse: /ص|م/,
          isPM: function isPM(input) {
            return 'م' === input;
          },
          meridiem: function meridiem(hour, minute, isLower) {
            if (hour < 12) {
              return 'ص';
            } else {
              return 'م';
            }
          },
          calendar: {
            sameDay: '[اليوم على الساعة] LT',
            nextDay: '[غدا على الساعة] LT',
            nextWeek: 'dddd [على الساعة] LT',
            lastDay: '[أمس على الساعة] LT',
            lastWeek: 'dddd [على الساعة] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: 'في %s',
            past: 'منذ %s',
            s: 'ثوان',
            ss: '%d ثانية',
            m: 'دقيقة',
            mm: '%d دقائق',
            h: 'ساعة',
            hh: '%d ساعات',
            d: 'يوم',
            dd: '%d أيام',
            M: 'شهر',
            MM: '%d أشهر',
            y: 'سنة',
            yy: '%d سنوات'
          },
          preparse: function preparse(string) {
            return string.replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
              return numberMap[match];
            }).replace(/،/g, ',');
          },
          postformat: function postformat(string) {
            return string.replace(/\d/g, function (match) {
              return symbolMap[match];
            }).replace(/,/g, '،');
          },
          week: {
            dow: 0,
            // Sunday is the first day of the week.
            doy: 6 // The week that contains Jan 6th is the first week of the year.

          }
        });
        return arSa;
      });
      /***/

    },

    /***/
    "hKrs": function hKrs(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Bulgarian [bg]
      //! author : Krasen Borisov : https://github.com/kraz
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var bg = moment.defineLocale('bg', {
          months: 'януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември'.split('_'),
          monthsShort: 'яну_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек'.split('_'),
          weekdays: 'неделя_понеделник_вторник_сряда_четвъртък_петък_събота'.split('_'),
          weekdaysShort: 'нед_пон_вто_сря_чет_пет_съб'.split('_'),
          weekdaysMin: 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
          longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'D.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY H:mm',
            LLLL: 'dddd, D MMMM YYYY H:mm'
          },
          calendar: {
            sameDay: '[Днес в] LT',
            nextDay: '[Утре в] LT',
            nextWeek: 'dddd [в] LT',
            lastDay: '[Вчера в] LT',
            lastWeek: function lastWeek() {
              switch (this.day()) {
                case 0:
                case 3:
                case 6:
                  return '[Миналата] dddd [в] LT';

                case 1:
                case 2:
                case 4:
                case 5:
                  return '[Миналия] dddd [в] LT';
              }
            },
            sameElse: 'L'
          },
          relativeTime: {
            future: 'след %s',
            past: 'преди %s',
            s: 'няколко секунди',
            ss: '%d секунди',
            m: 'минута',
            mm: '%d минути',
            h: 'час',
            hh: '%d часа',
            d: 'ден',
            dd: '%d дена',
            w: 'седмица',
            ww: '%d седмици',
            M: 'месец',
            MM: '%d месеца',
            y: 'година',
            yy: '%d години'
          },
          dayOfMonthOrdinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
          ordinal: function ordinal(number) {
            var lastDigit = number % 10,
                last2Digits = number % 100;

            if (number === 0) {
              return number + '-ев';
            } else if (last2Digits === 0) {
              return number + '-ен';
            } else if (last2Digits > 10 && last2Digits < 20) {
              return number + '-ти';
            } else if (lastDigit === 1) {
              return number + '-ви';
            } else if (lastDigit === 2) {
              return number + '-ри';
            } else if (lastDigit === 7 || lastDigit === 8) {
              return number + '-ми';
            } else {
              return number + '-ти';
            }
          },
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 7th is the first week of the year.

          }
        });
        return bg;
      });
      /***/

    },

    /***/
    "honF": function honF(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Burmese [my]
      //! author : Squar team, mysquar.com
      //! author : David Rossellat : https://github.com/gholadr
      //! author : Tin Aung Lin : https://github.com/thanyawzinmin
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var symbolMap = {
          1: '၁',
          2: '၂',
          3: '၃',
          4: '၄',
          5: '၅',
          6: '၆',
          7: '၇',
          8: '၈',
          9: '၉',
          0: '၀'
        },
            numberMap = {
          '၁': '1',
          '၂': '2',
          '၃': '3',
          '၄': '4',
          '၅': '5',
          '၆': '6',
          '၇': '7',
          '၈': '8',
          '၉': '9',
          '၀': '0'
        };
        var my = moment.defineLocale('my', {
          months: 'ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ'.split('_'),
          monthsShort: 'ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ'.split('_'),
          weekdays: 'တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ'.split('_'),
          weekdaysShort: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),
          weekdaysMin: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
          },
          calendar: {
            sameDay: '[ယနေ.] LT [မှာ]',
            nextDay: '[မနက်ဖြန်] LT [မှာ]',
            nextWeek: 'dddd LT [မှာ]',
            lastDay: '[မနေ.က] LT [မှာ]',
            lastWeek: '[ပြီးခဲ့သော] dddd LT [မှာ]',
            sameElse: 'L'
          },
          relativeTime: {
            future: 'လာမည့် %s မှာ',
            past: 'လွန်ခဲ့သော %s က',
            s: 'စက္ကန်.အနည်းငယ်',
            ss: '%d စက္ကန့်',
            m: 'တစ်မိနစ်',
            mm: '%d မိနစ်',
            h: 'တစ်နာရီ',
            hh: '%d နာရီ',
            d: 'တစ်ရက်',
            dd: '%d ရက်',
            M: 'တစ်လ',
            MM: '%d လ',
            y: 'တစ်နှစ်',
            yy: '%d နှစ်'
          },
          preparse: function preparse(string) {
            return string.replace(/[၁၂၃၄၅၆၇၈၉၀]/g, function (match) {
              return numberMap[match];
            });
          },
          postformat: function postformat(string) {
            return string.replace(/\d/g, function (match) {
              return symbolMap[match];
            });
          },
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.

          }
        });
        return my;
      });
      /***/

    },

    /***/
    "iEDd": function iEDd(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Galician [gl]
      //! author : Juan G. Hurtado : https://github.com/juanghurtado
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var gl = moment.defineLocale('gl', {
          months: 'xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro'.split('_'),
          monthsShort: 'xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.'.split('_'),
          monthsParseExact: true,
          weekdays: 'domingo_luns_martes_mércores_xoves_venres_sábado'.split('_'),
          weekdaysShort: 'dom._lun._mar._mér._xov._ven._sáb.'.split('_'),
          weekdaysMin: 'do_lu_ma_mé_xo_ve_sá'.split('_'),
          weekdaysParseExact: true,
          longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D [de] MMMM [de] YYYY',
            LLL: 'D [de] MMMM [de] YYYY H:mm',
            LLLL: 'dddd, D [de] MMMM [de] YYYY H:mm'
          },
          calendar: {
            sameDay: function sameDay() {
              return '[hoxe ' + (this.hours() !== 1 ? 'ás' : 'á') + '] LT';
            },
            nextDay: function nextDay() {
              return '[mañá ' + (this.hours() !== 1 ? 'ás' : 'á') + '] LT';
            },
            nextWeek: function nextWeek() {
              return 'dddd [' + (this.hours() !== 1 ? 'ás' : 'a') + '] LT';
            },
            lastDay: function lastDay() {
              return '[onte ' + (this.hours() !== 1 ? 'á' : 'a') + '] LT';
            },
            lastWeek: function lastWeek() {
              return '[o] dddd [pasado ' + (this.hours() !== 1 ? 'ás' : 'a') + '] LT';
            },
            sameElse: 'L'
          },
          relativeTime: {
            future: function future(str) {
              if (str.indexOf('un') === 0) {
                return 'n' + str;
              }

              return 'en ' + str;
            },
            past: 'hai %s',
            s: 'uns segundos',
            ss: '%d segundos',
            m: 'un minuto',
            mm: '%d minutos',
            h: 'unha hora',
            hh: '%d horas',
            d: 'un día',
            dd: '%d días',
            M: 'un mes',
            MM: '%d meses',
            y: 'un ano',
            yy: '%d anos'
          },
          dayOfMonthOrdinalParse: /\d{1,2}º/,
          ordinal: '%dº',
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.

          }
        });
        return gl;
      });
      /***/

    },

    /***/
    "iYuL": function iYuL(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Spanish [es]
      //! author : Julio Napurí : https://github.com/julionc
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var monthsShortDot = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_'),
            _monthsShort3 = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_'),
            monthsParse = [/^ene/i, /^feb/i, /^mar/i, /^abr/i, /^may/i, /^jun/i, /^jul/i, /^ago/i, /^sep/i, /^oct/i, /^nov/i, /^dic/i],
            monthsRegex = /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;

        var es = moment.defineLocale('es', {
          months: 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),
          monthsShort: function monthsShort(m, format) {
            if (!m) {
              return monthsShortDot;
            } else if (/-MMM-/.test(format)) {
              return _monthsShort3[m.month()];
            } else {
              return monthsShortDot[m.month()];
            }
          },
          monthsRegex: monthsRegex,
          monthsShortRegex: monthsRegex,
          monthsStrictRegex: /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
          monthsShortStrictRegex: /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
          monthsParse: monthsParse,
          longMonthsParse: monthsParse,
          shortMonthsParse: monthsParse,
          weekdays: 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
          weekdaysShort: 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
          weekdaysMin: 'do_lu_ma_mi_ju_vi_sá'.split('_'),
          weekdaysParseExact: true,
          longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D [de] MMMM [de] YYYY',
            LLL: 'D [de] MMMM [de] YYYY H:mm',
            LLLL: 'dddd, D [de] MMMM [de] YYYY H:mm'
          },
          calendar: {
            sameDay: function sameDay() {
              return '[hoy a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            nextDay: function nextDay() {
              return '[mañana a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            nextWeek: function nextWeek() {
              return 'dddd [a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            lastDay: function lastDay() {
              return '[ayer a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            lastWeek: function lastWeek() {
              return '[el] dddd [pasado a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            sameElse: 'L'
          },
          relativeTime: {
            future: 'en %s',
            past: 'hace %s',
            s: 'unos segundos',
            ss: '%d segundos',
            m: 'un minuto',
            mm: '%d minutos',
            h: 'una hora',
            hh: '%d horas',
            d: 'un día',
            dd: '%d días',
            w: 'una semana',
            ww: '%d semanas',
            M: 'un mes',
            MM: '%d meses',
            y: 'un año',
            yy: '%d años'
          },
          dayOfMonthOrdinalParse: /\d{1,2}º/,
          ordinal: '%dº',
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.

          },
          invalidDate: 'Fecha inválida'
        });
        return es;
      });
      /***/

    },

    /***/
    "j0/V": function j0V(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony default export */


      __webpack_exports__["default"] = "<div class=\"row\">\r\n  <div class=\"col-md-8 ml-auto mr-auto\">\r\n    <div class=\"card card-upgrade\">\r\n      <div class=\"card-header text-center\">\r\n        <h4 class=\"card-title\">Paper Dashboard PRO Angular</h4>\r\n          <p class=\"card-category\">Are you looking for more components? Please check our Premium Version of Paper Dashboard PRO.</p>\r\n      </div>\r\n      <div class=\"card-body\">\r\n        <div class=\"table-responsive table-upgrade\">\r\n          <table class=\"table\">\r\n            <thead>\r\n              <th></th>\r\n              <th class=\"text-center\">Free</th>\r\n              <th class=\"text-center\">PRO</th>\r\n            </thead>\r\n            <tbody>\r\n              <tr>\r\n                <td>Components</td>\r\n                <td class=\"text-center\">16</td>\r\n                <td class=\"text-center\">160</td>\r\n              </tr>\r\n              <tr>\r\n                <td>Plugins</td>\r\n                <td class=\"text-center\">4</td>\r\n                <td class=\"text-center\">15</td>\r\n              </tr>\r\n              <tr>\r\n                <td>Example Pages</td>\r\n                <td class=\"text-center\">7</td>\r\n                <td class=\"text-center\">27</td>\r\n              </tr>\r\n              <tr>\r\n                <td>Login, Register, Pricing, Lock Pages</td>\r\n                <td class=\"text-center\"><i class=\"nc-icon nc-simple-remove text-danger\"></i></td>\r\n                <td class=\"text-center\"><i class=\"nc-icon nc-check-2 text-success\"></i></td>\r\n              </tr>\r\n              <tr>\r\n                <td>DataTables, VectorMap, SweetAlert, Wizard, FullCalendar etc...</td>\r\n                <td class=\"text-center\"><i class=\"nc-icon nc-simple-remove text-danger\"></i></td>\r\n                <td class=\"text-center\"><i class=\"nc-icon nc-check-2 text-success\"></i></td>\r\n              </tr>\r\n              <tr>\r\n                <td>Mini Sidebar</td>\r\n                <td class=\"text-center\"><i class=\"nc-icon nc-simple-remove text-danger\"></i></td>\r\n                <td class=\"text-center\"><i class=\"nc-icon nc-check-2 text-success\"></i></td>\r\n              </tr>\r\n              <tr>\r\n                <td>Premium Support</td>\r\n                <td class=\"text-center\"><i class=\"nc-icon nc-simple-remove text-danger\"></i></td>\r\n                <td class=\"text-center\"><i class=\"nc-icon nc-check-2 text-success\"></i></td>\r\n              </tr>\r\n              <tr>\r\n                <td></td>\r\n                <td class=\"text-center\">Free</td>\r\n                <td class=\"text-center\">Just $49</td>\r\n              </tr>\r\n              <tr>\r\n                <td class=\"text-center\"></td>\r\n                <td class=\"text-center\">\r\n                  <a href=\"#\" class=\"btn btn-round btn-default disabled\">Current Version</a>\r\n                </td>\r\n                <td class=\"text-center\">\r\n                  <a target=\"_blank\" href=\"https://www.creative-tim.com/product/paper-dashboard-pro-angular?ref=pd-free-angular-upgrade-live\" class=\"btn btn-round btn-primary\">Upgrade to PRO</a>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n";
      /***/
    },

    /***/
    "j56B": function j56B(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "OperadoraComponent", function () {
        return OperadoraComponent;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _raw_loader_operadora_component_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! raw-loader!./operadora.component.html */
      "CBdM");
      /* harmony import */


      var _operadora_component_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./operadora.component.scss */
      "+9xK");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var _angular_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/forms */
      "3Pt+");
      /* harmony import */


      var _angular_router__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @angular/router */
      "tyNb");
      /* harmony import */


      var _environments_environment__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! ../../../../environments/environment */
      "AytR");
      /* harmony import */


      var _shared_services_global_services__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! ../../../shared/services/global.services */
      "Zk1H");

      var OperadoraComponent = /*#__PURE__*/function () {
        function OperadoraComponent(fb, router, route, globalService) {
          var _this67 = this;

          _classCallCheck(this, OperadoraComponent);

          this.fb = fb;
          this.router = router;
          this.route = route;
          this.globalService = globalService;
          this.isLoading = false;
          this.create = true;
          this.edit = false;
          this.userList = [{
            value: 1,
            desc: 'Doctora'
          }, {
            value: 2,
            desc: 'Operadora'
          }];
          this.chargerList = [];
          this.methodsList = [];
          this.treatmentTypeList = [];
          this.treatmentsList = [];
          this.productList = [];
          this.disabled = true;
          this.show = true;
          this.showOperative = true;
          this.showDoctor = true;
          this.form = fb.group({
            id: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"](),
            userRegister: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"]('', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]),
            name: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"]('', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].pattern('[a-zA-Z0-9\\s]+')]),
            lastName: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"]('', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].pattern('[a-zA-Z0-9\\s]+')]),
            identification: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"]('', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].pattern("^[0-9-,]*$")])]),
            age: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"](),
            phone: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"]('', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].pattern("^[0-9-,]*$")])]),
            email: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"]('', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]),
            birthday: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"]('', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]),
            address: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"]('', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]),
            treatment: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"]('', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]),
            treatmentType: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"]('', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]),
            sessions: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"]('', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].pattern("^[0-9-,]*$")])]),
            assistent: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"](),
            product: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"](),
            beforeShots: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"](),
            afterShots: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"](),
            diferents: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"](),
            userOp: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"](),
            userDoc: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"](),
            formPay: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"]('', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]),
            bono: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"]('', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].pattern("^[0-9-,]*$")])]),
            totalPrice: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"]({
              value: null,
              disabled: true
            }, [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].pattern("^[0-9-,]*$")])]),
            comission: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"]('', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].pattern("^[0-9-,]*$")])]),
            note: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"]()
          });
          this.form.controls.userRegister.valueChanges.subscribe(function (value) {
            switch (value) {
              case 1:
                _this67.showDoctor = true;
                _this67.showOperative = false;
                break;

              case 2:
                _this67.showDoctor = false;
                _this67.showOperative = true;
                break;
            }
          });
        }

        _createClass(OperadoraComponent, [{
          key: "ngOnInit",
          value: function ngOnInit() {
            var _this68 = this;

            this.showDoctor = false;
            this.showOperative = false;
            this.getMethodsPay();
            this.getTreatments();
            this.getProduct();
            this.changeTypeTreament();
            this.changeCharger();
            this.route.queryParams.subscribe(function (params) {
              var id = params.id;
              _this68.idPoint = id;

              if (_this68.idPoint) {
                _this68.getDtaByUpdate(id);
              }
            });
          }
        }, {
          key: "f",
          get: function get() {
            return this.form.controls;
          }
        }, {
          key: "getDtaByUpdate",
          value: function getDtaByUpdate(id) {
            var _this69 = this;

            this.isLoading = true;
            var data = {
              id: id
            };
            this.globalService.httpServicesResponse(data, _environments_environment__WEBPACK_IMPORTED_MODULE_6__["environment"].Url + 'depilarte/getPacientes').subscribe(function (res) {
              _this69.setValues(res);

              _this69.isLoading = false;
              _this69.create = false;
              _this69.edit = true;
            }, function (e) {
              console.log(e);
              _this69.isLoading = false;
            });
          }
        }, {
          key: "setValues",
          value: function setValues(values) {
            this.form.setValue(values);
          }
        }, {
          key: "register",
          value: function register() {
            var _this70 = this;

            if (this.form.invalid) return;
            console.log(this.form.value);
            var data = Object.assign({}, this.form.value);
            this.globalService.httpServicesResponse(data, _environments_environment__WEBPACK_IMPORTED_MODULE_6__["environment"].Url + '/depilarte/registerClient').subscribe(function (res) {
              if (res.type === 'error') {
                alertify.error('Error al registrar');
              } else {
                console.log(_this70.form.value);

                _this70.form.reset();

                alertify.success('Registrado con exito');
              }
            }, console.log);
          }
        }, {
          key: "hasError",
          value: function hasError(control, type) {
            return this.form.controls[control].hasError(type);
          }
        }, {
          key: "getMethodsPay",
          value: function getMethodsPay() {
            var _this71 = this;

            this.globalService.httpServicesResponse(null, _environments_environment__WEBPACK_IMPORTED_MODULE_6__["environment"].Url + '/global/methodsPay').subscribe(function (response) {
              if (response.type === 'success') {
                _this71.methodsList = response.methodsPay.filter(function (mp) {
                  return mp.id !== -1;
                });
              }
            }, console.error);
          }
        }, {
          key: "changeCharger",
          value: function changeCharger() {
            var _this72 = this;

            if (this.form.get('userRegister').value != null) {
              this.globalService.httpServicesResponse({
                charger: this.form.get('userRegister').value
              }, _environments_environment__WEBPACK_IMPORTED_MODULE_6__["environment"].Url + '/global/chargers').subscribe(function (response) {
                _this72.chargerList = response.chargers.filter(function (ch) {
                  return ch.id !== -1;
                });
              }, console.log);
            } else {
              return false;
            }
          }
        }, {
          key: "changeTypeTreament",
          value: function changeTypeTreament() {
            var _this73 = this;

            if (this.form.get('treatment').value != null) {
              this.globalService.httpServicesResponse({
                treatmentType: this.form.get('treatment').value
              }, _environments_environment__WEBPACK_IMPORTED_MODULE_6__["environment"].Url + '/global/treatmentTypes').subscribe(function (response) {
                _this73.treatmentTypeList = response.treatmentTypes.filter(function (tp) {
                  return tp.id !== -1;
                });
              }, console.log);
            } else {
              return false;
            }
          }
        }, {
          key: "getTreatments",
          value: function getTreatments() {
            var _this74 = this;

            this.globalService.httpServicesResponse(null, _environments_environment__WEBPACK_IMPORTED_MODULE_6__["environment"].Url + '/global/treatments').subscribe(function (response) {
              if (response.type === 'success') {
                _this74.treatmentsList = response.treatments.filter(function (te) {
                  return te.id !== -1;
                });
              }
            }, console.error);
          }
        }, {
          key: "getProduct",
          value: function getProduct() {
            var _this75 = this;

            this.globalService.httpServicesResponse(null, _environments_environment__WEBPACK_IMPORTED_MODULE_6__["environment"].Url + '/global/products').subscribe(function (response) {
              if (response.type === 'success') {
                _this75.productList = response.products.filter(function (po) {
                  return po.id !== -1;
                });
              }
            }, console.error);
          }
        }]);

        return OperadoraComponent;
      }();

      OperadoraComponent.ctorParameters = function () {
        return [{
          type: _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormBuilder"]
        }, {
          type: _angular_router__WEBPACK_IMPORTED_MODULE_5__["Router"]
        }, {
          type: _angular_router__WEBPACK_IMPORTED_MODULE_5__["ActivatedRoute"]
        }, {
          type: _shared_services_global_services__WEBPACK_IMPORTED_MODULE_7__["GlobalServices"]
        }];
      };

      OperadoraComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"])({
        selector: 'user-cmp',
        template: _raw_loader_operadora_component_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        styles: [_operadora_component_scss__WEBPACK_IMPORTED_MODULE_2__["default"]]
      }), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormBuilder"], _angular_router__WEBPACK_IMPORTED_MODULE_5__["Router"], _angular_router__WEBPACK_IMPORTED_MODULE_5__["ActivatedRoute"], _shared_services_global_services__WEBPACK_IMPORTED_MODULE_7__["GlobalServices"]])], OperadoraComponent);
      /***/
    },

    /***/
    "jUeY": function jUeY(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Greek [el]
      //! author : Aggelos Karalias : https://github.com/mehiel
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        function isFunction(input) {
          return typeof Function !== 'undefined' && input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
        }

        var el = moment.defineLocale('el', {
          monthsNominativeEl: 'Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος'.split('_'),
          monthsGenitiveEl: 'Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου'.split('_'),
          months: function months(momentToFormat, format) {
            if (!momentToFormat) {
              return this._monthsNominativeEl;
            } else if (typeof format === 'string' && /D/.test(format.substring(0, format.indexOf('MMMM')))) {
              // if there is a day number before 'MMMM'
              return this._monthsGenitiveEl[momentToFormat.month()];
            } else {
              return this._monthsNominativeEl[momentToFormat.month()];
            }
          },
          monthsShort: 'Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ'.split('_'),
          weekdays: 'Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο'.split('_'),
          weekdaysShort: 'Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ'.split('_'),
          weekdaysMin: 'Κυ_Δε_Τρ_Τε_Πε_Πα_Σα'.split('_'),
          meridiem: function meridiem(hours, minutes, isLower) {
            if (hours > 11) {
              return isLower ? 'μμ' : 'ΜΜ';
            } else {
              return isLower ? 'πμ' : 'ΠΜ';
            }
          },
          isPM: function isPM(input) {
            return (input + '').toLowerCase()[0] === 'μ';
          },
          meridiemParse: /[ΠΜ]\.?Μ?\.?/i,
          longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY h:mm A',
            LLLL: 'dddd, D MMMM YYYY h:mm A'
          },
          calendarEl: {
            sameDay: '[Σήμερα {}] LT',
            nextDay: '[Αύριο {}] LT',
            nextWeek: 'dddd [{}] LT',
            lastDay: '[Χθες {}] LT',
            lastWeek: function lastWeek() {
              switch (this.day()) {
                case 6:
                  return '[το προηγούμενο] dddd [{}] LT';

                default:
                  return '[την προηγούμενη] dddd [{}] LT';
              }
            },
            sameElse: 'L'
          },
          calendar: function calendar(key, mom) {
            var output = this._calendarEl[key],
                hours = mom && mom.hours();

            if (isFunction(output)) {
              output = output.apply(mom);
            }

            return output.replace('{}', hours % 12 === 1 ? 'στη' : 'στις');
          },
          relativeTime: {
            future: 'σε %s',
            past: '%s πριν',
            s: 'λίγα δευτερόλεπτα',
            ss: '%d δευτερόλεπτα',
            m: 'ένα λεπτό',
            mm: '%d λεπτά',
            h: 'μία ώρα',
            hh: '%d ώρες',
            d: 'μία μέρα',
            dd: '%d μέρες',
            M: 'ένας μήνας',
            MM: '%d μήνες',
            y: 'ένας χρόνος',
            yy: '%d χρόνια'
          },
          dayOfMonthOrdinalParse: /\d{1,2}η/,
          ordinal: '%dη',
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4st is the first week of the year.

          }
        });
        return el;
      });
      /***/

    },

    /***/
    "jVdC": function jVdC(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Polish [pl]
      //! author : Rafal Hirsz : https://github.com/evoL
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var monthsNominative = 'styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień'.split('_'),
            monthsSubjective = 'stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia'.split('_'),
            monthsParse = [/^sty/i, /^lut/i, /^mar/i, /^kwi/i, /^maj/i, /^cze/i, /^lip/i, /^sie/i, /^wrz/i, /^paź/i, /^lis/i, /^gru/i];

        function plural(n) {
          return n % 10 < 5 && n % 10 > 1 && ~~(n / 10) % 10 !== 1;
        }

        function translate(number, withoutSuffix, key) {
          var result = number + ' ';

          switch (key) {
            case 'ss':
              return result + (plural(number) ? 'sekundy' : 'sekund');

            case 'm':
              return withoutSuffix ? 'minuta' : 'minutę';

            case 'mm':
              return result + (plural(number) ? 'minuty' : 'minut');

            case 'h':
              return withoutSuffix ? 'godzina' : 'godzinę';

            case 'hh':
              return result + (plural(number) ? 'godziny' : 'godzin');

            case 'ww':
              return result + (plural(number) ? 'tygodnie' : 'tygodni');

            case 'MM':
              return result + (plural(number) ? 'miesiące' : 'miesięcy');

            case 'yy':
              return result + (plural(number) ? 'lata' : 'lat');
          }
        }

        var pl = moment.defineLocale('pl', {
          months: function months(momentToFormat, format) {
            if (!momentToFormat) {
              return monthsNominative;
            } else if (/D MMMM/.test(format)) {
              return monthsSubjective[momentToFormat.month()];
            } else {
              return monthsNominative[momentToFormat.month()];
            }
          },
          monthsShort: 'sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru'.split('_'),
          monthsParse: monthsParse,
          longMonthsParse: monthsParse,
          shortMonthsParse: monthsParse,
          weekdays: 'niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota'.split('_'),
          weekdaysShort: 'ndz_pon_wt_śr_czw_pt_sob'.split('_'),
          weekdaysMin: 'Nd_Pn_Wt_Śr_Cz_Pt_So'.split('_'),
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
          },
          calendar: {
            sameDay: '[Dziś o] LT',
            nextDay: '[Jutro o] LT',
            nextWeek: function nextWeek() {
              switch (this.day()) {
                case 0:
                  return '[W niedzielę o] LT';

                case 2:
                  return '[We wtorek o] LT';

                case 3:
                  return '[W środę o] LT';

                case 6:
                  return '[W sobotę o] LT';

                default:
                  return '[W] dddd [o] LT';
              }
            },
            lastDay: '[Wczoraj o] LT',
            lastWeek: function lastWeek() {
              switch (this.day()) {
                case 0:
                  return '[W zeszłą niedzielę o] LT';

                case 3:
                  return '[W zeszłą środę o] LT';

                case 6:
                  return '[W zeszłą sobotę o] LT';

                default:
                  return '[W zeszły] dddd [o] LT';
              }
            },
            sameElse: 'L'
          },
          relativeTime: {
            future: 'za %s',
            past: '%s temu',
            s: 'kilka sekund',
            ss: translate,
            m: translate,
            mm: translate,
            h: translate,
            hh: translate,
            d: '1 dzień',
            dd: '%d dni',
            w: 'tydzień',
            ww: translate,
            M: 'miesiąc',
            MM: translate,
            y: 'rok',
            yy: translate
          },
          dayOfMonthOrdinalParse: /\d{1,2}\./,
          ordinal: '%d.',
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.

          }
        });
        return pl;
      });
      /***/

    },

    /***/
    "jfSC": function jfSC(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Persian [fa]
      //! author : Ebrahim Byagowi : https://github.com/ebraminio
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var symbolMap = {
          1: '۱',
          2: '۲',
          3: '۳',
          4: '۴',
          5: '۵',
          6: '۶',
          7: '۷',
          8: '۸',
          9: '۹',
          0: '۰'
        },
            numberMap = {
          '۱': '1',
          '۲': '2',
          '۳': '3',
          '۴': '4',
          '۵': '5',
          '۶': '6',
          '۷': '7',
          '۸': '8',
          '۹': '9',
          '۰': '0'
        };
        var fa = moment.defineLocale('fa', {
          months: 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
          monthsShort: 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
          weekdays: "\u06CC\u06A9\u200C\u0634\u0646\u0628\u0647_\u062F\u0648\u0634\u0646\u0628\u0647_\u0633\u0647\u200C\u0634\u0646\u0628\u0647_\u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647_\u067E\u0646\u062C\u200C\u0634\u0646\u0628\u0647_\u062C\u0645\u0639\u0647_\u0634\u0646\u0628\u0647".split('_'),
          weekdaysShort: "\u06CC\u06A9\u200C\u0634\u0646\u0628\u0647_\u062F\u0648\u0634\u0646\u0628\u0647_\u0633\u0647\u200C\u0634\u0646\u0628\u0647_\u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647_\u067E\u0646\u062C\u200C\u0634\u0646\u0628\u0647_\u062C\u0645\u0639\u0647_\u0634\u0646\u0628\u0647".split('_'),
          weekdaysMin: 'ی_د_س_چ_پ_ج_ش'.split('_'),
          weekdaysParseExact: true,
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
          },
          meridiemParse: /قبل از ظهر|بعد از ظهر/,
          isPM: function isPM(input) {
            return /بعد از ظهر/.test(input);
          },
          meridiem: function meridiem(hour, minute, isLower) {
            if (hour < 12) {
              return 'قبل از ظهر';
            } else {
              return 'بعد از ظهر';
            }
          },
          calendar: {
            sameDay: '[امروز ساعت] LT',
            nextDay: '[فردا ساعت] LT',
            nextWeek: 'dddd [ساعت] LT',
            lastDay: '[دیروز ساعت] LT',
            lastWeek: 'dddd [پیش] [ساعت] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: 'در %s',
            past: '%s پیش',
            s: 'چند ثانیه',
            ss: '%d ثانیه',
            m: 'یک دقیقه',
            mm: '%d دقیقه',
            h: 'یک ساعت',
            hh: '%d ساعت',
            d: 'یک روز',
            dd: '%d روز',
            M: 'یک ماه',
            MM: '%d ماه',
            y: 'یک سال',
            yy: '%d سال'
          },
          preparse: function preparse(string) {
            return string.replace(/[۰-۹]/g, function (match) {
              return numberMap[match];
            }).replace(/،/g, ',');
          },
          postformat: function postformat(string) {
            return string.replace(/\d/g, function (match) {
              return symbolMap[match];
            }).replace(/,/g, '،');
          },
          dayOfMonthOrdinalParse: /\d{1,2}م/,
          ordinal: '%dم',
          week: {
            dow: 6,
            // Saturday is the first day of the week.
            doy: 12 // The week that contains Jan 12th is the first week of the year.

          }
        });
        return fa;
      });
      /***/

    },

    /***/
    "jnO4": function jnO4(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Arabic [ar]
      //! author : Abdel Said: https://github.com/abdelsaid
      //! author : Ahmed Elkhatib
      //! author : forabi https://github.com/forabi
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var symbolMap = {
          1: '١',
          2: '٢',
          3: '٣',
          4: '٤',
          5: '٥',
          6: '٦',
          7: '٧',
          8: '٨',
          9: '٩',
          0: '٠'
        },
            numberMap = {
          '١': '1',
          '٢': '2',
          '٣': '3',
          '٤': '4',
          '٥': '5',
          '٦': '6',
          '٧': '7',
          '٨': '8',
          '٩': '9',
          '٠': '0'
        },
            pluralForm = function pluralForm(n) {
          return n === 0 ? 0 : n === 1 ? 1 : n === 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5;
        },
            plurals = {
          s: ['أقل من ثانية', 'ثانية واحدة', ['ثانيتان', 'ثانيتين'], '%d ثوان', '%d ثانية', '%d ثانية'],
          m: ['أقل من دقيقة', 'دقيقة واحدة', ['دقيقتان', 'دقيقتين'], '%d دقائق', '%d دقيقة', '%d دقيقة'],
          h: ['أقل من ساعة', 'ساعة واحدة', ['ساعتان', 'ساعتين'], '%d ساعات', '%d ساعة', '%d ساعة'],
          d: ['أقل من يوم', 'يوم واحد', ['يومان', 'يومين'], '%d أيام', '%d يومًا', '%d يوم'],
          M: ['أقل من شهر', 'شهر واحد', ['شهران', 'شهرين'], '%d أشهر', '%d شهرا', '%d شهر'],
          y: ['أقل من عام', 'عام واحد', ['عامان', 'عامين'], '%d أعوام', '%d عامًا', '%d عام']
        },
            pluralize = function pluralize(u) {
          return function (number, withoutSuffix, string, isFuture) {
            var f = pluralForm(number),
                str = plurals[u][pluralForm(number)];

            if (f === 2) {
              str = str[withoutSuffix ? 0 : 1];
            }

            return str.replace(/%d/i, number);
          };
        },
            months = ['يناير', 'فبراير', 'مارس', 'أبريل', 'مايو', 'يونيو', 'يوليو', 'أغسطس', 'سبتمبر', 'أكتوبر', 'نوفمبر', 'ديسمبر'];

        var ar = moment.defineLocale('ar', {
          months: months,
          monthsShort: months,
          weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
          weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
          weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
          weekdaysParseExact: true,
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: "D/\u200FM/\u200FYYYY",
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
          },
          meridiemParse: /ص|م/,
          isPM: function isPM(input) {
            return 'م' === input;
          },
          meridiem: function meridiem(hour, minute, isLower) {
            if (hour < 12) {
              return 'ص';
            } else {
              return 'م';
            }
          },
          calendar: {
            sameDay: '[اليوم عند الساعة] LT',
            nextDay: '[غدًا عند الساعة] LT',
            nextWeek: 'dddd [عند الساعة] LT',
            lastDay: '[أمس عند الساعة] LT',
            lastWeek: 'dddd [عند الساعة] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: 'بعد %s',
            past: 'منذ %s',
            s: pluralize('s'),
            ss: pluralize('s'),
            m: pluralize('m'),
            mm: pluralize('m'),
            h: pluralize('h'),
            hh: pluralize('h'),
            d: pluralize('d'),
            dd: pluralize('d'),
            M: pluralize('M'),
            MM: pluralize('M'),
            y: pluralize('y'),
            yy: pluralize('y')
          },
          preparse: function preparse(string) {
            return string.replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
              return numberMap[match];
            }).replace(/،/g, ',');
          },
          postformat: function postformat(string) {
            return string.replace(/\d/g, function (match) {
              return symbolMap[match];
            }).replace(/,/g, '،');
          },
          week: {
            dow: 6,
            // Saturday is the first day of the week.
            doy: 12 // The week that contains Jan 12th is the first week of the year.

          }
        });
        return ar;
      });
      /***/

    },

    /***/
    "kEOa": function kEOa(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Bengali [bn]
      //! author : Kaushik Gandhi : https://github.com/kaushikgandhi
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var symbolMap = {
          1: '১',
          2: '২',
          3: '৩',
          4: '৪',
          5: '৫',
          6: '৬',
          7: '৭',
          8: '৮',
          9: '৯',
          0: '০'
        },
            numberMap = {
          '১': '1',
          '২': '2',
          '৩': '3',
          '৪': '4',
          '৫': '5',
          '৬': '6',
          '৭': '7',
          '৮': '8',
          '৯': '9',
          '০': '0'
        };
        var bn = moment.defineLocale('bn', {
          months: 'জানুয়ারি_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর'.split('_'),
          monthsShort: 'জানু_ফেব্রু_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্ট_অক্টো_নভে_ডিসে'.split('_'),
          weekdays: 'রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার'.split('_'),
          weekdaysShort: 'রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি'.split('_'),
          weekdaysMin: 'রবি_সোম_মঙ্গল_বুধ_বৃহ_শুক্র_শনি'.split('_'),
          longDateFormat: {
            LT: 'A h:mm সময়',
            LTS: 'A h:mm:ss সময়',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm সময়',
            LLLL: 'dddd, D MMMM YYYY, A h:mm সময়'
          },
          calendar: {
            sameDay: '[আজ] LT',
            nextDay: '[আগামীকাল] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[গতকাল] LT',
            lastWeek: '[গত] dddd, LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: '%s পরে',
            past: '%s আগে',
            s: 'কয়েক সেকেন্ড',
            ss: '%d সেকেন্ড',
            m: 'এক মিনিট',
            mm: '%d মিনিট',
            h: 'এক ঘন্টা',
            hh: '%d ঘন্টা',
            d: 'এক দিন',
            dd: '%d দিন',
            M: 'এক মাস',
            MM: '%d মাস',
            y: 'এক বছর',
            yy: '%d বছর'
          },
          preparse: function preparse(string) {
            return string.replace(/[১২৩৪৫৬৭৮৯০]/g, function (match) {
              return numberMap[match];
            });
          },
          postformat: function postformat(string) {
            return string.replace(/\d/g, function (match) {
              return symbolMap[match];
            });
          },
          meridiemParse: /রাত|সকাল|দুপুর|বিকাল|রাত/,
          meridiemHour: function meridiemHour(hour, meridiem) {
            if (hour === 12) {
              hour = 0;
            }

            if (meridiem === 'রাত' && hour >= 4 || meridiem === 'দুপুর' && hour < 5 || meridiem === 'বিকাল') {
              return hour + 12;
            } else {
              return hour;
            }
          },
          meridiem: function meridiem(hour, minute, isLower) {
            if (hour < 4) {
              return 'রাত';
            } else if (hour < 10) {
              return 'সকাল';
            } else if (hour < 17) {
              return 'দুপুর';
            } else if (hour < 20) {
              return 'বিকাল';
            } else {
              return 'রাত';
            }
          },
          week: {
            dow: 0,
            // Sunday is the first day of the week.
            doy: 6 // The week that contains Jan 6th is the first week of the year.

          }
        });
        return bn;
      });
      /***/

    },

    /***/
    "kOpN": function kOpN(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Chinese (Taiwan) [zh-tw]
      //! author : Ben : https://github.com/ben-lin
      //! author : Chris Lam : https://github.com/hehachris
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var zhTw = moment.defineLocale('zh-tw', {
          months: '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
          monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
          weekdays: '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
          weekdaysShort: '週日_週一_週二_週三_週四_週五_週六'.split('_'),
          weekdaysMin: '日_一_二_三_四_五_六'.split('_'),
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY/MM/DD',
            LL: 'YYYY年M月D日',
            LLL: 'YYYY年M月D日 HH:mm',
            LLLL: 'YYYY年M月D日dddd HH:mm',
            l: 'YYYY/M/D',
            ll: 'YYYY年M月D日',
            lll: 'YYYY年M月D日 HH:mm',
            llll: 'YYYY年M月D日dddd HH:mm'
          },
          meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
          meridiemHour: function meridiemHour(hour, meridiem) {
            if (hour === 12) {
              hour = 0;
            }

            if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
              return hour;
            } else if (meridiem === '中午') {
              return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === '下午' || meridiem === '晚上') {
              return hour + 12;
            }
          },
          meridiem: function meridiem(hour, minute, isLower) {
            var hm = hour * 100 + minute;

            if (hm < 600) {
              return '凌晨';
            } else if (hm < 900) {
              return '早上';
            } else if (hm < 1130) {
              return '上午';
            } else if (hm < 1230) {
              return '中午';
            } else if (hm < 1800) {
              return '下午';
            } else {
              return '晚上';
            }
          },
          calendar: {
            sameDay: '[今天] LT',
            nextDay: '[明天] LT',
            nextWeek: '[下]dddd LT',
            lastDay: '[昨天] LT',
            lastWeek: '[上]dddd LT',
            sameElse: 'L'
          },
          dayOfMonthOrdinalParse: /\d{1,2}(日|月|週)/,
          ordinal: function ordinal(number, period) {
            switch (period) {
              case 'd':
              case 'D':
              case 'DDD':
                return number + '日';

              case 'M':
                return number + '月';

              case 'w':
              case 'W':
                return number + '週';

              default:
                return number;
            }
          },
          relativeTime: {
            future: '%s後',
            past: '%s前',
            s: '幾秒',
            ss: '%d 秒',
            m: '1 分鐘',
            mm: '%d 分鐘',
            h: '1 小時',
            hh: '%d 小時',
            d: '1 天',
            dd: '%d 天',
            M: '1 個月',
            MM: '%d 個月',
            y: '1 年',
            yy: '%d 年'
          }
        });
        return zhTw;
      });
      /***/

    },

    /***/
    "kbn0": function kbn0(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony default export */


      __webpack_exports__["default"] = ".mat-form-field {\n  font-size: 14px;\n  width: 100%;\n}\n\n.mat-cell {\n  width: auto;\n}\n\n.mat-cell-id {\n  width: 100px;\n}\n\n.margin-btn-filter {\n  margin-bottom: 5px;\n}\n\n.container-tab {\n  height: auto;\n  width: 100%;\n  max-width: 100%;\n  overflow: auto;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGFnZXMvcHJvZHVjdG9zL3RyYXRhbWllbnRvL3RyYXRhbWllbnRvLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsZUFBQTtFQUNBLFdBQUE7QUFDRjs7QUFDQTtFQUNFLFdBQUE7QUFFRjs7QUFBQTtFQUNFLFlBQUE7QUFHRjs7QUFEQTtFQUNFLGtCQUFBO0FBSUY7O0FBRkE7RUFDRSxZQUFBO0VBQ0EsV0FBQTtFQUNBLGVBQUE7RUFDQSxjQUFBO0FBS0YiLCJmaWxlIjoic3JjL2FwcC9wYWdlcy9wcm9kdWN0b3MvdHJhdGFtaWVudG8vdHJhdGFtaWVudG8uY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIubWF0LWZvcm0tZmllbGQge1xyXG4gIGZvbnQtc2l6ZTogMTRweDtcclxuICB3aWR0aDogMTAwJTtcclxufVxyXG4ubWF0LWNlbGx7XHJcbiAgd2lkdGg6IGF1dG87XHJcbn1cclxuLm1hdC1jZWxsLWlke1xyXG4gIHdpZHRoOiAxMDBweDtcclxufVxyXG4ubWFyZ2luLWJ0bi1maWx0ZXIge1xyXG4gIG1hcmdpbi1ib3R0b206IDVweDtcclxufVxyXG4uY29udGFpbmVyLXRhYntcclxuICBoZWlnaHQ6IGF1dG87XHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgbWF4LXdpZHRoOiAxMDAlO1xyXG4gIG92ZXJmbG93OiBhdXRvO1xyXG59XHJcbiJdfQ== */";
      /***/
    },

    /***/
    "l5ep": function l5ep(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Welsh [cy]
      //! author : Robert Allen : https://github.com/robgallen
      //! author : https://github.com/ryangreaves
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var cy = moment.defineLocale('cy', {
          months: 'Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr'.split('_'),
          monthsShort: 'Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag'.split('_'),
          weekdays: 'Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn'.split('_'),
          weekdaysShort: 'Sul_Llun_Maw_Mer_Iau_Gwe_Sad'.split('_'),
          weekdaysMin: 'Su_Ll_Ma_Me_Ia_Gw_Sa'.split('_'),
          weekdaysParseExact: true,
          // time formats are the same as en-gb
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
          },
          calendar: {
            sameDay: '[Heddiw am] LT',
            nextDay: '[Yfory am] LT',
            nextWeek: 'dddd [am] LT',
            lastDay: '[Ddoe am] LT',
            lastWeek: 'dddd [diwethaf am] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: 'mewn %s',
            past: '%s yn ôl',
            s: 'ychydig eiliadau',
            ss: '%d eiliad',
            m: 'munud',
            mm: '%d munud',
            h: 'awr',
            hh: '%d awr',
            d: 'diwrnod',
            dd: '%d diwrnod',
            M: 'mis',
            MM: '%d mis',
            y: 'blwyddyn',
            yy: '%d flynedd'
          },
          dayOfMonthOrdinalParse: /\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,
          // traditional ordinal numbers above 31 are not commonly used in colloquial Welsh
          ordinal: function ordinal(number) {
            var b = number,
                output = '',
                lookup = ['', 'af', 'il', 'ydd', 'ydd', 'ed', 'ed', 'ed', 'fed', 'fed', 'fed', // 1af to 10fed
            'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'fed' // 11eg to 20fed
            ];

            if (b > 20) {
              if (b === 40 || b === 50 || b === 60 || b === 80 || b === 100) {
                output = 'fed'; // not 30ain, 70ain or 90ain
              } else {
                output = 'ain';
              }
            } else if (b > 0) {
              output = lookup[b];
            }

            return number + output;
          },
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.

          }
        });
        return cy;
      });
      /***/

    },

    /***/
    "lXzo": function lXzo(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Russian [ru]
      //! author : Viktorminator : https://github.com/Viktorminator
      //! author : Menelion Elensúle : https://github.com/Oire
      //! author : Коренберг Марк : https://github.com/socketpair
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        function plural(word, num) {
          var forms = word.split('_');
          return num % 10 === 1 && num % 100 !== 11 ? forms[0] : num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2];
        }

        function relativeTimeWithPlural(number, withoutSuffix, key) {
          var format = {
            ss: withoutSuffix ? 'секунда_секунды_секунд' : 'секунду_секунды_секунд',
            mm: withoutSuffix ? 'минута_минуты_минут' : 'минуту_минуты_минут',
            hh: 'час_часа_часов',
            dd: 'день_дня_дней',
            ww: 'неделя_недели_недель',
            MM: 'месяц_месяца_месяцев',
            yy: 'год_года_лет'
          };

          if (key === 'm') {
            return withoutSuffix ? 'минута' : 'минуту';
          } else {
            return number + ' ' + plural(format[key], +number);
          }
        }

        var monthsParse = [/^янв/i, /^фев/i, /^мар/i, /^апр/i, /^ма[йя]/i, /^июн/i, /^июл/i, /^авг/i, /^сен/i, /^окт/i, /^ноя/i, /^дек/i]; // http://new.gramota.ru/spravka/rules/139-prop : § 103
        // Сокращения месяцев: http://new.gramota.ru/spravka/buro/search-answer?s=242637
        // CLDR data:          http://www.unicode.org/cldr/charts/28/summary/ru.html#1753

        var ru = moment.defineLocale('ru', {
          months: {
            format: 'января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря'.split('_'),
            standalone: 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_')
          },
          monthsShort: {
            // по CLDR именно "июл." и "июн.", но какой смысл менять букву на точку?
            format: 'янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.'.split('_'),
            standalone: 'янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.'.split('_')
          },
          weekdays: {
            standalone: 'воскресенье_понедельник_вторник_среда_четверг_пятница_суббота'.split('_'),
            format: 'воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу'.split('_'),
            isFormat: /\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?] ?dddd/
          },
          weekdaysShort: 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
          weekdaysMin: 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
          monthsParse: monthsParse,
          longMonthsParse: monthsParse,
          shortMonthsParse: monthsParse,
          // полные названия с падежами, по три буквы, для некоторых, по 4 буквы, сокращения с точкой и без точки
          monthsRegex: /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,
          // копия предыдущего
          monthsShortRegex: /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,
          // полные названия с падежами
          monthsStrictRegex: /^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,
          // Выражение, которое соответствует только сокращённым формам
          monthsShortStrictRegex: /^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,
          longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY г.',
            LLL: 'D MMMM YYYY г., H:mm',
            LLLL: 'dddd, D MMMM YYYY г., H:mm'
          },
          calendar: {
            sameDay: '[Сегодня, в] LT',
            nextDay: '[Завтра, в] LT',
            lastDay: '[Вчера, в] LT',
            nextWeek: function nextWeek(now) {
              if (now.week() !== this.week()) {
                switch (this.day()) {
                  case 0:
                    return '[В следующее] dddd, [в] LT';

                  case 1:
                  case 2:
                  case 4:
                    return '[В следующий] dddd, [в] LT';

                  case 3:
                  case 5:
                  case 6:
                    return '[В следующую] dddd, [в] LT';
                }
              } else {
                if (this.day() === 2) {
                  return '[Во] dddd, [в] LT';
                } else {
                  return '[В] dddd, [в] LT';
                }
              }
            },
            lastWeek: function lastWeek(now) {
              if (now.week() !== this.week()) {
                switch (this.day()) {
                  case 0:
                    return '[В прошлое] dddd, [в] LT';

                  case 1:
                  case 2:
                  case 4:
                    return '[В прошлый] dddd, [в] LT';

                  case 3:
                  case 5:
                  case 6:
                    return '[В прошлую] dddd, [в] LT';
                }
              } else {
                if (this.day() === 2) {
                  return '[Во] dddd, [в] LT';
                } else {
                  return '[В] dddd, [в] LT';
                }
              }
            },
            sameElse: 'L'
          },
          relativeTime: {
            future: 'через %s',
            past: '%s назад',
            s: 'несколько секунд',
            ss: relativeTimeWithPlural,
            m: relativeTimeWithPlural,
            mm: relativeTimeWithPlural,
            h: 'час',
            hh: relativeTimeWithPlural,
            d: 'день',
            dd: relativeTimeWithPlural,
            w: 'неделя',
            ww: relativeTimeWithPlural,
            M: 'месяц',
            MM: relativeTimeWithPlural,
            y: 'год',
            yy: relativeTimeWithPlural
          },
          meridiemParse: /ночи|утра|дня|вечера/i,
          isPM: function isPM(input) {
            return /^(дня|вечера)$/.test(input);
          },
          meridiem: function meridiem(hour, minute, isLower) {
            if (hour < 4) {
              return 'ночи';
            } else if (hour < 12) {
              return 'утра';
            } else if (hour < 17) {
              return 'дня';
            } else {
              return 'вечера';
            }
          },
          dayOfMonthOrdinalParse: /\d{1,2}-(й|го|я)/,
          ordinal: function ordinal(number, period) {
            switch (period) {
              case 'M':
              case 'd':
              case 'DDD':
                return number + '-й';

              case 'D':
                return number + '-го';

              case 'w':
              case 'W':
                return number + '-я';

              default:
                return number;
            }
          },
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.

          }
        });
        return ru;
      });
      /***/

    },

    /***/
    "lYtQ": function lYtQ(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Mongolian [mn]
      //! author : Javkhlantugs Nyamdorj : https://github.com/javkhaanj7
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        function translate(number, withoutSuffix, key, isFuture) {
          switch (key) {
            case 's':
              return withoutSuffix ? 'хэдхэн секунд' : 'хэдхэн секундын';

            case 'ss':
              return number + (withoutSuffix ? ' секунд' : ' секундын');

            case 'm':
            case 'mm':
              return number + (withoutSuffix ? ' минут' : ' минутын');

            case 'h':
            case 'hh':
              return number + (withoutSuffix ? ' цаг' : ' цагийн');

            case 'd':
            case 'dd':
              return number + (withoutSuffix ? ' өдөр' : ' өдрийн');

            case 'M':
            case 'MM':
              return number + (withoutSuffix ? ' сар' : ' сарын');

            case 'y':
            case 'yy':
              return number + (withoutSuffix ? ' жил' : ' жилийн');

            default:
              return number;
          }
        }

        var mn = moment.defineLocale('mn', {
          months: 'Нэгдүгээр сар_Хоёрдугаар сар_Гуравдугаар сар_Дөрөвдүгээр сар_Тавдугаар сар_Зургадугаар сар_Долдугаар сар_Наймдугаар сар_Есдүгээр сар_Аравдугаар сар_Арван нэгдүгээр сар_Арван хоёрдугаар сар'.split('_'),
          monthsShort: '1 сар_2 сар_3 сар_4 сар_5 сар_6 сар_7 сар_8 сар_9 сар_10 сар_11 сар_12 сар'.split('_'),
          monthsParseExact: true,
          weekdays: 'Ням_Даваа_Мягмар_Лхагва_Пүрэв_Баасан_Бямба'.split('_'),
          weekdaysShort: 'Ням_Дав_Мяг_Лха_Пүр_Баа_Бям'.split('_'),
          weekdaysMin: 'Ня_Да_Мя_Лх_Пү_Ба_Бя'.split('_'),
          weekdaysParseExact: true,
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY-MM-DD',
            LL: 'YYYY оны MMMMын D',
            LLL: 'YYYY оны MMMMын D HH:mm',
            LLLL: 'dddd, YYYY оны MMMMын D HH:mm'
          },
          meridiemParse: /ҮӨ|ҮХ/i,
          isPM: function isPM(input) {
            return input === 'ҮХ';
          },
          meridiem: function meridiem(hour, minute, isLower) {
            if (hour < 12) {
              return 'ҮӨ';
            } else {
              return 'ҮХ';
            }
          },
          calendar: {
            sameDay: '[Өнөөдөр] LT',
            nextDay: '[Маргааш] LT',
            nextWeek: '[Ирэх] dddd LT',
            lastDay: '[Өчигдөр] LT',
            lastWeek: '[Өнгөрсөн] dddd LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: '%s дараа',
            past: '%s өмнө',
            s: translate,
            ss: translate,
            m: translate,
            mm: translate,
            h: translate,
            hh: translate,
            d: translate,
            dd: translate,
            M: translate,
            MM: translate,
            y: translate,
            yy: translate
          },
          dayOfMonthOrdinalParse: /\d{1,2} өдөр/,
          ordinal: function ordinal(number, period) {
            switch (period) {
              case 'd':
              case 'D':
              case 'DDD':
                return number + ' өдөр';

              default:
                return number;
            }
          }
        });
        return mn;
      });
      /***/

    },

    /***/
    "lgnt": function lgnt(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Kyrgyz [ky]
      //! author : Chyngyz Arystan uulu : https://github.com/chyngyz
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var suffixes = {
          0: '-чү',
          1: '-чи',
          2: '-чи',
          3: '-чү',
          4: '-чү',
          5: '-чи',
          6: '-чы',
          7: '-чи',
          8: '-чи',
          9: '-чу',
          10: '-чу',
          20: '-чы',
          30: '-чу',
          40: '-чы',
          50: '-чү',
          60: '-чы',
          70: '-чи',
          80: '-чи',
          90: '-чу',
          100: '-чү'
        };
        var ky = moment.defineLocale('ky', {
          months: 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_'),
          monthsShort: 'янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек'.split('_'),
          weekdays: 'Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби'.split('_'),
          weekdaysShort: 'Жек_Дүй_Шей_Шар_Бей_Жум_Ише'.split('_'),
          weekdaysMin: 'Жк_Дй_Шй_Шр_Бй_Жм_Иш'.split('_'),
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
          },
          calendar: {
            sameDay: '[Бүгүн саат] LT',
            nextDay: '[Эртең саат] LT',
            nextWeek: 'dddd [саат] LT',
            lastDay: '[Кечээ саат] LT',
            lastWeek: '[Өткөн аптанын] dddd [күнү] [саат] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: '%s ичинде',
            past: '%s мурун',
            s: 'бирнече секунд',
            ss: '%d секунд',
            m: 'бир мүнөт',
            mm: '%d мүнөт',
            h: 'бир саат',
            hh: '%d саат',
            d: 'бир күн',
            dd: '%d күн',
            M: 'бир ай',
            MM: '%d ай',
            y: 'бир жыл',
            yy: '%d жыл'
          },
          dayOfMonthOrdinalParse: /\d{1,2}-(чи|чы|чү|чу)/,
          ordinal: function ordinal(number) {
            var a = number % 10,
                b = number >= 100 ? 100 : null;
            return number + (suffixes[number] || suffixes[a] || suffixes[b]);
          },
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 7th is the first week of the year.

          }
        });
        return ky;
      });
      /***/

    },

    /***/
    "loYQ": function loYQ(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Bengali (Bangladesh) [bn-bd]
      //! author : Asraf Hossain Patoary : https://github.com/ashwoolford
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var symbolMap = {
          1: '১',
          2: '২',
          3: '৩',
          4: '৪',
          5: '৫',
          6: '৬',
          7: '৭',
          8: '৮',
          9: '৯',
          0: '০'
        },
            numberMap = {
          '১': '1',
          '২': '2',
          '৩': '3',
          '৪': '4',
          '৫': '5',
          '৬': '6',
          '৭': '7',
          '৮': '8',
          '৯': '9',
          '০': '0'
        };
        var bnBd = moment.defineLocale('bn-bd', {
          months: 'জানুয়ারি_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর'.split('_'),
          monthsShort: 'জানু_ফেব্রু_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্ট_অক্টো_নভে_ডিসে'.split('_'),
          weekdays: 'রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার'.split('_'),
          weekdaysShort: 'রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি'.split('_'),
          weekdaysMin: 'রবি_সোম_মঙ্গল_বুধ_বৃহ_শুক্র_শনি'.split('_'),
          longDateFormat: {
            LT: 'A h:mm সময়',
            LTS: 'A h:mm:ss সময়',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm সময়',
            LLLL: 'dddd, D MMMM YYYY, A h:mm সময়'
          },
          calendar: {
            sameDay: '[আজ] LT',
            nextDay: '[আগামীকাল] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[গতকাল] LT',
            lastWeek: '[গত] dddd, LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: '%s পরে',
            past: '%s আগে',
            s: 'কয়েক সেকেন্ড',
            ss: '%d সেকেন্ড',
            m: 'এক মিনিট',
            mm: '%d মিনিট',
            h: 'এক ঘন্টা',
            hh: '%d ঘন্টা',
            d: 'এক দিন',
            dd: '%d দিন',
            M: 'এক মাস',
            MM: '%d মাস',
            y: 'এক বছর',
            yy: '%d বছর'
          },
          preparse: function preparse(string) {
            return string.replace(/[১২৩৪৫৬৭৮৯০]/g, function (match) {
              return numberMap[match];
            });
          },
          postformat: function postformat(string) {
            return string.replace(/\d/g, function (match) {
              return symbolMap[match];
            });
          },
          meridiemParse: /রাত|ভোর|সকাল|দুপুর|বিকাল|সন্ধ্যা|রাত/,
          meridiemHour: function meridiemHour(hour, meridiem) {
            if (hour === 12) {
              hour = 0;
            }

            if (meridiem === 'রাত') {
              return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'ভোর') {
              return hour;
            } else if (meridiem === 'সকাল') {
              return hour;
            } else if (meridiem === 'দুপুর') {
              return hour >= 3 ? hour : hour + 12;
            } else if (meridiem === 'বিকাল') {
              return hour + 12;
            } else if (meridiem === 'সন্ধ্যা') {
              return hour + 12;
            }
          },
          meridiem: function meridiem(hour, minute, isLower) {
            if (hour < 4) {
              return 'রাত';
            } else if (hour < 6) {
              return 'ভোর';
            } else if (hour < 12) {
              return 'সকাল';
            } else if (hour < 15) {
              return 'দুপুর';
            } else if (hour < 18) {
              return 'বিকাল';
            } else if (hour < 20) {
              return 'সন্ধ্যা';
            } else {
              return 'রাত';
            }
          },
          week: {
            dow: 0,
            // Sunday is the first day of the week.
            doy: 6 // The week that contains Jan 6th is the first week of the year.

          }
        });
        return bnBd;
      });
      /***/

    },

    /***/
    "lyxo": function lyxo(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Romanian [ro]
      //! author : Vlad Gurdiga : https://github.com/gurdiga
      //! author : Valentin Agachi : https://github.com/avaly
      //! author : Emanuel Cepoi : https://github.com/cepem
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        function relativeTimeWithPlural(number, withoutSuffix, key) {
          var format = {
            ss: 'secunde',
            mm: 'minute',
            hh: 'ore',
            dd: 'zile',
            ww: 'săptămâni',
            MM: 'luni',
            yy: 'ani'
          },
              separator = ' ';

          if (number % 100 >= 20 || number >= 100 && number % 100 === 0) {
            separator = ' de ';
          }

          return number + separator + format[key];
        }

        var ro = moment.defineLocale('ro', {
          months: 'ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie'.split('_'),
          monthsShort: 'ian._feb._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.'.split('_'),
          monthsParseExact: true,
          weekdays: 'duminică_luni_marți_miercuri_joi_vineri_sâmbătă'.split('_'),
          weekdaysShort: 'Dum_Lun_Mar_Mie_Joi_Vin_Sâm'.split('_'),
          weekdaysMin: 'Du_Lu_Ma_Mi_Jo_Vi_Sâ'.split('_'),
          longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY H:mm',
            LLLL: 'dddd, D MMMM YYYY H:mm'
          },
          calendar: {
            sameDay: '[azi la] LT',
            nextDay: '[mâine la] LT',
            nextWeek: 'dddd [la] LT',
            lastDay: '[ieri la] LT',
            lastWeek: '[fosta] dddd [la] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: 'peste %s',
            past: '%s în urmă',
            s: 'câteva secunde',
            ss: relativeTimeWithPlural,
            m: 'un minut',
            mm: relativeTimeWithPlural,
            h: 'o oră',
            hh: relativeTimeWithPlural,
            d: 'o zi',
            dd: relativeTimeWithPlural,
            w: 'o săptămână',
            ww: relativeTimeWithPlural,
            M: 'o lună',
            MM: relativeTimeWithPlural,
            y: 'un an',
            yy: relativeTimeWithPlural
          },
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 7th is the first week of the year.

          }
        });
        return ro;
      });
      /***/

    },

    /***/
    "m9DD": function m9DD(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony default export */


      __webpack_exports__["default"] = "<div style=\"overflow-x: hidden\" fxLayout=\"column\">\r\n  <form [formGroup]=\"filters\">\r\n    <div class=\"col-md-12\">\r\n      <div class=\"card\">\r\n        <div class=\"card-header\">\r\n          <mat-label class=\"card-title\">Inventario de Productos</mat-label>\r\n        </div>\r\n        <div class=\"card-body\">\r\n          <div class=\"row\">\r\n            <div class=\"col-md-6 pr-1\">\r\n              <mat-form-field style=\"width: 100%;\">\r\n                <mat-label>Nombre del Producto</mat-label>\r\n                <input matInput formControlName=\"name\" >\r\n                <mat-error>\r\n                </mat-error>\r\n              </mat-form-field>\r\n            </div>\r\n            <div class=\"col-md-6 px-1\">\r\n              <mat-form-field style=\"width: 100%;\">\r\n                <mat-label>Especialista</mat-label>\r\n                <input matInput formControlName=\"user\" >\r\n                <mat-error>\r\n                </mat-error>\r\n              </mat-form-field>\r\n            </div>\r\n          </div>\r\n          <div  class=\"row\">\r\n              <div class=\"col-md-6 pr-1\">\r\n                  <mat-form-field style=\"width: 100%;\">\r\n                    <mat-label>Fecha Inicial</mat-label>\r\n                    <input matInput formControlName=\"initialDate\" [matDatepicker]=\"initialDate\">\r\n                    <mat-datepicker-toggle matSuffix [for]=\"initialDate\"></mat-datepicker-toggle>\r\n                    <mat-datepicker #initialDate disabled=\"false\"></mat-datepicker>\r\n                  </mat-form-field>\r\n              </div>\r\n              <div class=\"col-md-6 px-1\">\r\n                  <mat-form-field style=\"width: 100%;\">\r\n                    <mat-label>Fecha Final</mat-label>\r\n                    <input matInput formControlName=\"finalDate\" [matDatepicker]=\"finalDate\">\r\n                    <mat-datepicker-toggle matSuffix [for]=\"finalDate\"></mat-datepicker-toggle>\r\n                    <mat-datepicker #finalDate disabled=\"false\"></mat-datepicker>\r\n                  </mat-form-field>\r\n              </div>\r\n            </div>\r\n          <div style=\"position:relative; top:50%; display: flex; justify-content: space-around;\" class=\"row\">\r\n            <button mat-raised-button mat-stroked-button style=\"height:40px; width:200px; margin-right: 3px;\"\r\n                    type=\"button\" class=\"\" (click)=\"search()\">Buscar</button>\r\n            <button mat-raised-button mat-stroked-button style=\"height:40px; width:200px; margin-right: 3px;\"\r\n                    type=\"reset\" class=\"\">Limpiar</button>\r\n            <button mat-raised-button mat-stroked-button style=\"height:40px; width:200px;\" type=\"\" class=\"\" (click)=\"download()\">Descargar Excel</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </form>\r\n  <mat-card class=\"mat-elevation-z4\">\r\n    <div fxlayout=\"column\">\r\n      <div class=\"flex-p container-tab\">\r\n        <table mat-table [dataSource]=\"dataSource\" matSort class=\"mat-elevation-z8\" style=\"width: 100%;\">\r\n\r\n          <ng-container  matColumnDef=\"name\" >\r\n            <th mat-header-cell *matHeaderCellDef mat-sort-header style=\"font-weight: bold;\">Nombre del Producto</th>\r\n            <td mat-cell *matCellDef=\"let row\" class=\"mat-cell-id\"> {{row.nameProduct}} </td>\r\n\r\n          </ng-container>\r\n\r\n          <ng-container  matColumnDef=\"prov\">\r\n            <th mat-header-cell *matHeaderCellDef mat-sort-header style=\"font-weight: bold;\" > Proovedor </th>\r\n            <td mat-cell *matCellDef=\"let row\" class=\"mat-cell-id\"> {{row.proveedor}} </td>\r\n          </ng-container>\r\n\r\n          <ng-container  matColumnDef=\"quantity\">\r\n            <th mat-header-cell *matHeaderCellDef mat-sort-header style=\"font-weight: bold;\"> Cantidad </th>\r\n            <td mat-cell *matCellDef=\"let row\" class=\"mat-cell-id\"> {{row.cantidad}} </td>\r\n          </ng-container>\r\n\r\n          <ng-container  matColumnDef=\"user\">\r\n            <th mat-header-cell *matHeaderCellDef mat-sort-header style=\"font-weight: bold;\"> Especialista Encargada </th>\r\n            <td mat-cell *matCellDef=\"let row\" class=\"mat-cell-id\"> {{row.specialist}} </td>\r\n          </ng-container>\r\n\r\n          <ng-container  matColumnDef=\"price\">\r\n            <th mat-header-cell *matHeaderCellDef mat-sort-header style=\"font-weight: bold;\"> Precio </th>\r\n            <td mat-cell *matCellDef=\"let row\" class=\"mat-cell-id\"> {{row.price}}$ </td>\r\n          </ng-container>\r\n\r\n          <ng-container matColumnDef=\"actions\">\r\n            <th mat-header-cell *matHeaderCellDef mat-sort-header style=\"font-weight: bold;\"> Acciones </th>\r\n            <td mat-cell *matCellDef=\"let row\" class=\"mat-cell-id\">  <div fxFlex=\"row\">\r\n              <div fxLayout=\"column\" mat-stroked-button class=\"pointer\"\r\n                   (click)=\"goEdit(row.id);\">\r\n                <i style=\"font-size: 25px\" class=\"nc-icon nc-tap-01\" title=\"Editar\"></i>\r\n              </div>\r\n            </div>\r\n            </td>\r\n\r\n          </ng-container>\r\n\r\n          <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n          <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n        </table>\r\n      </div>\r\n      <mat-paginator [pageSizeOptions]=\"[5, 10, 25, 100]\" ></mat-paginator>\r\n    </div>\r\n  </mat-card>\r\n</div>\r\n";
      /***/
    },

    /***/
    "nyYc": function nyYc(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : French [fr]
      //! author : John Fischer : https://github.com/jfroffice
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var monthsStrictRegex = /^(janvier|février|mars|avril|mai|juin|juillet|août|septembre|octobre|novembre|décembre)/i,
            monthsShortStrictRegex = /(janv\.?|févr\.?|mars|avr\.?|mai|juin|juil\.?|août|sept\.?|oct\.?|nov\.?|déc\.?)/i,
            monthsRegex = /(janv\.?|févr\.?|mars|avr\.?|mai|juin|juil\.?|août|sept\.?|oct\.?|nov\.?|déc\.?|janvier|février|mars|avril|mai|juin|juillet|août|septembre|octobre|novembre|décembre)/i,
            monthsParse = [/^janv/i, /^févr/i, /^mars/i, /^avr/i, /^mai/i, /^juin/i, /^juil/i, /^août/i, /^sept/i, /^oct/i, /^nov/i, /^déc/i];
        var fr = moment.defineLocale('fr', {
          months: 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
          monthsShort: 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
          monthsRegex: monthsRegex,
          monthsShortRegex: monthsRegex,
          monthsStrictRegex: monthsStrictRegex,
          monthsShortStrictRegex: monthsShortStrictRegex,
          monthsParse: monthsParse,
          longMonthsParse: monthsParse,
          shortMonthsParse: monthsParse,
          weekdays: 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
          weekdaysShort: 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
          weekdaysMin: 'di_lu_ma_me_je_ve_sa'.split('_'),
          weekdaysParseExact: true,
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
          },
          calendar: {
            sameDay: '[Aujourd’hui à] LT',
            nextDay: '[Demain à] LT',
            nextWeek: 'dddd [à] LT',
            lastDay: '[Hier à] LT',
            lastWeek: 'dddd [dernier à] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: 'dans %s',
            past: 'il y a %s',
            s: 'quelques secondes',
            ss: '%d secondes',
            m: 'une minute',
            mm: '%d minutes',
            h: 'une heure',
            hh: '%d heures',
            d: 'un jour',
            dd: '%d jours',
            w: 'une semaine',
            ww: '%d semaines',
            M: 'un mois',
            MM: '%d mois',
            y: 'un an',
            yy: '%d ans'
          },
          dayOfMonthOrdinalParse: /\d{1,2}(er|)/,
          ordinal: function ordinal(number, period) {
            switch (period) {
              // TODO: Return 'e' when day of month > 1. Move this case inside
              // block for masculine words below.
              // See https://github.com/moment/moment/issues/3375
              case 'D':
                return number + (number === 1 ? 'er' : '');
              // Words with masculine grammatical gender: mois, trimestre, jour

              default:
              case 'M':
              case 'Q':
              case 'DDD':
              case 'd':
                return number + (number === 1 ? 'er' : 'e');
              // Words with feminine grammatical gender: semaine

              case 'w':
              case 'W':
                return number + (number === 1 ? 're' : 'e');
            }
          },
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.

          }
        });
        return fr;
      });
      /***/

    },

    /***/
    "o1bE": function o1bE(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Arabic (Algeria) [ar-dz]
      //! author : Amine Roukh: https://github.com/Amine27
      //! author : Abdel Said: https://github.com/abdelsaid
      //! author : Ahmed Elkhatib
      //! author : forabi https://github.com/forabi
      //! author : Noureddine LOUAHEDJ : https://github.com/noureddinem
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var pluralForm = function pluralForm(n) {
          return n === 0 ? 0 : n === 1 ? 1 : n === 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5;
        },
            plurals = {
          s: ['أقل من ثانية', 'ثانية واحدة', ['ثانيتان', 'ثانيتين'], '%d ثوان', '%d ثانية', '%d ثانية'],
          m: ['أقل من دقيقة', 'دقيقة واحدة', ['دقيقتان', 'دقيقتين'], '%d دقائق', '%d دقيقة', '%d دقيقة'],
          h: ['أقل من ساعة', 'ساعة واحدة', ['ساعتان', 'ساعتين'], '%d ساعات', '%d ساعة', '%d ساعة'],
          d: ['أقل من يوم', 'يوم واحد', ['يومان', 'يومين'], '%d أيام', '%d يومًا', '%d يوم'],
          M: ['أقل من شهر', 'شهر واحد', ['شهران', 'شهرين'], '%d أشهر', '%d شهرا', '%d شهر'],
          y: ['أقل من عام', 'عام واحد', ['عامان', 'عامين'], '%d أعوام', '%d عامًا', '%d عام']
        },
            pluralize = function pluralize(u) {
          return function (number, withoutSuffix, string, isFuture) {
            var f = pluralForm(number),
                str = plurals[u][pluralForm(number)];

            if (f === 2) {
              str = str[withoutSuffix ? 0 : 1];
            }

            return str.replace(/%d/i, number);
          };
        },
            months = ['جانفي', 'فيفري', 'مارس', 'أفريل', 'ماي', 'جوان', 'جويلية', 'أوت', 'سبتمبر', 'أكتوبر', 'نوفمبر', 'ديسمبر'];

        var arDz = moment.defineLocale('ar-dz', {
          months: months,
          monthsShort: months,
          weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
          weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
          weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
          weekdaysParseExact: true,
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: "D/\u200FM/\u200FYYYY",
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
          },
          meridiemParse: /ص|م/,
          isPM: function isPM(input) {
            return 'م' === input;
          },
          meridiem: function meridiem(hour, minute, isLower) {
            if (hour < 12) {
              return 'ص';
            } else {
              return 'م';
            }
          },
          calendar: {
            sameDay: '[اليوم عند الساعة] LT',
            nextDay: '[غدًا عند الساعة] LT',
            nextWeek: 'dddd [عند الساعة] LT',
            lastDay: '[أمس عند الساعة] LT',
            lastWeek: 'dddd [عند الساعة] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: 'بعد %s',
            past: 'منذ %s',
            s: pluralize('s'),
            ss: pluralize('s'),
            m: pluralize('m'),
            mm: pluralize('m'),
            h: pluralize('h'),
            hh: pluralize('h'),
            d: pluralize('d'),
            dd: pluralize('d'),
            M: pluralize('M'),
            MM: pluralize('M'),
            y: pluralize('y'),
            yy: pluralize('y')
          },
          postformat: function postformat(string) {
            return string.replace(/,/g, '،');
          },
          week: {
            dow: 0,
            // Sunday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.

          }
        });
        return arDz;
      });
      /***/

    },

    /***/
    "p/rL": function pRL(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Bambara [bm]
      //! author : Estelle Comment : https://github.com/estellecomment
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var bm = moment.defineLocale('bm', {
          months: 'Zanwuyekalo_Fewuruyekalo_Marisikalo_Awirilikalo_Mɛkalo_Zuwɛnkalo_Zuluyekalo_Utikalo_Sɛtanburukalo_ɔkutɔburukalo_Nowanburukalo_Desanburukalo'.split('_'),
          monthsShort: 'Zan_Few_Mar_Awi_Mɛ_Zuw_Zul_Uti_Sɛt_ɔku_Now_Des'.split('_'),
          weekdays: 'Kari_Ntɛnɛn_Tarata_Araba_Alamisa_Juma_Sibiri'.split('_'),
          weekdaysShort: 'Kar_Ntɛ_Tar_Ara_Ala_Jum_Sib'.split('_'),
          weekdaysMin: 'Ka_Nt_Ta_Ar_Al_Ju_Si'.split('_'),
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'MMMM [tile] D [san] YYYY',
            LLL: 'MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm',
            LLLL: 'dddd MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm'
          },
          calendar: {
            sameDay: '[Bi lɛrɛ] LT',
            nextDay: '[Sini lɛrɛ] LT',
            nextWeek: 'dddd [don lɛrɛ] LT',
            lastDay: '[Kunu lɛrɛ] LT',
            lastWeek: 'dddd [tɛmɛnen lɛrɛ] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: '%s kɔnɔ',
            past: 'a bɛ %s bɔ',
            s: 'sanga dama dama',
            ss: 'sekondi %d',
            m: 'miniti kelen',
            mm: 'miniti %d',
            h: 'lɛrɛ kelen',
            hh: 'lɛrɛ %d',
            d: 'tile kelen',
            dd: 'tile %d',
            M: 'kalo kelen',
            MM: 'kalo %d',
            y: 'san kelen',
            yy: 'san %d'
          },
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.

          }
        });
        return bm;
      });
      /***/

    },

    /***/
    "pZTO": function pZTO(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TratamientoComponent", function () {
        return TratamientoComponent;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _raw_loader_tratamiento_component_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! raw-loader!./tratamiento.component.html */
      "xZYj");
      /* harmony import */


      var _tratamiento_component_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./tratamiento.component.scss */
      "kbn0");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var _angular_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/forms */
      "3Pt+");
      /* harmony import */


      var _angular_material_table__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @angular/material/table */
      "+0xr");
      /* harmony import */


      var _angular_material_paginator__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! @angular/material/paginator */
      "M9IT");
      /* harmony import */


      var _angular_router__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! @angular/router */
      "tyNb");
      /* harmony import */


      var _angular_material_sort__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! @angular/material/sort */
      "Dh3D");
      /* harmony import */


      var _environments_environment__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! ../../../../environments/environment */
      "AytR");
      /* harmony import */


      var _shared_services_global_services__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
      /*! ../../../shared/services/global.services */
      "Zk1H");
      /* harmony import */


      var file_saver__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
      /*! file-saver */
      "Iab2");
      /* harmony import */


      var file_saver__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(file_saver__WEBPACK_IMPORTED_MODULE_11__);

      var TratamientoComponent = /*#__PURE__*/function () {
        function TratamientoComponent(fb, router, route, globalServices) {
          _classCallCheck(this, TratamientoComponent);

          this.fb = fb;
          this.router = router;
          this.route = route;
          this.globalServices = globalServices;
          this.fileName = '';
          this.treatmentTypeList = [];
          this.usuarioList = [{
            value: 1,
            desc: 'Doctora'
          }, {
            value: 2,
            desc: 'Operadora'
          }];
          this.displayedColumns = ['treatmentName', 'treatmentType', 'user', 'sessions', 'priceTreatment', 'operativeComission', 'actions'];
          this.filters = fb.group({
            name: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"](),
            lastName: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"](),
            identification: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"](),
            initialDate: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"](),
            finalDate: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"](),
            user: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"](),
            userName: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"]()
          });
        }

        _createClass(TratamientoComponent, [{
          key: "ngOnInit",
          value: function ngOnInit() {}
        }, {
          key: "search",
          value: function search() {
            var _this76 = this;

            var data = Object.assign({}, this.filters.value);
            this.globalServices.httpServicesResponse(data, _environments_environment__WEBPACK_IMPORTED_MODULE_9__["environment"].Url + '/depilarte/searchTreatments').subscribe(function (res) {
              console.log(res.resultList);
              _this76.dataSource = new _angular_material_table__WEBPACK_IMPORTED_MODULE_5__["MatTableDataSource"](res.resultList);
              _this76.dataSource.paginator = _this76.paginator;
              _this76.dataSource.sort = _this76.sort;
            });
          }
        }, {
          key: "goEdit",
          value: function goEdit(id) {
            this.router.navigate(['/registrar-tratamiento'], {
              relativeTo: this.route,
              queryParams: {
                id: id
              }
            });
          }
        }, {
          key: "download",
          value: function download() {
            var _this77 = this;

            var data = Object.assign({}, this.filters.value);
            this.globalServices.httpServicesResponse(data, _environments_environment__WEBPACK_IMPORTED_MODULE_9__["environment"].Url + 'depilarte/generateTreatments').subscribe(function (data) {
              var result = data;

              if (result.type == 'error') {
                console.log('error');
              } else {
                var file = result.resultEncodedString;
                var sliceSize = 512;
                var byteCharacters = atob(file);
                var byteArrays = [];

                for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {
                  var slice = byteCharacters.slice(offset, offset + sliceSize);
                  var byteNumbers = new Array(slice.length);

                  for (var i = 0; i < slice.length; i++) {
                    byteNumbers[i] = slice.charCodeAt(i);
                  }

                  var byteArray = new Uint8Array(byteNumbers);
                  byteArrays.push(byteArray);
                }

                var blob = new Blob(byteArrays, {
                  type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
                });
                Object(file_saver__WEBPACK_IMPORTED_MODULE_11__["saveAs"])(blob, _this77.fileName);
              }
            }, function (error) {//error
            });
          }
        }]);

        return TratamientoComponent;
      }();

      TratamientoComponent.ctorParameters = function () {
        return [{
          type: _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormBuilder"]
        }, {
          type: _angular_router__WEBPACK_IMPORTED_MODULE_7__["Router"]
        }, {
          type: _angular_router__WEBPACK_IMPORTED_MODULE_7__["ActivatedRoute"]
        }, {
          type: _shared_services_global_services__WEBPACK_IMPORTED_MODULE_10__["GlobalServices"]
        }];
      };

      TratamientoComponent.propDecorators = {
        paginator: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewChild"],
          args: [_angular_material_paginator__WEBPACK_IMPORTED_MODULE_6__["MatPaginator"]]
        }],
        sort: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewChild"],
          args: [_angular_material_sort__WEBPACK_IMPORTED_MODULE_8__["MatSort"]]
        }]
      };
      TratamientoComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"])({
        selector: 'tratamiento',
        template: _raw_loader_tratamiento_component_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        styles: [_tratamiento_component_scss__WEBPACK_IMPORTED_MODULE_2__["default"]]
      }), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormBuilder"], _angular_router__WEBPACK_IMPORTED_MODULE_7__["Router"], _angular_router__WEBPACK_IMPORTED_MODULE_7__["ActivatedRoute"], _shared_services_global_services__WEBPACK_IMPORTED_MODULE_10__["GlobalServices"]])], TratamientoComponent);
      /***/
    },

    /***/
    "pei9": function pei9(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TratamientoRegistrarComponent", function () {
        return TratamientoRegistrarComponent;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _raw_loader_tratamientoRegistrar_component_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! raw-loader!./tratamientoRegistrar.component.html */
      "wdtM");
      /* harmony import */


      var _tratamientoRegistrar_component_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./tratamientoRegistrar.component.scss */
      "CslO");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var _angular_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/forms */
      "3Pt+");
      /* harmony import */


      var _angular_router__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @angular/router */
      "tyNb");
      /* harmony import */


      var _shared_services_global_services__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! ../../../shared/services/global.services */
      "Zk1H");
      /* harmony import */


      var _environments_environment__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! ../../../../environments/environment */
      "AytR");

      var TratamientoRegistrarComponent = /*#__PURE__*/function () {
        function TratamientoRegistrarComponent(fb, router, route, globalService) {
          _classCallCheck(this, TratamientoRegistrarComponent);

          this.fb = fb;
          this.router = router;
          this.route = route;
          this.globalService = globalService;
          this.isLoading = false;
          this.create = true;
          this.edit = false;
          this.user = [{
            value: 1,
            desc: 'Doctora'
          }, {
            value: 2,
            desc: 'Operadora'
          }];
          this.form = fb.group({
            id: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"](),
            treatmentName: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"]('', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].pattern('[a-zA-Z0-9\\s]+')]),
            specialist: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"]('', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]),
            sessions: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"]('', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]),
            typePrice: this.fb.array([], [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]),
            comission: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"]('', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]),
            description: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"]()
          });
        }

        _createClass(TratamientoRegistrarComponent, [{
          key: "ngOnInit",
          value: function ngOnInit() {
            var _this78 = this;

            this.route.queryParams.subscribe(function (params) {
              var id = params.id;
              _this78.idPoint = id;

              if (_this78.idPoint) {
                _this78.getDtaByUpdate(id);
              }
            });
          }
        }, {
          key: "f",
          get: function get() {
            return this.form.controls;
          }
        }, {
          key: "getDtaByUpdate",
          value: function getDtaByUpdate(id) {
            var _this79 = this;

            this.isLoading = true;
            var data = {
              id: id
            };
            this.globalService.httpServicesResponse(data, _environments_environment__WEBPACK_IMPORTED_MODULE_7__["environment"].Url + 'depilarte/getTreatment').subscribe(function (res) {
              console.log(res);

              _this79.setValues(res);

              _this79.isLoading = false;
              _this79.create = false;
              _this79.edit = true;
            }, function (e) {
              console.log(e);
              _this79.isLoading = false;
            });
          }
        }, {
          key: "setValues",
          value: function setValues(values) {
            this.form.setValue(values);
          }
        }, {
          key: "register",
          value: function register() {
            var _this80 = this;

            if (this.form.invalid) return;
            console.log(this.form.value);
            var data = Object.assign({}, this.form.value);
            this.globalService.httpServicesResponse(data, _environments_environment__WEBPACK_IMPORTED_MODULE_7__["environment"].Url + '/depilarte/registerTreatment').subscribe(function (res) {
              if (res.type === 'error') {
                alertify.error('Error al registrar');
              } else {
                console.log(_this80.form.value);

                _this80.form.reset();

                alertify.success('Registrado con exito');
              }
            }, console.log);
          }
        }, {
          key: "hasError",
          value: function hasError(control, type) {
            return this.form.controls[control].hasError(type);
          }
        }, {
          key: "typePrices",
          get: function get() {
            return this.form.get('typePrice');
          }
        }, {
          key: "addTypePrice",
          value: function addTypePrice() {
            var typePriceFormGroup = this.fb.group({
              typeTreatment: '',
              typePrice: ''
            });
            this.typePrices.push(typePriceFormGroup);
          }
        }, {
          key: "removeTypePice",
          value: function removeTypePice(indice) {
            this.typePrices.removeAt(indice);
          }
        }]);

        return TratamientoRegistrarComponent;
      }();

      TratamientoRegistrarComponent.ctorParameters = function () {
        return [{
          type: _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormBuilder"]
        }, {
          type: _angular_router__WEBPACK_IMPORTED_MODULE_5__["Router"]
        }, {
          type: _angular_router__WEBPACK_IMPORTED_MODULE_5__["ActivatedRoute"]
        }, {
          type: _shared_services_global_services__WEBPACK_IMPORTED_MODULE_6__["GlobalServices"]
        }];
      };

      TratamientoRegistrarComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"])({
        selector: 'app-tratamientoRegistrar',
        template: _raw_loader_tratamientoRegistrar_component_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        styles: [_tratamientoRegistrar_component_scss__WEBPACK_IMPORTED_MODULE_2__["default"]]
      }), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormBuilder"], _angular_router__WEBPACK_IMPORTED_MODULE_5__["Router"], _angular_router__WEBPACK_IMPORTED_MODULE_5__["ActivatedRoute"], _shared_services_global_services__WEBPACK_IMPORTED_MODULE_6__["GlobalServices"]])], TratamientoRegistrarComponent);
      /***/
    },

    /***/
    "qZ7x": function qZ7x(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AdminLayoutRoutes", function () {
        return AdminLayoutRoutes;
      });
      /* harmony import */


      var app_pages_registrar_operadorRegistro_operadora_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! app/pages/registrar/operadorRegistro/operadora.component */
      "j56B");
      /* harmony import */


      var _pages_historial_doctoraHistorial_historialDoc_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../../pages/historial/doctoraHistorial/historialDoc.component */
      "gOJ3");
      /* harmony import */


      var _pages_productos_inventario_inventario_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../../pages/productos/inventario/inventario.component */
      "5U8x");
      /* harmony import */


      var _pages_productos_tratamiento_tratamiento_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ../../pages/productos/tratamiento/tratamiento.component */
      "pZTO");
      /* harmony import */


      var _pages_registrar_tratamientoRegistrar_tratamientoRegistrar_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! ../../pages/registrar/tratamientoRegistrar/tratamientoRegistrar.component */
      "pei9");
      /* harmony import */


      var _pages_registrar_usuario_registro_usuario_registro_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! ../../pages/registrar/usuario-registro/usuario-registro.component */
      "uh9s");
      /* harmony import */


      var _pages_historial_empleado_historial_empleado_historial_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! ../../pages/historial/empleado-historial/empleado-historial.component */
      "9BCX");
      /* harmony import */


      var _pages_registrar_registrar_producto_registrar_producto_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! ../../pages/registrar/registrar-producto/registrar-producto.component */
      "/pQ5");
      /* harmony import */


      var _pages_Inicio_dashboard_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! ./../../pages/Inicio/dashboard.component */
      "rvqg");
      /* harmony import */


      var _pages_various_icons_icons_component__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! ./../../pages/various/icons/icons.component */
      "xxtN");

      var AdminLayoutRoutes = [{
        path: 'registrar-paciente',
        component: app_pages_registrar_operadorRegistro_operadora_component__WEBPACK_IMPORTED_MODULE_0__["OperadoraComponent"]
      }, {
        path: 'historialDoc',
        component: _pages_historial_doctoraHistorial_historialDoc_component__WEBPACK_IMPORTED_MODULE_1__["HistorialDocComponent"]
      }, {
        path: 'tratamiento',
        component: _pages_productos_tratamiento_tratamiento_component__WEBPACK_IMPORTED_MODULE_3__["TratamientoComponent"]
      }, {
        path: 'inventario',
        component: _pages_productos_inventario_inventario_component__WEBPACK_IMPORTED_MODULE_2__["InventarioComponent"]
      }, {
        path: 'registrar-tratamiento',
        component: _pages_registrar_tratamientoRegistrar_tratamientoRegistrar_component__WEBPACK_IMPORTED_MODULE_4__["TratamientoRegistrarComponent"]
      }, {
        path: 'registrar-usuario',
        component: _pages_registrar_usuario_registro_usuario_registro_component__WEBPACK_IMPORTED_MODULE_5__["UsuarioRegistroComponent"]
      }, {
        path: 'historial-empleado',
        component: _pages_historial_empleado_historial_empleado_historial_component__WEBPACK_IMPORTED_MODULE_6__["EmpleadoHistorialComponent"]
      }, {
        path: 'registrar-producto',
        component: _pages_registrar_registrar_producto_registrar_producto_component__WEBPACK_IMPORTED_MODULE_7__["RegistrarProductoComponent"]
      }, {
        path: 'Inicio',
        component: _pages_Inicio_dashboard_component__WEBPACK_IMPORTED_MODULE_8__["DashboardComponent"]
      }, {
        path: 'icons',
        component: _pages_various_icons_icons_component__WEBPACK_IMPORTED_MODULE_9__["IconsComponent"]
      }];
      /***/
    },

    /***/
    "qnVr": function qnVr(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony default export */


      __webpack_exports__["default"] = "\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3JlZ2lzdHJhci9yZWdpc3RyYXItcHJvZHVjdG8vcmVnaXN0cmFyLXByb2R1Y3RvLmNvbXBvbmVudC5zY3NzIn0= */";
      /***/
    },

    /***/
    "qvJo": function qvJo(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Konkani Devanagari script [gom-deva]
      //! author : The Discoverer : https://github.com/WikiDiscoverer
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        function processRelativeTime(number, withoutSuffix, key, isFuture) {
          var format = {
            s: ['थोडया सॅकंडांनी', 'थोडे सॅकंड'],
            ss: [number + ' सॅकंडांनी', number + ' सॅकंड'],
            m: ['एका मिणटान', 'एक मिनूट'],
            mm: [number + ' मिणटांनी', number + ' मिणटां'],
            h: ['एका वरान', 'एक वर'],
            hh: [number + ' वरांनी', number + ' वरां'],
            d: ['एका दिसान', 'एक दीस'],
            dd: [number + ' दिसांनी', number + ' दीस'],
            M: ['एका म्हयन्यान', 'एक म्हयनो'],
            MM: [number + ' म्हयन्यानी', number + ' म्हयने'],
            y: ['एका वर्सान', 'एक वर्स'],
            yy: [number + ' वर्सांनी', number + ' वर्सां']
          };
          return isFuture ? format[key][0] : format[key][1];
        }

        var gomDeva = moment.defineLocale('gom-deva', {
          months: {
            standalone: 'जानेवारी_फेब्रुवारी_मार्च_एप्रील_मे_जून_जुलय_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर'.split('_'),
            format: 'जानेवारीच्या_फेब्रुवारीच्या_मार्चाच्या_एप्रीलाच्या_मेयाच्या_जूनाच्या_जुलयाच्या_ऑगस्टाच्या_सप्टेंबराच्या_ऑक्टोबराच्या_नोव्हेंबराच्या_डिसेंबराच्या'.split('_'),
            isFormat: /MMMM(\s)+D[oD]?/
          },
          monthsShort: 'जाने._फेब्रु._मार्च_एप्री._मे_जून_जुल._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.'.split('_'),
          monthsParseExact: true,
          weekdays: 'आयतार_सोमार_मंगळार_बुधवार_बिरेस्तार_सुक्रार_शेनवार'.split('_'),
          weekdaysShort: 'आयत._सोम._मंगळ._बुध._ब्रेस्त._सुक्र._शेन.'.split('_'),
          weekdaysMin: 'आ_सो_मं_बु_ब्रे_सु_शे'.split('_'),
          weekdaysParseExact: true,
          longDateFormat: {
            LT: 'A h:mm [वाजतां]',
            LTS: 'A h:mm:ss [वाजतां]',
            L: 'DD-MM-YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY A h:mm [वाजतां]',
            LLLL: 'dddd, MMMM Do, YYYY, A h:mm [वाजतां]',
            llll: 'ddd, D MMM YYYY, A h:mm [वाजतां]'
          },
          calendar: {
            sameDay: '[आयज] LT',
            nextDay: '[फाल्यां] LT',
            nextWeek: '[फुडलो] dddd[,] LT',
            lastDay: '[काल] LT',
            lastWeek: '[फाटलो] dddd[,] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: '%s',
            past: '%s आदीं',
            s: processRelativeTime,
            ss: processRelativeTime,
            m: processRelativeTime,
            mm: processRelativeTime,
            h: processRelativeTime,
            hh: processRelativeTime,
            d: processRelativeTime,
            dd: processRelativeTime,
            M: processRelativeTime,
            MM: processRelativeTime,
            y: processRelativeTime,
            yy: processRelativeTime
          },
          dayOfMonthOrdinalParse: /\d{1,2}(वेर)/,
          ordinal: function ordinal(number, period) {
            switch (period) {
              // the ordinal 'वेर' only applies to day of the month
              case 'D':
                return number + 'वेर';

              default:
              case 'M':
              case 'Q':
              case 'DDD':
              case 'd':
              case 'w':
              case 'W':
                return number;
            }
          },
          week: {
            dow: 0,
            // Sunday is the first day of the week
            doy: 3 // The week that contains Jan 4th is the first week of the year (7 + 0 - 4)

          },
          meridiemParse: /राती|सकाळीं|दनपारां|सांजे/,
          meridiemHour: function meridiemHour(hour, meridiem) {
            if (hour === 12) {
              hour = 0;
            }

            if (meridiem === 'राती') {
              return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'सकाळीं') {
              return hour;
            } else if (meridiem === 'दनपारां') {
              return hour > 12 ? hour : hour + 12;
            } else if (meridiem === 'सांजे') {
              return hour + 12;
            }
          },
          meridiem: function meridiem(hour, minute, isLower) {
            if (hour < 4) {
              return 'राती';
            } else if (hour < 12) {
              return 'सकाळीं';
            } else if (hour < 16) {
              return 'दनपारां';
            } else if (hour < 20) {
              return 'सांजे';
            } else {
              return 'राती';
            }
          }
        });
        return gomDeva;
      });
      /***/

    },

    /***/
    "raLr": function raLr(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Ukrainian [uk]
      //! author : zemlanin : https://github.com/zemlanin
      //! Author : Menelion Elensúle : https://github.com/Oire
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        function plural(word, num) {
          var forms = word.split('_');
          return num % 10 === 1 && num % 100 !== 11 ? forms[0] : num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2];
        }

        function relativeTimeWithPlural(number, withoutSuffix, key) {
          var format = {
            ss: withoutSuffix ? 'секунда_секунди_секунд' : 'секунду_секунди_секунд',
            mm: withoutSuffix ? 'хвилина_хвилини_хвилин' : 'хвилину_хвилини_хвилин',
            hh: withoutSuffix ? 'година_години_годин' : 'годину_години_годин',
            dd: 'день_дні_днів',
            MM: 'місяць_місяці_місяців',
            yy: 'рік_роки_років'
          };

          if (key === 'm') {
            return withoutSuffix ? 'хвилина' : 'хвилину';
          } else if (key === 'h') {
            return withoutSuffix ? 'година' : 'годину';
          } else {
            return number + ' ' + plural(format[key], +number);
          }
        }

        function weekdaysCaseReplace(m, format) {
          var weekdays = {
            nominative: 'неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота'.split('_'),
            accusative: 'неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу'.split('_'),
            genitive: 'неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи'.split('_')
          },
              nounCase;

          if (m === true) {
            return weekdays['nominative'].slice(1, 7).concat(weekdays['nominative'].slice(0, 1));
          }

          if (!m) {
            return weekdays['nominative'];
          }

          nounCase = /(\[[ВвУу]\]) ?dddd/.test(format) ? 'accusative' : /\[?(?:минулої|наступної)? ?\] ?dddd/.test(format) ? 'genitive' : 'nominative';
          return weekdays[nounCase][m.day()];
        }

        function processHoursFunction(str) {
          return function () {
            return str + 'о' + (this.hours() === 11 ? 'б' : '') + '] LT';
          };
        }

        var uk = moment.defineLocale('uk', {
          months: {
            format: 'січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня'.split('_'),
            standalone: 'січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень'.split('_')
          },
          monthsShort: 'січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд'.split('_'),
          weekdays: weekdaysCaseReplace,
          weekdaysShort: 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
          weekdaysMin: 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY р.',
            LLL: 'D MMMM YYYY р., HH:mm',
            LLLL: 'dddd, D MMMM YYYY р., HH:mm'
          },
          calendar: {
            sameDay: processHoursFunction('[Сьогодні '),
            nextDay: processHoursFunction('[Завтра '),
            lastDay: processHoursFunction('[Вчора '),
            nextWeek: processHoursFunction('[У] dddd ['),
            lastWeek: function lastWeek() {
              switch (this.day()) {
                case 0:
                case 3:
                case 5:
                case 6:
                  return processHoursFunction('[Минулої] dddd [').call(this);

                case 1:
                case 2:
                case 4:
                  return processHoursFunction('[Минулого] dddd [').call(this);
              }
            },
            sameElse: 'L'
          },
          relativeTime: {
            future: 'за %s',
            past: '%s тому',
            s: 'декілька секунд',
            ss: relativeTimeWithPlural,
            m: relativeTimeWithPlural,
            mm: relativeTimeWithPlural,
            h: 'годину',
            hh: relativeTimeWithPlural,
            d: 'день',
            dd: relativeTimeWithPlural,
            M: 'місяць',
            MM: relativeTimeWithPlural,
            y: 'рік',
            yy: relativeTimeWithPlural
          },
          // M. E.: those two are virtually unused but a user might want to implement them for his/her website for some reason
          meridiemParse: /ночі|ранку|дня|вечора/,
          isPM: function isPM(input) {
            return /^(дня|вечора)$/.test(input);
          },
          meridiem: function meridiem(hour, minute, isLower) {
            if (hour < 4) {
              return 'ночі';
            } else if (hour < 12) {
              return 'ранку';
            } else if (hour < 17) {
              return 'дня';
            } else {
              return 'вечора';
            }
          },
          dayOfMonthOrdinalParse: /\d{1,2}-(й|го)/,
          ordinal: function ordinal(number, period) {
            switch (period) {
              case 'M':
              case 'd':
              case 'DDD':
              case 'w':
              case 'W':
                return number + '-й';

              case 'D':
                return number + '-го';

              default:
                return number;
            }
          },
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 7th is the first week of the year.

          }
        });
        return uk;
      });
      /***/

    },

    /***/
    "rvqg": function rvqg(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DashboardComponent", function () {
        return DashboardComponent;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _raw_loader_dashboard_component_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! raw-loader!./dashboard.component.html */
      "0EEK");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var chart_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! chart.js */
      "MO+k");
      /* harmony import */


      var chart_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(chart_js__WEBPACK_IMPORTED_MODULE_3__);
      /* harmony import */


      var _angular_router__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/router */
      "tyNb");
      /* harmony import */


      var _shared_services_global_services__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! ../../shared/services/global.services */
      "Zk1H");
      /* harmony import */


      var _environments_environment__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! ../../../environments/environment */
      "AytR");
      /* harmony import */


      var _angular_forms__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! @angular/forms */
      "3Pt+");

      var DashboardComponent = /*#__PURE__*/function () {
        function DashboardComponent(router, route, globalServices, fb) {
          _classCallCheck(this, DashboardComponent);

          this.router = router;
          this.route = route;
          this.globalServices = globalServices;
          this.fb = fb;
          this.year = new Date().getFullYear();
          this.filters = fb.group({
            registerCount: new _angular_forms__WEBPACK_IMPORTED_MODULE_7__["FormControl"](),
            empleadoCount: new _angular_forms__WEBPACK_IMPORTED_MODULE_7__["FormControl"](),
            productosCount: new _angular_forms__WEBPACK_IMPORTED_MODULE_7__["FormControl"](),
            tratamientoCount: new _angular_forms__WEBPACK_IMPORTED_MODULE_7__["FormControl"]()
          });
        }

        _createClass(DashboardComponent, [{
          key: "ngOnInit",
          value: function ngOnInit() {
            var _this81 = this;

            var data = {};
            this.globalServices.httpServicesResponse(data, _environments_environment__WEBPACK_IMPORTED_MODULE_6__["environment"].Url + 'global/dashboard').subscribe(function (res) {
              console.log(res.dashboard);
              _this81.registerCount = res.dashboard.registerCount;
              _this81.empleadosCount = res.dashboard.empleadosCount;
              _this81.tratamientosCount = res.dashboard.tratamientosCount;
              _this81.productosCount = res.dashboard.productosCount;
              _this81.lineChart.config.data.datasets[0].data = res.dashboard.registerPerMonth;

              _this81.lineChart.update();

              _this81.chartEmail.data.datasets[0].data = [res.dashboard.registerCount, res.dashboard.empleadosCount, res.dashboard.tratamientosCount, res.dashboard.productosCount];

              _this81.chartEmail.update();
            });
            this.canvas = document.getElementById("chartEmail");
            this.ctx = this.canvas.getContext("2d");
            this.chartEmail = new chart_js__WEBPACK_IMPORTED_MODULE_3___default.a(this.ctx, {
              type: 'pie',
              data: {
                labels: ['Pacientes', 'Empleados', 'Tratamientos', 'Productos'],
                datasets: [{
                  label: "",
                  pointRadius: 0,
                  pointHoverRadius: 0,
                  backgroundColor: ['#6bd098', '#ef8157', '#fcc468', '#4acccd'],
                  borderWidth: 0,
                  data: []
                }]
              },
              options: {
                legend: {
                  display: false
                }
              }
            });
            var speedCanvas = document.getElementById("speedChart"); // var dataFirst = {
            //   data: [10, 19, 15, 20, 30, 40, 40, 50, 25, 30, 50, 20],
            //   fill: false,
            //   borderColor: '#fbc658',
            //   backgroundColor: 'transparent',
            //   pointBorderColor: '#fbc658',
            //   pointRadius: 4,
            //   pointHoverRadius: 4,
            //   pointBorderWidth: 8,
            // };

            var dataSecond = {
              data: [],
              fill: false,
              borderColor: '#6bd098',
              backgroundColor: 'transpartent',
              pointBorderColor: '#6bd098',
              pointRadius: 4,
              pointHoverRadius: 4,
              pointBorderWidth: 8
            };
            var speedData = {
              labels: ["Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Sep", "Oct", "Nov", "Dec"],
              datasets: [dataSecond]
            };
            var chartOptions = {
              legend: {
                display: false,
                position: 'top'
              }
            };
            this.lineChart = new chart_js__WEBPACK_IMPORTED_MODULE_3___default.a(speedCanvas, {
              type: 'line',
              hover: true,
              data: speedData,
              options: chartOptions
            });
          }
        }]);

        return DashboardComponent;
      }();

      DashboardComponent.ctorParameters = function () {
        return [{
          type: _angular_router__WEBPACK_IMPORTED_MODULE_4__["Router"]
        }, {
          type: _angular_router__WEBPACK_IMPORTED_MODULE_4__["ActivatedRoute"]
        }, {
          type: _shared_services_global_services__WEBPACK_IMPORTED_MODULE_5__["GlobalServices"]
        }, {
          type: _angular_forms__WEBPACK_IMPORTED_MODULE_7__["FormBuilder"]
        }];
      };

      DashboardComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Component"])({
        selector: 'dashboard-cmp',
        template: _raw_loader_dashboard_component_html__WEBPACK_IMPORTED_MODULE_1__["default"]
      }), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_4__["Router"], _angular_router__WEBPACK_IMPORTED_MODULE_4__["ActivatedRoute"], _shared_services_global_services__WEBPACK_IMPORTED_MODULE_5__["GlobalServices"], _angular_forms__WEBPACK_IMPORTED_MODULE_7__["FormBuilder"]])], DashboardComponent);
      /***/
    },

    /***/
    "s+uk": function sUk(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : German (Austria) [de-at]
      //! author : lluchs : https://github.com/lluchs
      //! author: Menelion Elensúle: https://github.com/Oire
      //! author : Martin Groller : https://github.com/MadMG
      //! author : Mikolaj Dadela : https://github.com/mik01aj
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        function processRelativeTime(number, withoutSuffix, key, isFuture) {
          var format = {
            m: ['eine Minute', 'einer Minute'],
            h: ['eine Stunde', 'einer Stunde'],
            d: ['ein Tag', 'einem Tag'],
            dd: [number + ' Tage', number + ' Tagen'],
            w: ['eine Woche', 'einer Woche'],
            M: ['ein Monat', 'einem Monat'],
            MM: [number + ' Monate', number + ' Monaten'],
            y: ['ein Jahr', 'einem Jahr'],
            yy: [number + ' Jahre', number + ' Jahren']
          };
          return withoutSuffix ? format[key][0] : format[key][1];
        }

        var deAt = moment.defineLocale('de-at', {
          months: 'Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
          monthsShort: 'Jän._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.'.split('_'),
          monthsParseExact: true,
          weekdays: 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
          weekdaysShort: 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
          weekdaysMin: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
          weekdaysParseExact: true,
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY HH:mm',
            LLLL: 'dddd, D. MMMM YYYY HH:mm'
          },
          calendar: {
            sameDay: '[heute um] LT [Uhr]',
            sameElse: 'L',
            nextDay: '[morgen um] LT [Uhr]',
            nextWeek: 'dddd [um] LT [Uhr]',
            lastDay: '[gestern um] LT [Uhr]',
            lastWeek: '[letzten] dddd [um] LT [Uhr]'
          },
          relativeTime: {
            future: 'in %s',
            past: 'vor %s',
            s: 'ein paar Sekunden',
            ss: '%d Sekunden',
            m: processRelativeTime,
            mm: '%d Minuten',
            h: processRelativeTime,
            hh: '%d Stunden',
            d: processRelativeTime,
            dd: processRelativeTime,
            w: processRelativeTime,
            ww: '%d Wochen',
            M: processRelativeTime,
            MM: processRelativeTime,
            y: processRelativeTime,
            yy: processRelativeTime
          },
          dayOfMonthOrdinalParse: /\d{1,2}\./,
          ordinal: '%d.',
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.

          }
        });
        return deAt;
      });
      /***/

    },

    /***/
    "sp3z": function sp3z(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Lao [lo]
      //! author : Ryan Hart : https://github.com/ryanhart2
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var lo = moment.defineLocale('lo', {
          months: 'ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ'.split('_'),
          monthsShort: 'ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ'.split('_'),
          weekdays: 'ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ'.split('_'),
          weekdaysShort: 'ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ'.split('_'),
          weekdaysMin: 'ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ'.split('_'),
          weekdaysParseExact: true,
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'ວັນdddd D MMMM YYYY HH:mm'
          },
          meridiemParse: /ຕອນເຊົ້າ|ຕອນແລງ/,
          isPM: function isPM(input) {
            return input === 'ຕອນແລງ';
          },
          meridiem: function meridiem(hour, minute, isLower) {
            if (hour < 12) {
              return 'ຕອນເຊົ້າ';
            } else {
              return 'ຕອນແລງ';
            }
          },
          calendar: {
            sameDay: '[ມື້ນີ້ເວລາ] LT',
            nextDay: '[ມື້ອື່ນເວລາ] LT',
            nextWeek: '[ວັນ]dddd[ໜ້າເວລາ] LT',
            lastDay: '[ມື້ວານນີ້ເວລາ] LT',
            lastWeek: '[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: 'ອີກ %s',
            past: '%sຜ່ານມາ',
            s: 'ບໍ່ເທົ່າໃດວິນາທີ',
            ss: '%d ວິນາທີ',
            m: '1 ນາທີ',
            mm: '%d ນາທີ',
            h: '1 ຊົ່ວໂມງ',
            hh: '%d ຊົ່ວໂມງ',
            d: '1 ມື້',
            dd: '%d ມື້',
            M: '1 ເດືອນ',
            MM: '%d ເດືອນ',
            y: '1 ປີ',
            yy: '%d ປີ'
          },
          dayOfMonthOrdinalParse: /(ທີ່)\d{1,2}/,
          ordinal: function ordinal(number) {
            return 'ທີ່' + number;
          }
        });
        return lo;
      });
      /***/

    },

    /***/
    "t+mt": function tMt(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : English (Singapore) [en-sg]
      //! author : Matthew Castrillon-Madrigal : https://github.com/techdimension
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var enSg = moment.defineLocale('en-sg', {
          months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
          monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
          weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
          weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
          weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
          },
          calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            ss: '%d seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years'
          },
          dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
          ordinal: function ordinal(number) {
            var b = number % 10,
                output = ~~(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
            return number + output;
          },
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.

          }
        });
        return enSg;
      });
      /***/

    },

    /***/
    "tGlX": function tGlX(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : German [de]
      //! author : lluchs : https://github.com/lluchs
      //! author: Menelion Elensúle: https://github.com/Oire
      //! author : Mikolaj Dadela : https://github.com/mik01aj
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        function processRelativeTime(number, withoutSuffix, key, isFuture) {
          var format = {
            m: ['eine Minute', 'einer Minute'],
            h: ['eine Stunde', 'einer Stunde'],
            d: ['ein Tag', 'einem Tag'],
            dd: [number + ' Tage', number + ' Tagen'],
            w: ['eine Woche', 'einer Woche'],
            M: ['ein Monat', 'einem Monat'],
            MM: [number + ' Monate', number + ' Monaten'],
            y: ['ein Jahr', 'einem Jahr'],
            yy: [number + ' Jahre', number + ' Jahren']
          };
          return withoutSuffix ? format[key][0] : format[key][1];
        }

        var de = moment.defineLocale('de', {
          months: 'Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
          monthsShort: 'Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.'.split('_'),
          monthsParseExact: true,
          weekdays: 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
          weekdaysShort: 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
          weekdaysMin: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
          weekdaysParseExact: true,
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY HH:mm',
            LLLL: 'dddd, D. MMMM YYYY HH:mm'
          },
          calendar: {
            sameDay: '[heute um] LT [Uhr]',
            sameElse: 'L',
            nextDay: '[morgen um] LT [Uhr]',
            nextWeek: 'dddd [um] LT [Uhr]',
            lastDay: '[gestern um] LT [Uhr]',
            lastWeek: '[letzten] dddd [um] LT [Uhr]'
          },
          relativeTime: {
            future: 'in %s',
            past: 'vor %s',
            s: 'ein paar Sekunden',
            ss: '%d Sekunden',
            m: processRelativeTime,
            mm: '%d Minuten',
            h: processRelativeTime,
            hh: '%d Stunden',
            d: processRelativeTime,
            dd: processRelativeTime,
            w: processRelativeTime,
            ww: '%d Wochen',
            M: processRelativeTime,
            MM: processRelativeTime,
            y: processRelativeTime,
            yy: processRelativeTime
          },
          dayOfMonthOrdinalParse: /\d{1,2}\./,
          ordinal: '%d.',
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.

          }
        });
        return de;
      });
      /***/

    },

    /***/
    "tT3J": function tT3J(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Central Atlas Tamazight Latin [tzm-latn]
      //! author : Abdel Said : https://github.com/abdelsaid
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var tzmLatn = moment.defineLocale('tzm-latn', {
          months: 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split('_'),
          monthsShort: 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split('_'),
          weekdays: 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
          weekdaysShort: 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
          weekdaysMin: 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
          },
          calendar: {
            sameDay: '[asdkh g] LT',
            nextDay: '[aska g] LT',
            nextWeek: 'dddd [g] LT',
            lastDay: '[assant g] LT',
            lastWeek: 'dddd [g] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: 'dadkh s yan %s',
            past: 'yan %s',
            s: 'imik',
            ss: '%d imik',
            m: 'minuḍ',
            mm: '%d minuḍ',
            h: 'saɛa',
            hh: '%d tassaɛin',
            d: 'ass',
            dd: '%d ossan',
            M: 'ayowr',
            MM: '%d iyyirn',
            y: 'asgas',
            yy: '%d isgasn'
          },
          week: {
            dow: 6,
            // Saturday is the first day of the week.
            doy: 12 // The week that contains Jan 12th is the first week of the year.

          }
        });
        return tzmLatn;
      });
      /***/

    },

    /***/
    "tUCv": function tUCv(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Javanese [jv]
      //! author : Rony Lantip : https://github.com/lantip
      //! reference: http://jv.wikipedia.org/wiki/Basa_Jawa
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var jv = moment.defineLocale('jv', {
          months: 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember'.split('_'),
          monthsShort: 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des'.split('_'),
          weekdays: 'Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu'.split('_'),
          weekdaysShort: 'Min_Sen_Sel_Reb_Kem_Jem_Sep'.split('_'),
          weekdaysMin: 'Mg_Sn_Sl_Rb_Km_Jm_Sp'.split('_'),
          longDateFormat: {
            LT: 'HH.mm',
            LTS: 'HH.mm.ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY [pukul] HH.mm',
            LLLL: 'dddd, D MMMM YYYY [pukul] HH.mm'
          },
          meridiemParse: /enjing|siyang|sonten|ndalu/,
          meridiemHour: function meridiemHour(hour, meridiem) {
            if (hour === 12) {
              hour = 0;
            }

            if (meridiem === 'enjing') {
              return hour;
            } else if (meridiem === 'siyang') {
              return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'sonten' || meridiem === 'ndalu') {
              return hour + 12;
            }
          },
          meridiem: function meridiem(hours, minutes, isLower) {
            if (hours < 11) {
              return 'enjing';
            } else if (hours < 15) {
              return 'siyang';
            } else if (hours < 19) {
              return 'sonten';
            } else {
              return 'ndalu';
            }
          },
          calendar: {
            sameDay: '[Dinten puniko pukul] LT',
            nextDay: '[Mbenjang pukul] LT',
            nextWeek: 'dddd [pukul] LT',
            lastDay: '[Kala wingi pukul] LT',
            lastWeek: 'dddd [kepengker pukul] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: 'wonten ing %s',
            past: '%s ingkang kepengker',
            s: 'sawetawis detik',
            ss: '%d detik',
            m: 'setunggal menit',
            mm: '%d menit',
            h: 'setunggal jam',
            hh: '%d jam',
            d: 'sedinten',
            dd: '%d dinten',
            M: 'sewulan',
            MM: '%d wulan',
            y: 'setaun',
            yy: '%d taun'
          },
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 7th is the first week of the year.

          }
        });
        return jv;
      });
      /***/

    },

    /***/
    "tbfe": function tbfe(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Spanish (Mexico) [es-mx]
      //! author : JC Franco : https://github.com/jcfranco
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var monthsShortDot = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_'),
            _monthsShort4 = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_'),
            monthsParse = [/^ene/i, /^feb/i, /^mar/i, /^abr/i, /^may/i, /^jun/i, /^jul/i, /^ago/i, /^sep/i, /^oct/i, /^nov/i, /^dic/i],
            monthsRegex = /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;

        var esMx = moment.defineLocale('es-mx', {
          months: 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),
          monthsShort: function monthsShort(m, format) {
            if (!m) {
              return monthsShortDot;
            } else if (/-MMM-/.test(format)) {
              return _monthsShort4[m.month()];
            } else {
              return monthsShortDot[m.month()];
            }
          },
          monthsRegex: monthsRegex,
          monthsShortRegex: monthsRegex,
          monthsStrictRegex: /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
          monthsShortStrictRegex: /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
          monthsParse: monthsParse,
          longMonthsParse: monthsParse,
          shortMonthsParse: monthsParse,
          weekdays: 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
          weekdaysShort: 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
          weekdaysMin: 'do_lu_ma_mi_ju_vi_sá'.split('_'),
          weekdaysParseExact: true,
          longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D [de] MMMM [de] YYYY',
            LLL: 'D [de] MMMM [de] YYYY H:mm',
            LLLL: 'dddd, D [de] MMMM [de] YYYY H:mm'
          },
          calendar: {
            sameDay: function sameDay() {
              return '[hoy a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            nextDay: function nextDay() {
              return '[mañana a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            nextWeek: function nextWeek() {
              return 'dddd [a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            lastDay: function lastDay() {
              return '[ayer a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            lastWeek: function lastWeek() {
              return '[el] dddd [pasado a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            sameElse: 'L'
          },
          relativeTime: {
            future: 'en %s',
            past: 'hace %s',
            s: 'unos segundos',
            ss: '%d segundos',
            m: 'un minuto',
            mm: '%d minutos',
            h: 'una hora',
            hh: '%d horas',
            d: 'un día',
            dd: '%d días',
            w: 'una semana',
            ww: '%d semanas',
            M: 'un mes',
            MM: '%d meses',
            y: 'un año',
            yy: '%d años'
          },
          dayOfMonthOrdinalParse: /\d{1,2}º/,
          ordinal: '%dº',
          week: {
            dow: 0,
            // Sunday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.

          },
          invalidDate: 'Fecha inválida'
        });
        return esMx;
      });
      /***/

    },

    /***/
    "u3GI": function u3GI(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : German (Switzerland) [de-ch]
      //! author : sschueller : https://github.com/sschueller
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        function processRelativeTime(number, withoutSuffix, key, isFuture) {
          var format = {
            m: ['eine Minute', 'einer Minute'],
            h: ['eine Stunde', 'einer Stunde'],
            d: ['ein Tag', 'einem Tag'],
            dd: [number + ' Tage', number + ' Tagen'],
            w: ['eine Woche', 'einer Woche'],
            M: ['ein Monat', 'einem Monat'],
            MM: [number + ' Monate', number + ' Monaten'],
            y: ['ein Jahr', 'einem Jahr'],
            yy: [number + ' Jahre', number + ' Jahren']
          };
          return withoutSuffix ? format[key][0] : format[key][1];
        }

        var deCh = moment.defineLocale('de-ch', {
          months: 'Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
          monthsShort: 'Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.'.split('_'),
          monthsParseExact: true,
          weekdays: 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
          weekdaysShort: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
          weekdaysMin: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
          weekdaysParseExact: true,
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY HH:mm',
            LLLL: 'dddd, D. MMMM YYYY HH:mm'
          },
          calendar: {
            sameDay: '[heute um] LT [Uhr]',
            sameElse: 'L',
            nextDay: '[morgen um] LT [Uhr]',
            nextWeek: 'dddd [um] LT [Uhr]',
            lastDay: '[gestern um] LT [Uhr]',
            lastWeek: '[letzten] dddd [um] LT [Uhr]'
          },
          relativeTime: {
            future: 'in %s',
            past: 'vor %s',
            s: 'ein paar Sekunden',
            ss: '%d Sekunden',
            m: processRelativeTime,
            mm: '%d Minuten',
            h: processRelativeTime,
            hh: '%d Stunden',
            d: processRelativeTime,
            dd: processRelativeTime,
            w: processRelativeTime,
            ww: '%d Wochen',
            M: processRelativeTime,
            MM: processRelativeTime,
            y: processRelativeTime,
            yy: processRelativeTime
          },
          dayOfMonthOrdinalParse: /\d{1,2}\./,
          ordinal: '%d.',
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.

          }
        });
        return deCh;
      });
      /***/

    },

    /***/
    "uEye": function uEye(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Nynorsk [nn]
      //! authors : https://github.com/mechuwind
      //!           Stephen Ramthun : https://github.com/stephenramthun
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var nn = moment.defineLocale('nn', {
          months: 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
          monthsShort: 'jan._feb._mars_apr._mai_juni_juli_aug._sep._okt._nov._des.'.split('_'),
          monthsParseExact: true,
          weekdays: 'sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag'.split('_'),
          weekdaysShort: 'su._må._ty._on._to._fr._lau.'.split('_'),
          weekdaysMin: 'su_må_ty_on_to_fr_la'.split('_'),
          weekdaysParseExact: true,
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY [kl.] H:mm',
            LLLL: 'dddd D. MMMM YYYY [kl.] HH:mm'
          },
          calendar: {
            sameDay: '[I dag klokka] LT',
            nextDay: '[I morgon klokka] LT',
            nextWeek: 'dddd [klokka] LT',
            lastDay: '[I går klokka] LT',
            lastWeek: '[Føregåande] dddd [klokka] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: 'om %s',
            past: '%s sidan',
            s: 'nokre sekund',
            ss: '%d sekund',
            m: 'eit minutt',
            mm: '%d minutt',
            h: 'ein time',
            hh: '%d timar',
            d: 'ein dag',
            dd: '%d dagar',
            w: 'ei veke',
            ww: '%d veker',
            M: 'ein månad',
            MM: '%d månader',
            y: 'eit år',
            yy: '%d år'
          },
          dayOfMonthOrdinalParse: /\d{1,2}\./,
          ordinal: '%d.',
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.

          }
        });
        return nn;
      });
      /***/

    },

    /***/
    "uXwI": function uXwI(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Latvian [lv]
      //! author : Kristaps Karlsons : https://github.com/skakri
      //! author : Jānis Elmeris : https://github.com/JanisE
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var units = {
          ss: 'sekundes_sekundēm_sekunde_sekundes'.split('_'),
          m: 'minūtes_minūtēm_minūte_minūtes'.split('_'),
          mm: 'minūtes_minūtēm_minūte_minūtes'.split('_'),
          h: 'stundas_stundām_stunda_stundas'.split('_'),
          hh: 'stundas_stundām_stunda_stundas'.split('_'),
          d: 'dienas_dienām_diena_dienas'.split('_'),
          dd: 'dienas_dienām_diena_dienas'.split('_'),
          M: 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),
          MM: 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),
          y: 'gada_gadiem_gads_gadi'.split('_'),
          yy: 'gada_gadiem_gads_gadi'.split('_')
        };
        /**
         * @param withoutSuffix boolean true = a length of time; false = before/after a period of time.
         */

        function format(forms, number, withoutSuffix) {
          if (withoutSuffix) {
            // E.g. "21 minūte", "3 minūtes".
            return number % 10 === 1 && number % 100 !== 11 ? forms[2] : forms[3];
          } else {
            // E.g. "21 minūtes" as in "pēc 21 minūtes".
            // E.g. "3 minūtēm" as in "pēc 3 minūtēm".
            return number % 10 === 1 && number % 100 !== 11 ? forms[0] : forms[1];
          }
        }

        function relativeTimeWithPlural(number, withoutSuffix, key) {
          return number + ' ' + format(units[key], number, withoutSuffix);
        }

        function relativeTimeWithSingular(number, withoutSuffix, key) {
          return format(units[key], number, withoutSuffix);
        }

        function relativeSeconds(number, withoutSuffix) {
          return withoutSuffix ? 'dažas sekundes' : 'dažām sekundēm';
        }

        var lv = moment.defineLocale('lv', {
          months: 'janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris'.split('_'),
          monthsShort: 'jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec'.split('_'),
          weekdays: 'svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena'.split('_'),
          weekdaysShort: 'Sv_P_O_T_C_Pk_S'.split('_'),
          weekdaysMin: 'Sv_P_O_T_C_Pk_S'.split('_'),
          weekdaysParseExact: true,
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY.',
            LL: 'YYYY. [gada] D. MMMM',
            LLL: 'YYYY. [gada] D. MMMM, HH:mm',
            LLLL: 'YYYY. [gada] D. MMMM, dddd, HH:mm'
          },
          calendar: {
            sameDay: '[Šodien pulksten] LT',
            nextDay: '[Rīt pulksten] LT',
            nextWeek: 'dddd [pulksten] LT',
            lastDay: '[Vakar pulksten] LT',
            lastWeek: '[Pagājušā] dddd [pulksten] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: 'pēc %s',
            past: 'pirms %s',
            s: relativeSeconds,
            ss: relativeTimeWithPlural,
            m: relativeTimeWithSingular,
            mm: relativeTimeWithPlural,
            h: relativeTimeWithSingular,
            hh: relativeTimeWithPlural,
            d: relativeTimeWithSingular,
            dd: relativeTimeWithPlural,
            M: relativeTimeWithSingular,
            MM: relativeTimeWithPlural,
            y: relativeTimeWithSingular,
            yy: relativeTimeWithPlural
          },
          dayOfMonthOrdinalParse: /\d{1,2}\./,
          ordinal: '%d.',
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.

          }
        });
        return lv;
      });
      /***/

    },

    /***/
    "uh9s": function uh9s(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "UsuarioRegistroComponent", function () {
        return UsuarioRegistroComponent;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _raw_loader_usuario_registro_component_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! raw-loader!./usuario-registro.component.html */
      "Burw");
      /* harmony import */


      var _usuario_registro_component_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./usuario-registro.component.scss */
      "GMjw");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var _angular_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/forms */
      "3Pt+");
      /* harmony import */


      var _angular_router__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @angular/router */
      "tyNb");
      /* harmony import */


      var _environments_environment__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! ../../../../environments/environment */
      "AytR");
      /* harmony import */


      var _shared_services_global_services__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! ../../../shared/services/global.services */
      "Zk1H");

      var UsuarioRegistroComponent = /*#__PURE__*/function () {
        function UsuarioRegistroComponent(fb, router, route, globalService) {
          _classCallCheck(this, UsuarioRegistroComponent);

          this.fb = fb;
          this.router = router;
          this.route = route;
          this.globalService = globalService;
          this.isLoading = false;
          this.create = true;
          this.edit = false;
          this.userList = [{
            value: 1,
            desc: 'Doctora'
          }, {
            value: 2,
            desc: 'Operadora'
          }];
          this.form = fb.group({
            id: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"](),
            name: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"]('', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].pattern('[a-zA-Z0-9\\s]+')]),
            lastName: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"]('', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].pattern('[a-zA-Z0-9\\s]+')]),
            identification: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"]('', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].pattern("^[0-9-,]*$")])]),
            age: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"]('', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]),
            phone: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"]('', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].pattern("^[0-9-,]*$")])]),
            email: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"]('', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]),
            birthday: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"]('', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]),
            address: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"]('', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]),
            charge: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"]('', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required])
          });
        }

        _createClass(UsuarioRegistroComponent, [{
          key: "ngOnInit",
          value: function ngOnInit() {
            var _this82 = this;

            this.route.queryParams.subscribe(function (params) {
              var id = params.id;
              _this82.idPoint = id;

              if (_this82.idPoint) {
                _this82.getDtaByUpdate(id);
              }
            });
          }
        }, {
          key: "f",
          get: function get() {
            return this.form.controls;
          }
        }, {
          key: "getDtaByUpdate",
          value: function getDtaByUpdate(id) {
            var _this83 = this;

            this.isLoading = true;
            var data = {
              id: id
            };
            this.globalService.httpServicesResponse(data, _environments_environment__WEBPACK_IMPORTED_MODULE_6__["environment"].Url + 'depilarte/getEmpleados').subscribe(function (res) {
              console.log(res);

              _this83.setValues(res);

              _this83.isLoading = false;
              _this83.create = false;
              _this83.edit = true;
            }, function (e) {
              console.log(e);
              _this83.isLoading = false;
            });
          }
        }, {
          key: "setValues",
          value: function setValues(values) {
            this.form.setValue(values);
          }
        }, {
          key: "if",
          value: function _if(data) {
            this.form.controls.charge.patchValue(data.charge);
          }
        }, {
          key: "register",
          value: function register() {
            var _this84 = this;

            if (this.form.invalid) return;
            console.log(this.form.value);
            var data = Object.assign({}, this.form.value);
            this.globalService.httpServicesResponse(data, _environments_environment__WEBPACK_IMPORTED_MODULE_6__["environment"].Url + '/depilarte/registerEmpleado').subscribe(function (res) {
              if (res.type === 'error') {
                alertify.error('Error al registrar');
              } else {
                console.log(_this84.form.value);

                _this84.form.reset();

                alertify.success('Registrado con exito');
              }
            }, console.log);
          }
        }, {
          key: "hasError",
          value: function hasError(control, type) {
            return this.form.controls[control].hasError(type);
          }
        }]);

        return UsuarioRegistroComponent;
      }();

      UsuarioRegistroComponent.ctorParameters = function () {
        return [{
          type: _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormBuilder"]
        }, {
          type: _angular_router__WEBPACK_IMPORTED_MODULE_5__["Router"]
        }, {
          type: _angular_router__WEBPACK_IMPORTED_MODULE_5__["ActivatedRoute"]
        }, {
          type: _shared_services_global_services__WEBPACK_IMPORTED_MODULE_7__["GlobalServices"]
        }];
      };

      UsuarioRegistroComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"])({
        selector: 'app-usuario-registro',
        template: _raw_loader_usuario_registro_component_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        styles: [_usuario_registro_component_scss__WEBPACK_IMPORTED_MODULE_2__["default"]]
      }), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormBuilder"], _angular_router__WEBPACK_IMPORTED_MODULE_5__["Router"], _angular_router__WEBPACK_IMPORTED_MODULE_5__["ActivatedRoute"], _shared_services_global_services__WEBPACK_IMPORTED_MODULE_7__["GlobalServices"]])], UsuarioRegistroComponent);
      /***/
    },

    /***/
    "wI9/": function wI9(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony default export */


      __webpack_exports__["default"] = "<div class=\"row\">\r\n    <div class=\"col-md-8\" >\r\n       <div class=\"card card-user\" style=\"width: 150%;\">\r\n         <div class=\"card-header\">\r\n           <h1 class=\"card-title\">Registrar Producto</h1>\r\n         </div>\r\n         <div class=\"card-body\">\r\n           <form [formGroup]=\"form\">\r\n\r\n             <div class=\"row\">\r\n               <div class=\"col-md-4 pr-1\">\r\n                 <div class=\"form-group\">\r\n                   <mat-label>Nombre del Producto</mat-label>\r\n                   <mat-form-field appearance=\"outline\" class=\"form-group\" style=\"width: 100%;\">\r\n                     <mat-label>Producto</mat-label>\r\n                     <input formControlName=\"product\" matInput type=\"text\">\r\n                   </mat-form-field>\r\n                 </div>\r\n               </div>\r\n               <div class=\"col-md-4 px-1\">\r\n                 <div class=\"form-group\">\r\n                   <mat-label>Proveedor</mat-label>\r\n                   <mat-form-field appearance=\"outline\" class=\"form-group\" style=\"width: 100%;\">\r\n                     <mat-label>Proveedor</mat-label>\r\n                     <input formControlName=\"proveedor\" matInput type=\"text\">\r\n                   </mat-form-field>\r\n                 </div>\r\n               </div>\r\n               <div class=\"col-md-4 pl-1\">\r\n                 <div class=\"form-group\">\r\n                   <mat-label>Cantidad</mat-label>\r\n                   <mat-form-field appearance=\"outline\" class=\"form-group\" style=\"width: 100%;\">\r\n                     <mat-label>Cantidad</mat-label>\r\n                     <input formControlName=\"cantidad\" matInput type=\"text\">\r\n                   </mat-form-field>\r\n                 </div>\r\n               </div>\r\n             </div>\r\n\r\n             <div class=\"row\">\r\n               <div class=\"col-md-6 pr-1\">\r\n                 <div class=\"form-group\">\r\n                   <mat-label>Especialista Encargada</mat-label>\r\n                 <mat-form-field appearance=\"outline\" class=\"form-group\" style=\"width: 100%;\">\r\n                   <mat-label>Especialista</mat-label>\r\n                   <mat-select formControlName=\"specialist\">\r\n                    <mat-option *ngFor=\"let el of user\" [value]=\"el.value\">\r\n                      {{el.desc}}\r\n                    </mat-option>\r\n                   </mat-select>\r\n                 </mat-form-field>\r\n               </div>\r\n               </div>\r\n\r\n               <div class=\"col-md-6 pl-1\">\r\n                 <div class=\"form-group\">\r\n                   <mat-label>Precio del Producto</mat-label>\r\n                   <mat-form-field appearance=\"outline\" class=\"form-group\" style=\"width: 100%;\">\r\n                     <mat-label>precio</mat-label>\r\n                     <input formControlName=\"price\" matInput type=\"number\">\r\n                     <span matPrefix>$&nbsp;</span>\r\n                   </mat-form-field>\r\n                 </div>\r\n               </div>\r\n             </div>\r\n\r\n             <div class=\"row\">\r\n               <div class=\"col-md-12\">\r\n                 <div class=\"form-group\">\r\n                   <mat-label>Descripción del Producto</mat-label>\r\n                   <mat-form-field appearance=\"outline\" class=\"form-group\" style=\"width: 100%;\">\r\n                     <mat-label>Descripción</mat-label>\r\n                     <textarea formControlName=\"description\" matInput type=\"text\"></textarea>\r\n                   </mat-form-field>\r\n                 </div>\r\n               </div>\r\n             </div>\r\n\r\n             <div class=\"row\">\r\n               <div class=\"update ml-auto mr-auto\">\r\n                 <button mat-raised-button  color=\"warn\" type=\"submit\" (click)=\"register()\">Registrar</button>\r\n               </div>\r\n             </div>\r\n\r\n           </form>\r\n         </div>\r\n       </div>\r\n     </div>\r\n   </div>\r\n";
      /***/
    },

    /***/
    "wQk9": function wQk9(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Central Atlas Tamazight [tzm]
      //! author : Abdel Said : https://github.com/abdelsaid
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var tzm = moment.defineLocale('tzm', {
          months: 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split('_'),
          monthsShort: 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split('_'),
          weekdays: 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
          weekdaysShort: 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
          weekdaysMin: 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
          },
          calendar: {
            sameDay: '[ⴰⵙⴷⵅ ⴴ] LT',
            nextDay: '[ⴰⵙⴽⴰ ⴴ] LT',
            nextWeek: 'dddd [ⴴ] LT',
            lastDay: '[ⴰⵚⴰⵏⵜ ⴴ] LT',
            lastWeek: 'dddd [ⴴ] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: 'ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s',
            past: 'ⵢⴰⵏ %s',
            s: 'ⵉⵎⵉⴽ',
            ss: '%d ⵉⵎⵉⴽ',
            m: 'ⵎⵉⵏⵓⴺ',
            mm: '%d ⵎⵉⵏⵓⴺ',
            h: 'ⵙⴰⵄⴰ',
            hh: '%d ⵜⴰⵙⵙⴰⵄⵉⵏ',
            d: 'ⴰⵙⵙ',
            dd: '%d oⵙⵙⴰⵏ',
            M: 'ⴰⵢoⵓⵔ',
            MM: '%d ⵉⵢⵢⵉⵔⵏ',
            y: 'ⴰⵙⴳⴰⵙ',
            yy: '%d ⵉⵙⴳⴰⵙⵏ'
          },
          week: {
            dow: 6,
            // Saturday is the first day of the week.
            doy: 12 // The week that contains Jan 12th is the first week of the year.

          }
        });
        return tzm;
      });
      /***/

    },

    /***/
    "wd/R": function wdR(module, exports, __webpack_require__) {
      /* WEBPACK VAR INJECTION */
      (function (module) {
        var require; //! moment.js
        //! version : 2.29.1
        //! authors : Tim Wood, Iskren Chernev, Moment.js contributors
        //! license : MIT
        //! momentjs.com


        ;

        (function (global, factory) {
          true ? module.exports = factory() : undefined;
        })(this, function () {
          'use strict';

          var hookCallback;

          function hooks() {
            return hookCallback.apply(null, arguments);
          } // This is done to register the method called with moment()
          // without creating circular dependencies.


          function setHookCallback(callback) {
            hookCallback = callback;
          }

          function isArray(input) {
            return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
          }

          function isObject(input) {
            // IE8 will treat undefined and null as object if it wasn't for
            // input != null
            return input != null && Object.prototype.toString.call(input) === '[object Object]';
          }

          function hasOwnProp(a, b) {
            return Object.prototype.hasOwnProperty.call(a, b);
          }

          function isObjectEmpty(obj) {
            if (Object.getOwnPropertyNames) {
              return Object.getOwnPropertyNames(obj).length === 0;
            } else {
              var k;

              for (k in obj) {
                if (hasOwnProp(obj, k)) {
                  return false;
                }
              }

              return true;
            }
          }

          function isUndefined(input) {
            return input === void 0;
          }

          function isNumber(input) {
            return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
          }

          function isDate(input) {
            return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
          }

          function map(arr, fn) {
            var res = [],
                i;

            for (i = 0; i < arr.length; ++i) {
              res.push(fn(arr[i], i));
            }

            return res;
          }

          function extend(a, b) {
            for (var i in b) {
              if (hasOwnProp(b, i)) {
                a[i] = b[i];
              }
            }

            if (hasOwnProp(b, 'toString')) {
              a.toString = b.toString;
            }

            if (hasOwnProp(b, 'valueOf')) {
              a.valueOf = b.valueOf;
            }

            return a;
          }

          function createUTC(input, format, locale, strict) {
            return createLocalOrUTC(input, format, locale, strict, true).utc();
          }

          function defaultParsingFlags() {
            // We need to deep clone this object.
            return {
              empty: false,
              unusedTokens: [],
              unusedInput: [],
              overflow: -2,
              charsLeftOver: 0,
              nullInput: false,
              invalidEra: null,
              invalidMonth: null,
              invalidFormat: false,
              userInvalidated: false,
              iso: false,
              parsedDateParts: [],
              era: null,
              meridiem: null,
              rfc2822: false,
              weekdayMismatch: false
            };
          }

          function getParsingFlags(m) {
            if (m._pf == null) {
              m._pf = defaultParsingFlags();
            }

            return m._pf;
          }

          var some;

          if (Array.prototype.some) {
            some = Array.prototype.some;
          } else {
            some = function some(fun) {
              var t = Object(this),
                  len = t.length >>> 0,
                  i;

              for (i = 0; i < len; i++) {
                if (i in t && fun.call(this, t[i], i, t)) {
                  return true;
                }
              }

              return false;
            };
          }

          function isValid(m) {
            if (m._isValid == null) {
              var flags = getParsingFlags(m),
                  parsedParts = some.call(flags.parsedDateParts, function (i) {
                return i != null;
              }),
                  isNowValid = !isNaN(m._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidEra && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);

              if (m._strict) {
                isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === undefined;
              }

              if (Object.isFrozen == null || !Object.isFrozen(m)) {
                m._isValid = isNowValid;
              } else {
                return isNowValid;
              }
            }

            return m._isValid;
          }

          function createInvalid(flags) {
            var m = createUTC(NaN);

            if (flags != null) {
              extend(getParsingFlags(m), flags);
            } else {
              getParsingFlags(m).userInvalidated = true;
            }

            return m;
          } // Plugins that add properties should also add the key here (null value),
          // so we can properly clone ourselves.


          var momentProperties = hooks.momentProperties = [],
              updateInProgress = false;

          function copyConfig(to, from) {
            var i, prop, val;

            if (!isUndefined(from._isAMomentObject)) {
              to._isAMomentObject = from._isAMomentObject;
            }

            if (!isUndefined(from._i)) {
              to._i = from._i;
            }

            if (!isUndefined(from._f)) {
              to._f = from._f;
            }

            if (!isUndefined(from._l)) {
              to._l = from._l;
            }

            if (!isUndefined(from._strict)) {
              to._strict = from._strict;
            }

            if (!isUndefined(from._tzm)) {
              to._tzm = from._tzm;
            }

            if (!isUndefined(from._isUTC)) {
              to._isUTC = from._isUTC;
            }

            if (!isUndefined(from._offset)) {
              to._offset = from._offset;
            }

            if (!isUndefined(from._pf)) {
              to._pf = getParsingFlags(from);
            }

            if (!isUndefined(from._locale)) {
              to._locale = from._locale;
            }

            if (momentProperties.length > 0) {
              for (i = 0; i < momentProperties.length; i++) {
                prop = momentProperties[i];
                val = from[prop];

                if (!isUndefined(val)) {
                  to[prop] = val;
                }
              }
            }

            return to;
          } // Moment prototype object


          function Moment(config) {
            copyConfig(this, config);
            this._d = new Date(config._d != null ? config._d.getTime() : NaN);

            if (!this.isValid()) {
              this._d = new Date(NaN);
            } // Prevent infinite loop in case updateOffset creates new moment
            // objects.


            if (updateInProgress === false) {
              updateInProgress = true;
              hooks.updateOffset(this);
              updateInProgress = false;
            }
          }

          function isMoment(obj) {
            return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
          }

          function warn(msg) {
            if (hooks.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) {
              console.warn('Deprecation warning: ' + msg);
            }
          }

          function deprecate(msg, fn) {
            var firstTime = true;
            return extend(function () {
              if (hooks.deprecationHandler != null) {
                hooks.deprecationHandler(null, msg);
              }

              if (firstTime) {
                var args = [],
                    arg,
                    i,
                    key;

                for (i = 0; i < arguments.length; i++) {
                  arg = '';

                  if (typeof arguments[i] === 'object') {
                    arg += '\n[' + i + '] ';

                    for (key in arguments[0]) {
                      if (hasOwnProp(arguments[0], key)) {
                        arg += key + ': ' + arguments[0][key] + ', ';
                      }
                    }

                    arg = arg.slice(0, -2); // Remove trailing comma and space
                  } else {
                    arg = arguments[i];
                  }

                  args.push(arg);
                }

                warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + new Error().stack);
                firstTime = false;
              }

              return fn.apply(this, arguments);
            }, fn);
          }

          var deprecations = {};

          function deprecateSimple(name, msg) {
            if (hooks.deprecationHandler != null) {
              hooks.deprecationHandler(name, msg);
            }

            if (!deprecations[name]) {
              warn(msg);
              deprecations[name] = true;
            }
          }

          hooks.suppressDeprecationWarnings = false;
          hooks.deprecationHandler = null;

          function isFunction(input) {
            return typeof Function !== 'undefined' && input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
          }

          function set(config) {
            var prop, i;

            for (i in config) {
              if (hasOwnProp(config, i)) {
                prop = config[i];

                if (isFunction(prop)) {
                  this[i] = prop;
                } else {
                  this['_' + i] = prop;
                }
              }
            }

            this._config = config; // Lenient ordinal parsing accepts just a number in addition to
            // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
            // TODO: Remove "ordinalParse" fallback in next major release.

            this._dayOfMonthOrdinalParseLenient = new RegExp((this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + '|' + /\d{1,2}/.source);
          }

          function mergeConfigs(parentConfig, childConfig) {
            var res = extend({}, parentConfig),
                prop;

            for (prop in childConfig) {
              if (hasOwnProp(childConfig, prop)) {
                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                  res[prop] = {};
                  extend(res[prop], parentConfig[prop]);
                  extend(res[prop], childConfig[prop]);
                } else if (childConfig[prop] != null) {
                  res[prop] = childConfig[prop];
                } else {
                  delete res[prop];
                }
              }
            }

            for (prop in parentConfig) {
              if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject(parentConfig[prop])) {
                // make sure changes to properties don't modify parent config
                res[prop] = extend({}, res[prop]);
              }
            }

            return res;
          }

          function Locale(config) {
            if (config != null) {
              this.set(config);
            }
          }

          var keys;

          if (Object.keys) {
            keys = Object.keys;
          } else {
            keys = function keys(obj) {
              var i,
                  res = [];

              for (i in obj) {
                if (hasOwnProp(obj, i)) {
                  res.push(i);
                }
              }

              return res;
            };
          }

          var defaultCalendar = {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L'
          };

          function calendar(key, mom, now) {
            var output = this._calendar[key] || this._calendar['sameElse'];
            return isFunction(output) ? output.call(mom, now) : output;
          }

          function zeroFill(number, targetLength, forceSign) {
            var absNumber = '' + Math.abs(number),
                zerosToFill = targetLength - absNumber.length,
                sign = number >= 0;
            return (sign ? forceSign ? '+' : '' : '-') + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
          }

          var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
              localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,
              formatFunctions = {},
              formatTokenFunctions = {}; // token:    'M'
          // padded:   ['MM', 2]
          // ordinal:  'Mo'
          // callback: function () { this.month() + 1 }

          function addFormatToken(token, padded, ordinal, callback) {
            var func = callback;

            if (typeof callback === 'string') {
              func = function func() {
                return this[callback]();
              };
            }

            if (token) {
              formatTokenFunctions[token] = func;
            }

            if (padded) {
              formatTokenFunctions[padded[0]] = function () {
                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
              };
            }

            if (ordinal) {
              formatTokenFunctions[ordinal] = function () {
                return this.localeData().ordinal(func.apply(this, arguments), token);
              };
            }
          }

          function removeFormattingTokens(input) {
            if (input.match(/\[[\s\S]/)) {
              return input.replace(/^\[|\]$/g, '');
            }

            return input.replace(/\\/g, '');
          }

          function makeFormatFunction(format) {
            var array = format.match(formattingTokens),
                i,
                length;

            for (i = 0, length = array.length; i < length; i++) {
              if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
              } else {
                array[i] = removeFormattingTokens(array[i]);
              }
            }

            return function (mom) {
              var output = '',
                  i;

              for (i = 0; i < length; i++) {
                output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
              }

              return output;
            };
          } // format date using native date object


          function formatMoment(m, format) {
            if (!m.isValid()) {
              return m.localeData().invalidDate();
            }

            format = expandFormat(format, m.localeData());
            formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);
            return formatFunctions[format](m);
          }

          function expandFormat(format, locale) {
            var i = 5;

            function replaceLongDateFormatTokens(input) {
              return locale.longDateFormat(input) || input;
            }

            localFormattingTokens.lastIndex = 0;

            while (i >= 0 && localFormattingTokens.test(format)) {
              format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
              localFormattingTokens.lastIndex = 0;
              i -= 1;
            }

            return format;
          }

          var defaultLongDateFormat = {
            LTS: 'h:mm:ss A',
            LT: 'h:mm A',
            L: 'MM/DD/YYYY',
            LL: 'MMMM D, YYYY',
            LLL: 'MMMM D, YYYY h:mm A',
            LLLL: 'dddd, MMMM D, YYYY h:mm A'
          };

          function longDateFormat(key) {
            var format = this._longDateFormat[key],
                formatUpper = this._longDateFormat[key.toUpperCase()];

            if (format || !formatUpper) {
              return format;
            }

            this._longDateFormat[key] = formatUpper.match(formattingTokens).map(function (tok) {
              if (tok === 'MMMM' || tok === 'MM' || tok === 'DD' || tok === 'dddd') {
                return tok.slice(1);
              }

              return tok;
            }).join('');
            return this._longDateFormat[key];
          }

          var defaultInvalidDate = 'Invalid date';

          function invalidDate() {
            return this._invalidDate;
          }

          var defaultOrdinal = '%d',
              defaultDayOfMonthOrdinalParse = /\d{1,2}/;

          function ordinal(number) {
            return this._ordinal.replace('%d', number);
          }

          var defaultRelativeTime = {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            ss: '%d seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            w: 'a week',
            ww: '%d weeks',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years'
          };

          function relativeTime(number, withoutSuffix, string, isFuture) {
            var output = this._relativeTime[string];
            return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
          }

          function pastFuture(diff, output) {
            var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
            return isFunction(format) ? format(output) : format.replace(/%s/i, output);
          }

          var aliases = {};

          function addUnitAlias(unit, shorthand) {
            var lowerCase = unit.toLowerCase();
            aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
          }

          function normalizeUnits(units) {
            return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
          }

          function normalizeObjectUnits(inputObject) {
            var normalizedInput = {},
                normalizedProp,
                prop;

            for (prop in inputObject) {
              if (hasOwnProp(inputObject, prop)) {
                normalizedProp = normalizeUnits(prop);

                if (normalizedProp) {
                  normalizedInput[normalizedProp] = inputObject[prop];
                }
              }
            }

            return normalizedInput;
          }

          var priorities = {};

          function addUnitPriority(unit, priority) {
            priorities[unit] = priority;
          }

          function getPrioritizedUnits(unitsObj) {
            var units = [],
                u;

            for (u in unitsObj) {
              if (hasOwnProp(unitsObj, u)) {
                units.push({
                  unit: u,
                  priority: priorities[u]
                });
              }
            }

            units.sort(function (a, b) {
              return a.priority - b.priority;
            });
            return units;
          }

          function isLeapYear(year) {
            return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
          }

          function absFloor(number) {
            if (number < 0) {
              // -0 -> 0
              return Math.ceil(number) || 0;
            } else {
              return Math.floor(number);
            }
          }

          function toInt(argumentForCoercion) {
            var coercedNumber = +argumentForCoercion,
                value = 0;

            if (coercedNumber !== 0 && isFinite(coercedNumber)) {
              value = absFloor(coercedNumber);
            }

            return value;
          }

          function makeGetSet(unit, keepTime) {
            return function (value) {
              if (value != null) {
                set$1(this, unit, value);
                hooks.updateOffset(this, keepTime);
                return this;
              } else {
                return get(this, unit);
              }
            };
          }

          function get(mom, unit) {
            return mom.isValid() ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
          }

          function set$1(mom, unit, value) {
            if (mom.isValid() && !isNaN(value)) {
              if (unit === 'FullYear' && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
                value = toInt(value);

                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value, mom.month(), daysInMonth(value, mom.month()));
              } else {
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
              }
            }
          } // MOMENTS


          function stringGet(units) {
            units = normalizeUnits(units);

            if (isFunction(this[units])) {
              return this[units]();
            }

            return this;
          }

          function stringSet(units, value) {
            if (typeof units === 'object') {
              units = normalizeObjectUnits(units);
              var prioritized = getPrioritizedUnits(units),
                  i;

              for (i = 0; i < prioritized.length; i++) {
                this[prioritized[i].unit](units[prioritized[i].unit]);
              }
            } else {
              units = normalizeUnits(units);

              if (isFunction(this[units])) {
                return this[units](value);
              }
            }

            return this;
          }

          var match1 = /\d/,
              //       0 - 9
          match2 = /\d\d/,
              //      00 - 99
          match3 = /\d{3}/,
              //     000 - 999
          match4 = /\d{4}/,
              //    0000 - 9999
          match6 = /[+-]?\d{6}/,
              // -999999 - 999999
          match1to2 = /\d\d?/,
              //       0 - 99
          match3to4 = /\d\d\d\d?/,
              //     999 - 9999
          match5to6 = /\d\d\d\d\d\d?/,
              //   99999 - 999999
          match1to3 = /\d{1,3}/,
              //       0 - 999
          match1to4 = /\d{1,4}/,
              //       0 - 9999
          match1to6 = /[+-]?\d{1,6}/,
              // -999999 - 999999
          matchUnsigned = /\d+/,
              //       0 - inf
          matchSigned = /[+-]?\d+/,
              //    -inf - inf
          matchOffset = /Z|[+-]\d\d:?\d\d/gi,
              // +00:00 -00:00 +0000 -0000 or Z
          matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi,
              // +00 -00 +00:00 -00:00 +0000 -0000 or Z
          matchTimestamp = /[+-]?\d+(\.\d{1,3})?/,
              // 123456789 123456789.123
          // any word (or two) characters or numbers including two/three word month in arabic.
          // includes scottish gaelic two word and hyphenated months
          matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,
              regexes;
          regexes = {};

          function addRegexToken(token, regex, strictRegex) {
            regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
              return isStrict && strictRegex ? strictRegex : regex;
            };
          }

          function getParseRegexForToken(token, config) {
            if (!hasOwnProp(regexes, token)) {
              return new RegExp(unescapeFormat(token));
            }

            return regexes[token](config._strict, config._locale);
          } // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript


          function unescapeFormat(s) {
            return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
              return p1 || p2 || p3 || p4;
            }));
          }

          function regexEscape(s) {
            return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
          }

          var tokens = {};

          function addParseToken(token, callback) {
            var i,
                func = callback;

            if (typeof token === 'string') {
              token = [token];
            }

            if (isNumber(callback)) {
              func = function func(input, array) {
                array[callback] = toInt(input);
              };
            }

            for (i = 0; i < token.length; i++) {
              tokens[token[i]] = func;
            }
          }

          function addWeekParseToken(token, callback) {
            addParseToken(token, function (input, array, config, token) {
              config._w = config._w || {};
              callback(input, config._w, config, token);
            });
          }

          function addTimeToArrayFromToken(token, input, config) {
            if (input != null && hasOwnProp(tokens, token)) {
              tokens[token](input, config._a, config, token);
            }
          }

          var YEAR = 0,
              MONTH = 1,
              DATE = 2,
              HOUR = 3,
              MINUTE = 4,
              SECOND = 5,
              MILLISECOND = 6,
              WEEK = 7,
              WEEKDAY = 8;

          function mod(n, x) {
            return (n % x + x) % x;
          }

          var indexOf;

          if (Array.prototype.indexOf) {
            indexOf = Array.prototype.indexOf;
          } else {
            indexOf = function indexOf(o) {
              // I know
              var i;

              for (i = 0; i < this.length; ++i) {
                if (this[i] === o) {
                  return i;
                }
              }

              return -1;
            };
          }

          function daysInMonth(year, month) {
            if (isNaN(year) || isNaN(month)) {
              return NaN;
            }

            var modMonth = mod(month, 12);
            year += (month - modMonth) / 12;
            return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
          } // FORMATTING


          addFormatToken('M', ['MM', 2], 'Mo', function () {
            return this.month() + 1;
          });
          addFormatToken('MMM', 0, 0, function (format) {
            return this.localeData().monthsShort(this, format);
          });
          addFormatToken('MMMM', 0, 0, function (format) {
            return this.localeData().months(this, format);
          }); // ALIASES

          addUnitAlias('month', 'M'); // PRIORITY

          addUnitPriority('month', 8); // PARSING

          addRegexToken('M', match1to2);
          addRegexToken('MM', match1to2, match2);
          addRegexToken('MMM', function (isStrict, locale) {
            return locale.monthsShortRegex(isStrict);
          });
          addRegexToken('MMMM', function (isStrict, locale) {
            return locale.monthsRegex(isStrict);
          });
          addParseToken(['M', 'MM'], function (input, array) {
            array[MONTH] = toInt(input) - 1;
          });
          addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
            var month = config._locale.monthsParse(input, token, config._strict); // if we didn't find a month name, mark the date as invalid.


            if (month != null) {
              array[MONTH] = month;
            } else {
              getParsingFlags(config).invalidMonth = input;
            }
          }); // LOCALES

          var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
              defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
              MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,
              defaultMonthsShortRegex = matchWord,
              defaultMonthsRegex = matchWord;

          function localeMonths(m, format) {
            if (!m) {
              return isArray(this._months) ? this._months : this._months['standalone'];
            }

            return isArray(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
          }

          function localeMonthsShort(m, format) {
            if (!m) {
              return isArray(this._monthsShort) ? this._monthsShort : this._monthsShort['standalone'];
            }

            return isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
          }

          function handleStrictParse(monthName, format, strict) {
            var i,
                ii,
                mom,
                llc = monthName.toLocaleLowerCase();

            if (!this._monthsParse) {
              // this is not used
              this._monthsParse = [];
              this._longMonthsParse = [];
              this._shortMonthsParse = [];

              for (i = 0; i < 12; ++i) {
                mom = createUTC([2000, i]);
                this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
              }
            }

            if (strict) {
              if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
              } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
              }
            } else {
              if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);

                if (ii !== -1) {
                  return ii;
                }

                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
              } else {
                ii = indexOf.call(this._longMonthsParse, llc);

                if (ii !== -1) {
                  return ii;
                }

                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
              }
            }
          }

          function localeMonthsParse(monthName, format, strict) {
            var i, mom, regex;

            if (this._monthsParseExact) {
              return handleStrictParse.call(this, monthName, format, strict);
            }

            if (!this._monthsParse) {
              this._monthsParse = [];
              this._longMonthsParse = [];
              this._shortMonthsParse = [];
            } // TODO: add sorting
            // Sorting makes sure if one month (or abbr) is a prefix of another
            // see sorting in computeMonthsParse


            for (i = 0; i < 12; i++) {
              // make the regex if we don't have it already
              mom = createUTC([2000, i]);

              if (strict && !this._longMonthsParse[i]) {
                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
              }

              if (!strict && !this._monthsParse[i]) {
                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
              } // test the regex


              if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
                return i;
              } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
                return i;
              } else if (!strict && this._monthsParse[i].test(monthName)) {
                return i;
              }
            }
          } // MOMENTS


          function setMonth(mom, value) {
            var dayOfMonth;

            if (!mom.isValid()) {
              // No op
              return mom;
            }

            if (typeof value === 'string') {
              if (/^\d+$/.test(value)) {
                value = toInt(value);
              } else {
                value = mom.localeData().monthsParse(value); // TODO: Another silent failure?

                if (!isNumber(value)) {
                  return mom;
                }
              }
            }

            dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));

            mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);

            return mom;
          }

          function getSetMonth(value) {
            if (value != null) {
              setMonth(this, value);
              hooks.updateOffset(this, true);
              return this;
            } else {
              return get(this, 'Month');
            }
          }

          function getDaysInMonth() {
            return daysInMonth(this.year(), this.month());
          }

          function monthsShortRegex(isStrict) {
            if (this._monthsParseExact) {
              if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
              }

              if (isStrict) {
                return this._monthsShortStrictRegex;
              } else {
                return this._monthsShortRegex;
              }
            } else {
              if (!hasOwnProp(this, '_monthsShortRegex')) {
                this._monthsShortRegex = defaultMonthsShortRegex;
              }

              return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
            }
          }

          function monthsRegex(isStrict) {
            if (this._monthsParseExact) {
              if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
              }

              if (isStrict) {
                return this._monthsStrictRegex;
              } else {
                return this._monthsRegex;
              }
            } else {
              if (!hasOwnProp(this, '_monthsRegex')) {
                this._monthsRegex = defaultMonthsRegex;
              }

              return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
            }
          }

          function computeMonthsParse() {
            function cmpLenRev(a, b) {
              return b.length - a.length;
            }

            var shortPieces = [],
                longPieces = [],
                mixedPieces = [],
                i,
                mom;

            for (i = 0; i < 12; i++) {
              // make the regex if we don't have it already
              mom = createUTC([2000, i]);
              shortPieces.push(this.monthsShort(mom, ''));
              longPieces.push(this.months(mom, ''));
              mixedPieces.push(this.months(mom, ''));
              mixedPieces.push(this.monthsShort(mom, ''));
            } // Sorting makes sure if one month (or abbr) is a prefix of another it
            // will match the longer piece.


            shortPieces.sort(cmpLenRev);
            longPieces.sort(cmpLenRev);
            mixedPieces.sort(cmpLenRev);

            for (i = 0; i < 12; i++) {
              shortPieces[i] = regexEscape(shortPieces[i]);
              longPieces[i] = regexEscape(longPieces[i]);
            }

            for (i = 0; i < 24; i++) {
              mixedPieces[i] = regexEscape(mixedPieces[i]);
            }

            this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
            this._monthsShortRegex = this._monthsRegex;
            this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
            this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
          } // FORMATTING


          addFormatToken('Y', 0, 0, function () {
            var y = this.year();
            return y <= 9999 ? zeroFill(y, 4) : '+' + y;
          });
          addFormatToken(0, ['YY', 2], 0, function () {
            return this.year() % 100;
          });
          addFormatToken(0, ['YYYY', 4], 0, 'year');
          addFormatToken(0, ['YYYYY', 5], 0, 'year');
          addFormatToken(0, ['YYYYYY', 6, true], 0, 'year'); // ALIASES

          addUnitAlias('year', 'y'); // PRIORITIES

          addUnitPriority('year', 1); // PARSING

          addRegexToken('Y', matchSigned);
          addRegexToken('YY', match1to2, match2);
          addRegexToken('YYYY', match1to4, match4);
          addRegexToken('YYYYY', match1to6, match6);
          addRegexToken('YYYYYY', match1to6, match6);
          addParseToken(['YYYYY', 'YYYYYY'], YEAR);
          addParseToken('YYYY', function (input, array) {
            array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
          });
          addParseToken('YY', function (input, array) {
            array[YEAR] = hooks.parseTwoDigitYear(input);
          });
          addParseToken('Y', function (input, array) {
            array[YEAR] = parseInt(input, 10);
          }); // HELPERS

          function daysInYear(year) {
            return isLeapYear(year) ? 366 : 365;
          } // HOOKS


          hooks.parseTwoDigitYear = function (input) {
            return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
          }; // MOMENTS


          var getSetYear = makeGetSet('FullYear', true);

          function getIsLeapYear() {
            return isLeapYear(this.year());
          }

          function createDate(y, m, d, h, M, s, ms) {
            // can't just apply() to create a date:
            // https://stackoverflow.com/q/181348
            var date; // the date constructor remaps years 0-99 to 1900-1999

            if (y < 100 && y >= 0) {
              // preserve leap years using a full 400 year cycle, then reset
              date = new Date(y + 400, m, d, h, M, s, ms);

              if (isFinite(date.getFullYear())) {
                date.setFullYear(y);
              }
            } else {
              date = new Date(y, m, d, h, M, s, ms);
            }

            return date;
          }

          function createUTCDate(y) {
            var date, args; // the Date.UTC function remaps years 0-99 to 1900-1999

            if (y < 100 && y >= 0) {
              args = Array.prototype.slice.call(arguments); // preserve leap years using a full 400 year cycle, then reset

              args[0] = y + 400;
              date = new Date(Date.UTC.apply(null, args));

              if (isFinite(date.getUTCFullYear())) {
                date.setUTCFullYear(y);
              }
            } else {
              date = new Date(Date.UTC.apply(null, arguments));
            }

            return date;
          } // start-of-first-week - start-of-year


          function firstWeekOffset(year, dow, doy) {
            var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
            fwd = 7 + dow - doy,
                // first-week day local weekday -- which local weekday is fwd
            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
            return -fwdlw + fwd - 1;
          } // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday


          function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
            var localWeekday = (7 + weekday - dow) % 7,
                weekOffset = firstWeekOffset(year, dow, doy),
                dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
                resYear,
                resDayOfYear;

            if (dayOfYear <= 0) {
              resYear = year - 1;
              resDayOfYear = daysInYear(resYear) + dayOfYear;
            } else if (dayOfYear > daysInYear(year)) {
              resYear = year + 1;
              resDayOfYear = dayOfYear - daysInYear(year);
            } else {
              resYear = year;
              resDayOfYear = dayOfYear;
            }

            return {
              year: resYear,
              dayOfYear: resDayOfYear
            };
          }

          function weekOfYear(mom, dow, doy) {
            var weekOffset = firstWeekOffset(mom.year(), dow, doy),
                week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
                resWeek,
                resYear;

            if (week < 1) {
              resYear = mom.year() - 1;
              resWeek = week + weeksInYear(resYear, dow, doy);
            } else if (week > weeksInYear(mom.year(), dow, doy)) {
              resWeek = week - weeksInYear(mom.year(), dow, doy);
              resYear = mom.year() + 1;
            } else {
              resYear = mom.year();
              resWeek = week;
            }

            return {
              week: resWeek,
              year: resYear
            };
          }

          function weeksInYear(year, dow, doy) {
            var weekOffset = firstWeekOffset(year, dow, doy),
                weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
            return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
          } // FORMATTING


          addFormatToken('w', ['ww', 2], 'wo', 'week');
          addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek'); // ALIASES

          addUnitAlias('week', 'w');
          addUnitAlias('isoWeek', 'W'); // PRIORITIES

          addUnitPriority('week', 5);
          addUnitPriority('isoWeek', 5); // PARSING

          addRegexToken('w', match1to2);
          addRegexToken('ww', match1to2, match2);
          addRegexToken('W', match1to2);
          addRegexToken('WW', match1to2, match2);
          addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
            week[token.substr(0, 1)] = toInt(input);
          }); // HELPERS
          // LOCALES

          function localeWeek(mom) {
            return weekOfYear(mom, this._week.dow, this._week.doy).week;
          }

          var defaultLocaleWeek = {
            dow: 0,
            // Sunday is the first day of the week.
            doy: 6 // The week that contains Jan 6th is the first week of the year.

          };

          function localeFirstDayOfWeek() {
            return this._week.dow;
          }

          function localeFirstDayOfYear() {
            return this._week.doy;
          } // MOMENTS


          function getSetWeek(input) {
            var week = this.localeData().week(this);
            return input == null ? week : this.add((input - week) * 7, 'd');
          }

          function getSetISOWeek(input) {
            var week = weekOfYear(this, 1, 4).week;
            return input == null ? week : this.add((input - week) * 7, 'd');
          } // FORMATTING


          addFormatToken('d', 0, 'do', 'day');
          addFormatToken('dd', 0, 0, function (format) {
            return this.localeData().weekdaysMin(this, format);
          });
          addFormatToken('ddd', 0, 0, function (format) {
            return this.localeData().weekdaysShort(this, format);
          });
          addFormatToken('dddd', 0, 0, function (format) {
            return this.localeData().weekdays(this, format);
          });
          addFormatToken('e', 0, 0, 'weekday');
          addFormatToken('E', 0, 0, 'isoWeekday'); // ALIASES

          addUnitAlias('day', 'd');
          addUnitAlias('weekday', 'e');
          addUnitAlias('isoWeekday', 'E'); // PRIORITY

          addUnitPriority('day', 11);
          addUnitPriority('weekday', 11);
          addUnitPriority('isoWeekday', 11); // PARSING

          addRegexToken('d', match1to2);
          addRegexToken('e', match1to2);
          addRegexToken('E', match1to2);
          addRegexToken('dd', function (isStrict, locale) {
            return locale.weekdaysMinRegex(isStrict);
          });
          addRegexToken('ddd', function (isStrict, locale) {
            return locale.weekdaysShortRegex(isStrict);
          });
          addRegexToken('dddd', function (isStrict, locale) {
            return locale.weekdaysRegex(isStrict);
          });
          addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
            var weekday = config._locale.weekdaysParse(input, token, config._strict); // if we didn't get a weekday name, mark the date as invalid


            if (weekday != null) {
              week.d = weekday;
            } else {
              getParsingFlags(config).invalidWeekday = input;
            }
          });
          addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
            week[token] = toInt(input);
          }); // HELPERS

          function parseWeekday(input, locale) {
            if (typeof input !== 'string') {
              return input;
            }

            if (!isNaN(input)) {
              return parseInt(input, 10);
            }

            input = locale.weekdaysParse(input);

            if (typeof input === 'number') {
              return input;
            }

            return null;
          }

          function parseIsoWeekday(input, locale) {
            if (typeof input === 'string') {
              return locale.weekdaysParse(input) % 7 || 7;
            }

            return isNaN(input) ? null : input;
          } // LOCALES


          function shiftWeekdays(ws, n) {
            return ws.slice(n, 7).concat(ws.slice(0, n));
          }

          var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
              defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
              defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
              defaultWeekdaysRegex = matchWord,
              defaultWeekdaysShortRegex = matchWord,
              defaultWeekdaysMinRegex = matchWord;

          function localeWeekdays(m, format) {
            var weekdays = isArray(this._weekdays) ? this._weekdays : this._weekdays[m && m !== true && this._weekdays.isFormat.test(format) ? 'format' : 'standalone'];
            return m === true ? shiftWeekdays(weekdays, this._week.dow) : m ? weekdays[m.day()] : weekdays;
          }

          function localeWeekdaysShort(m) {
            return m === true ? shiftWeekdays(this._weekdaysShort, this._week.dow) : m ? this._weekdaysShort[m.day()] : this._weekdaysShort;
          }

          function localeWeekdaysMin(m) {
            return m === true ? shiftWeekdays(this._weekdaysMin, this._week.dow) : m ? this._weekdaysMin[m.day()] : this._weekdaysMin;
          }

          function handleStrictParse$1(weekdayName, format, strict) {
            var i,
                ii,
                mom,
                llc = weekdayName.toLocaleLowerCase();

            if (!this._weekdaysParse) {
              this._weekdaysParse = [];
              this._shortWeekdaysParse = [];
              this._minWeekdaysParse = [];

              for (i = 0; i < 7; ++i) {
                mom = createUTC([2000, 1]).day(i);
                this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
                this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
              }
            }

            if (strict) {
              if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                return ii !== -1 ? ii : null;
              } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
              } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
              }
            } else {
              if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);

                if (ii !== -1) {
                  return ii;
                }

                ii = indexOf.call(this._shortWeekdaysParse, llc);

                if (ii !== -1) {
                  return ii;
                }

                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
              } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);

                if (ii !== -1) {
                  return ii;
                }

                ii = indexOf.call(this._weekdaysParse, llc);

                if (ii !== -1) {
                  return ii;
                }

                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
              } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);

                if (ii !== -1) {
                  return ii;
                }

                ii = indexOf.call(this._weekdaysParse, llc);

                if (ii !== -1) {
                  return ii;
                }

                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
              }
            }
          }

          function localeWeekdaysParse(weekdayName, format, strict) {
            var i, mom, regex;

            if (this._weekdaysParseExact) {
              return handleStrictParse$1.call(this, weekdayName, format, strict);
            }

            if (!this._weekdaysParse) {
              this._weekdaysParse = [];
              this._minWeekdaysParse = [];
              this._shortWeekdaysParse = [];
              this._fullWeekdaysParse = [];
            }

            for (i = 0; i < 7; i++) {
              // make the regex if we don't have it already
              mom = createUTC([2000, 1]).day(i);

              if (strict && !this._fullWeekdaysParse[i]) {
                this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\.?') + '$', 'i');
                this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$', 'i');
                this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$', 'i');
              }

              if (!this._weekdaysParse[i]) {
                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
              } // test the regex


              if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
                return i;
              } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
                return i;
              } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
                return i;
              } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
                return i;
              }
            }
          } // MOMENTS


          function getSetDayOfWeek(input) {
            if (!this.isValid()) {
              return input != null ? this : NaN;
            }

            var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();

            if (input != null) {
              input = parseWeekday(input, this.localeData());
              return this.add(input - day, 'd');
            } else {
              return day;
            }
          }

          function getSetLocaleDayOfWeek(input) {
            if (!this.isValid()) {
              return input != null ? this : NaN;
            }

            var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
            return input == null ? weekday : this.add(input - weekday, 'd');
          }

          function getSetISODayOfWeek(input) {
            if (!this.isValid()) {
              return input != null ? this : NaN;
            } // behaves the same as moment#day except
            // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
            // as a setter, sunday should belong to the previous week.


            if (input != null) {
              var weekday = parseIsoWeekday(input, this.localeData());
              return this.day(this.day() % 7 ? weekday : weekday - 7);
            } else {
              return this.day() || 7;
            }
          }

          function weekdaysRegex(isStrict) {
            if (this._weekdaysParseExact) {
              if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
              }

              if (isStrict) {
                return this._weekdaysStrictRegex;
              } else {
                return this._weekdaysRegex;
              }
            } else {
              if (!hasOwnProp(this, '_weekdaysRegex')) {
                this._weekdaysRegex = defaultWeekdaysRegex;
              }

              return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
            }
          }

          function weekdaysShortRegex(isStrict) {
            if (this._weekdaysParseExact) {
              if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
              }

              if (isStrict) {
                return this._weekdaysShortStrictRegex;
              } else {
                return this._weekdaysShortRegex;
              }
            } else {
              if (!hasOwnProp(this, '_weekdaysShortRegex')) {
                this._weekdaysShortRegex = defaultWeekdaysShortRegex;
              }

              return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
            }
          }

          function weekdaysMinRegex(isStrict) {
            if (this._weekdaysParseExact) {
              if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
              }

              if (isStrict) {
                return this._weekdaysMinStrictRegex;
              } else {
                return this._weekdaysMinRegex;
              }
            } else {
              if (!hasOwnProp(this, '_weekdaysMinRegex')) {
                this._weekdaysMinRegex = defaultWeekdaysMinRegex;
              }

              return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
            }
          }

          function computeWeekdaysParse() {
            function cmpLenRev(a, b) {
              return b.length - a.length;
            }

            var minPieces = [],
                shortPieces = [],
                longPieces = [],
                mixedPieces = [],
                i,
                mom,
                minp,
                shortp,
                longp;

            for (i = 0; i < 7; i++) {
              // make the regex if we don't have it already
              mom = createUTC([2000, 1]).day(i);
              minp = regexEscape(this.weekdaysMin(mom, ''));
              shortp = regexEscape(this.weekdaysShort(mom, ''));
              longp = regexEscape(this.weekdays(mom, ''));
              minPieces.push(minp);
              shortPieces.push(shortp);
              longPieces.push(longp);
              mixedPieces.push(minp);
              mixedPieces.push(shortp);
              mixedPieces.push(longp);
            } // Sorting makes sure if one weekday (or abbr) is a prefix of another it
            // will match the longer piece.


            minPieces.sort(cmpLenRev);
            shortPieces.sort(cmpLenRev);
            longPieces.sort(cmpLenRev);
            mixedPieces.sort(cmpLenRev);
            this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
            this._weekdaysShortRegex = this._weekdaysRegex;
            this._weekdaysMinRegex = this._weekdaysRegex;
            this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
            this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
            this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
          } // FORMATTING


          function hFormat() {
            return this.hours() % 12 || 12;
          }

          function kFormat() {
            return this.hours() || 24;
          }

          addFormatToken('H', ['HH', 2], 0, 'hour');
          addFormatToken('h', ['hh', 2], 0, hFormat);
          addFormatToken('k', ['kk', 2], 0, kFormat);
          addFormatToken('hmm', 0, 0, function () {
            return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
          });
          addFormatToken('hmmss', 0, 0, function () {
            return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
          });
          addFormatToken('Hmm', 0, 0, function () {
            return '' + this.hours() + zeroFill(this.minutes(), 2);
          });
          addFormatToken('Hmmss', 0, 0, function () {
            return '' + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
          });

          function meridiem(token, lowercase) {
            addFormatToken(token, 0, 0, function () {
              return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
            });
          }

          meridiem('a', true);
          meridiem('A', false); // ALIASES

          addUnitAlias('hour', 'h'); // PRIORITY

          addUnitPriority('hour', 13); // PARSING

          function matchMeridiem(isStrict, locale) {
            return locale._meridiemParse;
          }

          addRegexToken('a', matchMeridiem);
          addRegexToken('A', matchMeridiem);
          addRegexToken('H', match1to2);
          addRegexToken('h', match1to2);
          addRegexToken('k', match1to2);
          addRegexToken('HH', match1to2, match2);
          addRegexToken('hh', match1to2, match2);
          addRegexToken('kk', match1to2, match2);
          addRegexToken('hmm', match3to4);
          addRegexToken('hmmss', match5to6);
          addRegexToken('Hmm', match3to4);
          addRegexToken('Hmmss', match5to6);
          addParseToken(['H', 'HH'], HOUR);
          addParseToken(['k', 'kk'], function (input, array, config) {
            var kInput = toInt(input);
            array[HOUR] = kInput === 24 ? 0 : kInput;
          });
          addParseToken(['a', 'A'], function (input, array, config) {
            config._isPm = config._locale.isPM(input);
            config._meridiem = input;
          });
          addParseToken(['h', 'hh'], function (input, array, config) {
            array[HOUR] = toInt(input);
            getParsingFlags(config).bigHour = true;
          });
          addParseToken('hmm', function (input, array, config) {
            var pos = input.length - 2;
            array[HOUR] = toInt(input.substr(0, pos));
            array[MINUTE] = toInt(input.substr(pos));
            getParsingFlags(config).bigHour = true;
          });
          addParseToken('hmmss', function (input, array, config) {
            var pos1 = input.length - 4,
                pos2 = input.length - 2;
            array[HOUR] = toInt(input.substr(0, pos1));
            array[MINUTE] = toInt(input.substr(pos1, 2));
            array[SECOND] = toInt(input.substr(pos2));
            getParsingFlags(config).bigHour = true;
          });
          addParseToken('Hmm', function (input, array, config) {
            var pos = input.length - 2;
            array[HOUR] = toInt(input.substr(0, pos));
            array[MINUTE] = toInt(input.substr(pos));
          });
          addParseToken('Hmmss', function (input, array, config) {
            var pos1 = input.length - 4,
                pos2 = input.length - 2;
            array[HOUR] = toInt(input.substr(0, pos1));
            array[MINUTE] = toInt(input.substr(pos1, 2));
            array[SECOND] = toInt(input.substr(pos2));
          }); // LOCALES

          function localeIsPM(input) {
            // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
            // Using charAt should be more compatible.
            return (input + '').toLowerCase().charAt(0) === 'p';
          }

          var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i,
              // Setting the hour should keep the time, because the user explicitly
          // specified which hour they want. So trying to maintain the same hour (in
          // a new timezone) makes sense. Adding/subtracting hours does not follow
          // this rule.
          getSetHour = makeGetSet('Hours', true);

          function localeMeridiem(hours, minutes, isLower) {
            if (hours > 11) {
              return isLower ? 'pm' : 'PM';
            } else {
              return isLower ? 'am' : 'AM';
            }
          }

          var baseConfig = {
            calendar: defaultCalendar,
            longDateFormat: defaultLongDateFormat,
            invalidDate: defaultInvalidDate,
            ordinal: defaultOrdinal,
            dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
            relativeTime: defaultRelativeTime,
            months: defaultLocaleMonths,
            monthsShort: defaultLocaleMonthsShort,
            week: defaultLocaleWeek,
            weekdays: defaultLocaleWeekdays,
            weekdaysMin: defaultLocaleWeekdaysMin,
            weekdaysShort: defaultLocaleWeekdaysShort,
            meridiemParse: defaultLocaleMeridiemParse
          }; // internal storage for locale config files

          var locales = {},
              localeFamilies = {},
              globalLocale;

          function commonPrefix(arr1, arr2) {
            var i,
                minl = Math.min(arr1.length, arr2.length);

            for (i = 0; i < minl; i += 1) {
              if (arr1[i] !== arr2[i]) {
                return i;
              }
            }

            return minl;
          }

          function normalizeLocale(key) {
            return key ? key.toLowerCase().replace('_', '-') : key;
          } // pick the locale from the array
          // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
          // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root


          function chooseLocale(names) {
            var i = 0,
                j,
                next,
                locale,
                split;

            while (i < names.length) {
              split = normalizeLocale(names[i]).split('-');
              j = split.length;
              next = normalizeLocale(names[i + 1]);
              next = next ? next.split('-') : null;

              while (j > 0) {
                locale = loadLocale(split.slice(0, j).join('-'));

                if (locale) {
                  return locale;
                }

                if (next && next.length >= j && commonPrefix(split, next) >= j - 1) {
                  //the next array item is better than a shallower substring of this one
                  break;
                }

                j--;
              }

              i++;
            }

            return globalLocale;
          }

          function loadLocale(name) {
            var oldLocale = null,
                aliasedRequire; // TODO: Find a better way to register and load all the locales in Node

            if (locales[name] === undefined && typeof module !== 'undefined' && module && module.exports) {
              try {
                oldLocale = globalLocale._abbr;
                aliasedRequire = require;

                __webpack_require__("RnhZ")("./" + name);

                getSetGlobalLocale(oldLocale);
              } catch (e) {
                // mark as not found to avoid repeating expensive file require call causing high CPU
                // when trying to find en-US, en_US, en-us for every format call
                locales[name] = null; // null means not found
              }
            }

            return locales[name];
          } // This function will load locale and then set the global locale.  If
          // no arguments are passed in, it will simply return the current global
          // locale key.


          function getSetGlobalLocale(key, values) {
            var data;

            if (key) {
              if (isUndefined(values)) {
                data = getLocale(key);
              } else {
                data = defineLocale(key, values);
              }

              if (data) {
                // moment.duration._locale = moment._locale = data;
                globalLocale = data;
              } else {
                if (typeof console !== 'undefined' && console.warn) {
                  //warn user if arguments are passed but the locale could not be set
                  console.warn('Locale ' + key + ' not found. Did you forget to load it?');
                }
              }
            }

            return globalLocale._abbr;
          }

          function defineLocale(name, config) {
            if (config !== null) {
              var locale,
                  parentConfig = baseConfig;
              config.abbr = name;

              if (locales[name] != null) {
                deprecateSimple('defineLocaleOverride', 'use moment.updateLocale(localeName, config) to change ' + 'an existing locale. moment.defineLocale(localeName, ' + 'config) should only be used for creating a new locale ' + 'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
                parentConfig = locales[name]._config;
              } else if (config.parentLocale != null) {
                if (locales[config.parentLocale] != null) {
                  parentConfig = locales[config.parentLocale]._config;
                } else {
                  locale = loadLocale(config.parentLocale);

                  if (locale != null) {
                    parentConfig = locale._config;
                  } else {
                    if (!localeFamilies[config.parentLocale]) {
                      localeFamilies[config.parentLocale] = [];
                    }

                    localeFamilies[config.parentLocale].push({
                      name: name,
                      config: config
                    });
                    return null;
                  }
                }
              }

              locales[name] = new Locale(mergeConfigs(parentConfig, config));

              if (localeFamilies[name]) {
                localeFamilies[name].forEach(function (x) {
                  defineLocale(x.name, x.config);
                });
              } // backwards compat for now: also set the locale
              // make sure we set the locale AFTER all child locales have been
              // created, so we won't end up with the child locale set.


              getSetGlobalLocale(name);
              return locales[name];
            } else {
              // useful for testing
              delete locales[name];
              return null;
            }
          }

          function updateLocale(name, config) {
            if (config != null) {
              var locale,
                  tmpLocale,
                  parentConfig = baseConfig;

              if (locales[name] != null && locales[name].parentLocale != null) {
                // Update existing child locale in-place to avoid memory-leaks
                locales[name].set(mergeConfigs(locales[name]._config, config));
              } else {
                // MERGE
                tmpLocale = loadLocale(name);

                if (tmpLocale != null) {
                  parentConfig = tmpLocale._config;
                }

                config = mergeConfigs(parentConfig, config);

                if (tmpLocale == null) {
                  // updateLocale is called for creating a new locale
                  // Set abbr so it will have a name (getters return
                  // undefined otherwise).
                  config.abbr = name;
                }

                locale = new Locale(config);
                locale.parentLocale = locales[name];
                locales[name] = locale;
              } // backwards compat for now: also set the locale


              getSetGlobalLocale(name);
            } else {
              // pass null for config to unupdate, useful for tests
              if (locales[name] != null) {
                if (locales[name].parentLocale != null) {
                  locales[name] = locales[name].parentLocale;

                  if (name === getSetGlobalLocale()) {
                    getSetGlobalLocale(name);
                  }
                } else if (locales[name] != null) {
                  delete locales[name];
                }
              }
            }

            return locales[name];
          } // returns locale data


          function getLocale(key) {
            var locale;

            if (key && key._locale && key._locale._abbr) {
              key = key._locale._abbr;
            }

            if (!key) {
              return globalLocale;
            }

            if (!isArray(key)) {
              //short-circuit everything else
              locale = loadLocale(key);

              if (locale) {
                return locale;
              }

              key = [key];
            }

            return chooseLocale(key);
          }

          function listLocales() {
            return keys(locales);
          }

          function checkOverflow(m) {
            var overflow,
                a = m._a;

            if (a && getParsingFlags(m).overflow === -2) {
              overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;

              if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                overflow = DATE;
              }

              if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                overflow = WEEK;
              }

              if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                overflow = WEEKDAY;
              }

              getParsingFlags(m).overflow = overflow;
            }

            return m;
          } // iso 8601 regex
          // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)


          var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
              basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
              tzRegex = /Z|[+-]\d\d(?::?\d\d)?/,
              isoDates = [['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/], ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/], ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/], ['GGGG-[W]WW', /\d{4}-W\d\d/, false], ['YYYY-DDD', /\d{4}-\d{3}/], ['YYYY-MM', /\d{4}-\d\d/, false], ['YYYYYYMMDD', /[+-]\d{10}/], ['YYYYMMDD', /\d{8}/], ['GGGG[W]WWE', /\d{4}W\d{3}/], ['GGGG[W]WW', /\d{4}W\d{2}/, false], ['YYYYDDD', /\d{7}/], ['YYYYMM', /\d{6}/, false], ['YYYY', /\d{4}/, false]],
              // iso time formats and regexes
          isoTimes = [['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/], ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/], ['HH:mm:ss', /\d\d:\d\d:\d\d/], ['HH:mm', /\d\d:\d\d/], ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/], ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/], ['HHmmss', /\d\d\d\d\d\d/], ['HHmm', /\d\d\d\d/], ['HH', /\d\d/]],
              aspNetJsonRegex = /^\/?Date\((-?\d+)/i,
              // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
          rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,
              obsOffsets = {
            UT: 0,
            GMT: 0,
            EDT: -4 * 60,
            EST: -5 * 60,
            CDT: -5 * 60,
            CST: -6 * 60,
            MDT: -6 * 60,
            MST: -7 * 60,
            PDT: -7 * 60,
            PST: -8 * 60
          }; // date from iso format

          function configFromISO(config) {
            var i,
                l,
                string = config._i,
                match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
                allowTime,
                dateFormat,
                timeFormat,
                tzFormat;

            if (match) {
              getParsingFlags(config).iso = true;

              for (i = 0, l = isoDates.length; i < l; i++) {
                if (isoDates[i][1].exec(match[1])) {
                  dateFormat = isoDates[i][0];
                  allowTime = isoDates[i][2] !== false;
                  break;
                }
              }

              if (dateFormat == null) {
                config._isValid = false;
                return;
              }

              if (match[3]) {
                for (i = 0, l = isoTimes.length; i < l; i++) {
                  if (isoTimes[i][1].exec(match[3])) {
                    // match[2] should be 'T' or space
                    timeFormat = (match[2] || ' ') + isoTimes[i][0];
                    break;
                  }
                }

                if (timeFormat == null) {
                  config._isValid = false;
                  return;
                }
              }

              if (!allowTime && timeFormat != null) {
                config._isValid = false;
                return;
              }

              if (match[4]) {
                if (tzRegex.exec(match[4])) {
                  tzFormat = 'Z';
                } else {
                  config._isValid = false;
                  return;
                }
              }

              config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
              configFromStringAndFormat(config);
            } else {
              config._isValid = false;
            }
          }

          function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
            var result = [untruncateYear(yearStr), defaultLocaleMonthsShort.indexOf(monthStr), parseInt(dayStr, 10), parseInt(hourStr, 10), parseInt(minuteStr, 10)];

            if (secondStr) {
              result.push(parseInt(secondStr, 10));
            }

            return result;
          }

          function untruncateYear(yearStr) {
            var year = parseInt(yearStr, 10);

            if (year <= 49) {
              return 2000 + year;
            } else if (year <= 999) {
              return 1900 + year;
            }

            return year;
          }

          function preprocessRFC2822(s) {
            // Remove comments and folding whitespace and replace multiple-spaces with a single space
            return s.replace(/\([^)]*\)|[\n\t]/g, ' ').replace(/(\s\s+)/g, ' ').replace(/^\s\s*/, '').replace(/\s\s*$/, '');
          }

          function checkWeekday(weekdayStr, parsedInput, config) {
            if (weekdayStr) {
              // TODO: Replace the vanilla JS Date object with an independent day-of-week check.
              var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
                  weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();

              if (weekdayProvided !== weekdayActual) {
                getParsingFlags(config).weekdayMismatch = true;
                config._isValid = false;
                return false;
              }
            }

            return true;
          }

          function calculateOffset(obsOffset, militaryOffset, numOffset) {
            if (obsOffset) {
              return obsOffsets[obsOffset];
            } else if (militaryOffset) {
              // the only allowed military tz is Z
              return 0;
            } else {
              var hm = parseInt(numOffset, 10),
                  m = hm % 100,
                  h = (hm - m) / 100;
              return h * 60 + m;
            }
          } // date and time from ref 2822 format


          function configFromRFC2822(config) {
            var match = rfc2822.exec(preprocessRFC2822(config._i)),
                parsedArray;

            if (match) {
              parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);

              if (!checkWeekday(match[1], parsedArray, config)) {
                return;
              }

              config._a = parsedArray;
              config._tzm = calculateOffset(match[8], match[9], match[10]);
              config._d = createUTCDate.apply(null, config._a);

              config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

              getParsingFlags(config).rfc2822 = true;
            } else {
              config._isValid = false;
            }
          } // date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict


          function configFromString(config) {
            var matched = aspNetJsonRegex.exec(config._i);

            if (matched !== null) {
              config._d = new Date(+matched[1]);
              return;
            }

            configFromISO(config);

            if (config._isValid === false) {
              delete config._isValid;
            } else {
              return;
            }

            configFromRFC2822(config);

            if (config._isValid === false) {
              delete config._isValid;
            } else {
              return;
            }

            if (config._strict) {
              config._isValid = false;
            } else {
              // Final attempt, use Input Fallback
              hooks.createFromInputFallback(config);
            }
          }

          hooks.createFromInputFallback = deprecate('value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' + 'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' + 'discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.', function (config) {
            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
          }); // Pick the first defined of two or three arguments.

          function defaults(a, b, c) {
            if (a != null) {
              return a;
            }

            if (b != null) {
              return b;
            }

            return c;
          }

          function currentDateArray(config) {
            // hooks is actually the exported moment object
            var nowValue = new Date(hooks.now());

            if (config._useUTC) {
              return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
            }

            return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
          } // convert an array to a date.
          // the array should mirror the parameters below
          // note: all values past the year are optional and will default to the lowest possible value.
          // [year, month, day , hour, minute, second, millisecond]


          function configFromArray(config) {
            var i,
                date,
                input = [],
                currentDate,
                expectedWeekday,
                yearToUse;

            if (config._d) {
              return;
            }

            currentDate = currentDateArray(config); //compute day of the year from weeks and weekdays

            if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
              dayOfYearFromWeekInfo(config);
            } //if the day of the year is set, figure out what it is


            if (config._dayOfYear != null) {
              yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

              if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
                getParsingFlags(config)._overflowDayOfYear = true;
              }

              date = createUTCDate(yearToUse, 0, config._dayOfYear);
              config._a[MONTH] = date.getUTCMonth();
              config._a[DATE] = date.getUTCDate();
            } // Default to current date.
            // * if no year, month, day of month are given, default to today
            // * if day of month is given, default month and year
            // * if month is given, default only year
            // * if year is given, don't default anything


            for (i = 0; i < 3 && config._a[i] == null; ++i) {
              config._a[i] = input[i] = currentDate[i];
            } // Zero out whatever was not defaulted, including time


            for (; i < 7; i++) {
              config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];
            } // Check for 24:00:00.000


            if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
              config._nextDay = true;
              config._a[HOUR] = 0;
            }

            config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
            expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay(); // Apply timezone offset from input. The actual utcOffset can be changed
            // with parseZone.

            if (config._tzm != null) {
              config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
            }

            if (config._nextDay) {
              config._a[HOUR] = 24;
            } // check for mismatching day of week


            if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {
              getParsingFlags(config).weekdayMismatch = true;
            }
          }

          function dayOfYearFromWeekInfo(config) {
            var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;
            w = config._w;

            if (w.GG != null || w.W != null || w.E != null) {
              dow = 1;
              doy = 4; // TODO: We need to take the current isoWeekYear, but that depends on
              // how we interpret now (local, utc, fixed offset). So create
              // a now version of current config (take local/utc/offset flags, and
              // create now).

              weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
              week = defaults(w.W, 1);
              weekday = defaults(w.E, 1);

              if (weekday < 1 || weekday > 7) {
                weekdayOverflow = true;
              }
            } else {
              dow = config._locale._week.dow;
              doy = config._locale._week.doy;
              curWeek = weekOfYear(createLocal(), dow, doy);
              weekYear = defaults(w.gg, config._a[YEAR], curWeek.year); // Default to current week.

              week = defaults(w.w, curWeek.week);

              if (w.d != null) {
                // weekday -- low day numbers are considered next week
                weekday = w.d;

                if (weekday < 0 || weekday > 6) {
                  weekdayOverflow = true;
                }
              } else if (w.e != null) {
                // local weekday -- counting starts from beginning of week
                weekday = w.e + dow;

                if (w.e < 0 || w.e > 6) {
                  weekdayOverflow = true;
                }
              } else {
                // default to beginning of week
                weekday = dow;
              }
            }

            if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
              getParsingFlags(config)._overflowWeeks = true;
            } else if (weekdayOverflow != null) {
              getParsingFlags(config)._overflowWeekday = true;
            } else {
              temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
              config._a[YEAR] = temp.year;
              config._dayOfYear = temp.dayOfYear;
            }
          } // constant that refers to the ISO standard


          hooks.ISO_8601 = function () {}; // constant that refers to the RFC 2822 form


          hooks.RFC_2822 = function () {}; // date from string and format string


          function configFromStringAndFormat(config) {
            // TODO: Move this to another part of the creation flow to prevent circular deps
            if (config._f === hooks.ISO_8601) {
              configFromISO(config);
              return;
            }

            if (config._f === hooks.RFC_2822) {
              configFromRFC2822(config);
              return;
            }

            config._a = [];
            getParsingFlags(config).empty = true; // This array is used to make a Date, either with `new Date` or `Date.UTC`

            var string = '' + config._i,
                i,
                parsedInput,
                tokens,
                token,
                skipped,
                stringLength = string.length,
                totalParsedInputLength = 0,
                era;
            tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

            for (i = 0; i < tokens.length; i++) {
              token = tokens[i];
              parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];

              if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));

                if (skipped.length > 0) {
                  getParsingFlags(config).unusedInput.push(skipped);
                }

                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                totalParsedInputLength += parsedInput.length;
              } // don't parse if it's not a known token


              if (formatTokenFunctions[token]) {
                if (parsedInput) {
                  getParsingFlags(config).empty = false;
                } else {
                  getParsingFlags(config).unusedTokens.push(token);
                }

                addTimeToArrayFromToken(token, parsedInput, config);
              } else if (config._strict && !parsedInput) {
                getParsingFlags(config).unusedTokens.push(token);
              }
            } // add remaining unparsed input length to the string


            getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;

            if (string.length > 0) {
              getParsingFlags(config).unusedInput.push(string);
            } // clear _12h flag if hour is <= 12


            if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) {
              getParsingFlags(config).bigHour = undefined;
            }

            getParsingFlags(config).parsedDateParts = config._a.slice(0);
            getParsingFlags(config).meridiem = config._meridiem; // handle meridiem

            config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem); // handle era

            era = getParsingFlags(config).era;

            if (era !== null) {
              config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
            }

            configFromArray(config);
            checkOverflow(config);
          }

          function meridiemFixWrap(locale, hour, meridiem) {
            var isPm;

            if (meridiem == null) {
              // nothing to do
              return hour;
            }

            if (locale.meridiemHour != null) {
              return locale.meridiemHour(hour, meridiem);
            } else if (locale.isPM != null) {
              // Fallback
              isPm = locale.isPM(meridiem);

              if (isPm && hour < 12) {
                hour += 12;
              }

              if (!isPm && hour === 12) {
                hour = 0;
              }

              return hour;
            } else {
              // this is not supposed to happen
              return hour;
            }
          } // date from string and array of format strings


          function configFromStringAndArray(config) {
            var tempConfig,
                bestMoment,
                scoreToBeat,
                i,
                currentScore,
                validFormatFound,
                bestFormatIsValid = false;

            if (config._f.length === 0) {
              getParsingFlags(config).invalidFormat = true;
              config._d = new Date(NaN);
              return;
            }

            for (i = 0; i < config._f.length; i++) {
              currentScore = 0;
              validFormatFound = false;
              tempConfig = copyConfig({}, config);

              if (config._useUTC != null) {
                tempConfig._useUTC = config._useUTC;
              }

              tempConfig._f = config._f[i];
              configFromStringAndFormat(tempConfig);

              if (isValid(tempConfig)) {
                validFormatFound = true;
              } // if there is any input that was not parsed add a penalty for that format


              currentScore += getParsingFlags(tempConfig).charsLeftOver; //or tokens

              currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
              getParsingFlags(tempConfig).score = currentScore;

              if (!bestFormatIsValid) {
                if (scoreToBeat == null || currentScore < scoreToBeat || validFormatFound) {
                  scoreToBeat = currentScore;
                  bestMoment = tempConfig;

                  if (validFormatFound) {
                    bestFormatIsValid = true;
                  }
                }
              } else {
                if (currentScore < scoreToBeat) {
                  scoreToBeat = currentScore;
                  bestMoment = tempConfig;
                }
              }
            }

            extend(config, bestMoment || tempConfig);
          }

          function configFromObject(config) {
            if (config._d) {
              return;
            }

            var i = normalizeObjectUnits(config._i),
                dayOrDate = i.day === undefined ? i.date : i.day;
            config._a = map([i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond], function (obj) {
              return obj && parseInt(obj, 10);
            });
            configFromArray(config);
          }

          function createFromConfig(config) {
            var res = new Moment(checkOverflow(prepareConfig(config)));

            if (res._nextDay) {
              // Adding is smart enough around DST
              res.add(1, 'd');
              res._nextDay = undefined;
            }

            return res;
          }

          function prepareConfig(config) {
            var input = config._i,
                format = config._f;
            config._locale = config._locale || getLocale(config._l);

            if (input === null || format === undefined && input === '') {
              return createInvalid({
                nullInput: true
              });
            }

            if (typeof input === 'string') {
              config._i = input = config._locale.preparse(input);
            }

            if (isMoment(input)) {
              return new Moment(checkOverflow(input));
            } else if (isDate(input)) {
              config._d = input;
            } else if (isArray(format)) {
              configFromStringAndArray(config);
            } else if (format) {
              configFromStringAndFormat(config);
            } else {
              configFromInput(config);
            }

            if (!isValid(config)) {
              config._d = null;
            }

            return config;
          }

          function configFromInput(config) {
            var input = config._i;

            if (isUndefined(input)) {
              config._d = new Date(hooks.now());
            } else if (isDate(input)) {
              config._d = new Date(input.valueOf());
            } else if (typeof input === 'string') {
              configFromString(config);
            } else if (isArray(input)) {
              config._a = map(input.slice(0), function (obj) {
                return parseInt(obj, 10);
              });
              configFromArray(config);
            } else if (isObject(input)) {
              configFromObject(config);
            } else if (isNumber(input)) {
              // from milliseconds
              config._d = new Date(input);
            } else {
              hooks.createFromInputFallback(config);
            }
          }

          function createLocalOrUTC(input, format, locale, strict, isUTC) {
            var c = {};

            if (format === true || format === false) {
              strict = format;
              format = undefined;
            }

            if (locale === true || locale === false) {
              strict = locale;
              locale = undefined;
            }

            if (isObject(input) && isObjectEmpty(input) || isArray(input) && input.length === 0) {
              input = undefined;
            } // object construction must be done this way.
            // https://github.com/moment/moment/issues/1423


            c._isAMomentObject = true;
            c._useUTC = c._isUTC = isUTC;
            c._l = locale;
            c._i = input;
            c._f = format;
            c._strict = strict;
            return createFromConfig(c);
          }

          function createLocal(input, format, locale, strict) {
            return createLocalOrUTC(input, format, locale, strict, false);
          }

          var prototypeMin = deprecate('moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/', function () {
            var other = createLocal.apply(null, arguments);

            if (this.isValid() && other.isValid()) {
              return other < this ? this : other;
            } else {
              return createInvalid();
            }
          }),
              prototypeMax = deprecate('moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/', function () {
            var other = createLocal.apply(null, arguments);

            if (this.isValid() && other.isValid()) {
              return other > this ? this : other;
            } else {
              return createInvalid();
            }
          }); // Pick a moment m from moments so that m[fn](other) is true for all
          // other. This relies on the function fn to be transitive.
          //
          // moments should either be an array of moment objects or an array, whose
          // first element is an array of moment objects.

          function pickBy(fn, moments) {
            var res, i;

            if (moments.length === 1 && isArray(moments[0])) {
              moments = moments[0];
            }

            if (!moments.length) {
              return createLocal();
            }

            res = moments[0];

            for (i = 1; i < moments.length; ++i) {
              if (!moments[i].isValid() || moments[i][fn](res)) {
                res = moments[i];
              }
            }

            return res;
          } // TODO: Use [].sort instead?


          function min() {
            var args = [].slice.call(arguments, 0);
            return pickBy('isBefore', args);
          }

          function max() {
            var args = [].slice.call(arguments, 0);
            return pickBy('isAfter', args);
          }

          var now = function now() {
            return Date.now ? Date.now() : +new Date();
          };

          var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];

          function isDurationValid(m) {
            var key,
                unitHasDecimal = false,
                i;

            for (key in m) {
              if (hasOwnProp(m, key) && !(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
                return false;
              }
            }

            for (i = 0; i < ordering.length; ++i) {
              if (m[ordering[i]]) {
                if (unitHasDecimal) {
                  return false; // only allow non-integers for smallest unit
                }

                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                  unitHasDecimal = true;
                }
              }
            }

            return true;
          }

          function isValid$1() {
            return this._isValid;
          }

          function createInvalid$1() {
            return createDuration(NaN);
          }

          function Duration(duration) {
            var normalizedInput = normalizeObjectUnits(duration),
                years = normalizedInput.year || 0,
                quarters = normalizedInput.quarter || 0,
                months = normalizedInput.month || 0,
                weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
                days = normalizedInput.day || 0,
                hours = normalizedInput.hour || 0,
                minutes = normalizedInput.minute || 0,
                seconds = normalizedInput.second || 0,
                milliseconds = normalizedInput.millisecond || 0;
            this._isValid = isDurationValid(normalizedInput); // representation for dateAddRemove

            this._milliseconds = +milliseconds + seconds * 1e3 + // 1000
            minutes * 6e4 + // 1000 * 60
            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
            // Because of dateAddRemove treats 24 hours as different from a
            // day when working around DST, we need to store them separately

            this._days = +days + weeks * 7; // It is impossible to translate months into days without knowing
            // which months you are are talking about, so we have to store
            // it separately.

            this._months = +months + quarters * 3 + years * 12;
            this._data = {};
            this._locale = getLocale();

            this._bubble();
          }

          function isDuration(obj) {
            return obj instanceof Duration;
          }

          function absRound(number) {
            if (number < 0) {
              return Math.round(-1 * number) * -1;
            } else {
              return Math.round(number);
            }
          } // compare two arrays, return the number of differences


          function compareArrays(array1, array2, dontConvert) {
            var len = Math.min(array1.length, array2.length),
                lengthDiff = Math.abs(array1.length - array2.length),
                diffs = 0,
                i;

            for (i = 0; i < len; i++) {
              if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {
                diffs++;
              }
            }

            return diffs + lengthDiff;
          } // FORMATTING


          function offset(token, separator) {
            addFormatToken(token, 0, 0, function () {
              var offset = this.utcOffset(),
                  sign = '+';

              if (offset < 0) {
                offset = -offset;
                sign = '-';
              }

              return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~offset % 60, 2);
            });
          }

          offset('Z', ':');
          offset('ZZ', ''); // PARSING

          addRegexToken('Z', matchShortOffset);
          addRegexToken('ZZ', matchShortOffset);
          addParseToken(['Z', 'ZZ'], function (input, array, config) {
            config._useUTC = true;
            config._tzm = offsetFromString(matchShortOffset, input);
          }); // HELPERS
          // timezone chunker
          // '+10:00' > ['10',  '00']
          // '-1530'  > ['-15', '30']

          var chunkOffset = /([\+\-]|\d\d)/gi;

          function offsetFromString(matcher, string) {
            var matches = (string || '').match(matcher),
                chunk,
                parts,
                minutes;

            if (matches === null) {
              return null;
            }

            chunk = matches[matches.length - 1] || [];
            parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
            minutes = +(parts[1] * 60) + toInt(parts[2]);
            return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
          } // Return a moment from input, that is local/utc/zone equivalent to model.


          function cloneWithOffset(input, model) {
            var res, diff;

            if (model._isUTC) {
              res = model.clone();
              diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf(); // Use low-level api, because this fn is low-level api.

              res._d.setTime(res._d.valueOf() + diff);

              hooks.updateOffset(res, false);
              return res;
            } else {
              return createLocal(input).local();
            }
          }

          function getDateOffset(m) {
            // On Firefox.24 Date#getTimezoneOffset returns a floating point.
            // https://github.com/moment/moment/pull/1871
            return -Math.round(m._d.getTimezoneOffset());
          } // HOOKS
          // This function will be called whenever a moment is mutated.
          // It is intended to keep the offset in sync with the timezone.


          hooks.updateOffset = function () {}; // MOMENTS
          // keepLocalTime = true means only change the timezone, without
          // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
          // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
          // +0200, so we adjust the time as needed, to be valid.
          //
          // Keeping the time actually adds/subtracts (one hour)
          // from the actual represented time. That is why we call updateOffset
          // a second time. In case it wants us to change the offset again
          // _changeInProgress == true case, then we have to adjust, because
          // there is no such time in the given timezone.


          function getSetOffset(input, keepLocalTime, keepMinutes) {
            var offset = this._offset || 0,
                localAdjust;

            if (!this.isValid()) {
              return input != null ? this : NaN;
            }

            if (input != null) {
              if (typeof input === 'string') {
                input = offsetFromString(matchShortOffset, input);

                if (input === null) {
                  return this;
                }
              } else if (Math.abs(input) < 16 && !keepMinutes) {
                input = input * 60;
              }

              if (!this._isUTC && keepLocalTime) {
                localAdjust = getDateOffset(this);
              }

              this._offset = input;
              this._isUTC = true;

              if (localAdjust != null) {
                this.add(localAdjust, 'm');
              }

              if (offset !== input) {
                if (!keepLocalTime || this._changeInProgress) {
                  addSubtract(this, createDuration(input - offset, 'm'), 1, false);
                } else if (!this._changeInProgress) {
                  this._changeInProgress = true;
                  hooks.updateOffset(this, true);
                  this._changeInProgress = null;
                }
              }

              return this;
            } else {
              return this._isUTC ? offset : getDateOffset(this);
            }
          }

          function getSetZone(input, keepLocalTime) {
            if (input != null) {
              if (typeof input !== 'string') {
                input = -input;
              }

              this.utcOffset(input, keepLocalTime);
              return this;
            } else {
              return -this.utcOffset();
            }
          }

          function setOffsetToUTC(keepLocalTime) {
            return this.utcOffset(0, keepLocalTime);
          }

          function setOffsetToLocal(keepLocalTime) {
            if (this._isUTC) {
              this.utcOffset(0, keepLocalTime);
              this._isUTC = false;

              if (keepLocalTime) {
                this.subtract(getDateOffset(this), 'm');
              }
            }

            return this;
          }

          function setOffsetToParsedOffset() {
            if (this._tzm != null) {
              this.utcOffset(this._tzm, false, true);
            } else if (typeof this._i === 'string') {
              var tZone = offsetFromString(matchOffset, this._i);

              if (tZone != null) {
                this.utcOffset(tZone);
              } else {
                this.utcOffset(0, true);
              }
            }

            return this;
          }

          function hasAlignedHourOffset(input) {
            if (!this.isValid()) {
              return false;
            }

            input = input ? createLocal(input).utcOffset() : 0;
            return (this.utcOffset() - input) % 60 === 0;
          }

          function isDaylightSavingTime() {
            return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
          }

          function isDaylightSavingTimeShifted() {
            if (!isUndefined(this._isDSTShifted)) {
              return this._isDSTShifted;
            }

            var c = {},
                other;
            copyConfig(c, this);
            c = prepareConfig(c);

            if (c._a) {
              other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
              this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
            } else {
              this._isDSTShifted = false;
            }

            return this._isDSTShifted;
          }

          function isLocal() {
            return this.isValid() ? !this._isUTC : false;
          }

          function isUtcOffset() {
            return this.isValid() ? this._isUTC : false;
          }

          function isUtc() {
            return this.isValid() ? this._isUTC && this._offset === 0 : false;
          } // ASP.NET json date format regex


          var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,
              // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
          // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
          // and further modified to allow for strings containing both week and day
          isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

          function createDuration(input, key) {
            var duration = input,
                // matching against regexp is expensive, do it on demand
            match = null,
                sign,
                ret,
                diffRes;

            if (isDuration(input)) {
              duration = {
                ms: input._milliseconds,
                d: input._days,
                M: input._months
              };
            } else if (isNumber(input) || !isNaN(+input)) {
              duration = {};

              if (key) {
                duration[key] = +input;
              } else {
                duration.milliseconds = +input;
              }
            } else if (match = aspNetRegex.exec(input)) {
              sign = match[1] === '-' ? -1 : 1;
              duration = {
                y: 0,
                d: toInt(match[DATE]) * sign,
                h: toInt(match[HOUR]) * sign,
                m: toInt(match[MINUTE]) * sign,
                s: toInt(match[SECOND]) * sign,
                ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match

              };
            } else if (match = isoRegex.exec(input)) {
              sign = match[1] === '-' ? -1 : 1;
              duration = {
                y: parseIso(match[2], sign),
                M: parseIso(match[3], sign),
                w: parseIso(match[4], sign),
                d: parseIso(match[5], sign),
                h: parseIso(match[6], sign),
                m: parseIso(match[7], sign),
                s: parseIso(match[8], sign)
              };
            } else if (duration == null) {
              // checks for null or undefined
              duration = {};
            } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
              diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));
              duration = {};
              duration.ms = diffRes.milliseconds;
              duration.M = diffRes.months;
            }

            ret = new Duration(duration);

            if (isDuration(input) && hasOwnProp(input, '_locale')) {
              ret._locale = input._locale;
            }

            if (isDuration(input) && hasOwnProp(input, '_isValid')) {
              ret._isValid = input._isValid;
            }

            return ret;
          }

          createDuration.fn = Duration.prototype;
          createDuration.invalid = createInvalid$1;

          function parseIso(inp, sign) {
            // We'd normally use ~~inp for this, but unfortunately it also
            // converts floats to ints.
            // inp may be undefined, so careful calling replace on it.
            var res = inp && parseFloat(inp.replace(',', '.')); // apply sign while we're at it

            return (isNaN(res) ? 0 : res) * sign;
          }

          function positiveMomentsDifference(base, other) {
            var res = {};
            res.months = other.month() - base.month() + (other.year() - base.year()) * 12;

            if (base.clone().add(res.months, 'M').isAfter(other)) {
              --res.months;
            }

            res.milliseconds = +other - +base.clone().add(res.months, 'M');
            return res;
          }

          function momentsDifference(base, other) {
            var res;

            if (!(base.isValid() && other.isValid())) {
              return {
                milliseconds: 0,
                months: 0
              };
            }

            other = cloneWithOffset(other, base);

            if (base.isBefore(other)) {
              res = positiveMomentsDifference(base, other);
            } else {
              res = positiveMomentsDifference(other, base);
              res.milliseconds = -res.milliseconds;
              res.months = -res.months;
            }

            return res;
          } // TODO: remove 'name' arg after deprecation is removed


          function createAdder(direction, name) {
            return function (val, period) {
              var dur, tmp; //invert the arguments, but complain about it

              if (period !== null && !isNaN(+period)) {
                deprecateSimple(name, 'moment().' + name + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' + 'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
                tmp = val;
                val = period;
                period = tmp;
              }

              dur = createDuration(val, period);
              addSubtract(this, dur, direction);
              return this;
            };
          }

          function addSubtract(mom, duration, isAdding, updateOffset) {
            var milliseconds = duration._milliseconds,
                days = absRound(duration._days),
                months = absRound(duration._months);

            if (!mom.isValid()) {
              // No op
              return;
            }

            updateOffset = updateOffset == null ? true : updateOffset;

            if (months) {
              setMonth(mom, get(mom, 'Month') + months * isAdding);
            }

            if (days) {
              set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
            }

            if (milliseconds) {
              mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
            }

            if (updateOffset) {
              hooks.updateOffset(mom, days || months);
            }
          }

          var add = createAdder(1, 'add'),
              subtract = createAdder(-1, 'subtract');

          function isString(input) {
            return typeof input === 'string' || input instanceof String;
          } // type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined


          function isMomentInput(input) {
            return isMoment(input) || isDate(input) || isString(input) || isNumber(input) || isNumberOrStringArray(input) || isMomentInputObject(input) || input === null || input === undefined;
          }

          function isMomentInputObject(input) {
            var objectTest = isObject(input) && !isObjectEmpty(input),
                propertyTest = false,
                properties = ['years', 'year', 'y', 'months', 'month', 'M', 'days', 'day', 'd', 'dates', 'date', 'D', 'hours', 'hour', 'h', 'minutes', 'minute', 'm', 'seconds', 'second', 's', 'milliseconds', 'millisecond', 'ms'],
                i,
                property;

            for (i = 0; i < properties.length; i += 1) {
              property = properties[i];
              propertyTest = propertyTest || hasOwnProp(input, property);
            }

            return objectTest && propertyTest;
          }

          function isNumberOrStringArray(input) {
            var arrayTest = isArray(input),
                dataTypeTest = false;

            if (arrayTest) {
              dataTypeTest = input.filter(function (item) {
                return !isNumber(item) && isString(input);
              }).length === 0;
            }

            return arrayTest && dataTypeTest;
          }

          function isCalendarSpec(input) {
            var objectTest = isObject(input) && !isObjectEmpty(input),
                propertyTest = false,
                properties = ['sameDay', 'nextDay', 'lastDay', 'nextWeek', 'lastWeek', 'sameElse'],
                i,
                property;

            for (i = 0; i < properties.length; i += 1) {
              property = properties[i];
              propertyTest = propertyTest || hasOwnProp(input, property);
            }

            return objectTest && propertyTest;
          }

          function getCalendarFormat(myMoment, now) {
            var diff = myMoment.diff(now, 'days', true);
            return diff < -6 ? 'sameElse' : diff < -1 ? 'lastWeek' : diff < 0 ? 'lastDay' : diff < 1 ? 'sameDay' : diff < 2 ? 'nextDay' : diff < 7 ? 'nextWeek' : 'sameElse';
          }

          function calendar$1(time, formats) {
            // Support for single parameter, formats only overload to the calendar function
            if (arguments.length === 1) {
              if (!arguments[0]) {
                time = undefined;
                formats = undefined;
              } else if (isMomentInput(arguments[0])) {
                time = arguments[0];
                formats = undefined;
              } else if (isCalendarSpec(arguments[0])) {
                formats = arguments[0];
                time = undefined;
              }
            } // We want to compare the start of today, vs this.
            // Getting start-of-today depends on whether we're local/utc/offset or not.


            var now = time || createLocal(),
                sod = cloneWithOffset(now, this).startOf('day'),
                format = hooks.calendarFormat(this, sod) || 'sameElse',
                output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);
            return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
          }

          function clone() {
            return new Moment(this);
          }

          function isAfter(input, units) {
            var localInput = isMoment(input) ? input : createLocal(input);

            if (!(this.isValid() && localInput.isValid())) {
              return false;
            }

            units = normalizeUnits(units) || 'millisecond';

            if (units === 'millisecond') {
              return this.valueOf() > localInput.valueOf();
            } else {
              return localInput.valueOf() < this.clone().startOf(units).valueOf();
            }
          }

          function isBefore(input, units) {
            var localInput = isMoment(input) ? input : createLocal(input);

            if (!(this.isValid() && localInput.isValid())) {
              return false;
            }

            units = normalizeUnits(units) || 'millisecond';

            if (units === 'millisecond') {
              return this.valueOf() < localInput.valueOf();
            } else {
              return this.clone().endOf(units).valueOf() < localInput.valueOf();
            }
          }

          function isBetween(from, to, units, inclusivity) {
            var localFrom = isMoment(from) ? from : createLocal(from),
                localTo = isMoment(to) ? to : createLocal(to);

            if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
              return false;
            }

            inclusivity = inclusivity || '()';
            return (inclusivity[0] === '(' ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) && (inclusivity[1] === ')' ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
          }

          function isSame(input, units) {
            var localInput = isMoment(input) ? input : createLocal(input),
                inputMs;

            if (!(this.isValid() && localInput.isValid())) {
              return false;
            }

            units = normalizeUnits(units) || 'millisecond';

            if (units === 'millisecond') {
              return this.valueOf() === localInput.valueOf();
            } else {
              inputMs = localInput.valueOf();
              return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
            }
          }

          function isSameOrAfter(input, units) {
            return this.isSame(input, units) || this.isAfter(input, units);
          }

          function isSameOrBefore(input, units) {
            return this.isSame(input, units) || this.isBefore(input, units);
          }

          function diff(input, units, asFloat) {
            var that, zoneDelta, output;

            if (!this.isValid()) {
              return NaN;
            }

            that = cloneWithOffset(input, this);

            if (!that.isValid()) {
              return NaN;
            }

            zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
            units = normalizeUnits(units);

            switch (units) {
              case 'year':
                output = monthDiff(this, that) / 12;
                break;

              case 'month':
                output = monthDiff(this, that);
                break;

              case 'quarter':
                output = monthDiff(this, that) / 3;
                break;

              case 'second':
                output = (this - that) / 1e3;
                break;
              // 1000

              case 'minute':
                output = (this - that) / 6e4;
                break;
              // 1000 * 60

              case 'hour':
                output = (this - that) / 36e5;
                break;
              // 1000 * 60 * 60

              case 'day':
                output = (this - that - zoneDelta) / 864e5;
                break;
              // 1000 * 60 * 60 * 24, negate dst

              case 'week':
                output = (this - that - zoneDelta) / 6048e5;
                break;
              // 1000 * 60 * 60 * 24 * 7, negate dst

              default:
                output = this - that;
            }

            return asFloat ? output : absFloor(output);
          }

          function monthDiff(a, b) {
            if (a.date() < b.date()) {
              // end-of-month calculations work correct when the start month has more
              // days than the end month.
              return -monthDiff(b, a);
            } // difference in months


            var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),
                // b is in (anchor - 1 month, anchor + 1 month)
            anchor = a.clone().add(wholeMonthDiff, 'months'),
                anchor2,
                adjust;

            if (b - anchor < 0) {
              anchor2 = a.clone().add(wholeMonthDiff - 1, 'months'); // linear across the month

              adjust = (b - anchor) / (anchor - anchor2);
            } else {
              anchor2 = a.clone().add(wholeMonthDiff + 1, 'months'); // linear across the month

              adjust = (b - anchor) / (anchor2 - anchor);
            } //check for negative zero, return zero if negative zero


            return -(wholeMonthDiff + adjust) || 0;
          }

          hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
          hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

          function toString() {
            return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
          }

          function toISOString(keepOffset) {
            if (!this.isValid()) {
              return null;
            }

            var utc = keepOffset !== true,
                m = utc ? this.clone().utc() : this;

            if (m.year() < 0 || m.year() > 9999) {
              return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');
            }

            if (isFunction(Date.prototype.toISOString)) {
              // native implementation is ~50x faster, use it when we can
              if (utc) {
                return this.toDate().toISOString();
              } else {
                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000).toISOString().replace('Z', formatMoment(m, 'Z'));
              }
            }

            return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');
          }
          /**
           * Return a human readable representation of a moment that can
           * also be evaluated to get a new moment which is the same
           *
           * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
           */


          function inspect() {
            if (!this.isValid()) {
              return 'moment.invalid(/* ' + this._i + ' */)';
            }

            var func = 'moment',
                zone = '',
                prefix,
                year,
                datetime,
                suffix;

            if (!this.isLocal()) {
              func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
              zone = 'Z';
            }

            prefix = '[' + func + '("]';
            year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
            datetime = '-MM-DD[T]HH:mm:ss.SSS';
            suffix = zone + '[")]';
            return this.format(prefix + year + datetime + suffix);
          }

          function format(inputString) {
            if (!inputString) {
              inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
            }

            var output = formatMoment(this, inputString);
            return this.localeData().postformat(output);
          }

          function from(time, withoutSuffix) {
            if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
              return createDuration({
                to: this,
                from: time
              }).locale(this.locale()).humanize(!withoutSuffix);
            } else {
              return this.localeData().invalidDate();
            }
          }

          function fromNow(withoutSuffix) {
            return this.from(createLocal(), withoutSuffix);
          }

          function to(time, withoutSuffix) {
            if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
              return createDuration({
                from: this,
                to: time
              }).locale(this.locale()).humanize(!withoutSuffix);
            } else {
              return this.localeData().invalidDate();
            }
          }

          function toNow(withoutSuffix) {
            return this.to(createLocal(), withoutSuffix);
          } // If passed a locale key, it will set the locale for this
          // instance.  Otherwise, it will return the locale configuration
          // variables for this instance.


          function locale(key) {
            var newLocaleData;

            if (key === undefined) {
              return this._locale._abbr;
            } else {
              newLocaleData = getLocale(key);

              if (newLocaleData != null) {
                this._locale = newLocaleData;
              }

              return this;
            }
          }

          var lang = deprecate('moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.', function (key) {
            if (key === undefined) {
              return this.localeData();
            } else {
              return this.locale(key);
            }
          });

          function localeData() {
            return this._locale;
          }

          var MS_PER_SECOND = 1000,
              MS_PER_MINUTE = 60 * MS_PER_SECOND,
              MS_PER_HOUR = 60 * MS_PER_MINUTE,
              MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR; // actual modulo - handles negative numbers (for dates before 1970):

          function mod$1(dividend, divisor) {
            return (dividend % divisor + divisor) % divisor;
          }

          function localStartOfDate(y, m, d) {
            // the date constructor remaps years 0-99 to 1900-1999
            if (y < 100 && y >= 0) {
              // preserve leap years using a full 400 year cycle, then reset
              return new Date(y + 400, m, d) - MS_PER_400_YEARS;
            } else {
              return new Date(y, m, d).valueOf();
            }
          }

          function utcStartOfDate(y, m, d) {
            // Date.UTC remaps years 0-99 to 1900-1999
            if (y < 100 && y >= 0) {
              // preserve leap years using a full 400 year cycle, then reset
              return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
            } else {
              return Date.UTC(y, m, d);
            }
          }

          function startOf(units) {
            var time, startOfDate;
            units = normalizeUnits(units);

            if (units === undefined || units === 'millisecond' || !this.isValid()) {
              return this;
            }

            startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

            switch (units) {
              case 'year':
                time = startOfDate(this.year(), 0, 1);
                break;

              case 'quarter':
                time = startOfDate(this.year(), this.month() - this.month() % 3, 1);
                break;

              case 'month':
                time = startOfDate(this.year(), this.month(), 1);
                break;

              case 'week':
                time = startOfDate(this.year(), this.month(), this.date() - this.weekday());
                break;

              case 'isoWeek':
                time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));
                break;

              case 'day':
              case 'date':
                time = startOfDate(this.year(), this.month(), this.date());
                break;

              case 'hour':
                time = this._d.valueOf();
                time -= mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR);
                break;

              case 'minute':
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_MINUTE);
                break;

              case 'second':
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_SECOND);
                break;
            }

            this._d.setTime(time);

            hooks.updateOffset(this, true);
            return this;
          }

          function endOf(units) {
            var time, startOfDate;
            units = normalizeUnits(units);

            if (units === undefined || units === 'millisecond' || !this.isValid()) {
              return this;
            }

            startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

            switch (units) {
              case 'year':
                time = startOfDate(this.year() + 1, 0, 1) - 1;
                break;

              case 'quarter':
                time = startOfDate(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;
                break;

              case 'month':
                time = startOfDate(this.year(), this.month() + 1, 1) - 1;
                break;

              case 'week':
                time = startOfDate(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;
                break;

              case 'isoWeek':
                time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;
                break;

              case 'day':
              case 'date':
                time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
                break;

              case 'hour':
                time = this._d.valueOf();
                time += MS_PER_HOUR - mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR) - 1;
                break;

              case 'minute':
                time = this._d.valueOf();
                time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
                break;

              case 'second':
                time = this._d.valueOf();
                time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
                break;
            }

            this._d.setTime(time);

            hooks.updateOffset(this, true);
            return this;
          }

          function valueOf() {
            return this._d.valueOf() - (this._offset || 0) * 60000;
          }

          function unix() {
            return Math.floor(this.valueOf() / 1000);
          }

          function toDate() {
            return new Date(this.valueOf());
          }

          function toArray() {
            var m = this;
            return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
          }

          function toObject() {
            var m = this;
            return {
              years: m.year(),
              months: m.month(),
              date: m.date(),
              hours: m.hours(),
              minutes: m.minutes(),
              seconds: m.seconds(),
              milliseconds: m.milliseconds()
            };
          }

          function toJSON() {
            // new Date(NaN).toJSON() === null
            return this.isValid() ? this.toISOString() : null;
          }

          function isValid$2() {
            return isValid(this);
          }

          function parsingFlags() {
            return extend({}, getParsingFlags(this));
          }

          function invalidAt() {
            return getParsingFlags(this).overflow;
          }

          function creationData() {
            return {
              input: this._i,
              format: this._f,
              locale: this._locale,
              isUTC: this._isUTC,
              strict: this._strict
            };
          }

          addFormatToken('N', 0, 0, 'eraAbbr');
          addFormatToken('NN', 0, 0, 'eraAbbr');
          addFormatToken('NNN', 0, 0, 'eraAbbr');
          addFormatToken('NNNN', 0, 0, 'eraName');
          addFormatToken('NNNNN', 0, 0, 'eraNarrow');
          addFormatToken('y', ['y', 1], 'yo', 'eraYear');
          addFormatToken('y', ['yy', 2], 0, 'eraYear');
          addFormatToken('y', ['yyy', 3], 0, 'eraYear');
          addFormatToken('y', ['yyyy', 4], 0, 'eraYear');
          addRegexToken('N', matchEraAbbr);
          addRegexToken('NN', matchEraAbbr);
          addRegexToken('NNN', matchEraAbbr);
          addRegexToken('NNNN', matchEraName);
          addRegexToken('NNNNN', matchEraNarrow);
          addParseToken(['N', 'NN', 'NNN', 'NNNN', 'NNNNN'], function (input, array, config, token) {
            var era = config._locale.erasParse(input, token, config._strict);

            if (era) {
              getParsingFlags(config).era = era;
            } else {
              getParsingFlags(config).invalidEra = input;
            }
          });
          addRegexToken('y', matchUnsigned);
          addRegexToken('yy', matchUnsigned);
          addRegexToken('yyy', matchUnsigned);
          addRegexToken('yyyy', matchUnsigned);
          addRegexToken('yo', matchEraYearOrdinal);
          addParseToken(['y', 'yy', 'yyy', 'yyyy'], YEAR);
          addParseToken(['yo'], function (input, array, config, token) {
            var match;

            if (config._locale._eraYearOrdinalRegex) {
              match = input.match(config._locale._eraYearOrdinalRegex);
            }

            if (config._locale.eraYearOrdinalParse) {
              array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
            } else {
              array[YEAR] = parseInt(input, 10);
            }
          });

          function localeEras(m, format) {
            var i,
                l,
                date,
                eras = this._eras || getLocale('en')._eras;

            for (i = 0, l = eras.length; i < l; ++i) {
              switch (typeof eras[i].since) {
                case 'string':
                  // truncate time
                  date = hooks(eras[i].since).startOf('day');
                  eras[i].since = date.valueOf();
                  break;
              }

              switch (typeof eras[i].until) {
                case 'undefined':
                  eras[i].until = +Infinity;
                  break;

                case 'string':
                  // truncate time
                  date = hooks(eras[i].until).startOf('day').valueOf();
                  eras[i].until = date.valueOf();
                  break;
              }
            }

            return eras;
          }

          function localeErasParse(eraName, format, strict) {
            var i,
                l,
                eras = this.eras(),
                name,
                abbr,
                narrow;
            eraName = eraName.toUpperCase();

            for (i = 0, l = eras.length; i < l; ++i) {
              name = eras[i].name.toUpperCase();
              abbr = eras[i].abbr.toUpperCase();
              narrow = eras[i].narrow.toUpperCase();

              if (strict) {
                switch (format) {
                  case 'N':
                  case 'NN':
                  case 'NNN':
                    if (abbr === eraName) {
                      return eras[i];
                    }

                    break;

                  case 'NNNN':
                    if (name === eraName) {
                      return eras[i];
                    }

                    break;

                  case 'NNNNN':
                    if (narrow === eraName) {
                      return eras[i];
                    }

                    break;
                }
              } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
                return eras[i];
              }
            }
          }

          function localeErasConvertYear(era, year) {
            var dir = era.since <= era.until ? +1 : -1;

            if (year === undefined) {
              return hooks(era.since).year();
            } else {
              return hooks(era.since).year() + (year - era.offset) * dir;
            }
          }

          function getEraName() {
            var i,
                l,
                val,
                eras = this.localeData().eras();

            for (i = 0, l = eras.length; i < l; ++i) {
              // truncate time
              val = this.clone().startOf('day').valueOf();

              if (eras[i].since <= val && val <= eras[i].until) {
                return eras[i].name;
              }

              if (eras[i].until <= val && val <= eras[i].since) {
                return eras[i].name;
              }
            }

            return '';
          }

          function getEraNarrow() {
            var i,
                l,
                val,
                eras = this.localeData().eras();

            for (i = 0, l = eras.length; i < l; ++i) {
              // truncate time
              val = this.clone().startOf('day').valueOf();

              if (eras[i].since <= val && val <= eras[i].until) {
                return eras[i].narrow;
              }

              if (eras[i].until <= val && val <= eras[i].since) {
                return eras[i].narrow;
              }
            }

            return '';
          }

          function getEraAbbr() {
            var i,
                l,
                val,
                eras = this.localeData().eras();

            for (i = 0, l = eras.length; i < l; ++i) {
              // truncate time
              val = this.clone().startOf('day').valueOf();

              if (eras[i].since <= val && val <= eras[i].until) {
                return eras[i].abbr;
              }

              if (eras[i].until <= val && val <= eras[i].since) {
                return eras[i].abbr;
              }
            }

            return '';
          }

          function getEraYear() {
            var i,
                l,
                dir,
                val,
                eras = this.localeData().eras();

            for (i = 0, l = eras.length; i < l; ++i) {
              dir = eras[i].since <= eras[i].until ? +1 : -1; // truncate time

              val = this.clone().startOf('day').valueOf();

              if (eras[i].since <= val && val <= eras[i].until || eras[i].until <= val && val <= eras[i].since) {
                return (this.year() - hooks(eras[i].since).year()) * dir + eras[i].offset;
              }
            }

            return this.year();
          }

          function erasNameRegex(isStrict) {
            if (!hasOwnProp(this, '_erasNameRegex')) {
              computeErasParse.call(this);
            }

            return isStrict ? this._erasNameRegex : this._erasRegex;
          }

          function erasAbbrRegex(isStrict) {
            if (!hasOwnProp(this, '_erasAbbrRegex')) {
              computeErasParse.call(this);
            }

            return isStrict ? this._erasAbbrRegex : this._erasRegex;
          }

          function erasNarrowRegex(isStrict) {
            if (!hasOwnProp(this, '_erasNarrowRegex')) {
              computeErasParse.call(this);
            }

            return isStrict ? this._erasNarrowRegex : this._erasRegex;
          }

          function matchEraAbbr(isStrict, locale) {
            return locale.erasAbbrRegex(isStrict);
          }

          function matchEraName(isStrict, locale) {
            return locale.erasNameRegex(isStrict);
          }

          function matchEraNarrow(isStrict, locale) {
            return locale.erasNarrowRegex(isStrict);
          }

          function matchEraYearOrdinal(isStrict, locale) {
            return locale._eraYearOrdinalRegex || matchUnsigned;
          }

          function computeErasParse() {
            var abbrPieces = [],
                namePieces = [],
                narrowPieces = [],
                mixedPieces = [],
                i,
                l,
                eras = this.eras();

            for (i = 0, l = eras.length; i < l; ++i) {
              namePieces.push(regexEscape(eras[i].name));
              abbrPieces.push(regexEscape(eras[i].abbr));
              narrowPieces.push(regexEscape(eras[i].narrow));
              mixedPieces.push(regexEscape(eras[i].name));
              mixedPieces.push(regexEscape(eras[i].abbr));
              mixedPieces.push(regexEscape(eras[i].narrow));
            }

            this._erasRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
            this._erasNameRegex = new RegExp('^(' + namePieces.join('|') + ')', 'i');
            this._erasAbbrRegex = new RegExp('^(' + abbrPieces.join('|') + ')', 'i');
            this._erasNarrowRegex = new RegExp('^(' + narrowPieces.join('|') + ')', 'i');
          } // FORMATTING


          addFormatToken(0, ['gg', 2], 0, function () {
            return this.weekYear() % 100;
          });
          addFormatToken(0, ['GG', 2], 0, function () {
            return this.isoWeekYear() % 100;
          });

          function addWeekYearFormatToken(token, getter) {
            addFormatToken(0, [token, token.length], 0, getter);
          }

          addWeekYearFormatToken('gggg', 'weekYear');
          addWeekYearFormatToken('ggggg', 'weekYear');
          addWeekYearFormatToken('GGGG', 'isoWeekYear');
          addWeekYearFormatToken('GGGGG', 'isoWeekYear'); // ALIASES

          addUnitAlias('weekYear', 'gg');
          addUnitAlias('isoWeekYear', 'GG'); // PRIORITY

          addUnitPriority('weekYear', 1);
          addUnitPriority('isoWeekYear', 1); // PARSING

          addRegexToken('G', matchSigned);
          addRegexToken('g', matchSigned);
          addRegexToken('GG', match1to2, match2);
          addRegexToken('gg', match1to2, match2);
          addRegexToken('GGGG', match1to4, match4);
          addRegexToken('gggg', match1to4, match4);
          addRegexToken('GGGGG', match1to6, match6);
          addRegexToken('ggggg', match1to6, match6);
          addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
            week[token.substr(0, 2)] = toInt(input);
          });
          addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
            week[token] = hooks.parseTwoDigitYear(input);
          }); // MOMENTS

          function getSetWeekYear(input) {
            return getSetWeekYearHelper.call(this, input, this.week(), this.weekday(), this.localeData()._week.dow, this.localeData()._week.doy);
          }

          function getSetISOWeekYear(input) {
            return getSetWeekYearHelper.call(this, input, this.isoWeek(), this.isoWeekday(), 1, 4);
          }

          function getISOWeeksInYear() {
            return weeksInYear(this.year(), 1, 4);
          }

          function getISOWeeksInISOWeekYear() {
            return weeksInYear(this.isoWeekYear(), 1, 4);
          }

          function getWeeksInYear() {
            var weekInfo = this.localeData()._week;

            return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
          }

          function getWeeksInWeekYear() {
            var weekInfo = this.localeData()._week;

            return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
          }

          function getSetWeekYearHelper(input, week, weekday, dow, doy) {
            var weeksTarget;

            if (input == null) {
              return weekOfYear(this, dow, doy).year;
            } else {
              weeksTarget = weeksInYear(input, dow, doy);

              if (week > weeksTarget) {
                week = weeksTarget;
              }

              return setWeekAll.call(this, input, week, weekday, dow, doy);
            }
          }

          function setWeekAll(weekYear, week, weekday, dow, doy) {
            var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
                date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
            this.year(date.getUTCFullYear());
            this.month(date.getUTCMonth());
            this.date(date.getUTCDate());
            return this;
          } // FORMATTING


          addFormatToken('Q', 0, 'Qo', 'quarter'); // ALIASES

          addUnitAlias('quarter', 'Q'); // PRIORITY

          addUnitPriority('quarter', 7); // PARSING

          addRegexToken('Q', match1);
          addParseToken('Q', function (input, array) {
            array[MONTH] = (toInt(input) - 1) * 3;
          }); // MOMENTS

          function getSetQuarter(input) {
            return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
          } // FORMATTING


          addFormatToken('D', ['DD', 2], 'Do', 'date'); // ALIASES

          addUnitAlias('date', 'D'); // PRIORITY

          addUnitPriority('date', 9); // PARSING

          addRegexToken('D', match1to2);
          addRegexToken('DD', match1to2, match2);
          addRegexToken('Do', function (isStrict, locale) {
            // TODO: Remove "ordinalParse" fallback in next major release.
            return isStrict ? locale._dayOfMonthOrdinalParse || locale._ordinalParse : locale._dayOfMonthOrdinalParseLenient;
          });
          addParseToken(['D', 'DD'], DATE);
          addParseToken('Do', function (input, array) {
            array[DATE] = toInt(input.match(match1to2)[0]);
          }); // MOMENTS

          var getSetDayOfMonth = makeGetSet('Date', true); // FORMATTING

          addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear'); // ALIASES

          addUnitAlias('dayOfYear', 'DDD'); // PRIORITY

          addUnitPriority('dayOfYear', 4); // PARSING

          addRegexToken('DDD', match1to3);
          addRegexToken('DDDD', match3);
          addParseToken(['DDD', 'DDDD'], function (input, array, config) {
            config._dayOfYear = toInt(input);
          }); // HELPERS
          // MOMENTS

          function getSetDayOfYear(input) {
            var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
            return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
          } // FORMATTING


          addFormatToken('m', ['mm', 2], 0, 'minute'); // ALIASES

          addUnitAlias('minute', 'm'); // PRIORITY

          addUnitPriority('minute', 14); // PARSING

          addRegexToken('m', match1to2);
          addRegexToken('mm', match1to2, match2);
          addParseToken(['m', 'mm'], MINUTE); // MOMENTS

          var getSetMinute = makeGetSet('Minutes', false); // FORMATTING

          addFormatToken('s', ['ss', 2], 0, 'second'); // ALIASES

          addUnitAlias('second', 's'); // PRIORITY

          addUnitPriority('second', 15); // PARSING

          addRegexToken('s', match1to2);
          addRegexToken('ss', match1to2, match2);
          addParseToken(['s', 'ss'], SECOND); // MOMENTS

          var getSetSecond = makeGetSet('Seconds', false); // FORMATTING

          addFormatToken('S', 0, 0, function () {
            return ~~(this.millisecond() / 100);
          });
          addFormatToken(0, ['SS', 2], 0, function () {
            return ~~(this.millisecond() / 10);
          });
          addFormatToken(0, ['SSS', 3], 0, 'millisecond');
          addFormatToken(0, ['SSSS', 4], 0, function () {
            return this.millisecond() * 10;
          });
          addFormatToken(0, ['SSSSS', 5], 0, function () {
            return this.millisecond() * 100;
          });
          addFormatToken(0, ['SSSSSS', 6], 0, function () {
            return this.millisecond() * 1000;
          });
          addFormatToken(0, ['SSSSSSS', 7], 0, function () {
            return this.millisecond() * 10000;
          });
          addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
            return this.millisecond() * 100000;
          });
          addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
            return this.millisecond() * 1000000;
          }); // ALIASES

          addUnitAlias('millisecond', 'ms'); // PRIORITY

          addUnitPriority('millisecond', 16); // PARSING

          addRegexToken('S', match1to3, match1);
          addRegexToken('SS', match1to3, match2);
          addRegexToken('SSS', match1to3, match3);
          var token, getSetMillisecond;

          for (token = 'SSSS'; token.length <= 9; token += 'S') {
            addRegexToken(token, matchUnsigned);
          }

          function parseMs(input, array) {
            array[MILLISECOND] = toInt(('0.' + input) * 1000);
          }

          for (token = 'S'; token.length <= 9; token += 'S') {
            addParseToken(token, parseMs);
          }

          getSetMillisecond = makeGetSet('Milliseconds', false); // FORMATTING

          addFormatToken('z', 0, 0, 'zoneAbbr');
          addFormatToken('zz', 0, 0, 'zoneName'); // MOMENTS

          function getZoneAbbr() {
            return this._isUTC ? 'UTC' : '';
          }

          function getZoneName() {
            return this._isUTC ? 'Coordinated Universal Time' : '';
          }

          var proto = Moment.prototype;
          proto.add = add;
          proto.calendar = calendar$1;
          proto.clone = clone;
          proto.diff = diff;
          proto.endOf = endOf;
          proto.format = format;
          proto.from = from;
          proto.fromNow = fromNow;
          proto.to = to;
          proto.toNow = toNow;
          proto.get = stringGet;
          proto.invalidAt = invalidAt;
          proto.isAfter = isAfter;
          proto.isBefore = isBefore;
          proto.isBetween = isBetween;
          proto.isSame = isSame;
          proto.isSameOrAfter = isSameOrAfter;
          proto.isSameOrBefore = isSameOrBefore;
          proto.isValid = isValid$2;
          proto.lang = lang;
          proto.locale = locale;
          proto.localeData = localeData;
          proto.max = prototypeMax;
          proto.min = prototypeMin;
          proto.parsingFlags = parsingFlags;
          proto.set = stringSet;
          proto.startOf = startOf;
          proto.subtract = subtract;
          proto.toArray = toArray;
          proto.toObject = toObject;
          proto.toDate = toDate;
          proto.toISOString = toISOString;
          proto.inspect = inspect;

          if (typeof Symbol !== 'undefined' && Symbol["for"] != null) {
            proto[Symbol["for"]('nodejs.util.inspect.custom')] = function () {
              return 'Moment<' + this.format() + '>';
            };
          }

          proto.toJSON = toJSON;
          proto.toString = toString;
          proto.unix = unix;
          proto.valueOf = valueOf;
          proto.creationData = creationData;
          proto.eraName = getEraName;
          proto.eraNarrow = getEraNarrow;
          proto.eraAbbr = getEraAbbr;
          proto.eraYear = getEraYear;
          proto.year = getSetYear;
          proto.isLeapYear = getIsLeapYear;
          proto.weekYear = getSetWeekYear;
          proto.isoWeekYear = getSetISOWeekYear;
          proto.quarter = proto.quarters = getSetQuarter;
          proto.month = getSetMonth;
          proto.daysInMonth = getDaysInMonth;
          proto.week = proto.weeks = getSetWeek;
          proto.isoWeek = proto.isoWeeks = getSetISOWeek;
          proto.weeksInYear = getWeeksInYear;
          proto.weeksInWeekYear = getWeeksInWeekYear;
          proto.isoWeeksInYear = getISOWeeksInYear;
          proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
          proto.date = getSetDayOfMonth;
          proto.day = proto.days = getSetDayOfWeek;
          proto.weekday = getSetLocaleDayOfWeek;
          proto.isoWeekday = getSetISODayOfWeek;
          proto.dayOfYear = getSetDayOfYear;
          proto.hour = proto.hours = getSetHour;
          proto.minute = proto.minutes = getSetMinute;
          proto.second = proto.seconds = getSetSecond;
          proto.millisecond = proto.milliseconds = getSetMillisecond;
          proto.utcOffset = getSetOffset;
          proto.utc = setOffsetToUTC;
          proto.local = setOffsetToLocal;
          proto.parseZone = setOffsetToParsedOffset;
          proto.hasAlignedHourOffset = hasAlignedHourOffset;
          proto.isDST = isDaylightSavingTime;
          proto.isLocal = isLocal;
          proto.isUtcOffset = isUtcOffset;
          proto.isUtc = isUtc;
          proto.isUTC = isUtc;
          proto.zoneAbbr = getZoneAbbr;
          proto.zoneName = getZoneName;
          proto.dates = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
          proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
          proto.years = deprecate('years accessor is deprecated. Use year instead', getSetYear);
          proto.zone = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
          proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);

          function createUnix(input) {
            return createLocal(input * 1000);
          }

          function createInZone() {
            return createLocal.apply(null, arguments).parseZone();
          }

          function preParsePostFormat(string) {
            return string;
          }

          var proto$1 = Locale.prototype;
          proto$1.calendar = calendar;
          proto$1.longDateFormat = longDateFormat;
          proto$1.invalidDate = invalidDate;
          proto$1.ordinal = ordinal;
          proto$1.preparse = preParsePostFormat;
          proto$1.postformat = preParsePostFormat;
          proto$1.relativeTime = relativeTime;
          proto$1.pastFuture = pastFuture;
          proto$1.set = set;
          proto$1.eras = localeEras;
          proto$1.erasParse = localeErasParse;
          proto$1.erasConvertYear = localeErasConvertYear;
          proto$1.erasAbbrRegex = erasAbbrRegex;
          proto$1.erasNameRegex = erasNameRegex;
          proto$1.erasNarrowRegex = erasNarrowRegex;
          proto$1.months = localeMonths;
          proto$1.monthsShort = localeMonthsShort;
          proto$1.monthsParse = localeMonthsParse;
          proto$1.monthsRegex = monthsRegex;
          proto$1.monthsShortRegex = monthsShortRegex;
          proto$1.week = localeWeek;
          proto$1.firstDayOfYear = localeFirstDayOfYear;
          proto$1.firstDayOfWeek = localeFirstDayOfWeek;
          proto$1.weekdays = localeWeekdays;
          proto$1.weekdaysMin = localeWeekdaysMin;
          proto$1.weekdaysShort = localeWeekdaysShort;
          proto$1.weekdaysParse = localeWeekdaysParse;
          proto$1.weekdaysRegex = weekdaysRegex;
          proto$1.weekdaysShortRegex = weekdaysShortRegex;
          proto$1.weekdaysMinRegex = weekdaysMinRegex;
          proto$1.isPM = localeIsPM;
          proto$1.meridiem = localeMeridiem;

          function get$1(format, index, field, setter) {
            var locale = getLocale(),
                utc = createUTC().set(setter, index);
            return locale[field](utc, format);
          }

          function listMonthsImpl(format, index, field) {
            if (isNumber(format)) {
              index = format;
              format = undefined;
            }

            format = format || '';

            if (index != null) {
              return get$1(format, index, field, 'month');
            }

            var i,
                out = [];

            for (i = 0; i < 12; i++) {
              out[i] = get$1(format, i, field, 'month');
            }

            return out;
          } // ()
          // (5)
          // (fmt, 5)
          // (fmt)
          // (true)
          // (true, 5)
          // (true, fmt, 5)
          // (true, fmt)


          function listWeekdaysImpl(localeSorted, format, index, field) {
            if (typeof localeSorted === 'boolean') {
              if (isNumber(format)) {
                index = format;
                format = undefined;
              }

              format = format || '';
            } else {
              format = localeSorted;
              index = format;
              localeSorted = false;

              if (isNumber(format)) {
                index = format;
                format = undefined;
              }

              format = format || '';
            }

            var locale = getLocale(),
                shift = localeSorted ? locale._week.dow : 0,
                i,
                out = [];

            if (index != null) {
              return get$1(format, (index + shift) % 7, field, 'day');
            }

            for (i = 0; i < 7; i++) {
              out[i] = get$1(format, (i + shift) % 7, field, 'day');
            }

            return out;
          }

          function listMonths(format, index) {
            return listMonthsImpl(format, index, 'months');
          }

          function listMonthsShort(format, index) {
            return listMonthsImpl(format, index, 'monthsShort');
          }

          function listWeekdays(localeSorted, format, index) {
            return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
          }

          function listWeekdaysShort(localeSorted, format, index) {
            return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
          }

          function listWeekdaysMin(localeSorted, format, index) {
            return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
          }

          getSetGlobalLocale('en', {
            eras: [{
              since: '0001-01-01',
              until: +Infinity,
              offset: 1,
              name: 'Anno Domini',
              narrow: 'AD',
              abbr: 'AD'
            }, {
              since: '0000-12-31',
              until: -Infinity,
              offset: 1,
              name: 'Before Christ',
              narrow: 'BC',
              abbr: 'BC'
            }],
            dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
            ordinal: function ordinal(number) {
              var b = number % 10,
                  output = toInt(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
              return number + output;
            }
          }); // Side effect imports

          hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
          hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);
          var mathAbs = Math.abs;

          function abs() {
            var data = this._data;
            this._milliseconds = mathAbs(this._milliseconds);
            this._days = mathAbs(this._days);
            this._months = mathAbs(this._months);
            data.milliseconds = mathAbs(data.milliseconds);
            data.seconds = mathAbs(data.seconds);
            data.minutes = mathAbs(data.minutes);
            data.hours = mathAbs(data.hours);
            data.months = mathAbs(data.months);
            data.years = mathAbs(data.years);
            return this;
          }

          function addSubtract$1(duration, input, value, direction) {
            var other = createDuration(input, value);
            duration._milliseconds += direction * other._milliseconds;
            duration._days += direction * other._days;
            duration._months += direction * other._months;
            return duration._bubble();
          } // supports only 2.0-style add(1, 's') or add(duration)


          function add$1(input, value) {
            return addSubtract$1(this, input, value, 1);
          } // supports only 2.0-style subtract(1, 's') or subtract(duration)


          function subtract$1(input, value) {
            return addSubtract$1(this, input, value, -1);
          }

          function absCeil(number) {
            if (number < 0) {
              return Math.floor(number);
            } else {
              return Math.ceil(number);
            }
          }

          function bubble() {
            var milliseconds = this._milliseconds,
                days = this._days,
                months = this._months,
                data = this._data,
                seconds,
                minutes,
                hours,
                years,
                monthsFromDays; // if we have a mix of positive and negative values, bubble down first
            // check: https://github.com/moment/moment/issues/2166

            if (!(milliseconds >= 0 && days >= 0 && months >= 0 || milliseconds <= 0 && days <= 0 && months <= 0)) {
              milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
              days = 0;
              months = 0;
            } // The following code bubbles up values, see the tests for
            // examples of what that means.


            data.milliseconds = milliseconds % 1000;
            seconds = absFloor(milliseconds / 1000);
            data.seconds = seconds % 60;
            minutes = absFloor(seconds / 60);
            data.minutes = minutes % 60;
            hours = absFloor(minutes / 60);
            data.hours = hours % 24;
            days += absFloor(hours / 24); // convert days to months

            monthsFromDays = absFloor(daysToMonths(days));
            months += monthsFromDays;
            days -= absCeil(monthsToDays(monthsFromDays)); // 12 months -> 1 year

            years = absFloor(months / 12);
            months %= 12;
            data.days = days;
            data.months = months;
            data.years = years;
            return this;
          }

          function daysToMonths(days) {
            // 400 years have 146097 days (taking into account leap year rules)
            // 400 years have 12 months === 4800
            return days * 4800 / 146097;
          }

          function monthsToDays(months) {
            // the reverse of daysToMonths
            return months * 146097 / 4800;
          }

          function as(units) {
            if (!this.isValid()) {
              return NaN;
            }

            var days,
                months,
                milliseconds = this._milliseconds;
            units = normalizeUnits(units);

            if (units === 'month' || units === 'quarter' || units === 'year') {
              days = this._days + milliseconds / 864e5;
              months = this._months + daysToMonths(days);

              switch (units) {
                case 'month':
                  return months;

                case 'quarter':
                  return months / 3;

                case 'year':
                  return months / 12;
              }
            } else {
              // handle milliseconds separately because of floating point math errors (issue #1867)
              days = this._days + Math.round(monthsToDays(this._months));

              switch (units) {
                case 'week':
                  return days / 7 + milliseconds / 6048e5;

                case 'day':
                  return days + milliseconds / 864e5;

                case 'hour':
                  return days * 24 + milliseconds / 36e5;

                case 'minute':
                  return days * 1440 + milliseconds / 6e4;

                case 'second':
                  return days * 86400 + milliseconds / 1000;
                // Math.floor prevents floating point math errors here

                case 'millisecond':
                  return Math.floor(days * 864e5) + milliseconds;

                default:
                  throw new Error('Unknown unit ' + units);
              }
            }
          } // TODO: Use this.as('ms')?


          function valueOf$1() {
            if (!this.isValid()) {
              return NaN;
            }

            return this._milliseconds + this._days * 864e5 + this._months % 12 * 2592e6 + toInt(this._months / 12) * 31536e6;
          }

          function makeAs(alias) {
            return function () {
              return this.as(alias);
            };
          }

          var asMilliseconds = makeAs('ms'),
              asSeconds = makeAs('s'),
              asMinutes = makeAs('m'),
              asHours = makeAs('h'),
              asDays = makeAs('d'),
              asWeeks = makeAs('w'),
              asMonths = makeAs('M'),
              asQuarters = makeAs('Q'),
              asYears = makeAs('y');

          function clone$1() {
            return createDuration(this);
          }

          function get$2(units) {
            units = normalizeUnits(units);
            return this.isValid() ? this[units + 's']() : NaN;
          }

          function makeGetter(name) {
            return function () {
              return this.isValid() ? this._data[name] : NaN;
            };
          }

          var milliseconds = makeGetter('milliseconds'),
              seconds = makeGetter('seconds'),
              minutes = makeGetter('minutes'),
              hours = makeGetter('hours'),
              days = makeGetter('days'),
              months = makeGetter('months'),
              years = makeGetter('years');

          function weeks() {
            return absFloor(this.days() / 7);
          }

          var round = Math.round,
              thresholds = {
            ss: 44,
            // a few seconds to seconds
            s: 45,
            // seconds to minute
            m: 45,
            // minutes to hour
            h: 22,
            // hours to day
            d: 26,
            // days to month/week
            w: null,
            // weeks to month
            M: 11 // months to year

          }; // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize

          function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
            return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
          }

          function relativeTime$1(posNegDuration, withoutSuffix, thresholds, locale) {
            var duration = createDuration(posNegDuration).abs(),
                seconds = round(duration.as('s')),
                minutes = round(duration.as('m')),
                hours = round(duration.as('h')),
                days = round(duration.as('d')),
                months = round(duration.as('M')),
                weeks = round(duration.as('w')),
                years = round(duration.as('y')),
                a = seconds <= thresholds.ss && ['s', seconds] || seconds < thresholds.s && ['ss', seconds] || minutes <= 1 && ['m'] || minutes < thresholds.m && ['mm', minutes] || hours <= 1 && ['h'] || hours < thresholds.h && ['hh', hours] || days <= 1 && ['d'] || days < thresholds.d && ['dd', days];

            if (thresholds.w != null) {
              a = a || weeks <= 1 && ['w'] || weeks < thresholds.w && ['ww', weeks];
            }

            a = a || months <= 1 && ['M'] || months < thresholds.M && ['MM', months] || years <= 1 && ['y'] || ['yy', years];
            a[2] = withoutSuffix;
            a[3] = +posNegDuration > 0;
            a[4] = locale;
            return substituteTimeAgo.apply(null, a);
          } // This function allows you to set the rounding function for relative time strings


          function getSetRelativeTimeRounding(roundingFunction) {
            if (roundingFunction === undefined) {
              return round;
            }

            if (typeof roundingFunction === 'function') {
              round = roundingFunction;
              return true;
            }

            return false;
          } // This function allows you to set a threshold for relative time strings


          function getSetRelativeTimeThreshold(threshold, limit) {
            if (thresholds[threshold] === undefined) {
              return false;
            }

            if (limit === undefined) {
              return thresholds[threshold];
            }

            thresholds[threshold] = limit;

            if (threshold === 's') {
              thresholds.ss = limit - 1;
            }

            return true;
          }

          function humanize(argWithSuffix, argThresholds) {
            if (!this.isValid()) {
              return this.localeData().invalidDate();
            }

            var withSuffix = false,
                th = thresholds,
                locale,
                output;

            if (typeof argWithSuffix === 'object') {
              argThresholds = argWithSuffix;
              argWithSuffix = false;
            }

            if (typeof argWithSuffix === 'boolean') {
              withSuffix = argWithSuffix;
            }

            if (typeof argThresholds === 'object') {
              th = Object.assign({}, thresholds, argThresholds);

              if (argThresholds.s != null && argThresholds.ss == null) {
                th.ss = argThresholds.s - 1;
              }
            }

            locale = this.localeData();
            output = relativeTime$1(this, !withSuffix, th, locale);

            if (withSuffix) {
              output = locale.pastFuture(+this, output);
            }

            return locale.postformat(output);
          }

          var abs$1 = Math.abs;

          function sign(x) {
            return (x > 0) - (x < 0) || +x;
          }

          function toISOString$1() {
            // for ISO strings we do not use the normal bubbling rules:
            //  * milliseconds bubble up until they become hours
            //  * days do not bubble at all
            //  * months bubble up until they become years
            // This is because there is no context-free conversion between hours and days
            // (think of clock changes)
            // and also not between days and months (28-31 days per month)
            if (!this.isValid()) {
              return this.localeData().invalidDate();
            }

            var seconds = abs$1(this._milliseconds) / 1000,
                days = abs$1(this._days),
                months = abs$1(this._months),
                minutes,
                hours,
                years,
                s,
                total = this.asSeconds(),
                totalSign,
                ymSign,
                daysSign,
                hmsSign;

            if (!total) {
              // this is the same as C#'s (Noda) and python (isodate)...
              // but not other JS (goog.date)
              return 'P0D';
            } // 3600 seconds -> 60 minutes -> 1 hour


            minutes = absFloor(seconds / 60);
            hours = absFloor(minutes / 60);
            seconds %= 60;
            minutes %= 60; // 12 months -> 1 year

            years = absFloor(months / 12);
            months %= 12; // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js

            s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';
            totalSign = total < 0 ? '-' : '';
            ymSign = sign(this._months) !== sign(total) ? '-' : '';
            daysSign = sign(this._days) !== sign(total) ? '-' : '';
            hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';
            return totalSign + 'P' + (years ? ymSign + years + 'Y' : '') + (months ? ymSign + months + 'M' : '') + (days ? daysSign + days + 'D' : '') + (hours || minutes || seconds ? 'T' : '') + (hours ? hmsSign + hours + 'H' : '') + (minutes ? hmsSign + minutes + 'M' : '') + (seconds ? hmsSign + s + 'S' : '');
          }

          var proto$2 = Duration.prototype;
          proto$2.isValid = isValid$1;
          proto$2.abs = abs;
          proto$2.add = add$1;
          proto$2.subtract = subtract$1;
          proto$2.as = as;
          proto$2.asMilliseconds = asMilliseconds;
          proto$2.asSeconds = asSeconds;
          proto$2.asMinutes = asMinutes;
          proto$2.asHours = asHours;
          proto$2.asDays = asDays;
          proto$2.asWeeks = asWeeks;
          proto$2.asMonths = asMonths;
          proto$2.asQuarters = asQuarters;
          proto$2.asYears = asYears;
          proto$2.valueOf = valueOf$1;
          proto$2._bubble = bubble;
          proto$2.clone = clone$1;
          proto$2.get = get$2;
          proto$2.milliseconds = milliseconds;
          proto$2.seconds = seconds;
          proto$2.minutes = minutes;
          proto$2.hours = hours;
          proto$2.days = days;
          proto$2.weeks = weeks;
          proto$2.months = months;
          proto$2.years = years;
          proto$2.humanize = humanize;
          proto$2.toISOString = toISOString$1;
          proto$2.toString = toISOString$1;
          proto$2.toJSON = toISOString$1;
          proto$2.locale = locale;
          proto$2.localeData = localeData;
          proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
          proto$2.lang = lang; // FORMATTING

          addFormatToken('X', 0, 0, 'unix');
          addFormatToken('x', 0, 0, 'valueOf'); // PARSING

          addRegexToken('x', matchSigned);
          addRegexToken('X', matchTimestamp);
          addParseToken('X', function (input, array, config) {
            config._d = new Date(parseFloat(input) * 1000);
          });
          addParseToken('x', function (input, array, config) {
            config._d = new Date(toInt(input));
          }); //! moment.js

          hooks.version = '2.29.1';
          setHookCallback(createLocal);
          hooks.fn = proto;
          hooks.min = min;
          hooks.max = max;
          hooks.now = now;
          hooks.utc = createUTC;
          hooks.unix = createUnix;
          hooks.months = listMonths;
          hooks.isDate = isDate;
          hooks.locale = getSetGlobalLocale;
          hooks.invalid = createInvalid;
          hooks.duration = createDuration;
          hooks.isMoment = isMoment;
          hooks.weekdays = listWeekdays;
          hooks.parseZone = createInZone;
          hooks.localeData = getLocale;
          hooks.isDuration = isDuration;
          hooks.monthsShort = listMonthsShort;
          hooks.weekdaysMin = listWeekdaysMin;
          hooks.defineLocale = defineLocale;
          hooks.updateLocale = updateLocale;
          hooks.locales = listLocales;
          hooks.weekdaysShort = listWeekdaysShort;
          hooks.normalizeUnits = normalizeUnits;
          hooks.relativeTimeRounding = getSetRelativeTimeRounding;
          hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
          hooks.calendarFormat = getCalendarFormat;
          hooks.prototype = proto; // currently HTML5 input type only supports 24-hour formats

          hooks.HTML5_FMT = {
            DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm',
            // <input type="datetime-local" />
            DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss',
            // <input type="datetime-local" step="1" />
            DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS',
            // <input type="datetime-local" step="0.001" />
            DATE: 'YYYY-MM-DD',
            // <input type="date" />
            TIME: 'HH:mm',
            // <input type="time" />
            TIME_SECONDS: 'HH:mm:ss',
            // <input type="time" step="1" />
            TIME_MS: 'HH:mm:ss.SSS',
            // <input type="time" step="0.001" />
            WEEK: 'GGGG-[W]WW',
            // <input type="week" />
            MONTH: 'YYYY-MM' // <input type="month" />

          };
          return hooks;
        });
        /* WEBPACK VAR INJECTION */

      }).call(this, __webpack_require__(
      /*! ./../webpack/buildin/module.js */
      "YuTi")(module));
      /***/
    },

    /***/
    "wdtM": function wdtM(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony default export */


      __webpack_exports__["default"] = "<div class=\"row\">\r\n    <div class=\"col-md-8\" >\r\n       <div class=\"card card-user\" style=\"width: 150%;\">\r\n         <div class=\"card-header\">\r\n           <h1 class=\"card-title\">Registrar Tratamiento</h1>\r\n         </div>\r\n         <div class=\"card-body\">\r\n           <form [formGroup]=\"form\">\r\n\r\n             <div class=\"row\">\r\n               <div class=\"col-md-6 pr-1\">\r\n                 <div class=\"form-group\">\r\n                   <mat-label>Nombre del Tratamiento</mat-label>\r\n                   <mat-form-field appearance=\"outline\" class=\"form-group\" style=\"width: 100%;\">\r\n                     <mat-label>Tratamiento</mat-label>\r\n                     <input formControlName=\"treatmentName\" matInput type=\"text\">\r\n                   </mat-form-field>\r\n                 </div>\r\n               </div>\r\n\r\n               <div class=\"col-md-6 pl-1\">\r\n                 <div class=\"form-group\">\r\n                   <mat-label>Especialista Encargada</mat-label>\r\n                   <mat-form-field appearance=\"outline\" class=\"form-group\" style=\"width: 100%;\">\r\n                     <mat-label>Especialista</mat-label>\r\n                     <mat-select formControlName=\"specialist\" name=\"usuarioList\">\r\n                       <mat-option *ngFor=\"let el of user\" [value]=\"el.value\">\r\n                         {{el.desc}}\r\n                       </mat-option>\r\n                     </mat-select>\r\n                   </mat-form-field>\r\n                 </div>\r\n               </div>\r\n\r\n             </div>\r\n\r\n             <div class=\"row\">\r\n\r\n               <div class=\"col-md-6 pr-1\">\r\n                 <div class=\"form-group\">\r\n                   <mat-label>Cantidad de sesiones</mat-label>\r\n                   <mat-form-field appearance=\"outline\" class=\"form-group\" style=\"width: 100%;\">\r\n                    <mat-label>Sesiones</mat-label>\r\n                     <input formControlName=\"sessions\" matInput type=\"number\">\r\n                   </mat-form-field>\r\n                 </div>\r\n               </div>\r\n\r\n               <div class=\"col-md-6 pl-1\">\r\n                 <div class=\"form-group\">\r\n                   <mat-label>Comisión de la Operadora</mat-label>\r\n                   <mat-form-field appearance=\"outline\" class=\"form-group\" style=\"width: 100%;\">\r\n                     <mat-label>Comision</mat-label>\r\n                     <input formControlName=\"comission\" matInput type=\"number\">\r\n                     <span matPrefix>%&nbsp;</span>\r\n                   </mat-form-field>\r\n                 </div>\r\n               </div>\r\n\r\n             </div>\r\n\r\n             <div formArrayName=\"typePrice\" *ngFor=\"let typePrice of typePrices.controls; let i = index\" class=\"row\">\r\n\r\n               <div [formGroupName]=\"i\" class=\"col-md-6 pr-1\">\r\n                 <div  class=\"form-group\">\r\n                   <mat-label>Tipos del tratamiento</mat-label>\r\n                   <mat-form-field appearance=\"outline\" class=\"form-group\" style=\"width: 100%;\">\r\n                     <mat-label>Tipos</mat-label>\r\n                     <input formControlName=\"typeTreatment\" matInput type=\"text\">\r\n                   </mat-form-field>\r\n                 </div>\r\n               </div>\r\n\r\n               <div [formGroupName]=\"i\" class=\"col-md-6 pl-1\">\r\n                 <div  class=\"form-group\">\r\n                   <mat-label>Precio del tratamiento</mat-label>\r\n                   <mat-form-field appearance=\"outline\" class=\"form-group\" style=\"width: 100%;\">\r\n                     <mat-label>precio</mat-label>\r\n                     <input  [attr.id]=\"'typePrice' + i\" formControlName=\"typePrice\" matInput type=\"number\">\r\n                     <span matPrefix>$</span>\r\n                   </mat-form-field>\r\n                 </div>\r\n               </div>\r\n\r\n           </div>\r\n\r\n             <div class=\"row\">\r\n               <div class=\"col-md-12\">\r\n                 <div class=\"form-group\">\r\n                   <mat-label>Descripción del tratamiento</mat-label>\r\n                   <mat-form-field appearance=\"outline\" class=\"form-group\" style=\"width: 100%;\">\r\n                     <mat-label>Descripción</mat-label>\r\n                     <textarea formControlName=\"description\" matInput type=\"text\"></textarea>\r\n                   </mat-form-field>\r\n                 </div>\r\n               </div>\r\n             </div>\r\n\r\n             <div class=\"row\">\r\n               <div class=\"update ml-auto mr-auto\">\r\n                 <button mat-raised-button  color=\"warn\" type=\"submit\" (click)=\"addTypePrice()\">Añadir Tipo</button>\r\n               </div>\r\n               <div class=\"update ml-auto mr-auto\">\r\n                 <button mat-raised-button  color=\"warn\" type=\"submit\" (click)=\"removeTypePice(i)\">Remover Tipo</button>\r\n               </div>\r\n               <div class=\"update ml-auto mr-auto\">\r\n                 <button mat-raised-button  color=\"warn\" type=\"submit\" (click)=\"register()\">Registrar</button>\r\n               </div>\r\n             </div>\r\n\r\n           </form>\r\n         </div>\r\n       </div>\r\n     </div>\r\n   </div>\r\n";
      /***/
    },

    /***/
    "x6pH": function x6pH(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Hebrew [he]
      //! author : Tomer Cohen : https://github.com/tomer
      //! author : Moshe Simantov : https://github.com/DevelopmentIL
      //! author : Tal Ater : https://github.com/TalAter
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var he = moment.defineLocale('he', {
          months: 'ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר'.split('_'),
          monthsShort: 'ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳'.split('_'),
          weekdays: 'ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת'.split('_'),
          weekdaysShort: 'א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳'.split('_'),
          weekdaysMin: 'א_ב_ג_ד_ה_ו_ש'.split('_'),
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D [ב]MMMM YYYY',
            LLL: 'D [ב]MMMM YYYY HH:mm',
            LLLL: 'dddd, D [ב]MMMM YYYY HH:mm',
            l: 'D/M/YYYY',
            ll: 'D MMM YYYY',
            lll: 'D MMM YYYY HH:mm',
            llll: 'ddd, D MMM YYYY HH:mm'
          },
          calendar: {
            sameDay: '[היום ב־]LT',
            nextDay: '[מחר ב־]LT',
            nextWeek: 'dddd [בשעה] LT',
            lastDay: '[אתמול ב־]LT',
            lastWeek: '[ביום] dddd [האחרון בשעה] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: 'בעוד %s',
            past: 'לפני %s',
            s: 'מספר שניות',
            ss: '%d שניות',
            m: 'דקה',
            mm: '%d דקות',
            h: 'שעה',
            hh: function hh(number) {
              if (number === 2) {
                return 'שעתיים';
              }

              return number + ' שעות';
            },
            d: 'יום',
            dd: function dd(number) {
              if (number === 2) {
                return 'יומיים';
              }

              return number + ' ימים';
            },
            M: 'חודש',
            MM: function MM(number) {
              if (number === 2) {
                return 'חודשיים';
              }

              return number + ' חודשים';
            },
            y: 'שנה',
            yy: function yy(number) {
              if (number === 2) {
                return 'שנתיים';
              } else if (number % 10 === 0 && number !== 10) {
                return number + ' שנה';
              }

              return number + ' שנים';
            }
          },
          meridiemParse: /אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,
          isPM: function isPM(input) {
            return /^(אחה"צ|אחרי הצהריים|בערב)$/.test(input);
          },
          meridiem: function meridiem(hour, minute, isLower) {
            if (hour < 5) {
              return 'לפנות בוקר';
            } else if (hour < 10) {
              return 'בבוקר';
            } else if (hour < 12) {
              return isLower ? 'לפנה"צ' : 'לפני הצהריים';
            } else if (hour < 18) {
              return isLower ? 'אחה"צ' : 'אחרי הצהריים';
            } else {
              return 'בערב';
            }
          }
        });
        return he;
      });
      /***/

    },

    /***/
    "xZYj": function xZYj(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony default export */


      __webpack_exports__["default"] = "<div style=\"overflow-x: hidden\" fxLayout=\"column\">\r\n    <form [formGroup]=\"filters\">\r\n      <div class=\"col-md-12\">\r\n        <div class=\"card\">\r\n          <div class=\"card-header\">\r\n            <mat-label class=\"card-title\">Inventario de Tratamientos</mat-label>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <div class=\"row\">\r\n              <div class=\"col-md-6 pr-1\">\r\n                <mat-form-field style=\"width: 100%;\">\r\n                  <mat-label>Nombre del tratamiento</mat-label>\r\n                  <input matInput formControlName=\"name\" >\r\n                  <mat-error>\r\n                  </mat-error>\r\n                </mat-form-field>\r\n              </div>\r\n              <div class=\"col-md-6 px-1\">\r\n                <mat-form-field style=\"width: 100%;\">\r\n                  <mat-label>Especialista</mat-label>\r\n                  <input matInput formControlName=\"user\" >\r\n                  <mat-error>\r\n                  </mat-error>\r\n                </mat-form-field>\r\n              </div>\r\n            </div>\r\n            <div  class=\"row\">\r\n                <div class=\"col-md-6 pr-1\">\r\n                    <mat-form-field style=\"width: 100%;\">\r\n                      <mat-label>Fecha Inicial</mat-label>\r\n                      <input matInput formControlName=\"initialDate\" [matDatepicker]=\"initialDate\">\r\n                      <mat-datepicker-toggle matSuffix [for]=\"initialDate\"></mat-datepicker-toggle>\r\n                      <mat-datepicker #initialDate disabled=\"false\"></mat-datepicker>\r\n                    </mat-form-field>\r\n                </div>\r\n                <div class=\"col-md-6 px-1\">\r\n                    <mat-form-field style=\"width: 100%;\">\r\n                      <mat-label>Fecha Final</mat-label>\r\n                      <input matInput formControlName=\"finalDate\" [matDatepicker]=\"finalDate\">\r\n                      <mat-datepicker-toggle matSuffix [for]=\"finalDate\"></mat-datepicker-toggle>\r\n                      <mat-datepicker #finalDate disabled=\"false\"></mat-datepicker>\r\n                    </mat-form-field>\r\n                </div>\r\n              </div>\r\n            <div style=\"position:relative; top:50%; display: flex; justify-content: space-around;\" class=\"row\">\r\n              <button mat-raised-button mat-stroked-button style=\"height:40px; width:200px; margin-right: 3px;\"\r\n                      type=\"button\" class=\"\" (click)=\"search()\">Buscar</button>\r\n              <button mat-raised-button mat-stroked-button style=\"height:40px; width:200px; margin-right: 3px;\"\r\n                      type=\"reset\" class=\"\">Limpiar</button>\r\n              <button mat-raised-button mat-stroked-button style=\"height:40px; width:200px;\" type=\"\" class=\"\" (click)=\"download()\">Descargar Excel</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </form>\r\n    <mat-card class=\"mat-elevation-z4\">\r\n      <div fxlayout=\"column\">\r\n        <div class=\"flex-p container-tab\">\r\n          <table mat-table [dataSource]=\"dataSource\" matSort class=\"mat-elevation-z8\" style=\"width: 100%;\">\r\n\r\n            <ng-container  matColumnDef=\"treatmentName\" >\r\n              <th mat-header-cell *matHeaderCellDef mat-sort-header style=\"font-weight: bold;\">Nombre del tratamiento</th>\r\n              <td mat-cell *matCellDef=\"let row\" class=\"mat-cell-id\"> {{row.name}} </td>\r\n            </ng-container>\r\n\r\n            <ng-container  matColumnDef=\"treatmentType\">\r\n              <th mat-header-cell *matHeaderCellDef mat-sort-header style=\"font-weight: bold;\" > Tipo de Tratamiento </th>\r\n              <td mat-cell class=\"mat-cell-id\" *matCellDef=\"let row\" class=\"mat-cell-id\"> {{row.treatmentType}} </td>\r\n            </ng-container>\r\n\r\n            <ng-container  matColumnDef=\"user\">\r\n              <th mat-header-cell *matHeaderCellDef mat-sort-header style=\"font-weight: bold;\"> Especialista Encargada </th>\r\n              <td mat-cell *matCellDef=\"let row\" class=\"mat-cell-id\"> {{row.specialist}} </td>\r\n            </ng-container>\r\n\r\n            <ng-container  matColumnDef=\"sessions\">\r\n              <th mat-header-cell *matHeaderCellDef mat-sort-header style=\"font-weight: bold;\"> Cantidad de Sesiones </th>\r\n              <td mat-cell *matCellDef=\"let row\" class=\"mat-cell-id\"> {{row.sessions}} </td>\r\n            </ng-container>\r\n\r\n            <ng-container  matColumnDef=\"priceTreatment\">\r\n              <th mat-header-cell *matHeaderCellDef mat-sort-header style=\"font-weight: bold;\"> Precio del Tratamiento </th>\r\n              <td mat-cell *matCellDef=\"let row\" class=\"mat-cell-id\"> {{row.price}}$ </td>\r\n            </ng-container>\r\n\r\n            <ng-container  matColumnDef=\"operativeComission\">\r\n              <th mat-header-cell *matHeaderCellDef mat-sort-header style=\"font-weight: bold;\"> Comisión de la operadora </th>\r\n              <td mat-cell *matCellDef=\"let row\" class=\"mat-cell-id\"> {{row.comission}}% </td>\r\n            </ng-container>\r\n\r\n            <ng-container matColumnDef=\"actions\">\r\n              <th mat-header-cell *matHeaderCellDef mat-sort-header style=\"font-weight: bold;\"> Acciones </th>\r\n              <td mat-cell *matCellDef=\"let row\" class=\"mat-cell-id\">  <div fxFlex=\"row\">\r\n                <div fxLayout=\"column\" mat-stroked-button class=\"pointer\"\r\n                     (click)=\"goEdit(row.id);\">\r\n                  <i style=\"font-size: 25px\" class=\"nc-icon nc-tap-01\" title=\"Editar\"></i>\r\n                </div>\r\n              </div>\r\n              </td>\r\n\r\n            </ng-container>\r\n\r\n            <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n            <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n          </table>\r\n        </div>\r\n        <mat-paginator [pageSizeOptions]=\"[5, 10, 25, 100]\" ></mat-paginator>\r\n      </div>\r\n    </mat-card>\r\n  </div>\r\n";
      /***/
    },

    /***/
    "xqvh": function xqvh(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony default export */


      __webpack_exports__["default"] = "<div style=\"overflow-x: hidden;\" fxLayout=\"column\">\r\n  <form [formGroup]=\"filters\">\r\n    <div class=\"col-md-12\">\r\n      <div class=\"card\">\r\n        <div class=\"card-header\">\r\n          <mat-label class=\"card-title\">Historial de Pacientes</mat-label>\r\n        </div>\r\n        <div class=\"card-body\">\r\n          <div class=\"row\">\r\n            <div class=\"col-md-4 pr-1\">\r\n              <mat-form-field>\r\n              <mat-label>Nombre</mat-label>\r\n              <input matInput formControlName=\"name\" >\r\n              <mat-error>\r\n              </mat-error>\r\n            </mat-form-field>\r\n            </div>\r\n            <div class=\"col-md-4 px-1\">\r\n              <mat-form-field>\r\n                <mat-label>Apellido</mat-label>\r\n                <input matInput formControlName=\"lastName\" >\r\n                <mat-error>\r\n                </mat-error>\r\n              </mat-form-field>\r\n            </div>\r\n            <div class=\"col-md-4 pl-1\">\r\n              <mat-form-field>\r\n                <mat-label>Cédula</mat-label>\r\n                <input matInput formControlName=\"identification\" >\r\n                <mat-error>\r\n                </mat-error>\r\n              </mat-form-field>\r\n            </div>\r\n          </div>\r\n          <div  class=\"row\">\r\n            <div class=\"col-md-3 pr-1\">\r\n                <mat-form-field>\r\n                  <mat-select (ngModelChange)=\"changeCharger()\"  formControlName=\"user\" placeholder=\"Usuario de atención\">\r\n                    <mat-option *ngFor=\"let el of usuarioList\" [value]=\"el.value\">\r\n                      {{el.desc}}\r\n                    </mat-option>\r\n                  </mat-select>\r\n                </mat-form-field>\r\n            </div>\r\n            <div class=\"col-md-3 px-1\">\r\n                <mat-form-field>\r\n                  <mat-select formControlName=\"userName\" placeholder=\"Nombre del Usuario\">\r\n                    <mat-option *ngFor=\"let ch of chargerList\" [value]=\"ch.id\">\r\n                      {{ch.nombre}}\r\n                    </mat-option>\r\n                  </mat-select>\r\n                </mat-form-field>\r\n            </div>\r\n            <div class=\"col-md-3 px-1\">\r\n                <mat-form-field>\r\n                  <mat-label>Fecha Inicial</mat-label>\r\n                  <input matInput formControlName=\"initialDate\" [matDatepicker]=\"initialDate\">\r\n                  <mat-datepicker-toggle matSuffix [for]=\"initialDate\"></mat-datepicker-toggle>\r\n                  <mat-datepicker #initialDate disabled=\"false\"></mat-datepicker>\r\n                </mat-form-field>\r\n            </div>\r\n            <div class=\"col-md-3 pl-1\">\r\n                <mat-form-field>\r\n                  <mat-label>Fecha Final</mat-label>\r\n                  <input matInput formControlName=\"finalDate\" [matDatepicker]=\"finalDate\">\r\n                  <mat-datepicker-toggle matSuffix [for]=\"finalDate\"></mat-datepicker-toggle>\r\n                  <mat-datepicker #finalDate disabled=\"false\"></mat-datepicker>\r\n                </mat-form-field>\r\n            </div>\r\n          </div>\r\n          <div style=\"position:relative; top:50%; display: flex; justify-content: space-around;\" class=\"row\">\r\n            <button mat-raised-button mat-stroked-button style=\"height:40px; width:200px; margin-right: 3px;\"\r\n                    type=\"button\" class=\"\" (click)=\"search()\">Buscar</button>\r\n                    <button mat-raised-button mat-stroked-button style=\"height:40px; width:200px; margin-right: 3px;\"\r\n                    type=\"reset\" class=\"\">Limpiar</button>\r\n            <button mat-raised-button mat-stroked-button style=\"height:40px; width:200px;\" type=\"\" class=\"\" (click)=\"download()\">Descargar Excel</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </form>\r\n  <mat-card class=\"mat-elevation-z4\">\r\n    <div fxlayout=\"column\">\r\n      <div class=\"flex-p container-tab\">\r\n        <table mat-table [dataSource]=\"dataSource\" matSort class=\"mat-elevation-z8\" style=\"width: 190%;\">\r\n\r\n          <ng-container  matColumnDef=\"dateA\" >\r\n            <th mat-header-cell *matHeaderCellDef mat-sort-header style=\"font-weight: bold;\">Fecha de atención </th>\r\n            <td mat-cell *matCellDef=\"let row\" class=\"mat-cell-id\"> {{row.fechaAttemption}} </td>\r\n          </ng-container>\r\n\r\n          <ng-container  matColumnDef=\"name\">\r\n            <th mat-header-cell *matHeaderCellDef mat-sort-header style=\"font-weight: bold;\" > Nombre </th>\r\n            <td mat-cell *matCellDef=\"let row\" class=\"mat-cell-id\"> {{row.name}} </td>\r\n          </ng-container>\r\n\r\n          <ng-container  matColumnDef=\"lastName\">\r\n            <th mat-header-cell *matHeaderCellDef mat-sort-header style=\"font-weight: bold;\"> Apellido </th>\r\n        <td mat-cell *matCellDef=\"let row\" class=\"mat-cell-id\"> {{row.lastName}} </td>\r\n          </ng-container>\r\n\r\n          <ng-container  matColumnDef=\"identification\">\r\n            <th mat-header-cell *matHeaderCellDef mat-sort-header style=\"font-weight: bold;\"> Cédula </th>\r\n            <td mat-cell *matCellDef=\"let row\" class=\"mat-cell-id\"> {{row.identification}} </td>\r\n          </ng-container>\r\n\r\n          <ng-container  matColumnDef=\"birthday\">\r\n            <th mat-header-cell *matHeaderCellDef mat-sort-header style=\"font-weight: bold;\"> Fecha de Cumpleaños </th>\r\n            <td mat-cell *matCellDef=\"let row\" class=\"mat-cell-id\"> {{row.birthday}} </td>\r\n          </ng-container>\r\n\r\n          <ng-container  matColumnDef=\"age\">\r\n            <th mat-header-cell *matHeaderCellDef mat-sort-header style=\"font-weight: bold;\"> Edad </th>\r\n            <td mat-cell *matCellDef=\"let row\" class=\"mat-cell-id\"> {{row.age}} </td>\r\n          </ng-container>\r\n\r\n          <ng-container  matColumnDef=\"phone\">\r\n            <th mat-header-cell *matHeaderCellDef mat-sort-header style=\"font-weight: bold;\"> Teléfono </th>\r\n            <td mat-cell *matCellDef=\"let row\" class=\"mat-cell-id\"> {{row.phone}} </td>\r\n          </ng-container>\r\n\r\n          <ng-container  matColumnDef=\"treatment\">\r\n            <th mat-header-cell *matHeaderCellDef mat-sort-header style=\"font-weight: bold;\"> Tratamiento </th>\r\n            <td mat-cell *matCellDef=\"let row\" class=\"mat-cell-id\"> {{row.treatment}} </td>\r\n          </ng-container>\r\n\r\n          <ng-container  matColumnDef=\"treatmentType\">\r\n            <th mat-header-cell *matHeaderCellDef mat-sort-header style=\"font-weight: bold;\"> Tipo de Tratamiento </th>\r\n            <td mat-cell *matCellDef=\"let row\" class=\"mat-cell-id\"> {{row.treatmentType}} </td>\r\n          </ng-container>\r\n\r\n          <ng-container  matColumnDef=\"shotsBefore\">\r\n            <th mat-header-cell *matHeaderCellDef mat-sort-header style=\"font-weight: bold;\"> Disparos de la pistola antes</th>\r\n            <td mat-cell *matCellDef=\"let row\" class=\"mat-cell-id\"> {{row.shotsBefore}} </td>\r\n          </ng-container>\r\n\r\n          <ng-container  matColumnDef=\"shotsAfter\">\r\n            <th mat-header-cell *matHeaderCellDef mat-sort-header style=\"font-weight: bold;\"> Disparos de la pistola despues</th>\r\n            <td mat-cell *matCellDef=\"let row\" class=\"mat-cell-id\"> {{row.shotsAfter}} </td>\r\n          </ng-container>\r\n\r\n          <ng-container  matColumnDef=\"shotsDifferential\">\r\n            <th mat-header-cell *matHeaderCellDef mat-sort-header style=\"font-weight: bold;\"> Diferencia </th>\r\n            <td mat-cell *matCellDef=\"let row\" class=\"mat-cell-id\"> {{row.shotsDifferential}} </td>\r\n          </ng-container>\r\n\r\n          <ng-container  matColumnDef=\"assistent\">\r\n            <th mat-header-cell *matHeaderCellDef mat-sort-header style=\"font-weight: bold;\"> Asistencia </th>\r\n            <td mat-cell *matCellDef=\"let row\" class=\"mat-cell-id\"> {{row.assistents}} </td>\r\n          </ng-container>\r\n\r\n          <ng-container  matColumnDef=\"product\">\r\n            <th mat-header-cell *matHeaderCellDef mat-sort-header style=\"font-weight: bold;\"> Producto </th>\r\n            <td mat-cell *matCellDef=\"let row\" class=\"mat-cell-id\"> {{row.product}} </td>\r\n          </ng-container>\r\n\r\n          <ng-container  matColumnDef=\"userAttemption\">\r\n            <th mat-header-cell *matHeaderCellDef mat-sort-header style=\"font-weight: bold;\"> Personal de Atención </th>\r\n            <td mat-cell *matCellDef=\"let row\" class=\"mat-cell-id\"> {{row.userAttemption}} </td>\r\n          </ng-container>\r\n\r\n          <ng-container  matColumnDef=\"countSession\">\r\n            <th mat-header-cell *matHeaderCellDef mat-sort-header style=\"font-weight: bold;\"> Cantidad de Sesiones </th>\r\n            <td mat-cell *matCellDef=\"let row\" class=\"mat-cell-id\"> {{row.sessions}} </td>\r\n          </ng-container>\r\n\r\n          <ng-container  matColumnDef=\"payForm\">\r\n            <th mat-header-cell *matHeaderCellDef mat-sort-header style=\"font-weight: bold;\"> Forma de Pago </th>\r\n            <td mat-cell *matCellDef=\"let row\" class=\"mat-cell-id\"> {{row.formpay}} </td>\r\n          </ng-container>\r\n\r\n          <ng-container  matColumnDef=\"subscriber\">\r\n            <th mat-header-cell *matHeaderCellDef mat-sort-header style=\"font-weight: bold;\"> Abonado </th>\r\n            <td mat-cell *matCellDef=\"let row\" class=\"mat-cell-id\"> {{row.abonado}}$ </td>\r\n          </ng-container>\r\n\r\n          <ng-container  matColumnDef=\"comission\">\r\n            <th mat-header-cell *matHeaderCellDef mat-sort-header style=\"font-weight: bold;\"> Comisión </th>\r\n            <td mat-cell *matCellDef=\"let row\" class=\"mat-cell-id\"> {{row.comission}}% </td>\r\n          </ng-container>\r\n\r\n          <ng-container  matColumnDef=\"price\">\r\n            <th mat-header-cell *matHeaderCellDef mat-sort-header style=\"font-weight: bold;\"> Precio Total </th>\r\n            <td mat-cell *matCellDef=\"let row\" class=\"mat-cell-id\"> {{row.price}}$ </td>\r\n          </ng-container>\r\n\r\n          <ng-container matColumnDef=\"actions\">\r\n            <th mat-header-cell *matHeaderCellDef mat-sort-header style=\"font-weight: bold;\"> Acciones </th>\r\n            <td mat-cell *matCellDef=\"let row\" class=\"mat-cell-id\">  <div fxFlex=\"row\">\r\n              <div fxLayout=\"column\" mat-stroked-button class=\"pointer\"\r\n                   (click)=\"goEdit(row.id);\">\r\n                <i style=\"font-size: 25px\" class=\"nc-icon nc-tap-01\" title=\"Editar\"></i>\r\n              </div>\r\n            </div>\r\n            </td>\r\n\r\n          </ng-container>\r\n\r\n          <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n          <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n        </table>\r\n      </div>\r\n      <mat-paginator [pageSizeOptions]=\"[5, 10, 25, 100]\" ></mat-paginator>\r\n    </div>\r\n  </mat-card>\r\n</div>\r\n";
      /***/
    },

    /***/
    "xxtN": function xxtN(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "IconsComponent", function () {
        return IconsComponent;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _raw_loader_icons_component_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! raw-loader!./icons.component.html */
      "SByu");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");

      var IconsComponent = function IconsComponent() {
        _classCallCheck(this, IconsComponent);
      };

      IconsComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Component"])({
        selector: 'icons-cmp',
        template: _raw_loader_icons_component_html__WEBPACK_IMPORTED_MODULE_1__["default"]
      })], IconsComponent);
      /***/
    },

    /***/
    "yPMs": function yPMs(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Albanian [sq]
      //! author : Flakërim Ismani : https://github.com/flakerimi
      //! author : Menelion Elensúle : https://github.com/Oire
      //! author : Oerd Cukalla : https://github.com/oerd
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var sq = moment.defineLocale('sq', {
          months: 'Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor'.split('_'),
          monthsShort: 'Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj'.split('_'),
          weekdays: 'E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë'.split('_'),
          weekdaysShort: 'Die_Hën_Mar_Mër_Enj_Pre_Sht'.split('_'),
          weekdaysMin: 'D_H_Ma_Më_E_P_Sh'.split('_'),
          weekdaysParseExact: true,
          meridiemParse: /PD|MD/,
          isPM: function isPM(input) {
            return input.charAt(0) === 'M';
          },
          meridiem: function meridiem(hours, minutes, isLower) {
            return hours < 12 ? 'PD' : 'MD';
          },
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
          },
          calendar: {
            sameDay: '[Sot në] LT',
            nextDay: '[Nesër në] LT',
            nextWeek: 'dddd [në] LT',
            lastDay: '[Dje në] LT',
            lastWeek: 'dddd [e kaluar në] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: 'në %s',
            past: '%s më parë',
            s: 'disa sekonda',
            ss: '%d sekonda',
            m: 'një minutë',
            mm: '%d minuta',
            h: 'një orë',
            hh: '%d orë',
            d: 'një ditë',
            dd: '%d ditë',
            M: 'një muaj',
            MM: '%d muaj',
            y: 'një vit',
            yy: '%d vite'
          },
          dayOfMonthOrdinalParse: /\d{1,2}\./,
          ordinal: '%d.',
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.

          }
        });
        return sq;
      });
      /***/

    },

    /***/
    "yTW8": function yTW8(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MapsComponent", function () {
        return MapsComponent;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _raw_loader_maps_component_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! raw-loader!./maps.component.html */
      "8G6i");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");

      var MapsComponent = /*#__PURE__*/function () {
        function MapsComponent() {
          _classCallCheck(this, MapsComponent);
        }

        _createClass(MapsComponent, [{
          key: "ngOnInit",
          value: function ngOnInit() {
            var myLatlng = new google.maps.LatLng(40.748817, -73.985428);
            var mapOptions = {
              zoom: 13,
              center: myLatlng,
              scrollwheel: false,
              styles: [{
                "featureType": "water",
                "stylers": [{
                  "saturation": 43
                }, {
                  "lightness": -11
                }, {
                  "hue": "#0088ff"
                }]
              }, {
                "featureType": "road",
                "elementType": "geometry.fill",
                "stylers": [{
                  "hue": "#ff0000"
                }, {
                  "saturation": -100
                }, {
                  "lightness": 99
                }]
              }, {
                "featureType": "road",
                "elementType": "geometry.stroke",
                "stylers": [{
                  "color": "#808080"
                }, {
                  "lightness": 54
                }]
              }, {
                "featureType": "landscape.man_made",
                "elementType": "geometry.fill",
                "stylers": [{
                  "color": "#ece2d9"
                }]
              }, {
                "featureType": "poi.park",
                "elementType": "geometry.fill",
                "stylers": [{
                  "color": "#ccdca1"
                }]
              }, {
                "featureType": "road",
                "elementType": "labels.text.fill",
                "stylers": [{
                  "color": "#767676"
                }]
              }, {
                "featureType": "road",
                "elementType": "labels.text.stroke",
                "stylers": [{
                  "color": "#ffffff"
                }]
              }, {
                "featureType": "poi",
                "stylers": [{
                  "visibility": "off"
                }]
              }, {
                "featureType": "landscape.natural",
                "elementType": "geometry.fill",
                "stylers": [{
                  "visibility": "on"
                }, {
                  "color": "#b8cb93"
                }]
              }, {
                "featureType": "poi.park",
                "stylers": [{
                  "visibility": "on"
                }]
              }, {
                "featureType": "poi.sports_complex",
                "stylers": [{
                  "visibility": "on"
                }]
              }, {
                "featureType": "poi.medical",
                "stylers": [{
                  "visibility": "on"
                }]
              }, {
                "featureType": "poi.business",
                "stylers": [{
                  "visibility": "simplified"
                }]
              }]
            };
            var map = new google.maps.Map(document.getElementById("map"), mapOptions);
            var marker = new google.maps.Marker({
              position: myLatlng,
              title: "Hello World!"
            }); // To add the marker to the map, call setMap();

            marker.setMap(map);
          }
        }]);

        return MapsComponent;
      }();

      MapsComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Component"])({
        selector: 'maps-cmp',
        template: _raw_loader_maps_component_html__WEBPACK_IMPORTED_MODULE_1__["default"]
      })], MapsComponent);
      /***/
    },

    /***/
    "z1FC": function z1FC(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Talossan [tzl]
      //! author : Robin van der Vliet : https://github.com/robin0van0der0v
      //! author : Iustì Canun
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration
        // After the year there should be a slash and the amount of years since December 26, 1979 in Roman numerals.
        // This is currently too difficult (maybe even impossible) to add.

        var tzl = moment.defineLocale('tzl', {
          months: 'Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar'.split('_'),
          monthsShort: 'Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec'.split('_'),
          weekdays: 'Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi'.split('_'),
          weekdaysShort: 'Súl_Lún_Mai_Már_Xhú_Vié_Sát'.split('_'),
          weekdaysMin: 'Sú_Lú_Ma_Má_Xh_Vi_Sá'.split('_'),
          longDateFormat: {
            LT: 'HH.mm',
            LTS: 'HH.mm.ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM [dallas] YYYY',
            LLL: 'D. MMMM [dallas] YYYY HH.mm',
            LLLL: 'dddd, [li] D. MMMM [dallas] YYYY HH.mm'
          },
          meridiemParse: /d\'o|d\'a/i,
          isPM: function isPM(input) {
            return "d'o" === input.toLowerCase();
          },
          meridiem: function meridiem(hours, minutes, isLower) {
            if (hours > 11) {
              return isLower ? "d'o" : "D'O";
            } else {
              return isLower ? "d'a" : "D'A";
            }
          },
          calendar: {
            sameDay: '[oxhi à] LT',
            nextDay: '[demà à] LT',
            nextWeek: 'dddd [à] LT',
            lastDay: '[ieiri à] LT',
            lastWeek: '[sür el] dddd [lasteu à] LT',
            sameElse: 'L'
          },
          relativeTime: {
            future: 'osprei %s',
            past: 'ja%s',
            s: processRelativeTime,
            ss: processRelativeTime,
            m: processRelativeTime,
            mm: processRelativeTime,
            h: processRelativeTime,
            hh: processRelativeTime,
            d: processRelativeTime,
            dd: processRelativeTime,
            M: processRelativeTime,
            MM: processRelativeTime,
            y: processRelativeTime,
            yy: processRelativeTime
          },
          dayOfMonthOrdinalParse: /\d{1,2}\./,
          ordinal: '%d.',
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.

          }
        });

        function processRelativeTime(number, withoutSuffix, key, isFuture) {
          var format = {
            s: ['viensas secunds', "'iensas secunds"],
            ss: [number + ' secunds', '' + number + ' secunds'],
            m: ["'n míut", "'iens míut"],
            mm: [number + ' míuts', '' + number + ' míuts'],
            h: ["'n þora", "'iensa þora"],
            hh: [number + ' þoras', '' + number + ' þoras'],
            d: ["'n ziua", "'iensa ziua"],
            dd: [number + ' ziuas', '' + number + ' ziuas'],
            M: ["'n mes", "'iens mes"],
            MM: [number + ' mesen', '' + number + ' mesen'],
            y: ["'n ar", "'iens ar"],
            yy: [number + ' ars', '' + number + ' ars']
          };
          return isFuture ? format[key][0] : withoutSuffix ? format[key][0] : format[key][1];
        }

        return tzl;
      });
      /***/

    },

    /***/
    "z3Vd": function z3Vd(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Klingon [tlh]
      //! author : Dominika Kruk : https://github.com/amaranthrose
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var numbersNouns = 'pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut'.split('_');

        function translateFuture(output) {
          var time = output;
          time = output.indexOf('jaj') !== -1 ? time.slice(0, -3) + 'leS' : output.indexOf('jar') !== -1 ? time.slice(0, -3) + 'waQ' : output.indexOf('DIS') !== -1 ? time.slice(0, -3) + 'nem' : time + ' pIq';
          return time;
        }

        function translatePast(output) {
          var time = output;
          time = output.indexOf('jaj') !== -1 ? time.slice(0, -3) + 'Hu’' : output.indexOf('jar') !== -1 ? time.slice(0, -3) + 'wen' : output.indexOf('DIS') !== -1 ? time.slice(0, -3) + 'ben' : time + ' ret';
          return time;
        }

        function translate(number, withoutSuffix, string, isFuture) {
          var numberNoun = numberAsNoun(number);

          switch (string) {
            case 'ss':
              return numberNoun + ' lup';

            case 'mm':
              return numberNoun + ' tup';

            case 'hh':
              return numberNoun + ' rep';

            case 'dd':
              return numberNoun + ' jaj';

            case 'MM':
              return numberNoun + ' jar';

            case 'yy':
              return numberNoun + ' DIS';
          }
        }

        function numberAsNoun(number) {
          var hundred = Math.floor(number % 1000 / 100),
              ten = Math.floor(number % 100 / 10),
              one = number % 10,
              word = '';

          if (hundred > 0) {
            word += numbersNouns[hundred] + 'vatlh';
          }

          if (ten > 0) {
            word += (word !== '' ? ' ' : '') + numbersNouns[ten] + 'maH';
          }

          if (one > 0) {
            word += (word !== '' ? ' ' : '') + numbersNouns[one];
          }

          return word === '' ? 'pagh' : word;
        }

        var tlh = moment.defineLocale('tlh', {
          months: 'tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’'.split('_'),
          monthsShort: 'jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’'.split('_'),
          monthsParseExact: true,
          weekdays: 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
          weekdaysShort: 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
          weekdaysMin: 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
          longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
          },
          calendar: {
            sameDay: '[DaHjaj] LT',
            nextDay: '[wa’leS] LT',
            nextWeek: 'LLL',
            lastDay: '[wa’Hu’] LT',
            lastWeek: 'LLL',
            sameElse: 'L'
          },
          relativeTime: {
            future: translateFuture,
            past: translatePast,
            s: 'puS lup',
            ss: translate,
            m: 'wa’ tup',
            mm: translate,
            h: 'wa’ rep',
            hh: translate,
            d: 'wa’ jaj',
            dd: translate,
            M: 'wa’ jar',
            MM: translate,
            y: 'wa’ DIS',
            yy: translate
          },
          dayOfMonthOrdinalParse: /\d{1,2}\./,
          ordinal: '%d.',
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.

          }
        });
        return tlh;
      });
      /***/

    },

    /***/
    "zx6S": function zx6S(module, exports, __webpack_require__) {
      //! moment.js locale configuration
      //! locale : Serbian [sr]
      //! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j
      //! author : Stefan Crnjaković <stefan@hotmail.rs> : https://github.com/crnjakovic
      ;

      (function (global, factory) {
        true ? factory(__webpack_require__(
        /*! ../moment */
        "wd/R")) : undefined;
      })(this, function (moment) {
        'use strict'; //! moment.js locale configuration

        var translator = {
          words: {
            //Different grammatical cases
            ss: ['sekunda', 'sekunde', 'sekundi'],
            m: ['jedan minut', 'jedne minute'],
            mm: ['minut', 'minute', 'minuta'],
            h: ['jedan sat', 'jednog sata'],
            hh: ['sat', 'sata', 'sati'],
            dd: ['dan', 'dana', 'dana'],
            MM: ['mesec', 'meseca', 'meseci'],
            yy: ['godina', 'godine', 'godina']
          },
          correctGrammaticalCase: function correctGrammaticalCase(number, wordKey) {
            return number === 1 ? wordKey[0] : number >= 2 && number <= 4 ? wordKey[1] : wordKey[2];
          },
          translate: function translate(number, withoutSuffix, key) {
            var wordKey = translator.words[key];

            if (key.length === 1) {
              return withoutSuffix ? wordKey[0] : wordKey[1];
            } else {
              return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
            }
          }
        };
        var sr = moment.defineLocale('sr', {
          months: 'januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar'.split('_'),
          monthsShort: 'jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.'.split('_'),
          monthsParseExact: true,
          weekdays: 'nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota'.split('_'),
          weekdaysShort: 'ned._pon._uto._sre._čet._pet._sub.'.split('_'),
          weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
          weekdaysParseExact: true,
          longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'D. M. YYYY.',
            LL: 'D. MMMM YYYY.',
            LLL: 'D. MMMM YYYY. H:mm',
            LLLL: 'dddd, D. MMMM YYYY. H:mm'
          },
          calendar: {
            sameDay: '[danas u] LT',
            nextDay: '[sutra u] LT',
            nextWeek: function nextWeek() {
              switch (this.day()) {
                case 0:
                  return '[u] [nedelju] [u] LT';

                case 3:
                  return '[u] [sredu] [u] LT';

                case 6:
                  return '[u] [subotu] [u] LT';

                case 1:
                case 2:
                case 4:
                case 5:
                  return '[u] dddd [u] LT';
              }
            },
            lastDay: '[juče u] LT',
            lastWeek: function lastWeek() {
              var lastWeekDays = ['[prošle] [nedelje] [u] LT', '[prošlog] [ponedeljka] [u] LT', '[prošlog] [utorka] [u] LT', '[prošle] [srede] [u] LT', '[prošlog] [četvrtka] [u] LT', '[prošlog] [petka] [u] LT', '[prošle] [subote] [u] LT'];
              return lastWeekDays[this.day()];
            },
            sameElse: 'L'
          },
          relativeTime: {
            future: 'za %s',
            past: 'pre %s',
            s: 'nekoliko sekundi',
            ss: translator.translate,
            m: translator.translate,
            mm: translator.translate,
            h: translator.translate,
            hh: translator.translate,
            d: 'dan',
            dd: translator.translate,
            M: 'mesec',
            MM: translator.translate,
            y: 'godinu',
            yy: translator.translate
          },
          dayOfMonthOrdinalParse: /\d{1,2}\./,
          ordinal: '%d.',
          week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 7th is the first week of the year.

          }
        });
        return sr;
      });
      /***/

    }
  }]);
})();
//# sourceMappingURL=layouts-admin-layout-admin-layout-module-es5.js.map